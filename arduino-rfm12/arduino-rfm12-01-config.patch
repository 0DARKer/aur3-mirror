From 898079b684d892b3b1df790f204c363635fa8361 Mon Sep 17 00:00:00 2001
From: Peter Hatina <phatina@gmail.com>
Date: Tue, 5 Jul 2011 14:59:14 +0200
Subject: [PATCH] store config into eeprom

---
 RF12.cpp |   76 +++++++++++++++++++++++++++++++++++++++++++++----------------
 RF12.h   |   16 ++++++++++--
 2 files changed, 69 insertions(+), 23 deletions(-)

diff --git a/RF12.cpp b/RF12.cpp
index 87658c6..bcaa1ae 100644
--- a/RF12.cpp
+++ b/RF12.cpp
@@ -1,12 +1,13 @@
 // RFM12B driver implementation
 // 2009-02-09 <jcw@equi4.com> http://opensource.org/licenses/mit-license.php
 // $Id: RF12.cpp 7733 2011-06-22 01:37:05Z jcw $
+// Copyright (C) 2011 Peter Hatina <phatina@gmail.com>
 
 #include "RF12.h"
 #include <avr/io.h>
-#include <util/crc16.h>
 #include <avr/eeprom.h>
 #include <avr/sleep.h>
+#include <util/crc16.h>
 #include <WProgram.h>
 
 // maximum transmit / receive buffer: 3 header + data + 2 crc bytes
@@ -352,30 +353,19 @@ void rf12_onOff (uint8_t value) {
     rf12_xfer(value ? RF_XMITTER_ON : RF_IDLE_MODE);
 }
 
-uint8_t rf12_config (uint8_t show) {
-    uint16_t crc = ~0;
+uint8_t rf12_config () {
+    uint8_t crc = ~0;
     for (uint8_t i = 0; i < RF12_EEPROM_SIZE; ++i)
-        crc = _crc16_update(crc, eeprom_read_byte(RF12_EEPROM_ADDR + i));
+        crc = rf12_crc8_update(crc, eeprom_read_byte(RF12_EEPROM_ADDR + i));
     if (crc != 0)
         return 0;
         
-    uint8_t nodeId = 0, group = 0;
-    for (uint8_t i = 0; i < RF12_EEPROM_SIZE - 2; ++i) {
-        uint8_t b = eeprom_read_byte(RF12_EEPROM_ADDR + i);
-        if (i == 0)
-            nodeId = b;
-        else if (i == 1)
-            group = b;
-        else if (b == 0)
-            break;
-        else if (show)
-            Serial.print(b);
-    }
-    if (show)
-        Serial.println();
+    uint8_t node  = eeprom_read_byte(RF12_EEPROM_ADDR);
+    uint8_t group = eeprom_read_byte(RF12_EEPROM_ADDR + 1);
+    uint8_t band  = eeprom_read_byte(RF12_EEPROM_ADDR + 2);
     
-    rf12_initialize(nodeId, nodeId >> 6, group);
-    return nodeId & RF12_HDR_MASK;
+    rf12_initialize(node, band, group);
+    return 1;
 }
 
 void rf12_sleep (char n) {
@@ -508,3 +498,49 @@ void rf12_encrypt (const uint8_t* key) {
     } else
         crypter = 0;
 }
+
+uint8_t rf12_crc8_update(uint8_t crc, uint8_t data)
+{ 
+    uint8_t i; 
+     
+    crc ^= data; 
+    for(i = 0; i < 8; i++) { 
+        if(crc & 0x80) 
+            crc = (crc << 1) ^ 0xE5; 
+        else 
+            crc <<= 1; 
+    } 
+    
+    return crc; 
+}
+
+void rf12_store_config(uint8_t node, uint8_t group, uint8_t band)
+{
+    uint8_t crc = ~0;
+    eeprom_write_byte(RF12_EEPROM_ADDR, node);
+    eeprom_write_byte(RF12_EEPROM_ADDR + 1, group);
+    eeprom_write_byte(RF12_EEPROM_ADDR + 2, band);
+
+    crc = rf12_crc8_update(crc, node);
+    crc = rf12_crc8_update(crc, group);
+    crc = rf12_crc8_update(crc, band);
+
+    for (int i = 0; i < 16; ++i)
+        crc = rf12_crc8_update(crc, eeprom_read_byte(RF12_EEPROM_EKEY + i));
+
+    eeprom_write_byte(RF12_EEPROM_ADDR + 19, crc);
+}
+
+void rf12_store_key(const uint32_t key[4])
+{
+    uint8_t crc = ~0;
+    for (uint8_t i = 0; i < 3; ++i)
+        crc = rf12_crc8_update(crc, eeprom_read_byte(RF12_EEPROM_ADDR + i));
+    
+    for (int i = 0; i < 16; ++i) {
+        eeprom_write_byte(RF12_EEPROM_EKEY + i, ((uint8_t*) key)[i]);
+        crc = rf12_crc8_update(crc, ((uint8_t*) key)[i]);
+    }
+    
+    eeprom_write_byte(RF12_EEPROM_ADDR + 19, crc);
+}
diff --git a/RF12.h b/RF12.h
index 653d397..52bc3dc 100644
--- a/RF12.h
+++ b/RF12.h
@@ -1,6 +1,7 @@
 // RFM12B driver definitions
 // 2009-02-09 <jcw@equi4.com> http://opensource.org/licenses/mit-license.php
 // $Id: RF12.h 7501 2011-04-07 10:33:43Z jcw $
+// Copyright (C) 2011 Peter Hatina <phatina@gmail.com>
 
 #ifndef RF12_h
 #define RF12_h
@@ -29,8 +30,8 @@
 
 // EEPROM address range used by the rf12_config() code
 #define RF12_EEPROM_ADDR ((uint8_t*) 0x20)
-#define RF12_EEPROM_SIZE 32
-#define RF12_EEPROM_EKEY (RF12_EEPROM_ADDR + RF12_EEPROM_SIZE)
+#define RF12_EEPROM_SIZE 20
+#define RF12_EEPROM_EKEY (RF12_EEPROM_ADDR + 3)
 #define RF12_EEPROM_ELEN 16
 
 // shorthand to simplify sending out the proper ACK when requested
@@ -52,7 +53,7 @@ void rf12_initialize(uint8_t id, uint8_t band, uint8_t group=0xD4);
 // initialize the RF12 module from settings stored in EEPROM by "RF12demo"
 // don't call rf12_initialize() if you init the hardware with rf12_config()
 // returns the node ID as 1..31 value (1..26 correspond to nodes 'A'..'Z')
-uint8_t rf12_config(uint8_t show =1);
+uint8_t rf12_config();
 
 // call this frequently, returns true if a packet has been received
 uint8_t rf12_recvDone(void);
@@ -96,4 +97,13 @@ void rf12_encrypt(const uint8_t*);
 // low-level control of the RFM12B via direct register access
 uint16_t rf12_control(uint16_t cmd);
 
+// 8bit checksum
+uint8_t rf12_crc8_update(uint8_t crc, uint8_t data);
+
+// store config into eeprom
+void rf12_store_config(uint8_t node, uint8_t group, uint8_t band);
+
+// store crypt key into eeprom
+void rf12_store_key(const uint32_t key[4]);
+
 #endif
-- 
1.7.6

