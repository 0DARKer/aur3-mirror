#!/bin/bash

kernver=${KERNVER:-$(uname -r)}
arch=${ARCH:-$(uname -m)}
arch=${arch/i686/i386}
catver=whatever



check_ext(){
  # here we are checking kernel's extramodules dir
    for r in /lib/modules/*; do
      s=${r##*/lib/modules/}
      if [[ ${s:0:3} = "ext" ]]; then
	if [[ `cat ${r}/version | grep -c ${kernver}` != 0 ]]; then
	 pakaver="${s#*-}"
	 destidir="${s}"
	 depextrmod="${s}"
	fi
	elif [[ ${s} = ${kernver} ]] && [[ ! -e ${r}/extramodules ]]; then
	 pakaver="${kernver}"
	 destidir="${kernver}/video"
	 depextrmod="null"
      fi
    done
}

install_module(){
    check_ext
    echo ""
    echo -e '\E[37;44m'"\033[1mBuilding catalyst-${pakaver} package for ${kernver} kernel ...\033[0m"
    echo "--------"
    if [ ! -d "/lib/modules/${kernver}/build" ]; then
      echo -e '\E[37;44m'"\033[1mKernel header files are absent: directory /lib/modules/${kernver}/build doesn't exist! Game over\033[0m"
      echo "--------"
      return 1
    fi
    workdir=$(mktemp -du /tmp/catalyst.XXXXXX)
#    set -x
    cp "/usr/share/ati/build_mod" "${workdir}" -R
    cd "$workdir"
    sed -i -e "s/_kernver=.*/_kernver=${kernver}/" PKGBUILD
    sed -i -e "s/_pakaver=.*/_pakaver=${pakaver}/" PKGBUILD
    sed -i -e "s|_destidir=.*|_destidir=${destidir}|" PKGBUILD
    sed -i -e "s/_depextrmod=.*/_depextrmod=${depextrmod}/" PKGBUILD

    if [[ ${arch} = "i386" ]] && [[ ${kernver:0:3} = "3.4" || ${kernver:0:3} > "3.4" ]]; then
      if [ "${LOGNAME}" = "root" ]; then
    echo -e '\E[37;44m'"\033[1mi686 system with linux kernel >= 3.4 detected!\033[0m"
      patch -Np6 -i firegl.3.4.i686.patch || return 1
      cp fpu.3.4.i686.patch /lib/modules/${kernver}/build/arch/x86/include/asm/
      cd "/lib/modules/${kernver}/build/arch/x86/include/asm"
      echo "Will patch /lib/modules/${kernver}/build/arch/x86/include/asm/fpu-internal.h"
      cp fpu-internal.h fpu-internal.h.back
      patch -Np0 -i fpu.3.4.i686.patch || return 1
      cd "$workdir"
      else 
	echo "This script MUST BE RAN AS ROOT to patch source file of 3.4 kernel on i686"
	return 1
      fi
    fi

    if [ "${LOGNAME}" = "root" ]; then
      if [ "${user}" = "root" ]; then
       /usr/bin/makepkg -c --asroot || return 1
     	 else	
    	   chown ${user}:video ${workdir}
    	   chown ${user}:video ${workdir}/* >> /dev/null 2>&1
    	   su - ${user} -c "cd ${workdir} && /usr/bin/makepkg -c" || return 1
      fi
      else
	 /usr/bin/makepkg -c || return 1
    fi

    if [[ ${arch} = "i386" ]] && [[ ${kernver:0:3} = "3.4" || ${kernver:0:3} > "3.4" ]]; then
      cd "/lib/modules/${kernver}/build/arch/x86/include/asm"
      echo "restoring original fpu-internal.h kernel source file"
      mv -f fpu-internal.h.back fpu-internal.h
      rm fpu.3.4.i686.patch
      cd "$workdir"
    fi

    echo -e '\E[37;44m'"\033[1mOk. catalyst-${pakaver} package built succesfully. Installing ...\033[0m"
    if [ -e /usr/bin/sudo ]; then
        echo -e '\E[37;44m'"\033[1mIf it's asking for password - type YOUR password\033[0m"
        sudo /usr/bin/pacman -Ud ${workdir}/catalyst-${pakaver}-${catver}-$(uname -m).pkg.tar || return 1
    else
        echo -e '\E[37;44m'"\033[1mIf it's asking for password - type root password\033[0m"
        su - root -c "/usr/bin/pacman -Ud ${workdir}/catalyst-${pakaver}-${catver}-$(uname -m).pkg.tar" || return 1
    fi
    rm -rf "${workdir}"
#    set +x
    echo -e '\E[37;44m'"\033[1mDone.\033[0m"
}

build_all_modules(){
    if [ "${LOGNAME}" = "root" ]; then
      echo "Please specify your (unprivileged) user name:"
      echo "(use root on i686 with linux kernel >= 3.4)"
      read user
    fi
    for p in /lib/modules/*; do
     if [ ${p:13:3} != "ext" ] && [ -d $p/build ] && [ -d $p/kernel ]; then
      /usr/bin/catalyst_build_module ${p##*/lib/modules/} ${user}
     fi
    done
}

remove_module(){
    echo "Removing unused catalyst-{kernver} packages ..."
    for p in /lib/modules/*; do
      if [[ ${p:13:3} != "ext" ]] && [[ ! -d $p/kernel ]] && [[ -e $p/video/fglrx.ko.gz ]]; then
	      /usr/bin/pacman -Rd --noconfirm catalyst-${p##*/lib/modules/}
      elif [[ ${p:13:3} = "ext" ]] && [[ ! -e $p/version ]] && [[ -e $p/fglrx.ko.gz ]]; then
	      /usr/bin/pacman -Rd --noconfirm catalyst-${p##*/lib/modules/extramodules-}
      fi
    done
}

remove_all_modules(){
    for p in /lib/modules/*; do
      if [[ ${p:13:3} != "ext" ]] && [[ -e $p/video/fglrx.ko.gz ]]; then
	      /usr/bin/pacman -Rd --noconfirm catalyst-${p##*/lib/modules/}
      elif [[ ${p:13:3} = "ext" ]] && [[ -e $p/fglrx.ko.gz ]]; then
	      /usr/bin/pacman -Rd --noconfirm catalyst-${p##*/lib/modules/extramodules-}
      fi
    done
}


case "$1" in
    help|--help)
        echo "usage: $0 {version|all|remove|remove_all|}"
        echo "- with no specified kernel version it will use the current kernel version to build module"
	echo "- all will try to build fglrx modules for all working system's kernels"
        echo "- remove is removing unused catalyst-{kernver} packages"
        echo "- remove_all is removing all catalyst-{kernver} packages"
        ;;
    all)
	build_all_modules
	;;
    remove)
        remove_module
        ;;
    remove_all)
        remove_all_modules
        ;;
    *)
        test "$1" != "" && kernver="$1"
	if [ "$2" != "" ]; then user="$2"
          elif [ "${LOGNAME}" = "root" ]; then
	      echo "Please specify your (unprivileged) user name:"
	      echo "(use root on i686 with linux kernel >= 3.4)"
	      read user
	fi
        install_module
        ;;
esac

