diff --git a/include/winternl.h b/include/winternl.h
index 79f3184..71877c8 100644
--- a/include/winternl.h
+++ b/include/winternl.h
@@ -1416,7 +1416,7 @@ typedef struct _RTL_HANDLE_TABLE
 #define FILE_OPEN_OFFLINE_FILE          0x00400000
 #define FILE_OPEN_FOR_FREE_SPACE_QUERY  0x00800000
 
-#define FILE_ATTRIBUTE_VALID_FLAGS      0x00007fb7
+#define FILE_ATTRIBUTE_VALID_FLAGS      0x00007fb7|FILE_FLAG_NO_BUFFERING|FILE_FLAG_WRITE_THROUGH
 #define FILE_ATTRIBUTE_VALID_SET_FLAGS  0x000031a7
 
 /* status for NtCreateFile or NtOpenFile */
diff --git wine-1.5.31/server/fd.c wine-1.5.31/server/fd.c
index c7f20d5..b3c341f 100644
--- wine-1.5.31/server/fd.c.orig	2013-05-26 12:09:45.736371057 -0400
+++ wine-1.5.31/server/fd.c	2013-05-26 12:22:25.241410239 -0400
@@ -1733,6 +1733,12 @@
     const char *unlink_name = "";
     int root_fd = -1;
     int rw_mode;
+    int do_truncate = 0;
+    int open_flags;
+
+    if (flags & O_TRUNC)
+        do_truncate = 1;
+    flags &= ~O_TRUNC;
 
     if (((options & FILE_DELETE_ON_CLOSE) && !(access & DELETE)) ||
         ((options & FILE_DIRECTORY_FILE) && (flags & O_TRUNC)))
@@ -1773,7 +1779,8 @@
                 goto error;
             }
         }
-        flags &= ~(O_CREAT | O_EXCL | O_TRUNC);
+        flags &= ~(O_CREAT | O_EXCL);
+        do_truncate = 0;
     }
 
     if ((access & FILE_UNIX_WRITE_ACCESS) && !(options & FILE_DIRECTORY_FILE))
@@ -1785,13 +1792,20 @@
 
     fd->unix_name = dup_fd_name( root, name );
 
-    if ((fd->unix_fd = open( name, rw_mode | (flags & ~O_TRUNC), *mode )) == -1)
+    /*
+     * Some filesystems and devices do not support O_DIRECT/SYNC,
+     * and this can cause an open() to fail.  For now, we want to
+     * be able to fall back, so we'll attempt to _add_ these in
+     * a second.  But, for now, leave them out.
+     */
+    open_flags = flags & ~(O_DIRECT|O_SYNC);
+    if ((fd->unix_fd = open( name, rw_mode | open_flags, *mode )) == -1)
     {
         /* if we tried to open a directory for write access, retry read-only */
         if (errno == EISDIR)
         {
             if ((access & FILE_UNIX_WRITE_ACCESS) || (flags & O_CREAT))
-                fd->unix_fd = open( name, O_RDONLY | (flags & ~(O_TRUNC | O_CREAT | O_EXCL)), *mode );
+                fd->unix_fd = open( name, O_RDONLY | (open_flags), *mode );
         }
 
         if (fd->unix_fd == -1)
@@ -1800,6 +1814,13 @@
             goto error;
         }
     }
+    if (open_flags != flags) {
+        int err;
+        err = fcntl(fd->unix_fd, F_SETFL, flags);
+        if (err)
+            printf("warning: unable to set flags: 0x%08x on file '%s': %d\n",
+                   flags, name, errno);
+    }
 
     closed_fd->unix_fd = fd->unix_fd;
     closed_fd->unlink[0] = 0;
@@ -1844,16 +1865,7 @@
             return NULL;
         }
         strcpy( closed_fd->unlink, unlink_name );
-        if (flags & O_TRUNC)
-        {
-            if (S_ISDIR(st.st_mode))
-            {
-                release_object( fd );
-                set_error( STATUS_OBJECT_NAME_COLLISION );
-                return NULL;
-            }
-            ftruncate( fd->unix_fd, 0 );
-        }
+        if (do_truncate) ftruncate( fd->unix_fd, 0 );
     }
     else  /* special file */
     {
diff --git a/server/file.c b/server/file.c
index 5224e85..376b95e 100644
--- a/server/file.c
+++ b/server/file.c
@@ -202,6 +202,11 @@ static struct object *create_file( const char *nameptr, data_size_t len, unsigne
 
     access = generic_file_map_access( access );
 
+    if (attrs & FILE_FLAG_NO_BUFFERING)
+	    flags |= O_DIRECT;
+    if (attrs & FILE_FLAG_WRITE_THROUGH)
+	    flags |= O_SYNC;
+
     /* FIXME: should set error to STATUS_OBJECT_NAME_COLLISION if file existed before */
     fd = open_fd( name, flags | O_NONBLOCK | O_LARGEFILE, &mode, access, sharing, options );
     if (!fd) goto done;

