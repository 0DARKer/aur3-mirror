From: Alexandre Bique <bique.alexandre@gmail.com>
Subject: winealsa.drv: midiSeq must be protected by a mutex
Message-Id: <CAP737oL7Nd2qP+9thZMWcFwakjisPGpY-OpBxdA9VDWvFXofJg@mail.gmail.com>
Date: Thu, 12 Dec 2013 18:56:05 +0100

-- 
Alexandre Bique

From f5e0138948f9538a583132a6a1b806382dbd2d4b Mon Sep 17 00:00:00 2001
From: Alexandre Bique <bique.alexandre@gmail.com>
Date: Thu, 12 Dec 2013 18:54:48 +0100
Subject: [PATCH 1/1] winealsa.drv: midiSeq must be protected by a mutex

---
 dlls/winealsa.drv/midi.c | 19 +++++++++++++++++--
 1 file changed, 17 insertions(+), 2 deletions(-)

diff --git a/dlls/winealsa.drv/midi.c b/dlls/winealsa.drv/midi.c
index 4e74440..0c6d996 100644
--- a/dlls/winealsa.drv/midi.c
+++ b/dlls/winealsa.drv/midi.c
@@ -95,6 +95,7 @@ static	int 		MODM_NumDevs = 0;
 /* this is the total number of MIDI out devices found */
 static	int 		MIDM_NumDevs = 0;
 
+static CRITICAL_SECTION midiSeqLock = { NULL, -1, 0, 0, 0, 0 };
 static	snd_seq_t*      midiSeq = NULL;
 static	int		numOpenMidiSeq = 0;
 static	int		numStartedMidiIn = 0;
@@ -283,14 +284,17 @@ static DWORD WINAPI midRecThread(LPVOID arg)
 {
     int npfd;
     struct pollfd *pfd;
+    int ret;
 
     TRACE("Thread startup\n");
 
     while(!end_thread) {
 	TRACE("Thread loop\n");
+        EnterCriticalSection(&midiSeqLock);
 	npfd = snd_seq_poll_descriptors_count(midiSeq, POLLIN);
 	pfd = HeapAlloc(GetProcessHeap(), 0, npfd * sizeof(struct pollfd));
 	snd_seq_poll_descriptors(midiSeq, pfd, npfd, POLLIN);
+        LeaveCriticalSection(&midiSeqLock);
 
 	/* Check if an event is present */
 	if (poll(pfd, npfd, 250) <= 0) {
@@ -309,7 +313,9 @@ static DWORD WINAPI midRecThread(LPVOID arg)
 	do {
 	    WORD wDevID;
 	    snd_seq_event_t* ev;
+            EnterCriticalSection(&midiSeqLock);
 	    snd_seq_event_input(midiSeq, &ev);
+            LeaveCriticalSection(&midiSeqLock);
 	    /* Find the target device */
 	    for (wDevID = 0; wDevID < MIDM_NumDevs; wDevID++)
 		if ( (ev->source.client == MidiInDev[wDevID].addr.client) && (ev->source.port == MidiInDev[wDevID].addr.port) )
@@ -415,7 +421,11 @@ static DWORD WINAPI midRecThread(LPVOID arg)
 		}
 	    }
 	    snd_seq_free_event(ev);
-	} while(snd_seq_event_input_pending(midiSeq, 0) > 0);
+
+            EnterCriticalSection(&midiSeqLock);
+            ret = snd_seq_event_input_pending(midiSeq, 0);
+            LeaveCriticalSection(&midiSeqLock);
+	} while(ret > 0);
 	
 	HeapFree(GetProcessHeap(), 0, pfd);
     }
@@ -904,8 +914,11 @@ static DWORD modData(WORD wDevID, DWORD dwParam)
 		}
 		break;
 	    }
-	    if (handled)
+	    if (handled) {
+                EnterCriticalSection(&midiSeqLock);
                 snd_seq_event_output_direct(midiSeq, &event);
+                LeaveCriticalSection(&midiSeqLock);
+            }
 	}
 	break;
     default:
@@ -994,7 +1007,9 @@ static DWORD modLongData(WORD wDevID, LPMIDIHDR lpMidiHdr, DWORD dwSize)
 	snd_seq_ev_set_dest(&event, MidiOutDev[wDevID].addr.client, MidiOutDev[wDevID].addr.port);
 	TRACE("destination %d:%d\n", MidiOutDev[wDevID].addr.client, MidiOutDev[wDevID].addr.port);
 	snd_seq_ev_set_sysex(&event, lpMidiHdr->dwBufferLength + len_add, lpNewData ? lpNewData : lpData);
+        EnterCriticalSection(&midiSeqLock);
 	snd_seq_event_output_direct(midiSeq, &event);
+        LeaveCriticalSection(&midiSeqLock);
         HeapFree(GetProcessHeap(), 0, lpNewData);
         break;
     default:
-- 
1.8.5.1


