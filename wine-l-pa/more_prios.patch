--- wine/include/winbase.h	2013-10-09 23:06:05.580141951 -0400
+++ wine/include/winebase.h	2013-10-09 23:31:58.389222059 -0400
@@ -1112,6 +1112,20 @@
 #define THREAD_PRIORITY_TIME_CRITICAL   THREAD_BASE_PRIORITY_LOWRT
 #define THREAD_PRIORITY_IDLE            THREAD_BASE_PRIORITY_IDLE
 
+/*---- Non-Windows / Wine Scheduling Policies 
+
+These policies are to be used within wine or winelib app + wine-rt patch. basically, i 
+am extending wine-rt, so we can have slightly more granular control of scheduling in Wine/winelib.
+ 
+Wine-rt is limited to it's baseline * 4 incrments, lets in crease it to 8 :) 
+
+---*/
+
+#define wTHREAD_PRIO_NORMAL         60
+#define wTHREAD_PRIO_ABOVE_NORMAL   61
+#define wTHREAD_PRIO_HIGHEST        62
+#define wTHREAD_PRIO_TIME_CRITICAL  63
+
 /* flags to FormatMessage */
 #define	FORMAT_MESSAGE_ALLOCATE_BUFFER	0x00000100
 #define	FORMAT_MESSAGE_IGNORE_INSERTS	0x00000200
--- wine/server/thread.c	2013-10-09 23:06:05.601141000 -0400
+++ wine/server/thread.c	2013-10-09 23:40:00.402246926 -0400
@@ -478,20 +478,35 @@
     switch (priority)
     {
       case THREAD_PRIORITY_TIME_CRITICAL:
-        param.sched_priority = base_rt_priority + 10;
-        policy = L_RT_THREADS;
+        param.sched_priority = base_rt_priority + 12;
+        policy = SCHED_FIFO;
         fprintf( stderr, "Thread %i at THREAD_PRIORITY_TIME_CRITICAL set to THREAD_PRIORITY_TIME_CRITICAL - priority %i\n", thread->unix_tid, param.sched_priority );
         break;
+      case wTHREAD_PRIO_TIME_CRITICAL:
+        param.sched_priority = base_rt_priority + 10;
+        policy = SCHED_FIFO;
+        fprintf( stderr, "Thread %i at wTHREAD_PRIO_TIME_CRITICAL set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
+        break;
       case THREAD_PRIORITY_HIGHEST:
-        param.sched_priority = base_rt_priority + 5;
+        param.sched_priority = base_rt_priority + 6;
         policy = SCHED_FIFO;
         fprintf( stderr, "Thread %i at THREAD_PRIORITY_HIGHEST set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
         break;
+      case wTHREAD_PRIO_HIGHEST:
+        param.sched_priority = base_rt_priority + 5;
+        policy = SCHED_FIFO;
+        fprintf( stderr, "Thread %i at wTHREAD_PRIO_HIGHEST set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
+        break;
       case THREAD_PRIORITY_ABOVE_NORMAL:
         param.sched_priority = base_rt_priority;
         policy = SCHED_FIFO;
         fprintf( stderr, "Thread %i at THREAD_PRIORITY_ABOVE_NORMAL set to SCHED_FIFO - priority %i\n", thread->unix_tid, param.sched_priority );
         break;
+      case wTHREAD_PRIO_ABOVE_NORMAL:
+        param.sched_priority = base_rt_priority;
+        policy = SCHED_RR;
+        fprintf( stderr, "Thread %i at wTHREAD_PRIO_ABOVE_NORMAL set to SCHED_RR - priority %i\n", thread->unix_tid, param.sched_priority );
+        break;
       case THREAD_PRIORITY_NORMAL:
         param.sched_priority = 0;
         policy = SCHED_NORMAL;
@@ -537,9 +552,9 @@
             set_error( STATUS_THREAD_IS_TERMINATING );
         else if (set_thread_affinity( thread, req->affinity ))
             file_set_error();
-        else if (thread->priority == THREAD_PRIORITY_TIME_CRITICAL &&
-                 req->priority != THREAD_PRIORITY_TIME_CRITICAL)
-            rtkit_undo_realtime(thread->unix_tid);
+        //else if (thread->priority == THREAD_PRIORITY_TIME_CRITICAL &&
+        //         req->priority != THREAD_PRIORITY_TIME_CRITICAL)
+        //    rtkit_undo_realtime(thread->unix_tid);
         else if (thread->priority != THREAD_PRIORITY_TIME_CRITICAL &&
                  req->priority == THREAD_PRIORITY_TIME_CRITICAL)
             rtkit_make_realtime(thread->unix_pid, thread->unix_tid, 1);
