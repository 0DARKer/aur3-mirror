--- wine-1.6-rc4/server/thread.c.orig	2013-07-03 14:17:15.936757953 -0400
+++ wine-1.6-rc4/server/thread.c	2013-07-03 14:19:40.836765428 -0400
@@ -59,8 +59,8 @@
 #include "user.h"
 #include "security.h"
 
-extern int rtkit_make_realtime(struct thread *thread, pid_t tid, int priority);
-extern int rtkit_undo_realtime(struct thread *thread);
+extern int rtkit_make_realtime(pid_t process, pid_t thread, int priority);
+extern int rtkit_undo_realtime(pid_t thread);
 
 #ifdef __i386__
 static const unsigned int supported_cpus = CPU_FLAG(CPU_x86);
@@ -209,8 +209,6 @@
     list_init( &thread->mutex_list );
     list_init( &thread->system_apc );
     list_init( &thread->user_apc );
-    list_init( &thread->rt_entry );
-    thread->rt_prio = 0;
 
     for (i = 0; i < MAX_INFLIGHT_FDS; i++)
         thread->inflight[i].server = thread->inflight[i].client = -1;
@@ -279,9 +277,6 @@
 {
     int i;
 
-    thread->unix_tid = -1;
-    if (!list_empty(&thread->rt_entry))
-        rtkit_undo_realtime(thread);
     clear_apc_queue( &thread->system_apc );
     clear_apc_queue( &thread->user_apc );
     free( thread->req_data );
@@ -524,42 +519,28 @@
 #endif
 }
 
-static int rtprio(int ntprio)
-{
-    if (ntprio == THREAD_PRIORITY_TIME_CRITICAL)
-        return 1;
-    else if (ntprio == THREAD_PRIORITY_TIME_CRITICAL)
-        return 2;
-    return 0;
-}
-
 /* set all information about a thread */
 static void set_thread_info( struct thread *thread,
                              const struct set_thread_info_request *req )
 {
     if (req->mask & SET_THREAD_INFO_PRIORITY)
-        req->priority == THREAD_PRIORITY_TIME_CRITICAL;
         set_thread_priority( thread, req->priority );
     if (req->mask & SET_THREAD_INFO_AFFINITY)
     {
-        int newprio = rtprio(req->priority);
+
         if ((req->affinity & thread->process->affinity) != req->affinity)
             set_error( STATUS_INVALID_PARAMETER );
         else if (thread->state == TERMINATED)
             set_error( STATUS_THREAD_IS_TERMINATING );
         else if (set_thread_affinity( thread, req->affinity ))
             file_set_error();
-        else if (thread->unix_tid == -1)
-            thread->rt_prio = newprio;
-        else if (thread->priority == THREAD_PRIORITY_TIME_CRITICAL && !newprio)
-            rtkit_undo_realtime(thread);
-        else if (thread->rt_prio != newprio)
-            rtkit_make_realtime(thread, thread->unix_tid, newprio);
-
-        if (newprio)
-            thread->priority = THREAD_PRIORITY_TIME_CRITICAL;
-        else
-            thread->priority = req->priority;
+        else if (thread->priority == THREAD_PRIORITY_TIME_CRITICAL &&
+                 req->priority != THREAD_PRIORITY_TIME_CRITICAL)
+            rtkit_undo_realtime(thread->unix_tid);
+        else if (thread->priority != THREAD_PRIORITY_TIME_CRITICAL &&
+                 req->priority == THREAD_PRIORITY_TIME_CRITICAL)
+            rtkit_make_realtime(thread->unix_pid, thread->unix_tid, 1);
+        thread->priority = req->priority;
     }
 
     if (req->mask & SET_THREAD_INFO_TOKEN)
