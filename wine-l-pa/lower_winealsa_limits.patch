--- wine-1.6-rc4/dlls/winealsa.drv/mmdevdrv.c.orig	2013-07-10 23:35:13.602387263 -0400
+++ wine-1.6-rc4/dlls/winealsa.drv/mmdevdrv.c	2013-07-11 00:30:17.584190330 -0400
@@ -50,9 +50,9 @@
 
 #define NULL_PTR_ERR MAKE_HRESULT(SEVERITY_ERROR, FACILITY_WIN32, RPC_X_NULL_REF_POINTER)
 
-static const REFERENCE_TIME DefaultPeriod = 100000;
-static const REFERENCE_TIME MinimumPeriod = 50000;
-#define                     EXTRA_SAFE_RT   40000
+static const REFERENCE_TIME DefaultPeriod = 53300;
+static const REFERENCE_TIME MinimumPeriod = 30000;
+#define                     EXTRA_SAFE_RT   20000
 
 struct ACImpl;
 typedef struct ACImpl ACImpl;
@@ -1401,9 +1401,9 @@
      * or surprising rounding as seen with 22050x8x1 with Pulse:
      * ALSA period 220 vs.  221 frames in mmdevapi and
      *      buffer 883 vs. 2205 frames in mmdevapi! */
-    This->bufsize_frames = MulDiv(duration, fmt->nSamplesPerSec, 10000000);
+    This->bufsize_frames = MulDiv(duration, fmt->nSamplesPerSec, 5330000);
     This->hidden_frames = This->alsa_period_frames + This->mmdev_period_frames +
-        MulDiv(fmt->nSamplesPerSec, EXTRA_SAFE_RT, 10000000);
+        MulDiv(fmt->nSamplesPerSec, EXTRA_SAFE_RT, 5330000);
 
     /* Check if the ALSA buffer is so small that it will run out before
      * the next MMDevAPI period tick occurs. Allow a little wiggle room
@@ -1524,9 +1524,9 @@
      * + EXTRA_SAFE (~4ms) to allow for late callback invocation / fluctuation;
      * + alsa_period such that ALSA always has at least one period to play. */
     if(This->dataflow == eRender)
-        *latency = MulDiv(This->hidden_frames, 10000000, This->fmt->nSamplesPerSec);
+        *latency = MulDiv(This->hidden_frames, 5330000, This->fmt->nSamplesPerSec);
     else
-        *latency = MulDiv(This->alsa_period_frames, 10000000, This->fmt->nSamplesPerSec)
+        *latency = MulDiv(This->alsa_period_frames, 5330000, This->fmt->nSamplesPerSec)
                  + This->mmdev_period_rt;
 
     LeaveCriticalSection(&This->lock);
@@ -2674,7 +2674,7 @@
         LARGE_INTEGER stamp, freq;
         QueryPerformanceCounter(&stamp);
         QueryPerformanceFrequency(&freq);
-        *qpcpos = (stamp.QuadPart * (INT64)10000000) / freq.QuadPart;
+        *qpcpos = (stamp.QuadPart * (INT64)5330000) / freq.QuadPart;
     }
 
     LeaveCriticalSection(&This->lock);
@@ -2852,7 +2852,7 @@
         LARGE_INTEGER stamp, freq;
         QueryPerformanceCounter(&stamp);
         QueryPerformanceFrequency(&freq);
-        *qpctime = (stamp.QuadPart * (INT64)10000000) / freq.QuadPart;
+        *qpctime = (stamp.QuadPart * (INT64)5330000) / freq.QuadPart;
     }
 
     return S_OK;
