From 77b12856e833b53e6eaa0bb97b1b9841e7fdf1fc Mon Sep 17 00:00:00 2001
From: =?utf-8?q?J=C3=B6rg=20H=C3=B6hle?= <hoehle@users.sourceforge.net>
Date: Thu, 8 Mar 2012 22:56:37 +0100
Subject: winealsa: Implement a lock-free callback design.

---
 dlls/winealsa.drv/mmdevdrv.c |   44 +++++++++++++++++++++---------------------
 1 files changed, 22 insertions(+), 22 deletions(-)

diff --git a/dlls/winealsa.drv/mmdevdrv.c b/dlls/winealsa.drv/mmdevdrv.c
index 5a6f6e3..f6d3356 100644
--- a/dlls/winealsa.drv/mmdevdrv.c
+++ b/dlls/winealsa.drv/mmdevdrv.c
@@ -92,7 +92,7 @@ struct ACImpl {
     IAudioClock2 IAudioClock2_iface;
     IAudioStreamVolume IAudioStreamVolume_iface;
 
-    LONG ref;
+    LONG ref, held_frames;
 
     snd_pcm_t *pcm_handle;
     snd_pcm_uframes_t alsa_bufsize_frames, alsa_period_frames;
@@ -115,7 +115,7 @@ struct ACImpl {
     BOOL initted, started;
     REFERENCE_TIME mmdev_period_rt;
     UINT64 written_frames, last_pos_frames;
-    UINT32 bufsize_frames, held_frames, tmp_buffer_frames, mmdev_period_frames;
+    UINT32 bufsize_frames, tmp_buffer_frames, mmdev_period_frames;
     snd_pcm_uframes_t remapping_buf_frames;
     UINT32 lcl_offs_frames; /* offs into local_buffer where valid data starts */
     UINT32 wri_offs_frames; /* where to write fresh data in local_buffer */
@@ -1968,10 +1968,10 @@ static snd_pcm_sframes_t alsa_write_best_effort(snd_pcm_t *handle, BYTE *buf,
  *->fmt            likewise
  *->alsa_format, hidden_frames likewise
  *->local_buffer, bufsize_frames, alsa_bufsize_frames likewise
+ *->local_buffer[] variable buffer content
  *->event          Read Only, even constant until _Release(!)
  *->started        Read Only from cb POV, constant if _Stop kills the cb
- *
- *->held_frames is the only R/W object.
+ *->held_frames is the only R/W object beside the content of local_buffer
  *->lcl_offs_frames/wri_offs_frames are written by one side exclusively:
  *  lcl_offs_frames by CaptureClient & write callback
  *  wri_offs_frames by read callback & RenderClient
@@ -1980,6 +1980,7 @@ static void alsa_write_data(ACImpl *This)
 {
     snd_pcm_sframes_t written, in_alsa;
     snd_pcm_uframes_t to_write, avail, write_limit, max_period;
+    UINT32 held_frames;
     int err;
     BYTE *buf =
         This->local_buffer + This->lcl_offs_frames * This->fmt->nBlockAlign;
@@ -2004,13 +2005,14 @@ static void alsa_write_data(ACImpl *This)
     }else
         TRACE("pad: %ld\n", This->alsa_bufsize_frames - avail);
 
-    if(This->held_frames == 0)
+    held_frames = InterlockedExchangeAdd(&This->held_frames,0);
+    if(held_frames == 0)
         return;
 
-    if(This->lcl_offs_frames + This->held_frames > This->bufsize_frames)
+    if(This->lcl_offs_frames + held_frames > This->bufsize_frames)
         to_write = This->bufsize_frames - This->lcl_offs_frames;
     else
-        to_write = This->held_frames;
+        to_write = held_frames;
 
     max_period = max(This->mmdev_period_frames, This->alsa_period_frames);
 
@@ -2030,8 +2032,8 @@ static void alsa_write_data(ACImpl *This)
      * GetPosition continues to reflect the speaker position because
      * snd_pcm_delay includes buffered frames in its total delay
      * and last_pos_frames prevents moving backwards. */
-    if(!in_alsa && This->held_frames < This->hidden_frames){
-        UINT32 s_frames = This->hidden_frames - This->held_frames;
+    if(!in_alsa && held_frames < This->hidden_frames){
+        UINT32 s_frames = This->hidden_frames - held_frames;
         BYTE *silence = HeapAlloc(GetProcessHeap(), 0,
                 s_frames * This->fmt->nBlockAlign);
 
@@ -2055,17 +2057,18 @@ static void alsa_write_data(ACImpl *This)
 
     This->lcl_offs_frames += written;
     This->lcl_offs_frames %= This->bufsize_frames;
-    This->held_frames -= written;
+    held_frames = InterlockedExchangeAdd(&This->held_frames, -written);
+    held_frames -= written;
 
     if(written < to_write){
         /* ALSA buffer probably full */
         return;
     }
 
-    if(This->held_frames && (written < write_limit)){
+    if(held_frames && (written < write_limit)){
         /* wrapped and have some data back at the start to write */
         written = alsa_write_best_effort(This->pcm_handle, This->local_buffer,
-                min(This->held_frames, write_limit - written), This,
+                min(held_frames, write_limit - written), This,
                 This->session->mute);
         if(written < 0){
             WARN("Couldn't write: %ld (%s)\n", written, snd_strerror(written));
@@ -2074,14 +2077,15 @@ static void alsa_write_data(ACImpl *This)
 
         This->lcl_offs_frames += written;
         This->lcl_offs_frames %= This->bufsize_frames;
-        This->held_frames -= written;
+        InterlockedExchangeAdd(&This->held_frames, -written);
     }
 }
 
 static void alsa_read_data(ACImpl *This)
 {
     snd_pcm_sframes_t nread;
-    UINT32 pos = This->wri_offs_frames, limit = This->held_frames;
+    UINT32 pos = This->wri_offs_frames,
+        limit = InterlockedExchangeAdd(&This->held_frames,0);
 
     /* FIXME: Detect overrun and signal DATA_DISCONTINUITY
      * How to count overrun frames and report them as position increase? */
@@ -2123,15 +2127,13 @@ static void alsa_read_data(ACImpl *This)
 
     This->wri_offs_frames += nread;
     This->wri_offs_frames %= This->bufsize_frames;
-    This->held_frames += nread;
+    InterlockedExchangeAdd(&This->held_frames, nread);
 }
 
 static void CALLBACK alsa_push_buffer_data(void *user, BOOLEAN timer)
 {
     ACImpl *This = user;
 
-    EnterCriticalSection(&This->lock);
-
     if(This->started){
         if(This->dataflow == eRender)
             alsa_write_data(This);
@@ -2139,8 +2141,6 @@ static void CALLBACK alsa_push_buffer_data(void *user, BOOLEAN timer)
             alsa_read_data(This);
     }
 
-    LeaveCriticalSection(&This->lock);
-
     if(This->event)
         SetEvent(This->event);
 }
@@ -2562,7 +2562,7 @@ static HRESULT WINAPI AudioRenderClient_ReleaseBuffer(
 
     This->wri_offs_frames += written_frames;
     This->wri_offs_frames %= This->bufsize_frames;
-    This->held_frames += written_frames;
+    InterlockedExchangeAdd(&This->held_frames, written_frames);
     This->written_frames += written_frames;
     This->getbuf_last = 0;
 
@@ -2707,7 +2707,7 @@ static HRESULT WINAPI AudioCaptureClient_ReleaseBuffer(
     }
 
     This->written_frames += done;
-    This->held_frames -= done;
+    InterlockedExchangeAdd(&This->held_frames, -done);
     This->lcl_offs_frames += done;
     This->lcl_offs_frames %= This->bufsize_frames;
     This->getbuf_last = 0;
@@ -2815,7 +2815,7 @@ static HRESULT WINAPI AudioClock_GetPosition(IAudioClock *iface, UINT64 *pos,
     avail_frames = snd_pcm_avail_update(This->pcm_handle);
     alsa_state = snd_pcm_state(This->pcm_handle);
     written_frames = This->written_frames;
-    held_frames = This->held_frames;
+    held_frames = InterlockedExchangeAdd(&This->held_frames,0);
 
     err = snd_pcm_delay(This->pcm_handle, &delay_frames);
     if(err < 0){
-- 
1.5.6.3

