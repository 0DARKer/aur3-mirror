diff --git a/src/linux/up-backend.c b/src/linux/up-backend.c
index 0ca6ca7..fc0a610 100644
--- a/src/linux/up-backend.c
+++ b/src/linux/up-backend.c
@@ -52,8 +52,8 @@
 #ifdef HAVE_SYSTEMD
 #include <systemd/sd-daemon.h>
 
-#define SD_HIBERNATE_COMMAND	"gdbus call --system --dest org.freedesktop.login1 --object-path /org/freedesktop/login1 --method org.freedesktop.login1.Manager.Hibernate 'true'"
-#define SD_SUSPEND_COMMAND	"gdbus call --system --dest org.freedesktop.login1 --object-path /org/freedesktop/login1 --method org.freedesktop.login1.Manager.Suspend 'true'"
+#define SD_HIBERNATE_COMMAND "gdbus call --system --dest org.freedesktop.login1 --object-path /org/freedesktop/login1 --method org.freedesktop.login1.Manager.Hibernate 'true'"
+#define SD_SUSPEND_COMMAND   "gdbus call --system --dest org.freedesktop.login1 --object-path /org/freedesktop/login1 --method org.freedesktop.login1.Manager.Suspend 'true'"
 
 #endif
 
@@ -88,10 +88,6 @@ G_DEFINE_TYPE (UpBackend, up_backend, G_TYPE_OBJECT)
 static gboolean up_backend_device_add (UpBackend *backend, GUdevDevice *native);
 static void up_backend_device_remove (UpBackend *backend, GUdevDevice *native);
 
-#define UP_BACKEND_SUSPEND_COMMAND		"/usr/sbin/pm-suspend"
-#define UP_BACKEND_HIBERNATE_COMMAND		"/usr/sbin/pm-hibernate"
-#define UP_BACKEND_POWERSAVE_TRUE_COMMAND	"/usr/sbin/pm-powersave true"
-#define UP_BACKEND_POWERSAVE_FALSE_COMMAND	"/usr/sbin/pm-powersave false"
 
 /**
  * up_backend_device_new:
@@ -362,19 +358,16 @@ up_backend_coldplug (UpBackend *backend, UpDaemon *daemon)
 
 /**
  * up_backend_supports_sleep_state:
- *
- * use pm-is-supported to test for supported sleep states
  **/
 static gboolean
-up_backend_supports_sleep_state (const gchar *state)
+up_backend_supports_sleep_state ()
 {
 	gboolean ret = FALSE;
 	gchar *command;
 	GError *error = NULL;
 	gint exit_status;
 
-	/* run script from pm-utils */
-	command = g_strdup_printf ("/usr/bin/pm-is-supported --%s", state);
+	command = g_strdup_printf ("grep -q mem /sys/power/state");
 	g_debug ("excuting command: %s", command);
 	ret = g_spawn_command_line_sync (command, NULL, NULL, &exit_status, &error);
 	if (!ret) {
@@ -395,7 +388,7 @@ out:
 gboolean
 up_backend_kernel_can_suspend (UpBackend *backend)
 {
-	return up_backend_supports_sleep_state ("suspend");
+	return up_backend_supports_sleep_state ();
 }
 
 /**
@@ -404,7 +397,7 @@ up_backend_kernel_can_suspend (UpBackend *backend)
 gboolean
 up_backend_kernel_can_hibernate (UpBackend *backend)
 {
-	return up_backend_supports_sleep_state ("hibernate");
+	return up_backend_supports_sleep_state ();
 }
 
 /**
@@ -590,7 +583,7 @@ up_backend_get_suspend_command (UpBackend *backend)
 		return SD_SUSPEND_COMMAND;
 	else
 #endif
-	return UP_BACKEND_SUSPEND_COMMAND;
+	return NULL;
 }
 
 /**
@@ -604,18 +597,13 @@ up_backend_get_hibernate_command (UpBackend *backend)
 		return SD_HIBERNATE_COMMAND;
 	else
 #endif
-	return UP_BACKEND_HIBERNATE_COMMAND;
+	return NULL;
 }
 
 gboolean
 up_backend_emits_resuming (UpBackend *backend)
 {
-#ifdef HAVE_SYSTEMD
-	if (sd_booted ())
-		return TRUE;
-	else
-#endif
-	return FALSE;
+	return TRUE;
 }
 
 /**
@@ -624,9 +612,7 @@ up_backend_emits_resuming (UpBackend *backend)
 const gchar *
 up_backend_get_powersave_command (UpBackend *backend, gboolean powersave)
 {
-	if (powersave)
-		return UP_BACKEND_POWERSAVE_TRUE_COMMAND;
-	return UP_BACKEND_POWERSAVE_FALSE_COMMAND;
+	return NULL;
 }
 
 /**
