# Maintainer : Ng Oon-Ee <ngoonee.talk@gmail.com>
# Based on nvidia-beta by Dan Vratil <vratil@progdansoft.com>

pkgname=nvidia-beta-all
pkgver=319.23
pkgrel=1
pkgdesc="NVIDIA beta drivers for linux." 
arch=('i686' 'x86_64')
url="http://www.nvidia.com/"
provides=("nvidia=${pkgver}")
depends=("nvidia-utils-beta=${pkgver}")
makedepends=('linux-headers' 'kmod>=9-2')
conflicts=('nvidia-96xx' 'nvidia-71xx' 'nvidia-legacy' 'nvidia') 
license=('custom')
install=nvidia.install
options=(!strip)

if [ "$CARCH" = "i686" ]; then
    _arch='x86'
    _pkg="NVIDIA-Linux-${_arch}-${pkgver}"
    md5sums=('cbdca80e11b643aa46bded82abe43754')
elif [ "$CARCH" = "x86_64" ]; then
    _arch='x86_64'
    _pkg="NVIDIA-Linux-${_arch}-${pkgver}-no-compat32"
    md5sums=('74edd76b4bb9229f7d9c00a79f1e3860')
fi
source=("ftp://download.nvidia.com/XFree86/Linux-${_arch}/${pkgver}/${_pkg}.run"
        "linux-3.7.patch"
        "linux-3.8.patch"
        "3.3.0-1-example-nvidia-beta.patch")
#source=("http://us.download.nvidia.com/XFree86/Linux-${_arch}/${pkgver}/${_pkg}.run")

### Enable using of version numbers from pacman. This should only be used if you have kernels with
### long version numbers (for example if compiled with git-suffixes). This will not work with kernels
### compiled outside pacman's management, and takes much longer than the canonical method, due to 
### needing to search the local repository. Set to '1' to enable.
USE_PACMAN_VERSION=0

md5sums=(${md5sums[@]}
         '7c684fab691b15d55a79fd8f9b1a224d'
         '9b20edcefc8ad28f40bdf9a5e26ef731'
         'dfe6b9b8dfbb8f4257622bcee2eb52a3')
build() {
    if [ "$USE_PACMAN_VERSION" = "0" ]; then
        _KERNELS=`file -rk /boot/* | grep 'Linux kernel.*boot executable' | sed 's/.*version \([^ ]\+\).*/\1/'`
    else
        _PACKAGES=`pacman -Qsq linux`
        _KERNELS=`pacman -Ql $_PACKAGES | grep /modules.alias.bin | sed 's/.*\/lib\/modules\/\(.*\)\/modules.alias.bin/\1/g'`
    fi
    cd "${srcdir}"
    if [ -d ${_pkg} ]; then
      rm -rf ${_pkg}
    fi
    sh "${_pkg}.run" --extract-only
    cd "${_pkg}/kernel"


  # Loop through all detected kernels
  for _kernver in $_KERNELS;
  do  
    cd ${srcdir}/${_pkg}
    cp -R kernel kernel-${_kernver}
    cd kernel-${_kernver}
    echo Building module for $_kernver

    # If this kernel has a specific patch for nvidia-beta, apply it
    # Patches should be named as the example, replacing the correct kernver
    if [[ -f ${startdir}/$_kernver-nvidia-beta.patch ]]; then
      echo Found patch for nvidia-beta for kernel $_kernver
      patch -p0 < ${startdir}/$_kernver-nvidia-beta.patch 
    fi
    _mainver=`echo ${_kernver} | cut -d'.' -f-1`
    _majorver=`echo ${_kernver} | cut -d'.' -f-2 | cut -d'.' -f2-`
    _minorver=`echo ${_kernver} | cut -d'-' -f-1 | cut -d'.' -f3-`
    if [[ "${_mainver}" -ge "3" && "${_majorver}" -ge "7" ]]; then
      patch -Np3 -i "${srcdir}"/linux-3.7.patch
      if [[ "${_mainver}" -ge "3" && "${_majorver}" -eq "8" && "${_minorver}" -lt "2" ]]; then
        patch -Np1 -i "${srcdir}"/linux-3.8.patch
      fi
    fi

    make SYSSRC=/usr/lib/modules/"${_kernver}/build" module
  done

  # Modify .INSTALL (nvidia.install) file if needed
  if [ "$USE_PACMAN_VERSION" = "0" ]; then
    sed 's/USE_PACMAN_VERSION=1/USE_PACMAN_VERSION=0/g' ${startdir}/nvidia.install > ${startdir}/nvidia.installtemp
    mv ${startdir}/nvidia.installtemp ${startdir}/nvidia.install
  else
    sed 's/USE_PACMAN_VERSION=0/USE_PACMAN_VERSION=1/g' ${startdir}/nvidia.install > ${startdir}/nvidia.installtemp
    mv ${startdir}/nvidia.installtemp ${startdir}/nvidia.install
  fi
}

package() {
  if [ "$USE_PACMAN_VERSION" = "0" ]; then
    _KERNELS=`file -rk /boot/* | grep 'Linux kernel.*boot executable' | sed 's/.*version \([^ ]\+\).*/\1/'`
  else
    _PACKAGES=`pacman -Qsq linux`
    _KERNELS=`pacman -Ql $_PACKAGES | grep /modules.alias.bin | sed 's/.*\/lib\/modules\/\(.*\)\/modules.alias.bin/\1/g'`
  fi

  # Find all extramodules directories
  _EXTRAMODULES=`find /usr/lib/modules -name version | sed 's|\/usr\/lib\/modules\/||; s|\/version||'`

  # Loop through all detected kernels
  for _kernver in $_KERNELS;
  do  
    cd "${srcdir}/${_pkg}/kernel-${_kernver}" 
    # Loop through all detected extramodules directories
    for _moduledirs in $_EXTRAMODULES
    do
      # Check which extramodules directory corresponds with the built module
      if [ `cat "/usr/lib/modules/${_moduledirs}/version"` = $_kernver ]; then
        install -D -m644 nvidia.ko \
          "${pkgdir}/usr/lib/modules/${_moduledirs}/nvidia.ko"
	      gzip "${pkgdir}/usr/lib/modules/${_moduledirs}/nvidia.ko"                      
      fi
    done
  done
    install -d -m755 "${pkgdir}/usr/lib/modprobe.d"
    echo "blacklist nouveau" >> "${pkgdir}/usr/lib/modprobe.d/nvidia.conf"
}
