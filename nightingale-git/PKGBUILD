# Maintainer: Matt Parnell/ilikenwf
# Contributor: Matt Parnell/ilikenwf

# Note: the maintainer/contributor of this package is also the
# de-facto head developer of the nightingale project...
# this script thus gets some extra TLC since I use arch

# If you're reading this, WE NEED MORE DEVELOPERS!
# If you know C++, XUL, and are familiar with the mozilla SDK,
# contact parwok@gmail.com or join our irc on MozNet #nightingale
# or the forums at getnightingale.com/forum

pkgname=nightingale-git
pkgver=20111209
pkgrel=1
pkgdesc="Community port of nightingale to be more Linux native. Working git version is nightingale 1.8 compatible."
arch=('i686' 'x86_64')
url="http://getnightingale.com/"
license=('GPL2' 'MPL' 'BSD')
makedepends=('git' 'bash' 'subversion' 'python2' 'tar' 'wget')
depends=('gstreamer0.10' 'gstreamer0.10-base' 'gtk2' 'libxt' 'sqlite3' 'gstreamer0.10-good-plugins' 
		 'gstreamer0.10-bad-plugins' 'gstreamer0.10-ffmpeg' 'gstreamer0.10-ugly-plugins')
optdepends=()
conflicts=()
provides=('nightingale' 'nightingale-git')
install=nightingale.install
source=('proper_gst_path_archlinux.patch' 'Nightingale.desktop')
md5sums=('93d7e61400661def1957b3be9243f332'
         '7741cc247648e95dd9dad8c953616757')

# Only use git if you want a 2.8gb directory sitting in your build
# dir! Otherwise, just use the snapshot, it's updated every time
# the git is since the project uses github!
use_git="no"
_tarball="https://github.com/nightingale-media-player/nightingale-hacking/tarball/nightingale-1.8"

# set update to yes if using the tarball and you want to grab the latest
update=no

_gitroot="git://github.com/nightingale-media-player/nightingale-hacking.git"
_gitname="nightingale"
_branch="nightingale-1.8"

fetch_sources() {
	
	if [ $use_git = "yes" ]; then
		# NOTE: master is in development, it WILL NOT BUILD
		if [ ! -d "$_gitname" ]; then
			cd "${srcdir}"
			msg2 "Cloning initial copy of zen-sources..."
			warning "This may take some time depending on your available bandwidth."

			git clone --depth 1 "$_gitroot" "$_gitname"

			_no_update="y" # update is not necessary
		fi

		cd "${srcdir}/$_gitname"

		msg2 "Updating local tree..."
		if git fetch; then
			msg2 "Attempting to merge changes..."

			if ! git merge "origin/$_branch"; then
				error "Merging failed..."

				msg2 "Fixing local repository..."
				git checkout -f "$_branch"
				git clean -xdf
				git reset --hard "origin/$_branch"
			fi
		else
			error "Update failed..."
		fi
		msg "Done doing all of the work with git..."
	else
		msg "Downloading the tarball from github."
		cd "${srcdir}"
		
		if [ ! -f "$_branch.tar.gz" ]; then
			wget -O "$_branch.tar.gz" $_tarball
		fi
		
		tar xvf "$_branch.tar.gz"
			
		if [ -d nightingale ]; then
			rm -rf nightingale
		fi
		
		mv nightingale-media-player-nightingale-hacking-* nightingale		
	fi
}

do_package() {
	mkdir -p ${pkgdir}/opt/nightingale/
	cd "${srcdir}/$_gitname/compiled/dist"
	cp -a * ${pkgdir}/opt/nightingale/

	install -d --group=users ${pkgdir}/opt/nightingale

	chmod 755 ${pkgdir}/opt/nightingale/nightingale
	chmod 755 ${pkgdir}/opt/nightingale/nightingale-bin
	chmod 755 ${pkgdir}/opt/nightingale/xulrunner/xulrunner
	chmod 755 ${pkgdir}/opt/nightingale/xulrunner/xulrunner-bin
	chmod -R a+r ${pkgdir}/opt/nightingale
	install -D "${srcdir}/$_gitname/compiled/dist"/chrome/icons/default/default.xpm \
		 ${pkgdir}/usr/share/pixmaps/nightingale.xpm
	install -D -m644 ${srcdir}/Nightingale.desktop \
		   ${pkgdir}/usr/share/applications/Nightingale.desktop
}

build() {
	# get the source
	fetch_sources
	
	cd "${srcdir}"

	# I know this is lazy, but needing this svn stuff is temporary
	# The below if statement/block will be removed in the next version
	if [ ! -d "${srcdir}/nightingale/dependencies/linux-$(arch)" ] ; then
		msg "Grabbing a few Nightingale specific dependencies"
		msg "Don't worry, This won't be necessary with the next version, hopefully"
		msg "A lot of what we're grabbing here aren't even used..."
		msg2 "This WILL take a while, so don't freak out and cancel if nothing happens for 30sec - 1min"
		
		cd "${srcdir}/nightingale/dependencies"
		
		# Seriously, songbird devs...you didn't have to make it use all this static crap for linux builds...
		# understandable for Mac and Windows...but I mean, come on...
		# as the dev of nightingale, I'm working to not need this cruft, since our system provides these pkgs
		_svnroot="http://ngale.svn.sourceforge.net/svnroot/ngale/branches/dependencies/Nightingale1.8/linux-$(arch)"
		mkdir -p "linux-$(arch)"/{xulrunner/release,mozilla/release,taglib/release,sqlite/release}
		
		cd "${srcdir}/nightingale/dependencies/linux-$(arch)/xulrunner/release"
		svn co $_svnroot/xulrunner/release ./
		
		cd "${srcdir}/nightingale/dependencies/linux-$(arch)/mozilla/release"
		svn co $_svnroot/mozilla/release ./
		
		cd "${srcdir}/nightingale/dependencies/linux-$(arch)/taglib/release"
		svn co $_svnroot/taglib/release ./
		
		cd "${srcdir}/nightingale/dependencies/linux-$(arch)/sqlite/release"
		svn co $_svnroot/sqlite/release ./
	fi

	cd "${srcdir}/$_gitname"

	# our gstreamer path, since we use system libs :)
	export GST_PLUGIN_PATH="/usr/lib/gstreamer-0.10"
	
	# use our own gstreamer libs
	grep -sq gstreamer-system nightingale.config || ( echo 'ac_add_options --with-media-core=gstreamer-system'  nightingale.config )

	# force the buildscripts to use python2 to avoid breakage
	export PYTHON="/usr/bin/python2"

	# clobber just in case we're rebuilding, as we've probably pulled new code down
	make -f nightingale.mk clobber
	
	# build it
	make -f nightingale.mk

	# edit the launcher so it always uses the correct gstreamer path...
	# without this music playback wouldn't work
	# I'm using an arch specific patch so we don't have to use the generic one
	patch -Np0 -i ../proper_gst_path_archlinux.patch compiled/dist/nightingale

	# make the package
	do_package
	
	# free up over 600 mb
	cd "${srcdir}/$_gitname"
	
	# copy the extensions first
	if [ -d ../xpi-stage ]; then
		rm -rf ../xpi-stage
	fi
	cp -a "${srcdir}/$_gitname/compiled/xpi-stage" "${srcdir}"
	
	make -f nightingale.mk clobber
	
	msg "Note that the last.FM extension is in $srcdir/xpi-stage/audioscrobbler."
	msg "If you want to use it, you'll need to install it manually after running Nightingale. Your mileage may vary."
	
}
