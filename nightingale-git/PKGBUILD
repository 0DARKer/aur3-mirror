# Maintainer: Matt Parnell/ilikenwf
# Contributor: Matt Parnell/ilikenwf

# Note: the maintainer/contributor of this package is also the
# de-facto head developer of the nightingale project...
# this script thus gets some extra TLC since I use arch

# If you're reading this, WE NEED MORE DEVELOPERS!
# If you know C++, XUL, and are familiar with the mozilla SDK,
# contact parwok@gmail.com or join our irc on MozNet #nightingale
# or the forums at getnightingale.com/forum

pkgname=nightingale-git
pkgver=20120205
pkgrel=1
pkgdesc="Community port of Songbird to be more Linux native, up to date, and open."
arch=('i686' 'x86_64')
url="http://getnightingale.com/"
license=('GPL2' 'MPL' 'BSD')
makedepends=('git' 'bash' 'subversion' 'python2' 'tar' 'wget')
depends=('gstreamer0.10' 'gstreamer0.10-base' 'gtk2' 'libxt' 'sqlite3' 'gstreamer0.10-good-plugins' 
		 'gstreamer0.10-bad-plugins' 'gstreamer0.10-ffmpeg' 'gstreamer0.10-ugly-plugins')
optdepends=()
conflicts=()
provides=('nightingale' 'nightingale-git')
install=nightingale.install
if [ "$CARCH" = x86_64 ]; then
	source=('proper_gst_path_archlinux.patch' 
			'Nightingale.desktop' 
			'https://downloads.sourceforge.net/project/ngale/1.8/x86_64/linux-x86_64-1.8.tar.lzma' 
			'https://downloads.sourceforge.net/project/ngale/1.8/vendor-1.8.zip')
	md5sums=('6074e30c4095c4968649dab791f97e0b'
			 '7741cc247648e95dd9dad8c953616757'
			 '8ba2786529bfc654e5238b303dbd7623'
			 '4de15afc25588190b9c23b05bd7a94f7')
else
	source=('proper_gst_path_archlinux.patch'
			'Nightingale.desktop'
			'https://downloads.sourceforge.net/project/ngale/1.8/i686/linux-i686-1.8.tar.lzma' 
			'https://downloads.sourceforge.net/project/ngale/1.8/vendor-1.8.zip')
	md5sums=('6074e30c4095c4968649dab791f97e0b'
			 '7741cc247648e95dd9dad8c953616757'
			 '3cd20851aef45d90e5ef6ea1d332d9fe'
			 '4de15afc25588190b9c23b05bd7a94f7')
fi

# Only use git if you want a 2.8gb directory sitting in your build
# dir! Otherwise, just use the snapshot, it's updated every time
# the git is since the project uses github!
use_git="yes"
_tarball="https://github.com/nightingale-media-player/nightingale-hacking/tarball/nightingale-1.8"

_no_update=n

_gitroot="git://github.com/nightingale-media-player/nightingale-hacking.git"
_gitname="nightingale"
_branch="nightingale-1.8"

fetch_sources() {
	
	if [ $use_git = "yes" ]; then
		# NOTE: master is in development, it WILL NOT BUILD
		if [ ! -d "$_gitname" ]; then
		cd "$srcdir"
		msg2 "Cloning initial copy of zen-sources..."
		warning "This may take some time depending on your available bandwidth."

		git clone --depth 1 "$_gitroot" "$_gitname"

		_no_update="y" # update is not necessary
		fi

		if [ "$_no_update" = "y" ]; then
			msg2 "Skipping tree update..."
		else
			cd "$srcdir/$_gitname"

			msg2 "Updating local tree..."
			if git fetch; then
				msg2 "Attempting to merge changes..."
				cd $srcdir/$_gitname 
				git merge origin/$_branch
				
				msg2 "Fixing local repository..."
				git checkout -f "$_branch"
				git clean -xdf
				git reset --hard "origin/$_branch"
			else
				error "Update failed..."
			fi
						
			warning "Press ENTER if you want to continue or CTRL+C to abort..."
			read
		fi
		
		cd "$srcdir/$_gitname"
		git checkout -f "$_branch"	
	else
		msg "Downloading the tarball from github."
		cd "${srcdir}"
		
		rm "$_branch.tar.gz"
		wget -O "$_branch.tar.gz" $_tarball
		
		tar xvf "$_branch.tar.gz"
			
		if [ -d nightingale ]; then
			rm -rf nightingale
		fi
		
		mv nightingale-media-player-nightingale-hacking-* nightingale		
	fi
}

do_package() {
	mkdir -p ${pkgdir}/opt/nightingale/
	cd "${srcdir}/$_gitname/compiled/dist"
	cp -a * ${pkgdir}/opt/nightingale/

	install -d --group=users ${pkgdir}/opt/nightingale

	chmod 755 ${pkgdir}/opt/nightingale/nightingale
	chmod 755 ${pkgdir}/opt/nightingale/nightingale-bin
	chmod 755 ${pkgdir}/opt/nightingale/xulrunner/xulrunner
	chmod 755 ${pkgdir}/opt/nightingale/xulrunner/xulrunner-bin
	chmod -R a+r ${pkgdir}/opt/nightingale
	install -D "${srcdir}/$_gitname/compiled/dist"/chrome/icons/default/default.xpm \
		 ${pkgdir}/usr/share/pixmaps/nightingale.xpm
	install -D -m644 ${srcdir}/Nightingale.desktop \
		   ${pkgdir}/usr/share/applications/Nightingale.desktop
}

build() {
	# get the source
	fetch_sources
	
	cd "${srcdir}/nightingale/dependencies"
	
	# just in case we already have the symlinks there...to avoid errors
	rm -rf "linux-$(arch)" &> /dev/null
	rm -rf vendor &> /dev/null
	
	# note: 1.8 is the current stable...later we'll make it more dynamic on the version number
	ln -s "${srcdir}/linux-$(arch)" ./
	ln -s "${srcdir}/vendor" ./
	
	cd "${srcdir}/$_gitname"

	# our gstreamer path, since we use system libs :)
	export GST_PLUGIN_PATH="/usr/lib/gstreamer-0.10"
	
	# use our own gstreamer libs
	grep -sq gstreamer-system nightingale.config || ( echo 'ac_add_options --with-media-core=gstreamer-system'  nightingale.config )

	# force the buildscripts to use python2 to avoid breakage
	export PYTHON="/usr/bin/python2"

	# clobber just in case we're rebuilding, as we've probably pulled new code down
	make -f nightingale.mk clobber
	
	# build it
	make -f nightingale.mk

	# edit the launcher so it always uses the correct gstreamer path...
	# without this music playback wouldn't work
	# I'm using an arch specific patch so we don't have to use the generic one
	patch -Np0 -i ../proper_gst_path_archlinux.patch compiled/dist/nightingale

	# make the package
	do_package
	
	# free up over 600 mb
	cd "${srcdir}/$_gitname"
	
	# copy the extensions first
	if [ -d ../xpi-stage ]; then
		rm -rf ../xpi-stage
	fi
	cp -a "${srcdir}/$_gitname/compiled/xpi-stage" "${srcdir}"
	
	make -f nightingale.mk clobber
	
	msg "Note that the last.FM extension is in $srcdir/xpi-stage/audioscrobbler."
	msg "If you want to use it, you'll need to install it manually after running Nightingale. Your mileage may vary."
	msg "--------------------------------------------------------------"
	msg "If you have issues, drop by http://forum.getnightingale.com or"
	msg "#nightingale on MozNet IRC"
	
}
