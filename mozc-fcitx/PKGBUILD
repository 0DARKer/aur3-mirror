# Maintainer: felixonmars <felixonmars at gmail dot com>
# Contributor: ponsfoot <cabezon dot hashimoto at gmail dot com>

## Mozc compile option
_bldtype=Release

_zipcoderel=201204
_protobuf_ver=2.4.1

_pkgbase=mozc
pkgname=mozc-fcitx
pkgdesc="A Japanese Input Method for Chromium OS, Windows, Mac and Linux (the Open Source Edition of Google Japanese Input) - With Fcitx Support"
pkgver=1.5.1090.102
_patchver=${pkgver}.1
pkgrel=1
groups=('mozc-im')
arch=('i686' 'x86_64')
url="http://code.google.com/p/mozc/"
license=('GPL2')
depends=('curl' 'qt' 'fcitx')
makedepends=('pkg-config' 'python2' 'gtest' 'zinnia' 'qt' 'curl' 'fcitx')
replaces=('mozc' 'mozc-server' 'mozc-utils-gui')
conflicts=('mozc' 'mozc-server' 'mozc-utils-gui')
optdepends=('zinnia: hand-writing recognition support'
            'tegaki-models-zinnia-japanese: hand-writing recognition support')
source=(http://mozc.googlecode.com/files/mozc-${pkgver}.tar.bz2
        http://downloads.sourceforge.net/pnsft-aur/ken_all-${_zipcoderel}.zip
        http://downloads.sourceforge.net/pnsft-aur/jigyosyo-${_zipcoderel}.zip
        http://protobuf.googlecode.com/files/protobuf-${_protobuf_ver}.tar.bz2
        http://fcitx.googlecode.com/files/fcitx-mozc-${_patchver}.patch
)
sha1sums=('9c99333a3a46c190fe14afae573b2ddc2faab64a'
          '34491ce775f8860cffaa6ad2ae19dd714673b093'
          '426f57f1a312bd1acb2ac2517fa648d42ddf1f6f'
          'df5867e37a4b51fb69f53a8baf5b994938691d6d'
          '84d59bcc7432c92c7c3fe6f1c5b44ef0bc4bf88b')

qmake_check_v4() {
  if [[ -x "$1" ]]; then
    if echo `$1 -v 2>&1` | grep "Qt version 4\." >/dev/null 2>&1; then
      return 0
    fi
  fi
  return 1
}

build() {
  cd "$srcdir"
  ln -sf `which python2` ./python
  PATH="${srcdir}:${PATH}"

  cd "${srcdir}/${_pkgbase}-${pkgver}"

  rm unix/fcitx -rf
  patch -Np2 -i ${srcdir}/fcitx-mozc-${_patchver}.patch

  # Generate zip code seed
  msg "Generating zip code seed..."
  python2 dictionary/gen_zip_code_seed.py --zip_code="${srcdir}/KEN_ALL.CSV" --jigyosyo="${srcdir}/JIGYOSYO.CSV" >> data/dictionary/dictionary09.txt
  msg "Done."

  # Copy protobuf to be linked statically
  cp -rf "${srcdir}/protobuf-${_protobuf_ver}" protobuf/files

  msg "Starting make..."

  # Get make -j option from $MAKEFLAGS
  _jobs=`sed -n -e "s/.*--jobs=\([0-9]\+\).*/\1/p" -e "s/.*-j *\([0-9]\+\).*/\1/p" <<< "$MAKEFLAGS"`
  _jobs=${_jobs:-1}

  _targets="server/server.gyp:mozc_server gui/gui.gyp:mozc_tool "
  _targets+="unix/fcitx/fcitx.gyp:fcitx-mozc "

  # Checking Qt4 environments
  _qt4dir=""
  _qmnames="qmake-qt4 qmake4 qmake"

  # qt4 check: $QTDIR
  if [[ -z "$_qt4dir" && "$QTDIR" ]]; then
      for n in $_qmnames; do
            _qstr=${QTDIR}/bin/${n}
          if qmake_check_v4 "$_qstr"; then
          _qt4dir=`dirname $_qstr`
          break;
        fi
    done
      fi

  # qt4 check: pkg-config
  if [[ -z "$_qt4dir" ]]; then
      _str=`pkg-config QtCore --variable=exec_prefix 2>/dev/null`
          if [[ "$_str" ]]; then
        for n in $_qmnames; do
        _qstr=${_str}/bin/${n}
        if qmake_check_v4 "$_qstr"; then
          _qt4dir=`dirname $_qstr`
            break;
            fi
          done
      fi
        fi

  # qt4 check: PATH
    if [[ -z "$_qt4dir" ]]; then
        for n in $_qtnames; do
      _qstr=`which $n 2>/dev/null`
            if qmake_check_v4 "$_qstr"; then
            _qt4dir=`dirname $_qstr`
            break;
          fi
      done
        fi

  if [[ -z "$_qt4dir" ]]; then
      msg "'qmake' for Qt4 not found."
          exit 1
    else
        _qt4dir=${_qt4dir%%/bin}
  fi
    # End of checking Qt4 environments

  
  QTDIR=$_qt4dir python2 build_mozc.py gyp --channel_dev=0
  python2 build_mozc.py build_tools -c $_bldtype -j $_jobs
  python2 build_mozc.py build -c $_bldtype -j $_jobs $_targets

  # Extract license part of mozc
  head -n 28 server/mozc_server.cc > LICENSE
}

package() {
  cd "${srcdir}/${_pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/mozc_server "${pkgdir}/usr/lib/mozc/mozc_server"
  install    -m 755 out_linux/${_bldtype}/mozc_tool   "${pkgdir}/usr/lib/mozc/mozc_tool"
  install -d "${pkgdir}/usr/lib/mozc/documents/"
  install    -m 644 data/installer/*.html "${pkgdir}/usr/lib/mozc/documents/"

  install -D -m 644 LICENSE "${pkgdir}/usr/share/licenses/${_pkgbase}/LICENSE"

  for mofile in out_linux/${_bldtype}/obj/gen/unix/fcitx/po/*.mo
  do
    filename=`basename $mofile`
    lang=${filename/.mo/}
    install -D -m 644 "$mofile" "${pkgdir}/usr/share/locale/$lang/LC_MESSAGES/fcitx-mozc.mo"
  done

  install -D -m 755 out_linux/${_bldtype}/fcitx-mozc.so "${pkgdir}/usr/lib/fcitx/fcitx-mozc.so"
  install -D -m 644 unix/fcitx/fcitx-mozc.conf "${pkgdir}/usr/share/fcitx/addon/fcitx-mozc.conf"
  install -D -m 644 unix/fcitx/mozc.conf "${pkgdir}/usr/share/fcitx/inputmethod/mozc.conf"

  install -d "${pkgdir}/usr/share/fcitx/mozc/icon"
  install -m 644 data/images/product_icon_32bpp-128.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc.png"
  install -m 644 data/images/unix/ui-alpha_full.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-alpha_full.png"
  install -m 644 data/images/unix/ui-alpha_half.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-alpha_half.png"
  install -m 644 data/images/unix/ui-direct.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-direct.png"
  install -m 644 data/images/unix/ui-hiragana.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-hiragana.png"
  install -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-katakana_full.png"
  install -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-katakana_half.png"
  install -m 644 data/images/unix/ui-dictionary.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-dictionary.png"
  install -m 644 data/images/unix/ui-properties.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-properties.png"
  install -m 644 data/images/unix/ui-tool.png "${pkgdir}/usr/share/fcitx/mozc/icon/mozc-tool.png"
}
