# Maintainer: Piotr Gorski <sir_lucjan@bridgelinux.pl>
# Contributor: Piotr Gorski <sir_lucjan@bridgelinux.pl>

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null to enable them

# Tweak kernel options prior to a build via nconfig
_makenconfig=

# Modify kernel options via menuconfig
_makemenuconfig=

# Running with a 1000 HZ tick rate (vs the ARCH 300) is reported to solve the
# issues with the bfs/linux 3.1x and suspend. For more see:
# http://ck-hack.blogspot.com/2013/09/bfs-0441-311-ck1.html?showComment=1378756529345#c5266548105449573343
_1k_HZ_ticks=y

# NUMA is optimized for multi-socket motherboards.
# A single multi-core CPU actually runs slower with NUMA enabled.
# See, https://bugs.archlinux.org/task/31187
_NUMAdisable=y

# Compile ONLY probed modules
# As of mainline 2.6.32, running with this option will only build the modules
# that you currently have probed in your system VASTLY reducing the number of
# modules built and the build time to do it.
#
# WARNING - ALL modules must be probed BEFORE you begin making the pkg!
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: http://aur.archlinux.org/packages.php?ID=41689
# This PKGBUILD will call it directly to probe all the modules you have logged!
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed_db
_localmodcfg=

# Use the current kernel's .config file
# Enabling this option will use the .config of the RUNNING kernel rather than
# the ARCH defaults. Useful when the package gets updated and you already went
# through the trouble of customizing your config options.  NOT recommended when
# a new kernel is released, but again, convenient for package bumps.
_use_current=

# Alternative I/O scheduler by Paolo.
# Set this if you want it enabled globally i.e. for all devices in your system
# If you want it enabled on a device-by-device basis, leave this unset and see:
# https://wiki.archlinux.org/index.php/Linux-ck#How_to_Enable_the_BFQ_I.2FO_Scheduler
_BFQ_enable_=y

pkgname=linux-bridge-pl
true && pkgname=(linux-bridge-pl linux-bridge-pl-headers)
_kernelname=-bridge-pl
_srcname=linux-3.14
pkgver=3.14.3
pkgrel=2
arch=('i686' 'x86_64')
url="http://openlinux.pl"
license=('GPL2')
options=('!strip')
makedepends=('kmod' 'inetutils' 'bc')
_uksmvernel="0.1.2.2"
_uksmname="v3.14"
_bfspatch="3.14-sched-bfs-447.patch"
_bfqpath="http://algogroup.unimo.it/people/paolo/disk_sched/patches/3.14.0-v7r3"
_bfsrel=447
_gcc_patch="enable_additional_cpu_optimizations_for_gcc.patch"

source=("http://www.kernel.org/pub/linux/kernel/v3.x/${_srcname}.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v3.x/patch-${pkgver}.xz"
        "http://kerneldedup.org/download/uksm/${_uksmvernel}/uksm-${_uksmvernel}-for-${_uksmname}.patch"
        "http://ck.kolivas.org/patches/bfs/3.0/3.14/${_bfspatch}"
        "${_bfqpath}/0001-block-cgroups-kconfig-build-bits-for-BFQ-v7r3-3.14.patch"
        "${_bfqpath}/0002-block-introduce-the-BFQ-v7r3-I-O-sched-for-3.14.patch"
        "${_bfqpath}/0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-v7r3-for-3.14.0.patch"
         "http://repo-ck.com/source/gcc_patch/${_gcc_patch}.gz"
        'linux-bridge-pl.preset'
        'change-default-console-loglevel.patch'
        'config'
        'config.x86_64'
        '0001-Bluetooth-allocate-static-minor-for-vhci.patch'
        '0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch'
        '0003-module-remove-MODULE_GENERIC_TABLE.patch'
        '0004-fs-Don-t-return-0-from-get_anon_bdev.patch'
        '0005-Revert-Bluetooth-Enable-autosuspend-for-Intel-Blueto.patch'
        '0006-genksyms-fix-typeof-handling.patch'
        '0010-iwlwifi-mvm-delay-enabling-smart-FIFO-until-after-be.patch'
        '0011-kernfs-fix-removed-error-check.patch'
        '0012-fix-saa7134.patch'
        '0013-net-Start-with-correct-mac_len-in-skb_network_protocol.patch'
        '0014-fix-rtl8192se.patch'
        '0015-fix-xsdt-validation.patch')
        
prepare() {
    cd "${srcdir}/${_srcname}"

    ### add upstream patch
    msg "Patching kernel patch"
    patch -Np1 -i "${srcdir}/patch-${pkgver}"

    ### set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
    # remove this when a Kconfig knob is made available by upstream
    msg "Patching set DEFAULT_CONSOLE_LOGLEVEL to 4"
    patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"

 
 # Fix vhci warning in kmod (to restore every kernel maintainer's sanity)
    patch -p1 -i "${srcdir}/0001-Bluetooth-allocate-static-minor-for-vhci.patch"

    # Fix atkbd aliases
    patch -p1 -i "${srcdir}/0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch"
    patch -p1 -i "${srcdir}/0003-module-remove-MODULE_GENERIC_TABLE.patch"

    # Fix various bugs caused by rootfs having FSID 0
    # See http://www.spinics.net/lists/kernel/msg1716924.html
    patch -p1 -i "${srcdir}/0004-fs-Don-t-return-0-from-get_anon_bdev.patch"

    # Disable usb autosuspend for intel btusb
    # See http://www.spinics.net/lists/kernel/msg1716461.html
    # Until a solution is found, make sure the driver leaves autosuspend alone
    patch -p1 -i "${srcdir}/0005-Revert-Bluetooth-Enable-autosuspend-for-Intel-Blueto.patch"

    # Fix generation of symbol CRCs
    # http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=dc53324060f324e8af6867f57bf4891c13c6ef18
    patch -p1 -i "${srcdir}/0006-genksyms-fix-typeof-handling.patch"

    # Fix the use of code32_start in the EFI boot stub
    # http://permalink.gmane.org/gmane.linux.kernel/1679881
    


    # https://git.kernel.org/cgit/linux/kernel/git/iwlwifi/iwlwifi-fixes.git/commit/?id=12f853a89e29f50b17698e17e73c328a35f1498d
    # FS#39815
    patch -p1 -i "${srcdir}/0010-iwlwifi-mvm-delay-enabling-smart-FIFO-until-after-be.patch"

    # fix Xorg crash with i810 chipset due to wrong removed error check
    # References: http://lkml.kernel.org/g/533D01BD.1010200@googlemail.com
    patch -Np1 -i "${srcdir}/0011-kernfs-fix-removed-error-check.patch"

    # fix saa7134 video
    # https://bugs.archlinux.org/task/39904
    # https://bugzilla.kernel.org/show_bug.cgi?id=73361
    patch -Np1 -i "${srcdir}/0012-fix-saa7134.patch"

 
# fix tun/openvpn performance
	# https://bugs.archlinux.org/task/40089
	# https://bugzilla.kernel.org/show_bug.cgi?id=74051
	patch -Np1 -i "${srcdir}/0013-net-Start-with-correct-mac_len-in-skb_network_protocol.patch"
 
 
    # fix rtl8192se authentification
    # https://bugs.archlinux.org/task/39858
    # https://bugzilla.kernel.org/show_bug.cgi?id=74541
    patch -Np1 -i "${srcdir}/0014-fix-rtl8192se.patch"

    # fix xsdt validation bug
    # https://bugs.archlinux.org/task/39811
    # https://bugzilla.kernel.org/show_bug.cgi?id=73911
    patch -Np1 -i "${srcdir}/0015-fix-xsdt-validation.patch"





# Patch source to enable more gcc CPU optimizatons via the make nconfig
	patch -Np1 -i "${srcdir}/${_gcc_patch}"



# Patch source with BFS patches
  msg "Patching source with BFS patches"
  patch -Np1 -i "${srcdir}/${_bfspatch}"
  

  msg "Patching source with BFQ patches"
	for p in $(ls ${srcdir}/000{1,2,3}-block*.patch); do
		patch -Np1 -i "$p"
	done


### Patch source with UKSM
    msg "Patching with UKSM"
    cp "${srcdir}/uksm-${_uksmvernel}-for-${_uksmname}.patch" ./
    #patch -Np0 -i "${srcdir}/uksm-${_uksmvernel}-for-${_uksmname}.patch.patch"
    patch -Np1 -i ./uksm-${_uksmvernel}-for-${_uksmname}.patch

    
    
    
    ### Clean tree and copy ARCH config over
    msg "Running make mrproper to clean source tree"
    make mrproper

    if [ "${CARCH}" = "x86_64" ]; then
	cat "${srcdir}/config.x86_64" > ./.config
    else
	cat "${srcdir}/config" > ./.config
    fi

    ### Optionally use running kernel's config
    if [ -n "$_use_current" ]; then
	if [[ -s /proc/config.gz ]]; then
	    msg "Extracting config from /proc/config.gz..."
	    # modprobe configs
	    zcat /proc/config.gz > ./.config
	else
	    warning "You kernel was not compiled with IKCONFIG_PROC!"
	    warning "You cannot read the current config!"
	    warning "Aborting!"
	    exit
	fi
    fi

    if [ "${_kernelname}" != "" ]; then
	sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
	sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
    fi

 ### UKSM to be enabled
    sed -i -e s'/CONFIG_KSM=y/CONFIG_KSM=y\nCONFIG_UKSM=y/' ./.config



    # disable NUMA since 99.9% of users do not have multiple CPUs but do have multiple cores in one CPU
    if [ -n "$_NUMA_off" ]; then
	if [ "${CARCH}" = "x86_64" ]; then
	    sed -i -e 's/CONFIG_NUMA=y/# CONFIG_NUMA is not set/' \
		    -i -e '/CONFIG_AMD_NUMA=y/d' \
		    -i -e '/CONFIG_X86_64_ACPI_NUMA=y/d' \
		    -i -e '/CONFIG_NODES_SPAN_OTHER_NODES=y/d' \
		    -i -e '/# CONFIG_NUMA_EMU is not set/d' \
		    -i -e '/CONFIG_NODES_SHIFT=6/d' \
		    -i -e '/CONFIG_NEED_MULTIPLE_NODES=y/d' \
		    -i -e '/CONFIG_USE_PERCPU_NUMA_NODE_ID=y/d' \
		    -i -e '/CONFIG_ACPI_NUMA=y/d' ./.config
	fi
    fi

    # set extraversion to pkgrel
    sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

    # don't run depmod on 'make install'. We'll do this ourselves in packaging
    sed -i '2iexit 0' scripts/depmod.sh
}

build() {
    cd "${srcdir}/${_srcname}"

    # get kernel version
    msg "Running make prepare for you to enable patched options of your choosing"
    make prepare

    ### Optionally load needed modules for the make localmodconfig
    if [ -n "$_localmodcfg" ]; then
	msg "If you have modprobe_db installed, running it in recall mode now"
	if [ -e /usr/bin/modprobed_db ]; then
	    [[ ! -x /usr/bin/sudo ]] && echo "Cannot call modprobe with sudo. Install via pacman -S sudo and configure to work with this user." && exit 1
	    sudo /usr/bin/modprobed_db recall
	fi
	msg "Running Steven Rostedt's make localmodconfig now"
	make localmodconfig
    fi

    if [ -n "$_makenconfig" ]; then
	msg "Running make nconfig"
	make nconfig
    fi
    
    msg "Running make bzImage and modules"
    make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package_linux-bridge-pl() {
    _Kpkgdesc='Linux Kernel and modules with the UKSM patchset and BFS scheduler'
    pkgdesc="${_Kpkgdesc}"
    depends=('coreutils' 'linux-firmware' 'mkinitcpio>=0.7')
    optdepends=('crda' 'nvidia-uksm' 'modprobed_db')
    provides=("linux-bridge-pl=${pkgver}" "linux=${pkgver}")
    conflicts=('kernel26-uksm')
    replaces=('kernel26-uksm')
    backup=("etc/mkinitcpio.d/linux-bridge-pl.preset")
    install=linux-bridge-pl.install

    cd "${srcdir}/${_srcname}"

    KARCH=x86

    # get kernel version
    _kernver="$(make LOCALVERSION= kernelrelease)"
    _basekernel=${_kernver%%-*}
    _basekernel=${_basekernel%.*}

    mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
    make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
    cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-linux-bridge-pl"

    # add vmlinux
    install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

    # set correct depmod command for install
    cp -f "${startdir}/${install}" "${startdir}/${install}.pkg"
    true && install=${install}.pkg
    sed \
    -e "s/KERNEL_NAME=.*/KERNEL_NAME=-bridge-pl/g" \
    -e "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -i "${startdir}/${install}"

    # install mkinitcpio preset file for kernel
    install -D -m644 "${srcdir}/linux-bridge-pl.preset" "${pkgdir}/etc/mkinitcpio.d/linux-bridge-pl.preset"
    sed \
    -e "1s|'linux.*'|'linux-bridge-pl'|" \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-linux-bridge-pl\"|" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-linux-bridge-pl.img\"|" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-linux-bridge-pl-fallback.img\"|" \
    -i "${pkgdir}/etc/mkinitcpio.d/linux-bridge-pl.preset"

    # remove build and source links
    rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
    # remove the firmware
    rm -rf "${pkgdir}/lib/firmware"
    # gzip -9 all modules to save 100MB of space
    find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
    # make room for external modules
    ln -s "../extramodules-${_basekernel}${_kernelname:bridge-pl}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
    # add real version for building modules and running depmod from post_install/upgrade
    mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:ukdm}"
    echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:bridge-pl}/version"

    # Now we call depmod...
    depmod -b "$pkgdir" -F System.map "$_kernver"

    # move module tree /lib -> /usr/lib
    mv "$pkgdir/lib" "$pkgdir/usr"
}

package_linux-bridge-pl-headers() {
    _Hpkgdesc='Header files and scripts to build modules for linux-bridge-pl.'
    pkgdesc="${_Hpkgdesc}"
    provides=("linux-bridge-pl-headers=${pkgver}" "linux-headers=${pkgver}")
    conflicts=('kernel26-uksm-headers')
    replaces=('kernel26-uksm-headers')

    install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

    cd "${pkgdir}/usr/lib/modules/${_kernver}"
    ln -sf ../../../src/linux-${_kernver} build

    cd "${srcdir}/${_srcname}"
    install -D -m644 Makefile \
	    "${pkgdir}/usr/src/linux-${_kernver}/Makefile"
    install -D -m644 kernel/Makefile \
	    "${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile"
    install -D -m644 .config \
	    "${pkgdir}/usr/src/linux-${_kernver}/.config"

    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include"

    for i in acpi asm-generic config crypto drm generated keys linux math-emu \
	    media net pcmcia scsi sound trace uapi video xen; do
	cp -a include/${i} "${pkgdir}/usr/src/linux-${_kernver}/include/"
    done

    # copy arch includes for external modules
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/x86"
    cp -a arch/x86/include "${pkgdir}/usr/src/linux-${_kernver}/arch/x86/"

    # copy files necessary for later builds, like nvidia and vmware
    cp Module.symvers "${pkgdir}/usr/src/linux-${_kernver}"
    cp -a scripts "${pkgdir}/usr/src/linux-${_kernver}"

    # fix permissions on scripts dir
    chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/scripts"
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions"

    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel"

    cp arch/${KARCH}/Makefile "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"

    if [ "${CARCH}" = "i686" ]; then
	    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"
    fi

    cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel/"

    # add headers for lirc package
    # pci
    for i in bt8xx cx88 saa7134; do
	    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
	    cp -a drivers/media/pci/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
    done
    # usb
    for i in cpia2 em28xx pwc sn9c102; do
	    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
	    cp -a drivers/media/usb/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
    done
    # i2c
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c"
    cp drivers/media/i2c/*.h  "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"
    for i in cx25840; do
	    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
	    cp -a drivers/media/i2c/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
    done

    # add docbook makefile
    install -D -m644 Documentation/DocBook/Makefile \
	    "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"

    # add dm headers
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"
    cp drivers/md/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"

    # add inotify.h
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/linux"
    cp include/linux/inotify.h "${pkgdir}/usr/src/linux-${_kernver}/include/linux/"

    # add wireless headers
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"
    cp net/mac80211/*.h "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"

    # add dvb headers for external modules
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core"
    cp drivers/media/dvb-core/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core/"
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"
    [[ -e include/config/dvb/ ]] && cp include/config/dvb/*.h "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/" 

    # add dvb headers
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
    cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
    cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"

    # add dvb headers
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb"
    cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb/"
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends"
    cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners"
    cp drivers/media/tuners/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners/"

    # add xfs and shmem for aufs building
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs"
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/mm"
    cp fs/xfs/xfs_sb.h "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h"

    # copy in Kconfig files
    for i in `find . -name "Kconfig*"`; do
	    mkdir -p "${pkgdir}"/usr/src/linux-${_kernver}/`echo ${i} | sed 's|/Kconfig.*||'`
	    cp ${i} "${pkgdir}/usr/src/linux-${_kernver}/${i}"
    done

    chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}"
    find "${pkgdir}/usr/src/linux-${_kernver}" -type d -exec chmod 755 {} \;

    # strip scripts directory
    find "${pkgdir}/usr/src/linux-${_kernver}/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
	    *application/x-sharedlib*) # Libraries (.so)
		    /usr/bin/strip ${STRIP_SHARED} "${binary}";;
	    *application/x-archive*) # Libraries (.a)
		    /usr/bin/strip ${STRIP_STATIC} "${binary}";;
	    *application/x-executable*) # Binaries
		    /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
    done

    # remove unneeded architectures
    rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}

# Global pkgdesc and depends are here so that they will be picked up by AUR
pkgdesc='Linux Kernel and modules with the UKSM patchset and BFS scheduler'

sha512sums=('5730d83a7a81134c1e77c0bf89e42dee4f8251ad56c1ac2be20c59e26fdfaa7bea55f277e7af156b637f22e1584914a46089af85039177cb43485089c74ac26e'
            '1da62f5140965befb39f9565564cb00de189dd83b279632be50d8b1b4a9c59279907435b5d7f3c2fd47c13ba92468b23187f2d0433c7fbb5578f12359ed5584a'
            'f741c2c3f593fa6f3c25e1121aa921182bd0c8cdb64478e666e34f9c0093f216d8840e99176b0f473d19bfb2da47d6838a96d5616f8cddc7e2e107e3de77b76c'
            'b8ee8d42eeab19c4229a7cd391af6b732c2e8a179f5ed969f1cc8863dfed68d09a6c6e61860df103a5c9535768d8852f7ce2acdc0618b529acc98e2e33be9b0e'
            '310eca4fdacd82a18f07de5700ad5fcf572f9cfbb05f0c9475d108908c9401aa884ab2c6f5912a25caa88a32104c7b313f05fa03d91cdc89f9827e88573c48eb'
            'beba684e0ae752294c4aed74f1c7abc3568ca8f5640213f39400ea2005ed90aee8770a2f2a27fc95aa109c61cb52ea25c488afad53dffa1b649fec8360ecfe0d'
            '324eddff5f2b5e838d8aad92be1ccd9b99d8f3e3f10d2dd6ce91aa2e0b6b5088228a61ca3004ef8ab37bdf67ec27af7d59638648bd2bd09e6fde2924b531f7e6'
            'a149a6c62c6654b5efe76308037d37b9421114e6257343a22eae84f4489e210927d1db16e5742fd04bb4eea5c8a9c1e541d9bbf82d495fffaae9d645a5fd5d3f'
            '796a262faa081a8a3decca67c734f989f1394aa2f0baad6dc0ce68aebd3994689726c6b301ead4174ecf86b50c5e40c22cffc8542282bbcef01aebd2526dcc85'
            '502192b5ce94c8254205f5ddb85bf50c5f1e78c768817b10dca3a7716a8c59d5e093842631acb51e3805cbf85522e0a9200942656f11bbb4ea1b7d61e24ddd78'
            '59906ec5dfe9d1ce62ee7d1752a0511dbe67193ed387f1505f70ae0a2167a4dafabae89daffb41c95ada6ebafe53640e62bebd127050579b19a2ef045e5f4c28'
            'f28cb774ed9e015de889d17718c4780be95758c716d3822a1bcc7ab2763347d978d7c241e44ff9d5af70672baa94ef36ce90580bb6a8ea8112c314383abc1960'
            'f26306c173e3fc35ae6df4c43e9ddbac33845dcc1fb0def612fe370c2d7b8f904b4c70d267eb52717ade879d1e289695b9e971dfcb1c963dac4c6e2fb5230453'
            'da69065f317212c7937f5c3110afdef6006da7756b0a2a98c4bff94db12eb503dc89040aa3cd7a1655ba1b0641f47dda4e60933309e231eaecbe9bd79cb06ebd'
            '4b9fa6afdd1f4f4f6a3a439380cff3376ef33e782aac0ae92421f4b7c40140d57a04d7bc57dfd9fb59fdefb3a0a55fe7e7d6022314b11ef454a1cae4b75cf264'
            '61addb73b2811a369b72ea097e310c63853f219d1384ea0e2cd2bc7b8389163e2e5679a9a198fe0977017658c18a90be0f73aaf72e9b829cc4a802a4fe7cfba0'
            'f1c70f387308dc46bf72d8ee2166ae27e0657405c6aed4bf285112caa8503383b597787dc66e79d502058ccb05b52999df03a3cc4c27456f38e30684f1c0ca44'
            'fdb67e9956d9af1518d0198b86b13150b28f43dd28eb52222a9c43699f7304cd1a56d7f421a0690fa4c0d2c266fd5504da9d6217f83a42d05f35b713fd85e2dd'
            '21ff02db8215e6ba38a0025fed91fb4f8a24d1639e9809529de3a29d93d334d1feff5faf571f809f421b8d180ee4eec43e9da9ca73360d5be433c7dfaaf97520'
            'bae01b3cadbb5be30cdf32ac5bbbb5264300fe5d8dd05d4aaad1a29285179562484702d42dee02df6b3206dde4be986c14ecfc9ba75646d854fa08c91521c346'
            '6e59caeff81a9d1370918c1fa55a85ac6f0ba2b4600ce0b74638c0b9d90242e0185af399b7d153c22c772c8be04518c006331e5b2cfaa0ea6ea09978978a1ed1'
            '064e679dc2df2f33cbfe3f719622976f827770e594d5ad28d5cf138482860ca1b9abf21614f9da070274297ea579bda32e2ac3a26e590b213a41116b4bf09d69'
            '87c714687a0dca71f0462a0462d6d7125bf58d1d4e2b7e5bc484b137906c3ef8e2c97d097159264b1d1757fbbe55ffdb17304900beccd3088a4c81f29f97e8e5'
            '5ff4aac8e32b3b65788c150f36043b761729deead93a5618cee61bba8637c9e4ac7d9d55d30c047e266a55dfe9ae84bcdf1d9968e2643eb9bba5a45cdc5c9cbc')

