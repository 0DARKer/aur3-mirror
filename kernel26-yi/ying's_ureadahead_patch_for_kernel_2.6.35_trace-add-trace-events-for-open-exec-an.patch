From: ying
Subject: [PATCH] trace: add trace events for open(), exec() and uselib()

This patch uses TRACE_EVENT to add tracepoints for the open(),
exec() and uselib() syscalls so that ureadahead can cheaply trace
the boot sequence to determine what to read to speed up the next.

It's not upstream because it will need to be rebased onto the syscall
trace events whenever that gets merged, and is a stop-gap.

Edited by ying from Arch Linux to work with kernel 2.6.35

diff -crB alt/fs/exec.c linux-2.6.35/fs/exec.c
*** alt/fs/exec.c	2010-08-02 00:11:14.000000000 +0200
--- linux-2.6.35/fs/exec.c	2010-08-20 16:15:03.803333503 +0200
***************
*** 56,61 ****
--- 56,63 ----
  #include <linux/fs_struct.h>
  #include <linux/pipe_fs_i.h>
  
+ #include <trace/events/fs.h>
+ 
  #include <asm/uaccess.h>
  #include <asm/mmu_context.h>
  #include <asm/tlb.h>
***************
*** 131,136 ****
--- 133,142 ----
  
  	fsnotify_open(file->f_path.dentry);
  
+ 	tmp = getname(library);
+ 	trace_uselib(tmp);
+ 	putname(library);
+ 
  	error = -ENOEXEC;
  	if(file->f_op) {
  		struct linux_binfmt * fmt;
***************
*** 685,690 ****
--- 691,698 ----
  
  	fsnotify_open(file->f_path.dentry);
  
+ 	trace_open_exec(name);
+ 
  	err = deny_write_access(file);
  	if (err)
  		goto exit;
Nur in linux-2.6.35/fs: exec.c.orig.
diff -crB alt/fs/open.c linux-2.6.35/fs/open.c
*** alt/fs/open.c	2010-08-02 00:11:14.000000000 +0200
--- linux-2.6.35/fs/open.c	2010-08-20 16:51:49.360000169 +0200
***************
*** 32,37 ****
--- 32,40 ----
  
  #include "internal.h"
  
+ #define CREATE_TRACE_POINTS
+ #include <trace/events/fs.h>
+ 
  int do_truncate(struct dentry *dentry, loff_t length, unsigned int time_attrs,
  	struct file *filp)
  {
***************
*** 890,895 ****
--- 893,899 ----
  			} else {
  				fsnotify_open(f->f_path.dentry);
  				fd_install(fd, f);
+ 				trace_do_sys_open(tmp, flags, mode);
  			}
  		}
  		putname(tmp);

diff --git a/include/trace/events/fs.h b/include/trace/events/fs.h
new file mode 100644
index 0000000..e967c55
--- /dev/null
+++ b/include/trace/events/fs.h
@@ -0,0 +1,71 @@
+#undef TRACE_SYSTEM
+#define TRACE_SYSTEM fs
+
+#if !defined(_TRACE_FS_H) || defined(TRACE_HEADER_MULTI_READ)
+#define _TRACE_FS_H
+
+#include <linux/fs.h>
+#include <linux/tracepoint.h>
+
+TRACE_EVENT(do_sys_open,
+
+	TP_PROTO(char *filename, int flags, int mode),
+
+	TP_ARGS(filename, flags, mode),
+
+	TP_STRUCT__entry(
+		__string(	filename, filename		)
+		__field(	int, flags			)
+		__field(	int, mode			)
+	),
+
+	TP_fast_assign(
+		__assign_str(filename, filename);
+		__entry->flags = flags;
+		__entry->mode = mode;
+	),
+
+	TP_printk("\"%s\" %x %o",
+		  __get_str(filename), __entry->flags, __entry->mode)
+);
+
+TRACE_EVENT(uselib,
+
+	TP_PROTO(char *filename),
+
+	TP_ARGS(filename),
+
+	TP_STRUCT__entry(
+		__string(	filename, filename		)
+	),
+
+	TP_fast_assign(
+		__assign_str(filename, filename);
+	),
+
+	TP_printk("\"%s\"",
+		  __get_str(filename))
+);
+
+TRACE_EVENT(open_exec,
+
+	TP_PROTO(char *filename),
+
+	TP_ARGS(filename),
+
+	TP_STRUCT__entry(
+		__string(	filename, filename		)
+	),
+
+	TP_fast_assign(
+		__assign_str(filename, filename);
+	),
+
+	TP_printk("\"%s\"",
+		  __get_str(filename))
+);
+
+#endif /* _TRACE_FS_H */
+
+/* This part must be outside protection */
+#include <trace/define_trace.h>

Nur in linux-2.6.35/fs: open.c.orig.
