# Maintainer: Sam S. <smls75@gmail.com>

pkgname=capsized-hib
pkgver=0_20130530
_hibver=05302013
pkgrel=1
pkgdesc='A science-fiction action platformer (Humble Bundle version)'
url='http://www.capsizedgame.com/'
arch=('i686' 'x86_64')
license=('custom:commercial')
depends=('libogg' 'openal' 'libtheora' 'libvorbis')
makedepends=('imagemagick')
source=('capsized-hib.desktop')
md5sums=('a6f5bc2ddf20690545cf095d59eec37b')
options=('!strip' '!upx')
PKGEXT='.pkg.tar'

_installer="capsized-${_hibver}-bin"
_installer_md5='0d05d11ce1697535d2cfc9ad6e66f643';

build() {
  cd $srcdir

  # Get installer
  _get_local_source "${_installer}" --md5 "${_installer_md5}" || {
    error "Unable to find the game installer. Please download it from your
           Humble Bundle page, and place it into one of the above locations."
    exit 1; }

  # Extract installer
  msg "Starting setup..."
  rm -rf data
  while read line; do echo -n '.'; done < <(  # show progress as dots
    bsdtar -xvf "${_installer}" data 2>&1
  ); echo

  # Remove files for wrong architecture
  [ $CARCH == "i686"   ] && rm -rf "data/"{lib64,NePlusUltra.bin.x86_64}
  [ $CARCH == "x86_64" ] && rm -rf "data/"{lib,NePlusUltra.bin.x86}

  # Remove bundled libraries (use distro versions instead)
  rm "data/lib"*/{libogg.so.0,libopenal.so.1,libtheora.so.0,libtheoradec.so.1}
  rm "data/lib"*/{libvorbis.so.0,libvorbisfile.so.3}
}

package() {
  cd $srcdir
  _target="/opt/Capsized"

  # Install desktop entry
  install -Dm644 "${pkgname}.desktop" \
                 "${pkgdir}/usr/share/applications/${pkgname}.desktop"

  # Install icon
  convert "data/Capsized.bmp" "capsized.png"
  install -Dm644 "capsized.png" "${pkgdir}/usr/share/pixmaps/capsized.png"

  # Install game files
  mkdir -p "${pkgdir}${_target}"
  mv -T "data" "${pkgdir}${_target}"
  
  # Install launch script
  [ $CARCH == "i686" ] && _arch='x86' || _arch='x86_64'
  echo -e "#!/bin/sh\ncd ${_target} && ./NePlusUltra.bin.${_arch}" > "launcher.sh"
  install -Dm755 "launcher.sh" "${pkgdir}/usr/bin/capsized"
}


###### HELPER FUNCTIONS ######

# Locates a file or folder provided by the user, and symlinks it into $srcdir
_get_local_source() {
  msg "Looking for '$1'..."; rm -f "$srcdir/$1"
  declare -A _search=(['build dir']="$startdir"
                      ['$LOCAL_PACKAGE_SOURCES']="$LOCAL_PACKAGE_SOURCES")
  for _key in "${!_search[@]}"; do local _dir="${_search["$_key"]}"
    echo -n "    - in $_key [${_dir:-<undefined>}] ... ";
    if [[ -z "$_dir" || ! -e "$_dir/$1" ]]; then
      echo "NOT FOUND"
    elif [[ -n $2 && "$(${2#--}sum "$_dir/$1"|awk '{print $1}')" != $3 ]]; then
      echo "CHECKSUM FAILED";
    else
      echo "FOUND"; ln -sfT "$(readlink -f "$_dir/$1")" "$srcdir/$1"; break; fi
  done
  if [ ! -e "$srcdir/$1" ]; then return 1; fi
}
