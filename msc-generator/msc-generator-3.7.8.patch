diff -ru msc-generator.orig/configure.ac msc-generator/configure.ac
--- msc-generator.orig/configure.ac	2014-04-14 15:54:44.000000000 +0200
+++ msc-generator/configure.ac	2014-05-06 16:50:41.709640381 +0200
@@ -34,7 +34,6 @@
 
 AC_CONFIG_FILES([
     Makefile
-    doc/Makefile
     src/Makefile])
 
 AC_OUTPUT
diff -ru msc-generator.orig/Makefile.am msc-generator/Makefile.am
--- msc-generator.orig/Makefile.am	2012-03-26 17:30:47.000000000 +0200
+++ msc-generator/Makefile.am	2014-05-06 16:17:59.612853845 +0200
@@ -1,3 +1,3 @@
-SUBDIRS = src doc
+SUBDIRS = src
 CLEANFILES = config.log
 EXTRA_DIST =
diff -ru msc-generator.orig/src/language.yy msc-generator/src/language.yy
--- msc-generator.orig/src/language.yy	2014-04-14 15:54:44.000000000 +0200
+++ msc-generator/src/language.yy	2014-05-06 16:25:22.183358837 +0200
@@ -193,14 +193,14 @@
 //redefine default loc action for CSH
 #define YYLLOC_DEFAULT(Current, Rhs, N)                     \
     do                                                      \
-        if (YYID (N)) {                                     \
+        if (N) {                                     \
             (Current).first_pos = YYRHSLOC(Rhs,1).first_pos;\
             (Current).last_pos  = YYRHSLOC(Rhs,N).last_pos; \
         } else {                                            \
             (Current).first_pos = (Current).last_pos =      \
                 YYRHSLOC (Rhs, 0).last_pos;                 \
         }                                                   \
-    while (YYID (0))
+    while (0)
 
 /* yyerror
  *  Error handling function.  Do nothing for CSH
diff -ru msc-generator.orig/src/stringparse.cpp msc-generator/src/stringparse.cpp
--- msc-generator.orig/src/stringparse.cpp	2014-04-14 15:54:45.000000000 +0200
+++ msc-generator/src/stringparse.cpp	2014-05-06 16:45:07.956823501 +0200
@@ -236,7 +236,7 @@
  * - a lone '\' at the end of the string (SOLO_ESCAPE)
  */
 StringFormat::EEscapeType StringFormat::ProcessEscape(
-	const char * const input, unsigned &length,
+	const char * const input, size_t &length,
 	bool resolve, bool apply, string *replaceto, const StringFormat *basic,
 	Msc *msc, bool references, FileLineCol *linenum, bool sayIgnore)
 {
@@ -756,7 +756,7 @@
     const size_t len = strlen(text);
     while (pos<len) {
         EColorSyntaxType color = COLOR_NORMAL;
-        unsigned length;
+        size_t length;
         switch (sf.ProcessEscape(text+pos, length)) {
         case NUMBERING_FORMAT:
         case NUMBERING:
@@ -822,7 +822,7 @@
     StringFormat sf;
     string ignoreText = ignore?" Ignoring it.":"";
     while(text.length()>pos && text[pos]) {
-        unsigned length;
+        size_t length;
         FileLineCol beginning_of_escape = linenum;
         switch (sf.ProcessEscape(text.c_str()+pos, length, true, false, &replaceto, 
                                  basic, msc, references, &linenum, ignore)) {
@@ -877,7 +877,7 @@
     string::size_type pos = 0;
 	const string::size_type text_length = strlen(text);
     while (pos < text_length) {
-        unsigned length;
+        size_t length;
 		if (NUMBERING_FORMAT == sf.ProcessEscape(text+pos, length))
             return (int)pos;
         pos += length;
@@ -891,7 +891,7 @@
     StringFormat sf;
     unsigned pos = 0;
     while (pos < text.length() && text[pos]) {
-        unsigned length;
+        size_t length;
         if (FORMATTING_OK == sf.ProcessEscape(text.c_str()+pos, length))
             if (text[pos]=='\\' && text[pos+1]=='\x01') {
                 text.erase(pos, length);
@@ -907,7 +907,7 @@
     StringFormat sf;
     unsigned pos = 0;
     while (pos < text.length() && text[pos]) {
-        unsigned length;
+        size_t length;
         switch (sf.ProcessEscape(text.c_str()+pos, length)) {
         case NON_FORMATTING:
         case NON_ESCAPE:
@@ -1515,7 +1515,7 @@
     format.Apply(line); //eats away initial formatting, ensures we do not start with escape
     startFormat = format;
     size_t pos = 0;
-    unsigned length;
+    size_t length;
     string replaceto;
     string fragment;
     while (line.length()>pos) {
@@ -1547,7 +1547,7 @@
 {
     StringFormat format(startFormat);
     size_t pos = 0;
-    unsigned length;
+    size_t length;
     string replaceto;
     string ret;
 
@@ -1569,7 +1569,7 @@
 {
     StringFormat format(startFormat);
     size_t pos = 0;
-    unsigned length;
+    size_t length;
     string replaceto;
     string fragment;
 
@@ -1599,7 +1599,7 @@
 {
     clear();
     size_t pos = 0, line_start = 0;
-    unsigned length=0;
+    size_t length=0;
     while (pos < input.length() && input[pos]) {
         bool hard_line_break = false; //=false is just there to supress a warning
         //find next new line
@@ -1653,7 +1653,7 @@
     do {
         while (pos < at(lnum).line.length() && at(lnum).line[pos]) {
             string replaceto;
-            unsigned length;
+            size_t length;
             switch (running_format.ProcessEscape(at(lnum).line.c_str()+pos, length, 
                                                  true, false, &replaceto, 
                                                  &at(0).startFormat)) {
diff -ru msc-generator.orig/src/stringparse.h msc-generator/src/stringparse.h
--- msc-generator.orig/src/stringparse.h	2014-04-14 15:54:45.000000000 +0200
+++ msc-generator/src/stringparse.h	2014-05-06 16:39:17.113850317 +0200
@@ -141,7 +141,7 @@
         NUMBERING_FORMAT, ///<A replacement for a numbering format token (such as "abc" or "roman")
         SOLO_ESCAPE    ///<A single backslash "\"
     };
-    EEscapeType ProcessEscape(const char *input, unsigned &length,
+    EEscapeType ProcessEscape(const char *input, size_t &length,
                               bool resolve=false, bool apply=false, string *replaceto=NULL, 
                               const StringFormat *basic=NULL,
                               Msc *msc=NULL, bool references=false, 
