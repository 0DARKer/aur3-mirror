# Maintainer: Felix Becker <felix )dot( becker (at( zih )dot) tu-dresden |dot| de>.

pkgname="auto-07p"
pkgver="0.9.1"
pkgrel="27"
pkgdesc="Software for continuation and bifurcation problems in ordinary differential equations. Release 07P (strain from 2007, the newest as of 2012-05-20). To compile with debug information, set environment variable '_AUTO_DEBUG' to 'yes' before building."
arch=('i686' 'x86_64')
url='http://cmvl.cs.concordia.ca/auto/'
depends=('bash' 'gcc-fortran' 'gcc' 'python') # 'gcc-fortran' is needed in the runtime for compilation. 'gcc' is also needed, if the input files are C-files.
makedepends=('gcc-fortran' 'gcc')
optdepends=('python-matplotlib: For python interface.'
            'ipython: For python interface.'
            'lesstif: For GUI94.'
            "openmotif: For GUI94. ('openmotif' can be used instead of 'lesstif')"
            'xterm: For PLAUT plotting interface.'
            "soxt: For PLAUT04 plotting interface (enable compilation of 'plaut04' by setting the environment variable '_WITH_PLAUT04' to 'yes')."
            "soqt: For PLAUT04 plotting interface (enable compilation of 'plaut04' by setting the environment variable '_WITH_PLAUT04' to 'yes'). ('soqt' can be used instead of 'soxt'. If using 'soqt', maybe one has to change '--disable-plaut04-qt' to '--enable-plaut04-qt' in the options to the 'configure'-script in the 'PKGBUILD'.)" 
            "coin: For plaut04 plotting interface (enable compilation of 'plaut04' by setting the environment variable '_WITH_PLAUT04' to 'yes')."
            "inventor: For plaut04 plotting interface (enable compilation of 'plaut04' by setting the environment variable '_WITH_PLAUT04' to 'yes'). ('inventor' can be used instead of 'coin', but 'coin' (Coin3D) is recommended due to rendering issues (see AUTO documentation).)"
            'openmpi: For MPI message passing (parallel computation).'
            "texlive-bin: For compiling the manual (enable compilation of documentation by setting the environment variable '_BUILD_DOC' to 'yes')."
            "transfig: For compiling the manual (enable manual compiling in PKGBUILD (enable compilation of documentation by setting the environment variable '_BUILD_DOC' to 'yes')).")  ### Note: Some of these are optional at build time, but once a feature is build in (by './configure' automatically detecting the corresponding libraries), the packages are required to actual run AUTO, so they are _no_ optdepends for the binary package, just for the source.
license=('BSD' 'LGPL2' 'GPL2')
source=("http://sourceforge.net/projects/auto-07p/files/auto07p/0.9/auto07p-${pkgver}.tar.gz" 'auto-07p-session.bash' 'xpdf')
md5sums=('19d32d2e5e133d6fd1aadbb62a83f671' 'bf309fc6c9feb7ad5db3de75494bedd7' 'c7759794b5723de704d449fb23d35c46')

_extractdir="${srcdir}/auto/07p"
_docdir="${_extractdir}/doc"
_plaut04docdir="${_extractdir}/plaut04/doc"

_install_location="/opt/auto/07p" # Since AUTO does not provide it's own installation procedure we have to take care of it. And since AUTO wants to have it's files somewhat unter one place, we can not just install binaries to '/usr/bin', libraries to '/usr/lib', documentation to '/usr/share/doc' and custom commands somewhere else. To keep everything together, we install into '/opt/auto/07p', and have a shell script which starts a shell session with correctly set environment variables, which we place in '/usr/bin'.

_install_dir="${pkgdir}/${_install_location}"
_doc_install_dir="${_install_dir}/doc"
_plaut04_doc_install_dir="${_install_dir}/plaut04/doc"

[ -n "${_BUILD_DOC}" ] || { # Building documentation can be controlled by environment variable.
  _BUILD_DOC=no # Controls if we want to build the documentation. Set to 'yes' to build it (requires some LaTeX-tools to be installed).
}

[ -n "${_WITH_PLAUT04}" ] || { # Building plaut04 can be controlled by environment variable.
  _WITH_PLAUT04=no # Controls if we want to build plaut04. This is here since on my machine it fails even with 'coin' and 'soqt' installed, so I can explicitly disable it (default is disabled). Set to 'yes' to enable.
}

AUTO_DIR="${_extractdir}" # Auto uses this, at least when building the documentation. So we need to set this variable.
export AUTO_DIR


_FFLAGS=""
_CFLAGS=""

if [ "${_AUTO_DEBUG}x" == "yesx" ]; then
  _FDEBUG_FLAGS="-ggdb -g -fbacktrace -fcheck=array-temps -fcheck=do -fcheck=mem -fcheck=pointer -fcheck=recursion"
  # -fcheck=bounds does NOT work, since AUTO itself violates bounds ... a bug in AUTO with sideeffects, without sideeffects, or even needed?? 
  _CDEBUG_FLAGS="-ggdb -g"
  _OPT_FLAGS="-O0"
  options=(!strip)
else
  _FDEBUG_FLAGS="-g0"
  _CDEBUG_FLAGS="-g0"
  _OPT_FLAGS="-O3"
  options=(strip)
fi

_FFLAGS="${_FFLAGS} ${_FDEBUG_FLAGS}"
_CFLAGS="${_CFLAGS} ${_CDEBUG_FLAGS}"



_build_documentation()
{
  echo ""
  echo ">> Building documentation for '${pkgname}', version '${pkgver}'. >>"
  echo ""
  
  cd "${_docdir}" || exit 201
  
  make all || exit "$?"
  
  echo ""
  echo "<< Finished building documentation for '${pkgname}', version '${pkgver}'. <<"
  echo ""
}

_install_documentation()
{
  ### Documentation gets already installed by the normal install procedure, since everything is copied anyway. So, do nothing here. ###
  true

#   echo ""
#   echo ">> Packaging documentation for '${pkgname}', version '${pkgver}'. >>"
#   echo ""
# 
# 
#   mkdir -p "${_doc_install_dir}" || exit 301
#   mkdir -p "${_plaut04_doc_install_dir}" || exit 302
#   
#   if [ -e "${_docdir}/auto.pdf" ]; then
#     cp -a "${_docdir}/auto.pdf" "${_doc_install_dir}/" || exit "$?"
#   fi
#   if [ -e "${_plaut04docdir}/userguide.pdf" ]; then
#     cp -a "${_plaut04docdir}/userguide.pdf" "${_plaut04_doc_install_dir}/" || exit "$?"
#   fi
#   
#   echo ""
#   echo "<< Finished packaging documentation for '${pkgname}', version '${pkgver}'. <<"
#   echo ""
}

build()
{
  echo ""
  echo ">>> Building '${pkgname}', version '${pkgver}'. >>>"
  echo ""

  cd "${_extractdir}" || exit 11

  if [ "y${_WITH_PLAUT04}" == "yyes" ]; then
    _plaut04_config="--enable-plaut04 --disable-plaut04-qt" # If 'soxt' is preferred over 'soqt', change '--enable-plaut04-qt' to '--disable-plaut04-qt'.
  else
    _plaut04_config="--disable-plaut04 --disable-plaut04-qt"
  fi

  echo ""
  echo ">> Running 'configure'-script for '${pkgname}', version '${pkgver}'. >>"
  echo ""
  
  ./configure --enable-plaut ${_plaut04_config} --enable-gui --enable-tek2ps --with-x --with-openmp --with-mpi --with-optimization-flags="${_OPT_FLAGS}" --prefix="${_install_location}" FFLAGS="${_FFLAGS}" CFLAGS="${_CFLAGS}" || exit "$?"
  ### Remakrs for 'copenmotif: For GUI94. ('openmotif' can be used instead of 'lesstif'nfigure'-script: ###
  # * '--prefix' seems to be obsolete since there is no 'make install'. Specified anyway, since I do not know if it gets configured somewhere where it is used later.
  # * For some reason, enabling plaut04 breaks build (installed packages on my machine: 'coin' and 'soqt' and 'simage', although 'simage' is, according to the AUTO-documentation, not necessary for 'soqt' version >= 1.5.0.)
  ### /Remarks for 'configure'-script. ###
  
  echo ""
  echo "<< Finished running 'configure'-script for '${pkgname}', version '${pkgver}'. <<"
  echo ""
  
  OLDPATH="${PATH}"
  PATH="${srcdir}:${PATH}" # Since building the documentation opens the finished pdf with xpdf, we have a dummy xpdf-executable that does nothing.
  export PATH
  
  echo ""
  echo ">> Running 'make'-script for '${pkgname}', version '${pkgver}'. >>"
  echo ""
  
  make || exit "$?"

  echo ""
  echo "<< Finished running 'make'-script for '${pkgname}', version '${pkgver}'. <<"
  echo ""
  
  if [ "y${_BUILD_DOC}" == "yyes" ]; then
    _build_documentation || exit "$?" # IMPORTANT!, build documentation _after_ main build, otherwise there will no main build happen.
  fi
  
  PATH="${OLDPATH}"
  export PATH
  

  echo ""
  echo "<<< Finished building '${pkgname}', version '${pkgver}'. <<<"
  echo ""
}

package()
{
  echo ""
  echo ">>> Installing '${pkgname}', version '${pkgver}', into package dir '${pkgdir}'. >>>"
  echo ""
  cd "${_extractdir}" || exit 101
  
  mkdir -p "${_install_dir}" || exit "$?"
  
  ls -A1 "${_extractdir}"/ | while read _content; do # Copy everything, including files starting with ".", but not the special directory entries "." and "..". We do _not_ use an extra argument to "cp" to solve this in order to avoid error messages if there are no dotfiles.
    cp -a -t "${_install_dir}" "${_content}" || exit "$?"
  done || exit "$?"
  
  mkdir -p "${pkgdir}/usr/bin" || exit "$?"
  cp -a "${srcdir}/auto-07p-session.bash" "${pkgdir}/usr/bin/" || exit "$?"

  if [ "y${_BUILD_DOC}" == y"yes" ]; then
    _install_documentation || exit "$?"
  fi
  
  rm -f "${_install_dir}/plaut"/*.o "${_install_dir}/plaut"/*.mod "${_install_dir}/plaut04"/*.mod "${_install_dir}/plaut04"/*.mod "${_install_dir}/gui"/*.o "${_install_dir}/tek2ps"/*.o "${_install_dir}/install-sh" "${_install_dir}/config.status" "${_install_dir}/cmds/auto.env" "${_install_dir}/cmds/auto.env.sh" || exit "$?" # Remove files we don't want to have.
  
  chown -R root:root "${pkgdir}" || exit "$?"

  echo ""
  echo "<<< Finished installing '${pkgname}', version '${pkgver}', into package dir '${pkgdir}'. <<<"
  echo ""
}

