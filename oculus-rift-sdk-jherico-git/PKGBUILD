pkgname=oculus-rift-sdk-jherico-git
pkgver=179.838b0d3
realver=0.5.0.1
pkgrel=2
_branch=master
pkgdesc="Oculus SDK community version. 32/64 bit static/shared release/debug library (libovr.so + libovrd.so), OculusTuscanyDemo, OculusConfigUtil, /etc/xdg/autostart/oculusd.desktop. For compiling your application use /usr/include/ovr-${realver}/ as path to the SDK."
arch=('x86_64')
url="https://github.com/jherico/OculusSDK"
license=('custom')
depends=('gcc-multilib')
optdepends=("libudev.so.0: The closed config utility is linked against libudev.so.0"
        "oculus-udev: Udev rule to make the rift sensors usable to the user \"plugdev\"")
makedepends=('git' 'patchelf' 'cmake') #TODO: Fix cmake to set rpath right first time
provides=()
conflicts=()
replaces=()
backup=()
options=('!strip' 'staticlibs')
install=

# Config Util is directly binaries from oculus rift sdk upstream. Look it up, if you like
source=("git+https://github.com/jherico/OculusSDK.git#branch=$_branch"
"git+https://github.com/jherico/jocular.git"
"git+https://github.com/jherico/python-ovrsdk.git"
"git+https://github.com/jherico/cmake.git"
  "http://haagch.frickel.club/files/ovr_sdk_linux_${realver}/Tools/RiftConfigUtil/Bin/Linux/x86_64/ReleaseStatic/RiftConfigUtil"
  "http://haagch.frickel.club/files/ovr_sdk_linux_${realver}/Service/OVRServer/Bin/Linux/x86_64/ReleaseStatic/ovrd"
  'libovr.pc'
  'OculusTuscanyDemo.sh'
  'OculusConfigUtil.sh')

pkgver() {
  cd "$srcdir/OculusSDK"
  echo $(git rev-list --count HEAD).$(git rev-parse --short HEAD)
}

prepare() {
  # add SHARED keyword to build shared libOVR.so
  cd "$srcdir/OculusSDK"
  install -d ../orig
  cp -ra * ../orig
#  sed -i "s/add_library(OculusVR /add_library(OculusVR SHARED /g" LibOVR/CMakeLists.txt
  git submodule init
  git config submodule.Bindings/Java.url "$srcdir/jocular"
  git config submodule.Bindings/Python.url "$srcdir/python-ovrsdk"
  git config submodule.cmake.url "$srcdir/cmake"
  git submodule update

#  sed -i 's/add_library(ovr ${SOURCE_FILES} ${PLATFORM_SOURCE_FILES})/add_library(ovr SHARED ${SOURCE_FILES} ${PLATFORM_SOURCE_FILES})/g' LibOVR/CMakeLists.txt

  #hm....
  sed -i 's/-stdlib=libc++//g' CMakeLists.txt #:   set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11 -stdlib=libc++")
}

build() {
#export CXX=clang++
#export CC=clang
#  cd "$srcdir/OculusSDK"

  rm -rf "$srcdir/lib32" "$srcdir/lib64" "$srcdir/share"
  mkdir -p "$srcdir/lib32" "$srcdir/lib64" "$srcdir/share"

rm -rf "$srcdir/build"/*
mkdir -p build
cd build

        # Oh dear Flying Spaghetti Monster, do we really need? Failed to link the OculusWorldDemo without it for me... Maybe because of CMake not running FindX11 automatically in FindOpenGL? should investigate
  msg "Building 64 bit shared library and demo"
  cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DCMAKE_BUILD_TYPE=Release -DOVR_USE_SHIM=0 ../OculusSDK
  make
  install output/libovr.so "$srcdir/lib64"
#  install output/libOVR_C.so "$srcdir/lib64" #doesn't get built anymore?
#TODO:owd  patchelf --set-rpath /usr/lib/ output/OculusWorldDemo
#TODO:owd  install output/OculusWorldDemo "$srcdir/lib64/OculusWorldDemo" # now dynamically linked

rm -rf "$srcdir/build"/*

  msg "Building 64 bit shared DEBUG library and DEBUG demo"
  cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DOCULUS_BUILD_SAMPLES=1 -DCMAKE_BUILD_TYPE=DEBUG -DOVR_USE_SHIM=0 ../OculusSDK
  make
  install output/libovrd.so "$srcdir/lib64"
#  install output/libOVR_C.so "$srcdir/lib64" #doesn't get built anymore?
#TODO:owd  patchelf --set-rpath /usr/lib/ output/OculusWorldDemo
#TODO:owd  install output/OculusWorldDemo "$srcdir/lib64/OculusWorldDemoDebug" # now dynamically linked

rm -rf "$srcdir/build"/*

  msg "Building 32 bit shared library"
  CC="gcc -m32" CXX="g++ -m32" cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DCMAKE_BUILD_TYPE=Release -DOVR_USE_SHIM=0 ../OculusSDK
  make
  install output/libovr.so "$srcdir/lib32"
 # install output/libOVR_C.so "$srcdir/lib32"

rm -rf "$srcdir/build"/*

  msg "Building 32 bit shared DEBUG library"
 sed -i "s/STATIC/SHARED/g" ../OculusSDK/LibOVR/CMakeLists.txt
  CC="gcc -m32" CXX="g++ -m32" cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DCMAKE_BUILD_TYPE=Debug -DOVR_USE_SHIM=0 ../OculusSDK
  make
  install output/libovrd.so "$srcdir/lib32"
 # install output/libOVR_C.so "$srcdir/lib32"



  sed -i "s/SHARED/STATIC/g" ../OculusSDK/LibOVR/CMakeLists.txt



  msg "Building 64 bit static library"
  cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DCMAKE_BUILD_TYPE=Release -DOVR_USE_SHIM=0 ../OculusSDK
  make
  install output/libovr.a "$srcdir/lib64"

rm -rf "$srcdir/build"/*

  msg "Building 64 bit static DEBUG library"
  cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DCMAKE_BUILD_TYPE=Debug -DOVR_USE_SHIM=0 ../OculusSDK
  make
  install output/libovrd.a "$srcdir/lib64"

rm -rf "$srcdir/build"/*

  msg "Building 32 bit static library" #and demo"
  CC="gcc -m32" CXX="g++ -m32" cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DCMAKE_BUILD_TYPE=Release -DOVR_USE_SHIM=0 ../OculusSDK
  make
  install output/libovr.a "$srcdir/lib32"
  #patchelf --set-rpath /usr/lib32/ output/OculusWorldDemo
#  install output/OculusWorldDemo "$srcdir/share/OculusWorldDemo32"

rm -rf "$srcdir/build"/*

  
  CC="gcc -m32" CXX="g++ -m32" cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DCMAKE_BUILD_TYPE=Debug -DOVR_USE_SHIM=0 ../OculusSDK
  make
  install output/libovrd.a "$srcdir/lib32"
  #patchelf --set-rpath /usr/lib32/ output/OculusWorldDemo
#  install output/OculusWorldDemo "$srcdir/share/OculusWorldDemo32"

}

package() {
  cd "$srcdir/OculusSDK"
  oculusv="$realver" #meh: $(cat LibOVR/Include/OVR_Version.h | sed -n 's/.*#define OVR_VERSION_STRING "\(.*\)"/\1/p')

  #make DESTDIR="$pkgdir/" install
  install -d "$pkgdir/usr/lib"
  install -d "$pkgdir/usr/lib32"
  install -d "$pkgdir/usr/include/ovr-$oculusv/ovr"
  install -d "$pkgdir/usr/share/"
  install -d "$pkgdir/usr/lib/pkgconfig/"

  install "$srcdir/libovr.pc" "$pkgdir/usr/lib/pkgconfig/"
  sed -i "s/@PACKAGE_VERSION@/$oculusv/g" "$pkgdir/usr/lib/pkgconfig/libovr.pc"

#TODO:owd  cp -ra "Samples/OculusWorldDemo/Assets/Tuscany/" "$pkgdir/usr/share/OculusTuscanyDemo"
#TODO:owd  install "$srcdir/lib64/OculusWorldDemo" "$pkgdir/usr/share/OculusTuscanyDemo/OculusWorldDemo64"
#TODO:owd  install "$srcdir/lib64/OculusWorldDemoDebug" "$pkgdir/usr/share/OculusTuscanyDemo/OculusWorldDemo64Debug"
 # install "$srcdir/share/OculusWorldDemo32" "$pkgdir/usr/share/OculusTuscanyDemo/OculusWorldDemo32"
  install -d "$pkgdir/usr/share/OculusConfigUtil"
  install -m 755 "$srcdir/RiftConfigUtil" "$pkgdir/usr/share/OculusConfigUtil/RiftConfigUtil"

  install "$srcdir/lib32"/libovr.so "$pkgdir/usr/lib32/libovr.so"
  install "$srcdir/lib32"/libovrd.so "$pkgdir/usr/lib32/libovrd.so"
  install "$srcdir/lib64"/libovr.so "$pkgdir/usr/lib/libovr.so"
  install "$srcdir/lib64"/libovrd.so "$pkgdir/usr/lib/libovrd.so"

  install "$srcdir/lib32"/libovr.a "$pkgdir/usr/lib32/libovr.a"
  install "$srcdir/lib32"/libovrd.a "$pkgdir/usr/lib32/libovrd.a"
  install "$srcdir/lib64"/libovr.a "$pkgdir/usr/lib/libovr.a"
  install "$srcdir/lib64"/libovrd.a "$pkgdir/usr/lib/libovrd.a"

  # library is now really called libovr.so,a but previously it was libOculusVR.so,a.
  # symlink them, so both work
  ln -s /usr/lib/libovr.so ${pkgdir}/usr/lib/libOculusVR.so
  ln -s /usr/lib/libovr.a ${pkgdir}/usr/lib/libOculusVR.a

#  cp -ra "LibOVR/Include" "$pkgdir/usr/include/ovr-$oculusv/"
#  cp -ra "LibOVR/Src" "$pkgdir/usr/include/ovr-$oculusv/"
# Some programs like minecrift need the whole SDK and not just the usual headers
cp -ra ../orig/* "$pkgdir/usr/include/ovr-$oculusv/"
ln -s /usr/include/ovr-${realver}/LibOVR/Include "$pkgdir"/usr/include/ovr-${realver}/
ln -s /usr/include/ovr-${realver}/LibOVR/Src "$pkgdir"/usr/include/ovr-${realver}/

  mkdir -p "${pkgdir}/usr/bin"
  install -m755 "${srcdir}/OculusConfigUtil.sh" "${pkgdir}/usr/bin/OculusConfigUtil"
#TODO:owd  install -m755 "${srcdir}/OculusTuscanyDemo.sh" "${pkgdir}/usr/bin/OculusTuscanyDemo"

  install -m 755 "${srcdir}/ovrd" "${pkgdir}/usr/bin/"

  install -d "$pkgdir/etc/xdg/autostart"
echo "[Desktop Entry]
Type=Application
Name=Oculus Rift Service
Exec=/usr/bin/ovrd" > "$pkgdir/etc/xdg/autostart/oculusd.desktop"

#osvr-oculus-rift wants that (I think):
cd "$pkgdir/usr/include/ovr-0.5.0.1/LibOVR/Include/"
for i in *.h
        do
        ln -s "/usr/include/ovr-0.5.0.1/LibOVR/Include/$i" "$pkgdir/usr/include/ovr-0.5.0.1/LibOVR/Src/$(basename "$i")"
done

}

# vim:set ts=2 sw=2 et:

md5sums=('SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'e650fd7a67579bbe7d41beb656424d9f'
         '8f422b99ec756ce6e1a15ebac13195a0'
         '42229985530d52b42f6127281a4478e4'
         'e8a3510f5bea1a99b1cec5c98f314ceb'
         'cf6564fda559b6d9fa5219d7a18dd78d')
