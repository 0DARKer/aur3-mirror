pkgname=oculus-rift-sdk-jherico-git
pkgver=172.f37724a
realver=0.4.4
pkgrel=1
_branch=master
pkgdesc="Oculus SDK community version. 32/64 bit static/shared library, OculusTuscanyDemo. OculusConfigUtil, /etc/xdg/autostart/oculusd.desktop. Set OCULUS_SDK=/usr/include/ovr-0.4.4/. Do 'OVR_DEBUG=1 makepkg' to make a debug build."
arch=('x86_64')
url="https://github.com/jherico/OculusSDK"
license=('custom')
#depends=('oculus-udev')
optdepends=("libudev.so.0: The closed config utility is linked against libudev.so.0"
        "oculus-udev: Udev rule to make the rift sensors usable to the user \"plugdev\"")
makedepends=('git' 'patchelf') #TODO: Fix cmake to set rpath right first time
provides=()
conflicts=()
replaces=()
backup=()
options=('!strip' 'staticlibs')
install=

# Config Util is directly binaries from oculus rift sdk upstream. Look it up, if you like
source=("git+https://github.com/jherico/OculusSDK.git#branch=$_branch"
"git+https://github.com/jherico/jocular.git"
"git+https://github.com/jherico/python-ovrsdk.git"
"git+https://github.com/jherico/cmake.git"
  "http://haagch.frickel.club/files/ovr_sdk_linux_${realver}/ConfigUtil.tar.xz"
  "http://haagch.frickel.club/files/ovr_sdk_linux_${realver}/oculusd"
  'libovr.pc'
  'OculusTuscanyDemo.sh'
  'OculusConfigUtil.sh')

pkgver() {
  cd "$srcdir/OculusSDK"
  echo $(git rev-list --count HEAD).$(git rev-parse --short HEAD)
}

prepare() {
  # add SHARED keyword to build shared libOVR.so
  cd "$srcdir/OculusSDK"
  install -d ../orig
  cp -ra * ../orig
#  sed -i "s/add_library(OculusVR /add_library(OculusVR SHARED /g" LibOVR/CMakeLists.txt
  git submodule init
  git config submodule.Bindings/Java.url "$srcdir/jocular"
  git config submodule.Bindings/Python.url "$srcdir/python-ovrsdk"
  git config submodule.cmake.url "$srcdir/cmake"
  git submodule update

  #CFLAGS should be set by makepkg, cmake default of -O3 is no good
#should be fixed by https://github.com/jherico/OculusSDK/pull/43
#  sed -i '/cmake_minimum_required(VERSION 2.8)/a string(REPLACE "-O3" "" CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}")' CMakeLists.txt
#  sed -i '/cmake_minimum_required(VERSION 2.8)/a string(REPLACE "-O3" "" CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS}")' CMakeLists.txt

  #string(REPLACE "-O3" "" CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG}")


  # Looks like he removed the SHARED keyword AGAIN
  sed -i 's/add_library(ovr ${SOURCE_FILES} ${PLATFORM_SOURCE_FILES})/add_library(ovr SHARED ${SOURCE_FILES} ${PLATFORM_SOURCE_FILES})/g' LibOVR/CMakeLists.txt
}

build() {
if [ -z ${OVR_DEBUG+x} ]
then
        msg "Setting BUILDTYPE to Release"
        export BUILDTYPE="Release"
else
        echo "Setting BUILDTYPE to Debug"
        export BUILDTYPE="Debug"; export D="d"
        #export CFLAGS="-O0 -ggdb3" #trust cmake debug flags or comment in
        #export CXXFLAGS="-O0 -ggdb3"
fi

#  cd "$srcdir/OculusSDK"

  rm -rf "$srcdir/lib32" "$srcdir/lib64" "$srcdir/share"
  mkdir -p "$srcdir/lib32" "$srcdir/lib64" "$srcdir/share"

rm -rf "$srcdir/build"/*
mkdir -p build
cd build

  msg "Building 64 bit shared library"
  cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DOCULUS_BUILD_SAMPLES=1 -DCMAKE_BUILD_TYPE=${BUILDTYPE} -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF ../OculusSDK
  make
  install output/libovr${D}.so "$srcdir/lib64"
#  install output/libOVR_C.so "$srcdir/lib64" #doesn't get built anymore?
  patchelf --set-rpath /usr/lib/ output/OculusWorldDemo
  install output/OculusWorldDemo "$srcdir/share" # now dynamically linked

rm -rf "$srcdir/build"/*

  msg "Building 64 bit static library and demo"
  sed -i "s/SHARED/STATIC/g" ../OculusSDK/LibOVR/CMakeLists.txt
  cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DOCULUS_BUILD_SAMPLES=0 -DCMAKE_BUILD_TYPE=${BUILDTYPE} -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON ../OculusSDK
  make
  install output/libovr${D}.a "$srcdir/lib64"

rm -rf "$srcdir/build"/*

  msg "Building 32 bit static library" #and demo"
  CC="gcc -m32" CXX="g++ -m32" cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DOCULUS_BUILD_SAMPLES=0 -DCMAKE_BUILD_TYPE=${BUILDTYPE} -DBUILD_SHARED_LIBS=OFF -DBUILD_STATIC_LIBS=ON ../OculusSDK
  make
  install output/libovr${D}.a "$srcdir/lib32"
  #patchelf --set-rpath /usr/lib32/ output/OculusWorldDemo
#  install output/OculusWorldDemo "$srcdir/share/OculusWorldDemo32"

rm -rf "$srcdir/build"/*

  msg "Building 32 bit shared library"
 sed -i "s/STATIC/SHARED/g" ../OculusSDK/LibOVR/CMakeLists.txt
  CC="gcc -m32" CXX="g++ -m32" cmake -DCMAKE_INSTALL_PREFIX=/usr/ -DOCULUS_BUILD_SAMPLES=0 -DCMAKE_BUILD_TYPE=${BUILDTYPE} -DBUILD_SHARED_LIBS=ON -DBUILD_STATIC_LIBS=OFF ../OculusSDK
  make
  install output/libovr${D}.so "$srcdir/lib32"
 # install output/libOVR_C.so "$srcdir/lib32"
}

package() {
  cd "$srcdir/OculusSDK"
  oculusv=$(cat LibOVR/Include/OVR_Version.h | sed -n 's/.*#define OVR_VERSION_STRING "\(.*\)"/\1/p')

  #make DESTDIR="$pkgdir/" install
  install -d "$pkgdir/usr/lib"
  install -d "$pkgdir/usr/lib32"
  install -d "$pkgdir/usr/include/ovr-$oculusv/ovr"
  install -d "$pkgdir/usr/share/"
  install -d "$pkgdir/usr/lib/pkgconfig/"

  install "$srcdir/libovr.pc" "$pkgdir/usr/lib/pkgconfig/"
  sed -i "s/@PACKAGE_VERSION@/$oculusv/g" "$pkgdir/usr/lib/pkgconfig/libovr.pc"

  cp -ra "Samples/OculusWorldDemo/Assets/Tuscany/" "$pkgdir/usr/share/OculusTuscanyDemo"
  install "$srcdir/share/OculusWorldDemo" "$pkgdir/usr/share/OculusTuscanyDemo/OculusWorldDemo64"
 # install "$srcdir/share/OculusWorldDemo32" "$pkgdir/usr/share/OculusTuscanyDemo/OculusWorldDemo32"

  cp -ra "$srcdir/ConfigUtil" "$pkgdir/usr/share/OculusConfigUtil"

  install "$srcdir/lib32"/libovr${D}.so "$pkgdir/usr/lib32/libovr.so"
  install "$srcdir/lib64"/libovr${D}.so "$pkgdir/usr/lib/libovr.so"

  install "$srcdir/lib32"/libovr${D}.a "$pkgdir/usr/lib32/libovr.a"
  install "$srcdir/lib64"/libovr${D}.a "$pkgdir/usr/lib/libovr.a"

  # library is now really called libovr.so,a but previously it was libOculusVR.so,a.
  # symlink them, so both work
  ln -s /usr/lib/libovr.so ${pkgdir}/usr/lib/libOculusVR.so
  ln -s /usr/lib/libovr.a ${pkgdir}/usr/lib/libOculusVR.a

#  cp -ra "LibOVR/Include" "$pkgdir/usr/include/ovr-$oculusv/"
#  cp -ra "LibOVR/Src" "$pkgdir/usr/include/ovr-$oculusv/"
# Some programs like minecrift need the whole SDK and not just the usual headers
cp -ra ../orig/* "$pkgdir/usr/include/ovr-$oculusv/"
ln -s /usr/include/ovr-${realver}/LibOVR/Include "$pkgdir"/usr/include/ovr-${realver}/
ln -s /usr/include/ovr-${realver}/LibOVR/Src "$pkgdir"/usr/include/ovr-${realver}/

  mkdir -p "${pkgdir}/usr/bin"
  install -m755 "${srcdir}/OculusConfigUtil.sh" "${pkgdir}/usr/bin/OculusConfigUtil"
  install -m755 "${srcdir}/OculusTuscanyDemo.sh" "${pkgdir}/usr/bin/OculusTuscanyDemo"

  install -m 755 "${srcdir}/oculusd" "${pkgdir}/usr/bin/"

  install -d "$pkgdir/etc/xdg/autostart"
echo "[Desktop Entry]
Type=Application
Name=Oculus Rift Service
Exec=/usr/bin/oculusd" > "$pkgdir/etc/xdg/autostart/oculusd.desktop"
}

# vim:set ts=2 sw=2 et:
md5sums=('SKIP'
         'SKIP'
         'SKIP'
         'SKIP'
         'cb4e57e7e3642ce7ca513df76dc4c7c6'
         '7f9b36604772c09e82ad0af810fa3086'
         '42229985530d52b42f6127281a4478e4'
         '6bc87973022d3763ad4c81c2cdd92713'
         'cf6564fda559b6d9fa5219d7a18dd78d')
