On Windows, c30_device.info is presumably installed alongside the
binary. On Debian we don't necessarily have c30_device.info at all. If
we do have it, it should go in /usr/share/pic30-support.

--- ./bfd/cpu-pic30.c.orig	2007-02-02 22:49:02.000000000 +0100
+++ ./bfd/cpu-pic30.c	2009-01-28 07:09:24.000000000 +0100
@@ -95,7 +95,7 @@
 
 const bfd_arch_info_type * global_PROCESSOR = NULL;
 
-static char *pic30_resource_file = 0;
+static char *pic30_resource_file = "/usr/pic30/c30_device.info";
 
 #define EOL ,
 #define ARCH(machine, printable_name, default_machine, next, flags) \
@@ -166,104 +166,6 @@
 #define QUOTE2(X) #X
 #define QUOTE(X) QUOTE2(X)
 
-/* stupid prototype */ static void get_resource_path(const char *resource);
-static void get_resource_path(const char *resource) {
-
-  char *tool_name = (char *) resource;
-  char *c;
-
-  /*
-  ** In some command shells, no path information
-  ** is provided as part of argv[0].
-  */
-  if (!IS_DIR_SEPARATOR(resource[0]))
-  {
-    /*
-    ** No DOS path information for the program:
-    ** search for the executable using the
-    ** PATH environment variable.
-    */
-    struct stat fs;
-    char *separator;
-    const char *PATH;
-    char *dosPATH = 0;
-    int tool_len;
-    int len;
-    char *command;
-
-    tool_name = xmalloc(strlen(resource) + 4 + 40);
-    sprintf(tool_name, "%s", resource);
-    tool_len = strlen(tool_name);
-#if 0
-    fprintf(stderr,"tool_name: %s\n", tool_name);
-#endif
-#if defined(HAVE_DOS_BASED_FILE_SYSTEM)
-    /*
-    ** Append ".exe" to the executable name, if necessary
-    */
-    if ((tolower(tool_name[tool_len-1]) != 'e') ||
-        (tolower(tool_name[tool_len-2]) != 'x') ||
-        (tolower(tool_name[tool_len-3]) != 'e') ||
-        (       (tool_name[tool_len-4]) != '.'))
-    {
-      strcat(tool_name, ".exe");
-      tool_len += 4;
-    }
-#endif
-    /*
-    ** Get the current PATH
-    */
-    PATH = getenv("PATH");
-    if (PATH) {
-      /*
-       *  stupid gnu will print (null) to the string if PATH==0
-       */
-      dosPATH = xcalloc(1, strlen(PATH) + 3);
-      sprintf(dosPATH,"%s%c.",PATH, PATH_SEPARATOR);
-      PATH = dosPATH;
-    } else {
-      PATH=".";
-    }
-#if 0
-    fprintf(stderr,"PATH=%s\n", PATH);
-#endif
-    len = 256;
-    command = xmalloc(len);
-    do
-    { int path_len;
-
-      separator = strchr(PATH, PATH_SEPARATOR);
-      path_len = separator ? (unsigned)(separator-PATH) : strlen(PATH);
-      if ((path_len + tool_len + 2)  > len) {
-        len = path_len + tool_len + 80;
-        free(command);
-        command = xmalloc(len);
-      }
-      command[0] = 0;
-      strncpy(command, PATH, path_len);
-      command[path_len] = 0;
-      if (!IS_DIR_SEPARATOR(command[path_len-1])) {
-        strcat(command, DIR_SEPARATOR_STR);
-      }
-      strcat(command, tool_name);
-#if 0
-      fprintf(stderr,"dir=%s\n",command);
-#endif
-      if (stat(command, &fs) == 0) break;
-      PATH = 0;
-    } while (separator && (PATH = separator+1));
-    if (dosPATH) free(dosPATH);
-    if (PATH) tool_name = command;
-  }
-  pic30_resource_file = xmalloc(strlen(tool_name) +
-                                sizeof("/c30_device.info") + 1);
-  sprintf(pic30_resource_file,"%s", tool_name);
-  for (c = pic30_resource_file + strlen(pic30_resource_file);
-       !IS_DIR_SEPARATOR(*c); c--);
-  *c = 0;
-  strcat(pic30_resource_file,"/c30_device.info");
-}
-
 void pic30_update_resource(const char *resource) {
   /* The tool_version is defined in the string MCHP_VERSION */
   char *Microchip;
@@ -287,7 +189,6 @@
       version_part2 = Microchip+1;
     }
   }
-  get_resource_path(resource);
   process_resource_file(ARCH_TABLE, 0, 0);
 }
 
