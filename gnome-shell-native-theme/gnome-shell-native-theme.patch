diff -aur a/data/org.gnome.shell.gschema.xml.in b/data/org.gnome.shell.gschema.xml.in
--- a/data/org.gnome.shell.gschema.xml.in	2012-03-13 17:06:02.000000000 +0100
+++ b/data/org.gnome.shell.gschema.xml.in	2012-03-23 18:44:14.018803218 +0100
@@ -61,6 +61,11 @@
       <_summary>Internally used to store the last session presence status for the user. The
 value here is from the GsmPresenceStatus enumeration.</_summary>
     </key>
+    <key name="theme-name" type="s">
+      <default>''</default>
+      <_summary>Theme used by gnome-shell</_summary>
+      <_description>The theme are loaded from '/usr/share/themes/[theme-name]/gnome-shell' .</_description>
+    </key>
     <child name="clock" schema="org.gnome.shell.clock"/>
     <child name="calendar" schema="org.gnome.shell.calendar"/>
     <child name="recorder" schema="org.gnome.shell.recorder"/>
diff -aur a/js/ui/main.js b/js/ui/main.js
--- a/js/ui/main.js	2012-04-18 11:39:31.000000000 +0200
+++ b/js/ui/main.js	2012-04-28 15:47:57.033448349 +0200
@@ -42,6 +42,10 @@
 const DEFAULT_BACKGROUND_COLOR = new Clutter.Color();
 DEFAULT_BACKGROUND_COLOR.from_pixel(0x2266bbff);
 
+const THEME_SETTINGS_SCHEMA = 'org.gnome.shell';
+const THEME_SETTINGS_KEY = 'theme-name';
+const _ThemeSettings = new Gio.Settings({ schema: THEME_SETTINGS_SCHEMA });
+
 let automountManager = null;
 let autorunManager = null;
 let panel = null;
@@ -76,6 +80,9 @@
 
 let background = null;
 
+let _cssThemeStylesheet = null;
+let _gdmCssThemeStylesheet = null;
+
 function _createUserSession() {
     // Load the calendar server. Note that we are careful about
     // not loading any events until the user presses the clock
@@ -183,9 +190,13 @@
     global.stage.no_clear_hint = true;
 
     _defaultCssStylesheet = global.datadir + '/theme/gnome-shell.css';
-    _gdmCssStylesheet = global.datadir + '/theme/gdm.css';
+    _defaultGdmCssStylesheet = global.datadir + '/theme/gdm.css';
+    _gdmCssStylesheet = _defaultGdmCssStylesheet;
+    changeTheme()
     loadTheme();
 
+    _ThemeSettings.connect('changed::'+THEME_SETTINGS_KEY, changeTheme);
+
     // Set up stage hierarchy to group all UI actors under one container.
     uiGroup = new Shell.GenericContainer({ name: 'uiGroup' });
     uiGroup.connect('allocate',
@@ -479,6 +490,11 @@
     _cssStylesheet = cssStylesheet;
 }
 
+function setGdmThemeStylesheet(gdmCssStylesheet)
+{
+    _gdmCssStylesheet = gdmCssStylesheet;
+}
+
 /**
  * loadTheme:
  *
@@ -507,6 +523,25 @@
     themeContext.set_theme (theme);
 }
 
+function changeTheme() {
+    _themeName = _ThemeSettings.get_string(THEME_SETTINGS_KEY);
+    _cssThemeStylesheet = '/usr/share/themes/' + _themeName + '/gnome-shell/gnome-shell.css'
+    if (Gio.file_new_for_path(_cssThemeStylesheet).query_exists(null)) {
+        setThemeStylesheet(_cssThemeStylesheet);
+    }
+    else {
+        setThemeStylesheet( _defaultCssStylesheet);
+    }
+    _gdmCssThemeStylesheet = '/usr/share/themes/' + _themeName + '/gnome-shell/gdm.css'
+    if (Gio.file_new_for_path(_gdmCssThemeStylesheet).query_exists(null)) {
+        setGdmThemeStylesheet(_gdmCssThemeStylesheet);
+    }
+    else {
+        setGdmThemeStylesheet( _defaultGdmCssStylesheet);
+    }
+    loadTheme();
+}
+
 /**
  * notify:
  * @msg: A message
