diff -aur a/data/org.gnome.shell.gschema.xml.in.in b/data/org.gnome.shell.gschema.xml.in.in
--- a/data/org.gnome.shell.gschema.xml.in.in	2012-09-19 11:46:03.000000000 +0200
+++ b/data/org.gnome.shell.gschema.xml.in.in	2012-10-21 15:52:32.374451458 +0200
@@ -57,6 +57,18 @@
       <_summary>Internally used to store the last session presence status for the user. The
 value here is from the GsmPresenceStatus enumeration.</_summary>
     </key>
+    <key name="theme-name" type="s">
+      <default>''</default>
+      <_summary>
+          Theme used by gnome-shell
+      </_summary>
+      <_description>
+          The theme are loaded from :
+          ~/.themes/[theme-name]/gnome-shell
+          /usr/local/share/themes/[theme-name]/gnome-shell
+          /usr/share/themes/[theme-name]/gnome-shell
+      </_description>
+    </key>
     <child name="calendar" schema="org.gnome.shell.calendar"/>
     <child name="recorder" schema="org.gnome.shell.recorder"/>
     <child name="keybindings" schema="org.gnome.shell.keybindings"/>
diff -aur a/js/ui/main.js b/js/ui/main.js
--- a/js/ui/main.js	2012-10-09 21:49:14.000000000 +0200
+++ b/js/ui/main.js	2012-10-21 16:12:00.250588347 +0200
@@ -39,6 +39,10 @@
 const OVERRIDES_SCHEMA = 'org.gnome.shell.overrides';
 const DEFAULT_BACKGROUND_COLOR = Clutter.Color.from_pixel(0x2e3436ff);
 
+const THEME_SETTINGS_SCHEMA = 'org.gnome.shell';
+const THEME_SETTINGS_KEY = 'theme-name';
+const _ThemeSettings = new Gio.Settings({ schema: THEME_SETTINGS_SCHEMA });
+
 let componentManager = null;
 let panel = null;
 let overview = null;
@@ -68,6 +72,9 @@
 
 let background = null;
 
+let _cssThemeStylesheet = null;
+
+
 function _sessionUpdated() {
     Meta.keybindings_set_custom_handler('panel-run-dialog', sessionMode.hasRunDialog ? openRunDialog : null);
     if (sessionMode.isGreeter)
@@ -108,8 +115,11 @@
     global.stage.no_clear_hint = true;
 
     _defaultCssStylesheet = global.datadir + '/theme/gnome-shell.css';
+    changeTheme()
     loadTheme();
 
+    _ThemeSettings.connect('changed::'+THEME_SETTINGS_KEY, changeTheme);
+
     // Set up stage hierarchy to group all UI actors under one container.
     uiGroup = new Shell.GenericContainer({ name: 'uiGroup' });
     uiGroup.connect('allocate',
@@ -424,6 +434,32 @@
     themeContext.set_theme (theme);
 }
 
+function changeTheme() {
+    _themeName = _ThemeSettings.get_string(THEME_SETTINGS_KEY);
+
+    _cssThemeStylesheet = GLib.get_home_dir()+"/.themes/" + _themeName + '/gnome-shell/gnome-shell.css';
+    if (Gio.file_new_for_path(_cssThemeStylesheet).query_exists(null)) {
+        setThemeStylesheet(_cssThemeStylesheet);
+    }
+    else {
+        _cssThemeStylesheet = '/usr/local/share/themes/' + _themeName + '/gnome-shell/gnome-shell.css';
+        if (Gio.file_new_for_path(_cssThemeStylesheet).query_exists(null)) {
+            setThemeStylesheet(_cssThemeStylesheet);
+        }
+        else {
+            _cssThemeStylesheet = '/usr/share/themes/' + _themeName + '/gnome-shell/gnome-shell.css';
+            if (Gio.file_new_for_path(_cssThemeStylesheet).query_exists(null)) {
+                setThemeStylesheet(_cssThemeStylesheet);
+            }
+            else {
+                setThemeStylesheet( _defaultCssStylesheet);
+            }
+        }
+    }
+
+    loadTheme();
+}
+
 /**
  * notify:
  * @msg: A message
