diff -ru old/applet.js new/applet.js
--- old/applet.js	2012-08-02 13:52:07.000000000 +0200
+++ new/applet.js	2012-09-10 09:56:10.408970066 +0200
@@ -90,10 +90,16 @@
 }
 
 function init(metadata) {
-    let schemaSource = Gio.SettingsSchemaSource.new_from_directory(metadata.path,
-	    Gio.SettingsSchemaSource.get_default(), false);
-    let schema = schemaSource.lookup('org.cinnamon.applets.system-monitor', false);
-    Schema = new Gio.Settings({ settings_schema: schema });
+	const LIST_SCHEMAS = "org.cinnamon.applets.system-monitor";
+	if (Gio.Settings.list_schemas().indexOf(LIST_SCHEMAS) != -1)
+		{ GOOD_SCHEMA = LIST_SCHEMAS;}
+	else
+		{
+		 let schemaSource = Gio.SettingsSchemaSource.new_from_directory(metadata.path,
+			Gio.SettingsSchemaSource.get_default(), false);
+		 let GOOD_SCHEMA = schemaSource.lookup(LIST_SCHEMAS, false);
+		}
+	Schema = new Gio.Settings({schema: GOOD_SCHEMA});
     
     Background = new Clutter.Color();
     Background.from_string(Schema.get_string('background'));
@@ -373,20 +379,10 @@
     },
 
     get_cores: function(){
-        // Getting xcpu_total makes gjs 1.29.18 segfault
-        // works with gjs 1.32.0 on fedora 17
-        let cores = 0;
-        GTop.glibtop_get_cpu(this.gtop);
-        let gtop_total = this.gtop.xcpu_total
-        for (let i = 0; i < gtop_total.length;i++){
-            if (gtop_total[i] > 0)
-                cores++;
-        }
-        return cores;
-        //return 1;
+        return 1;
     },
     create_text_items: function() {
-        return [new St.Label({ style_class: "sm-status-value"}),
+        return [new St.Label({ style_class: "sma-status-value"}),
                 new St.Label({ text: '%', style_class: "sma-perc-label"})];
 
     },
@@ -1055,7 +1051,7 @@
 
             item = new PopupMenu.PopupMenuItem(_("Preferences"));
             item.connect('activate', function () {
-                GLib.spawn_command_line_async('python ' + metadata.path + '/config.py');
+                GLib.spawn_command_line_async('python2 ' + metadata.path + '/config.py');
             });
             this.menu.addMenuItem(item);
 
@@ -1112,4 +1108,3 @@
     let myApplet = new MyApplet(metadata, orientation);
     return myApplet;
 }
-
diff -ru old/config.py new/config.py
--- old/config.py	2012-08-02 14:00:23.000000000 +0200
+++ new/config.py	2012-09-10 12:07:16.009311767 +0200
@@ -1,4 +1,4 @@
-#!/usr/bin/env python
+#!/usr/bin/env python2
 
 # system-monitor@ebbes applet config tool
  
@@ -248,14 +248,18 @@
     setting_items = ('cpu', 'memory', 'swap', 'net', 'disk', 'thermal', 'freq')
 
     def __init__(self):
-        # heavy use of Gio API just to load a settings schema in script dir
-        scriptpath = os.path.dirname(os.path.realpath(__file__))
-        # No parent source specified, so schema will not be found if placed
-        # in /usr/share/glib-2.0/schemas, but we won't put it there anyway.
-        schemaSource = Gio.SettingsSchemaSource.new_from_directory(scriptpath, None, False)
-        lookupSchema = schemaSource.lookup('org.cinnamon.applets.system-monitor', False)
-        self.schema = Gio.Settings.new_full(lookupSchema, None, None)
-        keys = self.schema.keys()
+	# heavy use of Gio API just to load a settings schema in script dir
+	scriptpath = os.path.dirname(os.path.realpath(__file__))
+	schemaname = 'org.cinnamon.applets.system-monitor'
+	# No parent source specified, so schema will not be found if placed
+	# in /usr/share/glib-2.0/schemas, but we won't put it there anyway.
+	if os.path.exists(scriptpath)=='true' :
+		schemaSource = Gio.SettingsSchemaSource.new_from_directory(scriptpath, None, False)
+		lookupSchema = schemaSource.lookup(schemaname, False)
+		self.schema = Gio.Settings.new_full(lookupSchema, None, None)
+	else :
+		self.schema = Gio.Settings(schemaname)
+	keys = self.schema.keys()
         self.window = Gtk.Window(title=_('System Monitor Applet Configurator'))
         self.window.connect('destroy', Gtk.main_quit)
         self.window.set_border_width(10)
