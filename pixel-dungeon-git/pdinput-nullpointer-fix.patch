From fd1ce8d9fe4fcbda68911222c943488f2cb69450 Mon Sep 17 00:00:00 2001
From: Kevin MacMartin <prurigro@gmail.com>
Date: Tue, 9 Sep 2014 23:02:27 -0400
Subject: [PATCH] Prevent simultaneous "touch" events to avoid
 NullPointerException

---
 .../src/com/watabou/input/PDInputProcessor.java    | 32 ++++++++++++++++------
 1 file changed, 23 insertions(+), 9 deletions(-)

diff --git a/PD-classes/src/com/watabou/input/PDInputProcessor.java b/PD-classes/src/com/watabou/input/PDInputProcessor.java
index 05da1da..1459de9 100644
--- a/PD-classes/src/com/watabou/input/PDInputProcessor.java
+++ b/PD-classes/src/com/watabou/input/PDInputProcessor.java
@@ -30,6 +30,7 @@
 	public static IntMap<Touch> pointers = new IntMap<>();
 	
 	public static boolean modifier = false;
+	public static boolean clickLock = false;
 
 	@Override
 	public boolean keyDown(int keycode) {
@@ -74,23 +75,36 @@ public boolean keyTyped(char character) {
 
 	@Override
 	public boolean touchDown(int screenX, int screenY, int pointer, int button) {
-		Touch touch = new Touch(screenX, screenY, pointer);
-		pointers.put(pointer, touch);
-		eventTouch.dispatch(touch);
-		return true;
+		if (clickLock == false){
+			clickLock = true;
+			Touch touch = new Touch(screenX, screenY, pointer);
+			pointers.put(pointer, touch);
+			eventTouch.dispatch(touch);
+			return true;
+		}
+		return false;
 	}
 
 	@Override
 	public boolean touchUp(int screenX, int screenY, int pointer, int button) {
-		eventTouch.dispatch(pointers.remove(pointer).up());
-		return true;
+		if (clickLock == true){
+			if (pointers.containsKey(pointer)){
+				eventTouch.dispatch(pointers.remove(pointer).up());
+				clickLock = false;
+				return true;
+			}
+		}
+		return false;
 	}
 
 	@Override
 	public boolean touchDragged(int screenX, int screenY, int pointer) {
-		pointers.get(pointer).update(screenX, screenY, pointer);
-		eventTouch.dispatch(null);
-		return true;
+		if (clickLock == true){
+			pointers.get(pointer).update(screenX, screenY, pointer);
+			eventTouch.dispatch(null);
+			return true;
+		}
+		return false;
 	}
 
 	@Override
