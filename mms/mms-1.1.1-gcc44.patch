=== modified file 'common.cpp'
--- common.cpp	2009-04-26 14:24:28 +0000
+++ common.cpp	2009-05-10 12:29:22 +0000
@@ -1,5 +1,5 @@
 
-/* if DLOG is defined, dprintf() is defined as well */
+/* if DLOG is defined, Xprintf() is defined as well */
 
 //#define DLOG
 
@@ -1450,7 +1450,7 @@
     oldstate = enter_critical_section();
     file_cache[path] = *buf;
     exit_critical_section(oldstate);
-    dprintf("(%d) Added '%s' to the file cache\n", file_cache.size(), path.c_str());
+    Xprintf("(%d) Added '%s' to the file cache\n", file_cache.size(), path.c_str());
     return 0;
   }
   return -1;
@@ -1546,23 +1546,23 @@
   int oldstate = enter_critical_section();
   if (!filename.empty()){
     file_cache.erase(filename);
-    dprintf("Removed '%s' from the file cache\n", filename.c_str()); 
+    Xprintf("Removed '%s' from the file cache\n", filename.c_str()); 
   }
   exit_critical_section(oldstate);
 }
 
 void file_tools::remove_full_dir_from_cache(std::string dirname){
   dirname = filesystem::FExpand(dirname);
-  dprintf("remove_full_dir_from_cache() called with parameter '%s'\n", dirname.c_str());
+  Xprintf("remove_full_dir_from_cache() called with parameter '%s'\n", dirname.c_str());
   int oldstate = enter_critical_section();
   if (!dirname.empty()){
      file_cache.erase(dirname);
-     dprintf( "Removed '%s' from the file cache\n", dirname.c_str());
+     Xprintf( "Removed '%s' from the file cache\n", dirname.c_str());
      dirname +="/";
 
      for (t_cache_it iter = file_cache.begin(); iter != file_cache.end();)
        if (iter->first.find(dirname) == 0){
-	 dprintf("Removed '%s' from the file cache\n", iter->first.c_str());
+	 Xprintf("Removed '%s' from the file cache\n", iter->first.c_str());
 	 file_cache.erase(iter++);
        }
        else

=== modified file 'common.hpp'
--- common.hpp	2009-03-12 18:22:39 +0000
+++ common.hpp	2009-05-10 12:29:22 +0000
@@ -4,7 +4,7 @@
 #include "config.h"
 
 #include "boost.hpp"
-
+#include <cstdio>
 #include <string>
 #include <list>
 #include <vector>
@@ -249,12 +249,12 @@
 
 /* use a replacer for printf( .....) and fprintf(stderr, ...) */
 #if  defined( __GNUC__ ) && defined(DLOG)       
-#define dprintf(fmt, args...)			\
+#define Xprintf(fmt, args...)			\
   do {                                          \
     fprintf(stderr, fmt, ##args);		\
      } while(0)                                 
 #else /* #if  defined( __GNUC__ ) && defined(DLOG) */                            
-#define dprintf(fmt, args...)                   \
+#define Xprintf(fmt, args...)                   \
           do {}                                 \
 while(0)                                        
 #endif /* defined( __GNUC__ ) && defined(DLOG) */

=== modified file 'notify.cpp'
--- notify.cpp	2009-02-22 22:59:08 +0000
+++ notify.cpp	2009-05-10 12:29:22 +0000
@@ -42,8 +42,8 @@
   foreach (NotifyUpdate& update, items_needing_update)
     foreach (notify_item& item, plugins_watching)
       if (!die && update.plugin_name == item.plugin_name) {
-	dprintf("would call callback function for: %s\n", update.plugin_name.c_str());
-	dprintf("%d:%s\n",  update.type,  update.path.c_str());
+	Xprintf("would call callback function for: %s\n", update.plugin_name.c_str());
+	Xprintf("%d:%s\n",  update.type,  update.path.c_str());
 	item.callback(update.type, update.path);
 	break;
       }

=== modified file 'plugins/feature/audio/players/audio_player.cpp'
--- plugins/feature/audio/players/audio_player.cpp	2009-03-12 18:22:39 +0000
+++ plugins/feature/audio/players/audio_player.cpp	2009-05-10 12:29:22 +0000
@@ -165,7 +165,7 @@
 
 void AudioPlayer::resume_playback(const Simplefile &f, int p, bool suspended)
 {
-  dprintf("Autoplayer resume_playback() '%s'\n", f.path.c_str());
+  Xprintf("Autoplayer resume_playback() '%s'\n", f.path.c_str());
   
   addfile(f);
   setpos(p);

=== modified file 'plugins/feature/audio/players/xine/xine.cpp'
--- plugins/feature/audio/players/xine/xine.cpp	2009-04-26 09:24:15 +0000
+++ plugins/feature/audio/players/xine/xine.cpp	2009-05-10 12:29:22 +0000
@@ -417,7 +417,7 @@
   {
      std::string real_mrl = static_cast<xine_mrl_reference_data_ext_t*>(event->data)->mrl;
      pthread_mutex_lock(&xine->stream_mutex);
-     dprintf("Xine: XINE_EVENT_MRL_REFERENCE_EXT -> '%s'\n", real_mrl);
+     Xprintf("Xine: XINE_EVENT_MRL_REFERENCE_EXT -> '%s'\n", real_mrl);
      xine->file.path = real_mrl;
      xine->retry_track = true;
      pthread_mutex_unlock(&xine->stream_mutex);
@@ -558,7 +558,7 @@
 void Xine::addfile(const Simplefile &f){
   if (quitting)
     return;
-  dprintf("xine addfile() '%s'\n", f.path.c_str());
+  Xprintf("xine addfile() '%s'\n", f.path.c_str());
   pthread_mutex_lock(&stream_mutex);
   cd_device = cd_manager->get_device(); /* Update CD device, which migh have changed */
   /* fprintf(stderr, "Will play '%s'\n", f.path.c_str()); */
@@ -571,7 +571,7 @@
 void Xine::play(){
   if (quitting)
     return;
-  dprintf("xine play()\n");
+  Xprintf("xine play()\n");
   pthread_mutex_lock(&stream_mutex);
   cd_device = cd_manager->get_device(); /* Update CD device, which might have changed */
   if (!cur_nr.path.empty())
@@ -585,7 +585,7 @@
 void Xine::setpos(int p){
   if (quitting)
     return;
-  dprintf("xine setpos() %d\n", p);
+  Xprintf("xine setpos() %d\n", p);
   pthread_mutex_lock(&stream_mutex);
   xine_request = _XINE_REQUEST_PLAY_AT;
   cur_time = p;
@@ -597,7 +597,7 @@
 void Xine::resume_playback(const Simplefile &f, int p, bool paused){
   if (quitting)
     return;
-  dprintf("xine resume_playback() '%s', %d, %d\n", f.path.c_str(), p, paused);
+  Xprintf("xine resume_playback() '%s', %d, %d\n", f.path.c_str(), p, paused);
   pthread_mutex_lock(&stream_mutex);
   xine_request = _XINE_REQUEST_PLAY_AT;
   file = f;
@@ -611,7 +611,7 @@
   if (quitting)
     return;
 
-  dprintf("xine stop_player()\n");
+  Xprintf("xine stop_player()\n");
   pthread_mutex_lock(&stream_mutex);
   xine_request = _XINE_REQUEST_STOP;
   pthread_cond_broadcast(&stream_switch);
@@ -621,7 +621,7 @@
 void Xine::pause(){
   if (quitting)
     return;
-  dprintf("xine pause()\n");
+  Xprintf("xine pause()\n");
   pthread_mutex_lock(&stream_mutex);
   xine_request = _XINE_REQUEST_PAUSE;
   pthread_cond_broadcast(&stream_switch);

=== modified file 'plugins/feature/movie/graphical_movie.cpp'
--- plugins/feature/movie/graphical_movie.cpp	2009-02-22 22:59:08 +0000
+++ plugins/feature/movie/graphical_movie.cpp	2009-05-10 12:29:22 +0000
@@ -441,7 +441,7 @@
 
     if (templist.size())
       for (size_t t = 0; t < templist.size(); ++t){
-	dprintf("%s\n", templist[t].name.c_str());
+	Xprintf("%s\n", templist[t].name.c_str());
 	if (string_format::lowercase(templist[t].name) == "video_ts"){
 	  action_play();
 	  return;
@@ -461,7 +461,7 @@
 
       S_BackgroundUpdater::get_instance()->run_once(boost::bind(&GraphicalMovie::check_for_changes, this));
     } else{
-      dprintf("Graphicalmovie says Folder is empty\n");
+      Xprintf("Graphicalmovie says Folder is empty\n");
 
       DialogWaitPrint pdialog(dgettext("mms-movie", "Folder is empty"), 1000);
     }
@@ -708,7 +708,7 @@
 
     if(!file_tools::dir_contains_known_files(filename, ext_mask, 10))
       return true;
-    dprintf("%s contains know files\n", filename.c_str());
+    Xprintf("%s contains know files\n", filename.c_str());
 
     Multifile dir = add_dir(filename);
     dir.path += "/";

=== modified file 'plugins/feature/movie/simple_movie.cpp'
--- plugins/feature/movie/simple_movie.cpp	2009-03-07 15:07:14 +0000
+++ plugins/feature/movie/simple_movie.cpp	2009-05-10 12:29:22 +0000
@@ -79,7 +79,7 @@
       folders.push(std::make_pair(templs, 0));
       files = templist;
     } else {
-      dprintf("Simplemovie says Folder is empty\n");
+      Xprintf("Simplemovie says Folder is empty\n");
       DialogWaitPrint pdialog(dgettext("mms-movie", "Folder is empty"), 1000);
     }
   }

=== modified file 'plugins/feature/playlist_parser.cpp'
--- plugins/feature/playlist_parser.cpp	2009-03-28 17:00:37 +0000
+++ plugins/feature/playlist_parser.cpp	2009-05-10 12:29:22 +0000
@@ -46,10 +46,10 @@
   }
 
   bool parse_pls(const string& playlist, vector<string> * urls){
-    dprintf("\n\n\n=============================================================\n%s", playlist.c_str());
+    Xprintf("\n\n\n=============================================================\n%s", playlist.c_str());
     if (!regex_tools::regex_str_match(playlist, "(\\[playlist\\])", true) ||
       !regex_tools::regex_str_match(playlist, "(Version=2)", true)){
-      dprintf("File doesnt look like a PLS playlist\n");
+      Xprintf("File doesnt look like a PLS playlist\n");
       return false; /* this is an illegal pls playlist */
     }
 
@@ -62,7 +62,7 @@
 
 vector<string> PlaylistParser::resolve_playlist(const string& plist_path){
   vector<string> ret_vec;
-  dprintf("Processing playlist: %s\n", plist_path.c_str());
+  Xprintf("Processing playlist: %s\n", plist_path.c_str());
 
   if (plist_path.empty()){
     ret_vec.push_back("");
@@ -74,24 +74,24 @@
   string ext = regex_tools::extract_substr(plist_path, "\\.(.{2,4})$", false);
 
   if (ext.empty() || strcasecmp(ext.c_str(), "pls") != 0){
-    dprintf("Playlist extension not supported: %s\n", ext.c_str());
+    Xprintf("Playlist extension not supported: %s\n", ext.c_str());
     goto bail_out;
   }
 
   if (filesystem::isFile(plist_path)){
     if (!dump_file_to_string(plist_path, &playlist_buf)){
-      dprintf("Couldn't open playlist: %s\n", plist_path.c_str());
+      Xprintf("Couldn't open playlist: %s\n", plist_path.c_str());
       goto bail_out;
     }
   }
   else if (is_downloadable(plist_path)){
     if(!WgetWrapper::download(plist_path, playlist_buf)){
-      dprintf("Couldn't download playlist: %s\n", plist_path.c_str());
+      Xprintf("Couldn't download playlist: %s\n", plist_path.c_str());
       goto bail_out;
     }
   }
   else {
-    dprintf("Couldn't open nor download playlist: %s\n", plist_path.c_str());
+    Xprintf("Couldn't open nor download playlist: %s\n", plist_path.c_str());
     goto bail_out;
   }
 

=== modified file 'plugins/input/input.cpp'
--- plugins/input/input.cpp	2009-03-22 15:04:17 +0000
+++ plugins/input/input.cpp	2009-05-10 12:29:22 +0000
@@ -201,7 +201,7 @@
   if (!do_filter || found){
     for (size_t t = 0; t < input_hooks.size(); ++t)
       if (input_hooks[t].hooked_command.empty() || input_hooks[t].hooked_command == input.command){
-	dprintf("Executing callback %s for command %s\n", input_hooks[t].hook_name.c_str(), input.command.c_str());
+	Xprintf("Executing callback %s for command %s\n", input_hooks[t].hook_name.c_str(), input.command.c_str());
 	input_hooks[t].cb_hook(input);
       }
   }
@@ -211,13 +211,13 @@
     for (size_t t = 0; t < input_hooks.size(); ++t)
       if (input_hooks[t].override_filters &&
 	  (input_hooks[t].hooked_command.empty() || input_hooks[t].hooked_command == original_input.command)){
-	dprintf("Executing callback %s for command %s\n", input_hooks[t].hook_name.c_str(), input.command.c_str());
+	Xprintf("Executing callback %s for command %s\n", input_hooks[t].hook_name.c_str(), input.command.c_str());
 	input_hooks[t].cb_hook(original_input);
       }
   }
 
   inputs_mutex.leaveMutex();
-  dprintf("Input command: %s -> %s\n", input.command.c_str(), input.mode.c_str());
+  Xprintf("Input command: %s -> %s\n", input.command.c_str(), input.mode.c_str());
   return input;
 }
 

=== modified file 'plugins/output/sdl/sdlout.cpp'
--- plugins/output/sdl/sdlout.cpp	2009-03-11 18:22:39 +0000
+++ plugins/output/sdl/sdlout.cpp	2009-05-10 12:29:22 +0000
@@ -350,7 +350,7 @@
     }
 /*
     if (cond_wait_ret == ETIMEDOUT){
-      dprintf("Forcing sdl events handling\n");
+      Xprintf("Forcing sdl events handling\n");
     }
 */
     if (needs_screen_toggling){

--- regextools.cpp  2009-04-26 17:44:33.000000000 +0200
+++ regextools.cpp  2009-05-12 18:22:43.000000000 +0200
@@ -1,4 +1,5 @@
 #include "regextools.h"
+#include <cstdio>
 #include <cassert>
 #include <pcrecpp.h>
 using std::string;

--- plugins/feature/movie/Movie_info.cpp  2009-04-26 17:44:38.000000000 +0200
+++ plugins/feature/movie/Movie_info.cpp  2009-05-12 19:03:47.000000000 +0200
@@ -19,6 +19,7 @@
  ***************************************************************************/
     
 #include "Movie_info.h"
+#include <cstdio>
 #include <cstring>
 #include <sys/stat.h>
 #include <math.h>
         
