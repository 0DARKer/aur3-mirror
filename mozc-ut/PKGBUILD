# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

##
## Build configuration 
##
## You can choose the input method framework to use either ibus, scim and/or uim.
## If you will not be using ibus, comment out below.
_ibus_mozc="yes"
## If you will be using scim, uncomment below.
## **CAUTION** scim-mozc will be removed from upstream.
## Please see mozc issue #131:
## http://code.google.com/p/mozc/issues/detail?id=131
#_scim_mozc="yes"
## If you will be using uim, uncomment below.
#_uim_mozc="yes"

## If you will be using mozc.el on Emacs, uncomment below.
#_emacs_mozc="yes"

## ニコニコ大百科IME辞書 (NICONICOPEDIA IME dictionary)
## if you want to make redistributable mozc-ut,
## keep **DISABLE** _NICODIC="yes" please.
#_NICODIC="yes"

## Mozc compile option
_bldtype=Release
#_bldtype=Debug

#*************************************************************
# Upstreams:
#
# mozc
# http://code.google.com/p/mozc/
#
# Japanese zip code data by Japan Post
# http://www.post.japanpost.jp/zipcode/download.html
#
# Mozc UT dictionary
# http://www.geocities.jp/ep3797/mozc_01.html
#
# uim-mozc by macuim
# http://code.google.com/p/macuim/
#
#*************************************************************
# Changes to original mozc:
#
# 1. Add Mozc UT dictionary
# 2. Add uim-mozc (optional)
#
#*************************************************************

_mozcver=1.4.1033.102
_utdicver=20120402
_zipcoderel=201203
_uimmozcrev=309
_protobuf_ver=2.4.1

pkgbase=mozc-ut
pkgname=mozc-ut
true && pkgname=('mozc-ut')
pkgver=${_mozcver}.${_utdicver}
pkgrel=1
arch=('i686' 'x86_64')
url="http://www.geocities.jp/ep3797/mozc_01.html"
license=('BSD' 'GPL' 'CC-BY-SA' 'custom')
makedepends=('pkg-config' 'python2' 'zinnia' 'ruby')
changelog=ChangeLog
source=(http://mozc.googlecode.com/files/mozc-${_mozcver}.tar.bz2
        http://downloads.sourceforge.net/project/pnsft-aur/mozc/mozcdic-ut-${_utdicver}.tar.bz2
        http://downloads.sourceforge.net/project/pnsft-aur/mozc/ken_all-${_zipcoderel}.zip
        http://downloads.sourceforge.net/project/pnsft-aur/mozc/jigyosyo-${_zipcoderel}.zip
        http://protobuf.googlecode.com/files/protobuf-${_protobuf_ver}.tar.bz2
        EDICT_license.html
        emacs_fix.patch
)
sha1sums=('93a4918acc5115847efbaea91f05962c4ccf4bba'
          '8fafc67548142b3467c79da42eaf2bbe0142447c'
          '8dd608fe8d0450491f0fbbde1cb8414e09cf2a76'
          'f56bf6534e63c85f8a3014f132deec095da97977'
          'df5867e37a4b51fb69f53a8baf5b994938691d6d'
          'e0ba18e67c1be8e3cfb8ecb30760597b215da255'
          '28e4f593bfe37e76aa5084de169cf78127032b8b')

if [[ "$_ibus_mozc" = "yes" ]]; then
  true && pkgname+=('ibus-mozc-ut')
  makedepends+=('ibus')
fi
if [[ "$_scim_mozc" = "yes" ]]; then
  true && pkgname+=('scim-mozc-ut')
  makedepends+=('scim')
fi
if [[ "$_uim_mozc"  = "yes" ]]; then
  true && pkgname+=('uim-mozc-ut')
  makedepends+=('uim')
  source+=(http://downloads.sourceforge.net/project/pnsft-aur/mozc/uim-mozc-${_uimmozcrev}.tar.xz)
  sha1sums+=('e3fff0791fb1345fb205c0c4215a3897ff28428c')
fi

if [[ "$_emacs_mozc" = "yes" ]]; then
  true && pkgname+=('emacs-mozc-ut')
fi

# run qmake -v and check version
qmake_check_v4() {
  if [[ -x "$1" ]]; then
    if echo `$1 -v 2>&1` | grep "Qt version 4\." >/dev/null 2>&1; then
      return 0
    fi
  fi
  return 1
}

build() {
  msg '====================================================='
  msg '               *** Build Info ***'
  msg ' The following package files will be generated:'
  for _p in ${pkgname[@]}
  do
    msg "  * ${_p}-${pkgver}-${pkgrel}-${CARCH}${PKGEXT}"
  done
  msg '====================================================='

  # Checking Qt4 environments
  _qt4dir=""
  _qmnames="qmake-qt4 qmake4 qmake"

  # qt4 check: $QTDIR
  if [[ -z "$_qt4dir" && "$QTDIR" ]]; then
    for n in $_qmnames; do
      _qstr=${QTDIR}/bin/${n}
      if qmake_check_v4 "$_qstr"; then
        _qt4dir=`dirname $_qstr`
        break;
      fi
    done
  fi

  # qt4 check: pkg-config
  if [[ -z "$_qt4dir" ]]; then
    _str=`pkg-config QtCore --variable=exec_prefix 2>/dev/null`
    if [[ "$_str" ]]; then
      for n in $_qmnames; do
        _qstr=${_str}/bin/${n}
        if qmake_check_v4 "$_qstr"; then
          _qt4dir=`dirname $_qstr`
          break;
        fi
      done
    fi
  fi

  # qt4 check: PATH
  if [[ -z "$_qt4dir" ]]; then
    for n in $_qtnames; do
      _qstr="`which $n 2>/dev/null`"
      if qmake_check_v4 "$_qstr"; then
        _qt4dir=`dirname $_qstr`
        break;
      fi
    done
  fi

  if [[ -z "$_qt4dir" ]]; then
    msg "'qmake' for Qt4 not found."
    exit 1
  else
    _qt4dir=${_qt4dir%%/bin}
  fi
  # End of checking Qt4 environments

  # Generate mozc-ut dictionary seed
  cd "${srcdir}/mozcdic-ut-${_utdicver}"

  cp -f "${srcdir}/KEN_ALL.CSV" "${srcdir}/JIGYOSYO.CSV" chimei/
  # Adjust for Ruby>=1.9, makepkg, etc.
  find . -name \*.rb -type f \
    -exec sed -i \
              -e '2i #-*- coding: utf-8 -*-' \
              -e 's|\]\.length |\]\.bytesize |g' \
              -e 's|^$KCODE=.*|#&|' \
              -e "s|^require 'jcode'.*|#&|" {} +
  sed -i \
      -e "s|^MOZCVER=.*|MOZCVER=\"${_mozcver}\"|" \
      -e "s|^DATE=.*|DATE=\"${_utdicver}\"|" \
      -e 's|^rm -f chimei/\*\.CSV.*|#&|' \
      -e 's|^rm -rf \.\./mozc-$MOZCVER|#&|' \
      -e 's|^echo "unpack official mozc.*|#&|' \
      -e 's|^tar jxf mozc-$MOZCVER\.tar\.bz2|#&|' \
      -e 's|^wget .*|#&|g' \
      -e 's|^unzip .*|#&|g' \
      -e 's|^python |python2 |g' \
      -e 's/^ruby .*/& || exit 1/g' \
      -e 's|^cp -r debian.*|#&|g' \
      -e 's|^svn .*|#&|' \
    generate-mozc-ut.sh
  [[ "$_NICODIC" = "yes" ]] && sed -i 's/NICODIC="false"/NICODIC="true"/' generate-mozc-ut.sh

  msg "Generating UT dictionary seed..."
  ./generate-mozc-ut.sh
  msg "Done."

  cd "${srcdir}/${pkgbase}-${pkgver}"

  # Patch for mozc.el issue #146
  patch -p0 -i "${srcdir}/emacs_fix.patch"

  # uim-mozc
  if [[ "$_uim_mozc" = "yes" ]]; then
    cp -rf "${srcdir}/uim-mozc-${_uimmozcrev}/uim" unix/
    # kill-line patch
    patch -p0 -i "${srcdir}/uim-mozc-${_uimmozcrev}/mozc-kill-line.diff"

    # Extract license part of uim-mozc
    head -n 32 unix/uim/mozc.cc > unix/uim/LICENSE
  fi

  # Copy protobuf to be linked statically
  cp -rf "${srcdir}/protobuf-${_protobuf_ver}" protobuf/files

  # Adjust to use python2
  find . -name  \*.py        -type f -exec sed -i -e "1s|python.*$|python2|"  {} +
  find . -regex ".*\.gypi?$" -type f -exec sed -i -e "s|'python'|'python2'|g" {} +

  msg "Starting make..."

  # Get make -j option from $MAKEFLAGS
  _jobs=`sed -n -e "s/.*--jobs=\([0-9]\+\).*/\1/p" -e "s/.*-j *\([0-9]\+\).*/\1/p" <<< "$MAKEFLAGS"`
  _jobs=${_jobs:-1}

  _targets="server/server.gyp:mozc_server gui/gui.gyp:mozc_tool "
  [[ "$_emacs_mozc" = "yes" ]] && _targets+="unix/emacs/emacs.gyp:mozc_emacs_helper "
  [[ "$_ibus_mozc"  = "yes" ]] && _targets+="unix/ibus/ibus.gyp:ibus_mozc "
  [[ "$_scim_mozc"  = "yes" ]] && _targets+="unix/scim/scim.gyp:scim_mozc unix/scim/scim.gyp:scim_mozc_setup "
  [[ "$_uim_mozc"   = "yes" ]] && _targets+="unix/uim/uim.gyp:uim-mozc "

  QTDIR=$_qt4dir python2 build_mozc.py gyp --channel_dev=0
  python2 build_mozc.py build_tools -c $_bldtype -j $_jobs
  python2 build_mozc.py build -c $_bldtype -j $_jobs $_targets

  [[ "$_ibus_mozc" = "yes" ]] && sed -i 's|/usr/libexec/|/usr/lib/ibus-mozc/|g' out_linux/${_bldtype}/obj/gen/unix/ibus/mozc.xml

  if [[ "$_emacs_mozc" = "yes" ]]; then
    cd unix/emacs
    emacs -batch -f batch-byte-compile mozc.el
    cd ~-
  fi

  # Extract liccense part of mozc
  head -n 28 server/mozc_server.cc > LICENSE
}

package_mozc-ut() {
  pkgdesc="Mozc the Japanese Input Method containing Mozc UT Dictionary"
  arch=('i686' 'x86_64')
  groups=('mozc-im-ut')
  depends=('curl')
  provides=('mozc')
  replaces=('mozc-server-ut' 'mozc-utils-gui-ut')
  conflicts=('mozc' 'mozc-server' 'mozc-utils-gui')
  optdepends=('zinnia: hand-writing recognition support'
              'tegaki-models-zinnia-japanese: hand-writing recognition support')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/mozc_server "${pkgdir}/usr/lib/mozc/mozc_server"
  install -D -m 755 out_linux/${_bldtype}/mozc_tool "${pkgdir}/usr/lib/mozc/mozc_tool"
  install -d "${pkgdir}/usr/lib/mozc/documents/"
  install    -m 644 data/installer/*.html "${pkgdir}/usr/lib/mozc/documents/"

  _licpath="${pkgdir}/usr/share/licenses/${pkgbase}"
  install -D -m 644 LICENSE "${_licpath}/LICENSE_MOZC"
  cd doc-ut
  install -D -m 644 README "${_licpath}/README_MOZC-UT"
  _dics="skk jinmei hatena ekimei edict chimei altcanna "
  [[ "$_gendic" = "yes" && "$_NICODIC" = "yes" ]] && _dics+="niconico"
  for d in $_dics
  do
    install -d "${_licpath}/dictionary/${d}"
    install -m 644 dictionary/${d}/* "${_licpath}/dictionary/${d}"
  done
  install -m 644 ${srcdir}/EDICT_license.html "${_licpath}/dictionary/edict/license.html"
}

package_emacs-mozc-ut() {
  pkgdesc="Mozc for Emacs"
  arch=('i686' 'x86_64')
  groups=('mozc-im-ut')
  depends=("mozc-ut=${pkgver}" 'emacs')
  install=emacs-mozc.install
  replaces=('emacs-mozc-bin')
  provides=('emacs-mozc')
  conflicts=('emacs-mozc' 'emacs-mozc-bin')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/mozc_emacs_helper "${pkgdir}/usr/bin/mozc_emacs_helper"
  install -d "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc/"
  install -m 644 unix/emacs/mozc.el{,c} "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc"
}

package_ibus-mozc-ut() {
  pkgdesc="IBus engine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-im-ut')
  depends=("mozc-ut=${pkgver}" 'ibus')
  provides=('ibus-mozc')
  conflicts=('ibus-mozc')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/ibus_mozc       "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
  install -D -m 644 out_linux/${_bldtype}/obj/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"
}

package_scim-mozc-ut() {
  pkgdesc="SCIM IMEngine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-im-ut')
  depends=("mozc-ut=${pkgver}" 'scim')
  provides=('scim-mozc')
  conflicts=('scim-mozc')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  _moduledir=`pkg-config scim --variable=moduledir`
  install -D -m 755 out_linux/${_bldtype}/lib.target/libscim_mozc.so       "${pkgdir}${_moduledir}/IMEngine/mozc.so"
  install -D -m 755 out_linux/${_bldtype}/lib.target/libscim_mozc_setup.so "${pkgdir}${_moduledir}/SetupUI/mozc-setup.so"
  _icondir=`pkg-config scim --variable=icondir`
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}${_icondir}/scim-mozc.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}${_icondir}/scim-mozc-tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}${_icondir}/scim-mozc-properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}${_icondir}/scim-mozc-dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}${_icondir}/scim-mozc-direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}${_icondir}/scim-mozc-hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}${_icondir}/scim-mozc-katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}${_icondir}/scim-mozc-katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}${_icondir}/scim-mozc-alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}${_icondir}/scim-mozc-alpha_full.png"
}

package_uim-mozc-ut() {
  pkgdesc="uim plugin module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-im-ut')
  depends=("mozc-ut=${pkgver}" 'uim')
  install=uim-mozc.install
  provides=('uim-mozc')
  conflicts=('uim-mozc')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/libuim-mozc.so  "${pkgdir}/usr/lib/uim/plugin/libuim-mozc.so"
  install -d "${pkgdir}/usr/share/uim"
  install    -m 644 ${srcdir}/uim-mozc-${_uimmozcrev}/scm/*.scm       "${pkgdir}/usr/share/uim/"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/uim/pixmaps/mozc.png"
  install    -m 644 data/images/unix/ui-tool.png       "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_selector.png"
  install    -m 644 data/images/unix/ui-properties.png "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_config_dialog.png"
  install    -m 644 data/images/unix/ui-dictionary.png "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_dictionary_tool.png"

  install -D -m 644 unix/uim/LICENSE "${pkgdir}/usr/share/licenses/${pkgbase}/uim-mozc/LICENSE"
}

# Global pkgdesc and depends are here so that they will be picked up by AUR
pkgdesc="Mozc the Japanese Input Method containing Mozc UT Dictionary (additional dictionary) and uim-mozc (optional)"
depends=('curl' 'qt')
