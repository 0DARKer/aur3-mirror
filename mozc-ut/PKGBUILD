# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

## You can choose the input method framework to use either ibus, scim, uim or both.
## If you will be not using ibus, comment out below.
_ibus_mozc="yes"
## If you will be using scim, uncomment below.
#_scim_mozc="yes"
## If you will be using uim, uncomment below.
#_uim_mozc="yes"

## If you will be using mozc.el on Emacs, uncomment below.
#_emacs_mozc="yes"

## You can add Japanese zip code provided by Japan Post.
## If you want to use it, uncomment below.
#_zipcode="yes"
## zip code data is as of 2011-06-30.

## NICONICOPEDIA IME dictionary (ニコニコ大百科IME辞書)
## if you want to make redistributable mozc-ut,
## keep **DISABLE** _NICODIC="yes" please.
#_NICODIC="yes"

#*************************************************************
# Upstreams:
#
# mozc
# http://code.google.com/p/mozc/
#
# Additional dictionary by UTSUMI
# http://www.geocities.jp/ep3797/mozc_01.html
#
# uim-mozc by macuim
# http://code.google.com/p/macuim/
#
#*************************************************************

pkgbase=mozc-ut
pkgname=mozc-ut
true && pkgname=('mozc-server-ut' 'mozc-utils-gui-ut')
_origname=mozc
_mozcver=1.1.773.102
_utver=20110728
_uimmozcrev=270
_protobuf_ver=2.4.1
pkgver=${_mozcver}.${_utver}
pkgrel=2
arch=('i686' 'x86_64')
url="http://www.geocities.jp/ep3797/mozc_01.html"
license=('BSD' 'GPL' 'custom')
makedepends=('pkg-config' 'python2' 'curl' 'qt' 'gtest' 'zinnia' 'protobuf' 'ruby')
changelog=ChangeLog
_copt=Release
#_copt=Debug
source=(http://mozc.googlecode.com/files/mozc-${_mozcver}.tar.bz2
        http://downloads.sourceforge.net/mdk-ut/mozcdic-ut-${_utver}.tar.bz2
        mozc-1.1.690.102-ibus-lang_panel.patch)
sha1sums=('8552b89d428571b034f757161a08995d725fc4aa'
          '682048d4d21caaa9982c48fd703a9e16716f08a6'
          'ac0c9bef87b3ca3efe16554c00713ad1b4dc4cf8')

if [[ "$_ibus_mozc" = "yes" ]]; then
    true && pkgname=(${pkgname[@]} 'ibus-mozc-ut')
    makedepends=(${makedepends[@]} 'ibus')
fi
if [[ "$_scim_mozc" = "yes" ]]; then
    true && pkgname=(${pkgname[@]} 'scim-mozc-ut')
    makedepends=(${makedepends[@]} 'scim')
fi
if [[ "$_emacs_mozc" = "yes" ]]; then
    true && pkgname=(${pkgname[@]} 'emacs-mozc-ut' 'emacs-mozc-bin-ut')
fi

if [[ "$_uim_mozc"  = "yes" ]]; then
    true && pkgname=(${pkgname[@]} 'uim-mozc-ut')
    makedepends=(${makedepends[@]} 'uim' 'subversion')
    source=(${source[@]}
            http://protobuf.googlecode.com/files/protobuf-${_protobuf_ver}.tar.bz2)
    sha1sums=(${sha1sums[@]}
            'df5867e37a4b51fb69f53a8baf5b994938691d6d')
else
    makedepends=(${makedepends[@]} 'protobuf')
fi

if [[ "$_zipcode" = "yes" ]]; then
    source=(${source[@]}
            'http://www.post.japanpost.jp/zipcode/dl/kogaki/zip/ken_all.zip'
            'http://www.post.japanpost.jp/zipcode/dl/jigyosyo/zip/jigyosyo.zip')
    sha1sums=(${sha1sums[@]}
              'fb50270dc8a5981ad9abf8035c070e5d477a0ed2'
              'be23fc7dc1dcbb70ccd6023f5434ab048504908e')
fi

build() {
  if [[ "$_ibus_mozc" != "yes" && "$_uim_mozc" != "yes" && "$_scim_mozc" != "yes" ]]; then
      msg "***********************************************************"
      msg " Please choose either one of ibus, scim or uim at least."
      msg " See PKGBUILD."
      msg "***********************************************************"
      return 1
  fi

  cd "$srcdir"

  # Checkout macuim-mozc (for uim-mozc)
  if [[ "$_uim_mozc" = "yes" ]]; then
    msg "Connecting to macuim SVN server..."
    svn co http://macuim.googlecode.com/svn/trunk/Mozc uim-mozc -r $_uimmozcrev
    msg "SVN checkout done or server timeout"
  fi

  # Adjust for python2
  find . -name  \*.py        -type f | xargs sed -i "1s|python.*$|python2|"
  find . -regex ".*\.gypi?$" -type f | xargs sed -i "s|'python'|'python2'|g"

  # Generate mozc-ut dictionary seeds
  cd "${srcdir}/mozcdic-ut-${_utver}"
  # Adjust for Ruby>=1.9 and makepkg
  find . -name \*.rb -type f | xargs sed -i -e "2i #-*- encoding: utf-8 -*-" -e "s/\]\.length /\]\.bytesize /g"
  sed -i -e '/rm -rf ..\/mozc-$MOZCVER\//d' -e '/tar jxf mozc-$MOZCVER.tar.bz2/d' generate-mozc-ut.sh
  [[ "$_NICODIC" = "yes" ]] && sed -i 's/NICODIC="false"/NICODIC="true"/' generate-mozc-ut.sh
  msg "Generating UT dictionary seeds..."
  ./generate-mozc-ut.sh
  msg "Done."

  if [[ "$_zipcode" = "yes" ]]; then
      msg "Generating zip code seed..."
      # fix zipcode generator
      cp -f zipcode/gen_zip_code_seed.py ../${pkgbase}-${_mozcver}/data/dictionary/
      # generate zipcode
      cd ../${pkgbase}-${_mozcver}/data/dictionary/
      python2 gen_zip_code_seed.py --zip_code="${srcdir}/KEN_ALL.CSV" --jigyosyo="${srcdir}/JIGYOSYO.CSV" >> dictionary09.txt
      msg "Done."
  fi

  cd "${srcdir}/${pkgbase}-${_mozcver}"

  # uim-mozc
  if [[ "$_uim_mozc" = "yes" ]]; then
      # patch to link protobuf statically
      cp -rf "${srcdir}/protobuf-${_protobuf_ver}" protobuf/files
      patch -p0 -i "${srcdir}/uim-mozc/mozc-linux-protobuf.diff"
      cp -rf "${srcdir}/uim-mozc/uim" unix/
      patch -p0 -i "${srcdir}/uim-mozc/mozc-kill-line.diff"
  fi

  msg "Starting make..."

  _targets="server/server.gyp:mozc_server gui/gui.gyp:mozc_tool"
  [[ "$_emacs_mozc" = "yes" ]] && _targets="${_targets} unix/emacs/emacs.gyp:mozc_emacs_helper"
  [[ "$_ibus_mozc"  = "yes" ]] && _targets="${_targets} unix/ibus/ibus.gyp:ibus_mozc"
  [[ "$_scim_mozc"  = "yes" ]] && _targets="${_targets} unix/scim/scim.gyp:scim_mozc unix/scim/scim.gyp:scim_mozc_setup"
  [[ "$_uim_mozc"   = "yes" ]] && _targets="${_targets} unix/uim/uim.gyp:uim-mozc"

  python2 build_mozc.py gyp --channel_dev=0
  python2 build_mozc.py build_tools -c $_copt
  python2 build_mozc.py build -c $_copt $_targets

  if [[ "$_ibus_mozc" = "yes" ]]; then
      sed -i 's|/usr/libexec/|/usr/lib/ibus-mozc/|g' out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml
  fi
}

package_mozc-server-ut() {
  pkgdesc="Server part of the Mozc input method"
  arch=('i686' 'x86_64')
  groups=('mozc-ut')
  depends=('curl')
  [[ "$_uim_mozc" != "yes" ]] && depends=(${depends[@]} 'protobuf')
  replaces=('mozc')
  provides=('mozc' 'mozc-server')
  conflicts=('mozc' 'mozc-server')

  cd "${srcdir}/${pkgbase}-${_mozcver}"
  install -D -m 755 out_linux/${_copt}/mozc_server "${pkgdir}/usr/lib/mozc/mozc_server"
  install -d "${pkgdir}/usr/lib/mozc/documents/"
  install    -m 644 data/installer/*.html "${pkgdir}/usr/lib/mozc/documents/"

  cd "${srcdir}/mozcdic-ut-${_utver}"
  _licpath="${pkgdir}/usr/share/licenses/${pkgbase}/"
  install -d $_licpath
  install -m 644 COPYING $_licpath
  _dics="skk jinmei hatena edict altcanna"
  [[ "$_NICODIC" = "yes" ]] && _dics="$_dics niconico"
  for d in $_dics
  do
    install -d "${_licpath}/${d}"
    install -m 644 ${d}/doc/* "${_licpath}/${d}"
  done
}

package_mozc-utils-gui-ut() {
  pkgdesc="Mozc GUI uitilities, such as the configuration dialog, user dictionary tool and about dialog"
  arch=('i686' 'x86_64')
  groups=('mozc-ut')
  depends=('mozc-server-ut' 'qt')
  optdepends=('zinnia: hand-writing recognition support (Experimental)'
              'tegaki-models-zinnia-japanese: hand-writing recognition support (Experimental)')
  provides=('mozc-utils-gui')
  conflicts=('mozc-utils-gui')

  cd "${srcdir}/${pkgbase}-${_mozcver}"
  install -D -m 755 out_linux/${_copt}/mozc_tool "${pkgdir}/usr/lib/mozc/mozc_tool"
}

package_emacs-mozc-ut() {
  pkgdesc="Mozc for Emacs"
  arch=('any')
  groups=('mozc-ut')
  depends=('emacs-mozc-bin-ut' 'emacs')
  install=emacs-mozc.install
  provides=('emacs-mozc')
  conflicts=('emacs-mozc')

  cd "${srcdir}/${pkgbase}-${_mozcver}"
  install -D -m 644 unix/emacs/mozc.el "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc/mozc.el"
}

package_emacs-mozc-bin-ut() {
  pkgdesc="Helper module for emacs-mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-ut')
  depends=('mozc-server-ut')
  provides=('emacs-mozc-bin')
  conflicts=('emacs-mozc-bin')

  cd "${srcdir}/${pkgbase}-${_mozcver}"
  install -D -m 755 out_linux/${_copt}/mozc_emacs_helper "${pkgdir}/usr/bin/mozc_emacs_helper"
}

package_ibus-mozc-ut() {
  pkgdesc="IBus engine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-ut')
  depends=('mozc-server-ut' 'ibus')
  provides=('ibus-mozc')
  conflicts=('ibus-mozc')

  cd "${srcdir}/${pkgbase}-${_mozcver}"
  install -D -m 755 out_linux/${_copt}/ibus_mozc          "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
  install -D -m 644 out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"
}

package_scim-mozc-ut() {
  pkgdesc="SCIM IMEngine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-ut')
  depends=('mozc-server-ut' 'scim')
  provides=('scim-mozc')
  conflicts=('scim-mozc')

  cd "${srcdir}/${pkgbase}-${_mozcver}"
  _moduledir=`pkg-config scim --variable=moduledir`
  install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc.so       "${pkgdir}${_moduledir}/IMEngine/mozc.so"
  install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc_setup.so "${pkgdir}${_moduledir}/SetupUI/mozc-setup.so"
  _icondir=`pkg-config scim --variable=icondir`
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}${_icondir}/scim-mozc.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}${_icondir}/scim-mozc-tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}${_icondir}/scim-mozc-properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}${_icondir}/scim-mozc-dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}${_icondir}/scim-mozc-direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}${_icondir}/scim-mozc-hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}${_icondir}/scim-mozc-katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}${_icondir}/scim-mozc-katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}${_icondir}/scim-mozc-alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}${_icondir}/scim-mozc-alpha_full.png"
}

package_uim-mozc-ut() {
  pkgdesc="uim IMEngine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-ut')
  depends=('mozc-server-ut' 'uim')
  install=uim-mozc.install
  provides=('uim-mozc')
  conflicts=('uim-mozc')

  cd "${srcdir}/${pkgbase}-${_mozcver}"
  install -D -m 755 out_linux/${_copt}/libuim-mozc.so  "${pkgdir}/usr/lib/uim/plugin/libuim-mozc.so"
  install -d "${pkgdir}/usr/share/uim"
  install    -m 644 ${srcdir}/uim-mozc/scm/*.scm       "${pkgdir}/usr/share/uim/"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/uim/pixmaps/mozc.png"
  install    -m 644 data/images/unix/ui-tool.png       "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_selector.png"
  install    -m 644 data/images/unix/ui-properties.png "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_config_dialog.png"
  install    -m 644 data/images/unix/ui-dictionary.png "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_dictionary_tool.png"
}

# Global pkgdesc and depends are here so that they will be picked up by AUR
pkgdesc="Mozc the Japanese Input Method including additional dictionary, with uim-mozc (optional)"
depends=('curl' 'protobuf' 'qt')
