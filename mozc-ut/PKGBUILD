# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

## You can choose the input method framework to use either ibus, scim, uim or both.
## If you will be not using ibus, comment out below.
_ibus_mozc="yes"
## If you will be using scim, uncomment below.
#_scim_mozc="yes"
## If you will be using uim, uncomment below.
#_uim_mozc="yes"

#*************************************************************
# Upstreams:
#
# mozc
# http://code.google.com/p/mozc/
#
# Alternative dictionary by UTSUMI
# http://www.geocities.jp/ep3797/mozc_01.html"
#
# uim-mozc by macuim
# http://code.google.com/p/macuim/
#
#*************************************************************

pkgname=mozc-ut
_origname=mozc
_mozcver=1.1.626.102
_utver=20110307
_uimmozcrev=222
_protobuf_ver=2.3.0
pkgver=${_mozcver}.${_utver}
pkgrel=1
pkgdesc="Mozc the Japanese input method using alternative dictionary, with uim-mozc (optional)"
arch=('i686' 'x86_64')
url="http://www.geocities.jp/ep3797/mozc_01.html"
license=('BSD' 'GPL' 'custom')
depends=('curl' 'qt')
makedepends=('python2' 'gtest')
provides=('mozc')
conflicts=('mozc' 'mozc-svn')
changelog=${pkgname}.ChangeLog
install=${pkgname}.install
_copt=Release
#_copt=Debug
source=(http://mozc.googlecode.com/files/mozc-${_mozcver}.tar.bz2
        http://downloads.sourceforge.net/mdk-ut/mozcdic-ut-advanced-${_utver}.tar.bz2
        mozc_tool_config.desktop
        mozc_tool_dic.desktop
        ArchLinux-utdic.patch)
sha1sums=('a755b0c32c31e5c0f69611896871f848ca2a5454'
          '120906b2be327ca0ebfda9a4a50fdcc3ae4f7bac'
          '66e0141e93129e8ded499cff67cc8828cce5efae'
          '53ff0c5d492665046bc3224b354ca57911634d7b'
          'b8f3170da6715f1feabfcc316cfedbe3f708815f')

[[ "$_ibus_mozc" = "yes" ]] && depends=(${depends[@]} 'ibus')
[[ "$_scim_mozc" = "yes" ]] && depends=(${depends[@]} 'scim')
if [[ "$_uim_mozc"  = "yes" ]]; then
    depends=(${depends[@]} 'uim')
    makedepends=(${makedepends[@]} 'subversion')
    source=(${source[@]}
            http://protobuf.googlecode.com/files/protobuf-${_protobuf_ver}.tar.bz2)
    sha1sums=(${sha1sums[@]}
              'db0fbdc58be22a676335a37787178a4dfddf93c6')
else
    depends=(${depends[@]} 'protobuf')
fi

build() {
  if [[ "$_ibus_mozc" != "yes" && "$_uim_mozc" != "yes" && "$_scim_mozc" != "yes" ]]; then
      msg "***********************************************************"
      msg " Please choose either one of ibus, scim or uim at least."
      msg " See PKGBUILD."
      msg "***********************************************************"
      return 1
  fi

  cd "$srcdir"

  # Checkout macuim-mozc (for uim-mozc)
  if [[ "$_uim_mozc" = "yes" ]]; then
      msg "Connecting to macuim SVN server..."
      if [[ -d uim-mozc/.svn ]]; then
          (cd uim-mozc ; svn update)
      else
          svn co http://macuim.googlecode.com/svn/trunk/Mozc uim-mozc -r $_uimmozcrev
      fi
      msg "SVN checkout done or server timeout"
  fi

  cd "${srcdir}/${_origname}-${_mozcver}"

  # uim-mozc
  if [[ "$_uim_mozc" = "yes" ]]; then
      # patch to link protobuf statically
      cp -rf "${srcdir}/protobuf-${_protobuf_ver}" protobuf/files
      patch -p0 -i "${srcdir}/uim-mozc/mozc-linux-protobuf.diff"
      cp -rf "${srcdir}/uim-mozc/uim" unix/
      patch -p0 -i "${srcdir}/uim-mozc/mozc-kill-line.diff"
      #patch -p0 -i "${srcdir}/temp-mozc-kill-line.patch"
  fi

  # Copy dictionary files
  cp -f ${srcdir}/mozcdic-ut-advanced-${_utver}/dictionaries/{dictionary*.txt,zip_code_seed.tsv} \
        data/dictionary/

  # Adjust to use python2
  sed -i '1s|python.*$|python2|' `find . -name \*.py -type f -print`
  sed -i "s|'python'|'python2'|" `grep -lR \'python\' * --include=*.gyp{,i}`

  # Modify branding
  patch -Np0 -i "${srcdir}/ArchLinux-utdic.patch"

  # build mozc server and tools
  python2 build_mozc.py gyp
  python2 build_mozc.py build_tools -c $_copt
  python2 build_mozc.py build -c $_copt \
      server/server.gyp:mozc_server \
      gui/gui.gyp:mozc_tool \
      unix/emacs/emacs.gyp:mozc_emacs_helper

  # build ibus-mozc
  if [[ "$_ibus_mozc" = "yes" ]]; then
      python2 build_mozc.py build -c $_copt unix/ibus/ibus.gyp:ibus_mozc
      sed -i 's|/usr/libexec/ibus-engine-mozc|/usr/lib/ibus-mozc/ibus-engine-mozc|' \
              out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml
  fi

  # build scim-mozc
  if [[ "$_scim_mozc" = "yes" ]]; then
      python2 build_mozc.py build -c $_copt unix/scim/scim.gyp:scim_mozc unix/scim/scim.gyp:scim_mozc_setup
  fi
  # build uim-mozc
  if [[ "$_uim_mozc" = "yes" ]]; then
      python2 build_mozc.py build -c $_copt unix/uim/uim.gyp:uim-mozc
  fi

  # update icon path in .desktop files
  if [[ "$_ibus_mozc" = "yes" ]]; then
      _icon_prop="/usr/share/ibus-mozc/properties.png"
      _icon_dic="/usr/share/ibus-mozc/dictionary.png"
  elif [[ "$_scim_mozc" = "yes" ]]; then
      _icondir=`pkg-config scim --variable=icondir`
      _icon_prop="${_icondir}/scim-mozc-properties.png"
      _icon_dic="${_icondir}/scim-mozc-dictionary.png"
  else
      _icon_prop="/usr/share/uim/pixmaps/mozc-properties.png"
      _icon_dic="/usr/share/uim/pixmaps/mozc-dictionary.png"
  fi
  sed "s|^Icon=|Icon=${_icon_prop}|" "${srcdir}/mozc_tool_config.desktop" > mozc_tool_config.desktop
  sed "s|^Icon=|Icon=${_icon_dic}|"  "${srcdir}/mozc_tool_dic.desktop"    > mozc_tool_dic.desktop

  echo -e "\n******************************\n"
  echo    " Build info:"
  echo    "  ibus-mozc  : ${_ibus_mozc}"
  echo    "  scim-mozc  : ${_scim_mozc}"
  echo    "  uim-mozc   : ${_uim_mozc}"
  echo -e "\n******************************\n"
}

package() {

  cd "${srcdir}/${_origname}-${_mozcver}"

  # install mozc server, tools, etc.
  install -D -m 755 out_linux/${_copt}/mozc_server       "${pkgdir}/usr/lib/mozc/mozc_server"
  install    -m 755 out_linux/${_copt}/mozc_tool         "${pkgdir}/usr/lib/mozc/mozc_tool"
  install -D -m 755 out_linux/${_copt}/mozc_emacs_helper "${pkgdir}/usr/bin/mozc_emacs_helper"
  install -D -m 644 unix/emacs/mozc.el    "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc/mozc.el"
  install -d "${pkgdir}/usr/lib/mozc/documents/"
  install    -m 644 data/installer/*.html "${pkgdir}/usr/lib/mozc/documents/"

  # install replacing dictionary's lisence file
  install -D -m 644 ${srcdir}/mozcdic-ut-advanced-${_utver}/dictionaries/COPYING \
                    "${pkgdir}/usr/share/licenses/${pkgname}/COPYING"

  # install ibus-mozc
  if [[ "$_ibus_mozc" = "yes" ]]; then
    install -D -m 755 out_linux/${_copt}/ibus_mozc                  "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
    install -D -m 644 out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
    install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
    install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
    install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
    install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
    install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
    install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
    install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
    install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
    install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
    install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"
  fi

  # install scim-mozc
  if [[ "$_scim_mozc" = "yes" ]]; then
    _moduledir=`pkg-config scim --variable=moduledir`
    install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc.so       "${pkgdir}${_moduledir}/IMEngine/mozc.so"
    install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc_setup.so "${pkgdir}${_moduledir}/SetupUI/mozc-setup.so"
    _icondir=`pkg-config scim --variable=icondir`
    install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}${_icondir}/scim-mozc.png"
    install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}${_icondir}/scim-mozc-tool.png"
    install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}${_icondir}/scim-mozc-properties.png"
    install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}${_icondir}/scim-mozc-dictionary.png"
    install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}${_icondir}/scim-mozc-direct.png"
    install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}${_icondir}/scim-mozc-hiragana.png"
    install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}${_icondir}/scim-mozc-katakana_half.png"
    install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}${_icondir}/scim-mozc-katakana_full.png"
    install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}${_icondir}/scim-mozc-alpha_half.png"
    install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}${_icondir}/scim-mozc-alpha_full.png"
  fi

  # install uim-mozc
  if [[ "$_uim_mozc" = "yes" ]]; then
    install -D -m 755 out_linux/${_copt}/libuim-mozc.so  "${pkgdir}/usr/lib/uim/plugin/libuim-mozc.so"
    install -d "${pkgdir}/usr/share/uim"
    install    -m 644 ${srcdir}/uim-mozc/scm/*.scm    "${pkgdir}/usr/share/uim/"
    install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/uim/pixmaps/mozc.png"
    install    -m 644 data/images/unix/ui-properties.png "${pkgdir}/usr/share/uim/pixmaps/mozc-properties.png"
    install    -m 644 data/images/unix/ui-dictionary.png "${pkgdir}/usr/share/uim/pixmaps/mozc-dictionary.png"
  fi

  # install .desktop files
  install -d "${pkgdir}/usr/share/applications"
  install -m 644 *.desktop "${pkgdir}/usr/share/applications/"
}
