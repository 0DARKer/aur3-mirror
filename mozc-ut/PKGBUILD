# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

##
## Build configuration 
##
## You can choose the input method framework to use either ibus, scim, uim or both.
## If you will not be using ibus, comment out below.
_ibus_mozc="yes"
## If you will be using scim, uncomment below.
#_scim_mozc="yes"
## If you will be using uim, uncomment below.
#_uim_mozc="yes"

## If you will be using mozc.el on Emacs, uncomment below.
#_emacs_mozc="yes"

## $QTDIR is changed temporarily and forcibly by default for Qt3 users.
## If you install Qt4 on your custom and set $QTDIR for Qt4, uncomment below.
#_qtdir="$QTDIR"

## Generate dictionary seeds from UT dictionary oneself.
## (Requires more build time)
#_gendic="yes"

## ニコニコ大百科IME辞書 (NICONICOPEDIA IME dictionary)
## if you want to make redistributable mozc-ut,
## keep **DISABLE** _NICODIC="yes" please.
## This is ignored if $_gendic != "yes".
#_NICODIC="yes"

## Mozc compile option
_bldtype=Release
#_bldtype=Debug

#*************************************************************
# Upstreams:
#
# mozc
# http://code.google.com/p/mozc/
#
# Japanese zip code data by Japan Post
# http://www.post.japanpost.jp/zipcode/download.html
#
# Additional dictionary by UTSUMI
# http://www.geocities.jp/ep3797/mozc_01.html
#
# uim-mozc by macuim
# http://code.google.com/p/macuim/
#
#*************************************************************

pkgbase=mozc-ut
pkgname=mozc-ut
true && pkgname=('mozc-ut')
_mozcver=1.2.855.102
_utdicver=20111125
_zipcoderel=201110
_uimmozcrev=287
_protobuf_ver=2.4.1
pkgrel=1
arch=('i686' 'x86_64')
url="http://www.geocities.jp/ep3797/mozc_01.html"
license=('BSD' 'GPL' 'custom')
makedepends=('pkg-config' 'python2' 'gtest' 'zinnia')
changelog=ChangeLog
if [[ "$_gendic" != "yes" ]]; then
  # Patched source from UT
  pkgver=1.2.855.102.20111125
  source=(http://downloads.sourceforge.net/mdk-ut/mozc-ut-${pkgver}.7z)
  sha1sums=('8bf4fc499048995283d1c33d1642fc0cd8a92ddd')
  makedepends+=('p7zip')
else
  pkgver=${_mozcver}.${_utdicver}
  source=(http://mozc.googlecode.com/files/mozc-${_mozcver}.tar.bz2
          http://downloads.sourceforge.net/mdk-ut/mozcdic-ut-${_utdicver}.tar.bz2)
  sha1sums=('c078e9cbc00d3c216aa0d739ae4f4405a2259e94'
            'd0aba35246b3f51797a98edf05ee675b5d14d0ca')
  makedepends+=('ruby')
fi
source+=(mozc-1.1.690.102-ibus-lang_panel.patch
         http://downloads.sourceforge.net/pnsft-aur/ken_all-${_zipcoderel}.zip
         http://downloads.sourceforge.net/pnsft-aur/jigyosyo-${_zipcoderel}.zip
)
sha1sums+=('ac0c9bef87b3ca3efe16554c00713ad1b4dc4cf8'
           '0e4086d36ffac502e2f573cb6748d7f06f82108e'
           '4d55bad0fec95368bd3dff8373b9165cc033c03a'
)

if [[ "$_ibus_mozc" = "yes" ]]; then
    true && pkgname+=('ibus-mozc-ut')
    makedepends+=('ibus')
fi
if [[ "$_scim_mozc" = "yes" ]]; then
    true && pkgname+=('scim-mozc-ut')
    makedepends+=('scim')
fi
if [[ "$_emacs_mozc" = "yes" ]]; then
    true && pkgname+=('emacs-mozc-ut')
fi

if [[ "$_uim_mozc"  = "yes" ]]; then
    true && pkgname+=('uim-mozc-ut')
    makedepends+=('uim')
    source+=(http://downloads.sourceforge.net/project/pnsft-aur/mozc/uim-mozc-${_uimmozcrev}.tar.xz
             http://protobuf.googlecode.com/files/protobuf-${_protobuf_ver}.tar.bz2)
    sha1sums+=('6551cf4cef92147a72f3291a093d2f2713d5613f'
               'df5867e37a4b51fb69f53a8baf5b994938691d6d')
else
    depends+=('protobuf')
fi

build() {
  if [[ "$_ibus_mozc" != "yes" && "$_scim_mozc" != "yes" && "$_uim_mozc" != "yes" ]]; then
    msg "*****************************************************"
    msg " Please choose either one of ibus, scim or uim"
    msg " at least. See PKGBUILD."
    msg "*****************************************************"
    return 1
  fi

  if [[ "$QTDIR" && -z "$_qtdir" ]]; then
    msg '====================================================='
    msg '                *** CAUTION ***'
    msg ' $QTDIR will be replaced temporarily and forcibly'
    msg ' for Qt3 users.'
    msg ' If it is inconvenient for you, please edit'
    msg ' PKGBUILD. (Please see it for datail)'
    msg '====================================================='
  fi

  msg '====================================================='
  msg '               *** Build Info ***'
  msg ' The following package files will be generated:'
  for _p in ${pkgname[@]}
  do
    msg "  * ${_p}-${pkgver}-${pkgrel}-${CARCH}${PKGEXT}"
  done
  msg '====================================================='

  cd $srcdir

  if [[ "$_gendic" = "yes" ]]; then
    # Generate mozc-ut dictionary seeds
    cd "${srcdir}/mozcdic-ut-${_utdicver}"
    # Adjust for Ruby>=1.9, makepkg, etc.
    find . -name \*.rb -type f | xargs sed -i -e "2i #-*- encoding: utf-8 -*-" -e "s/\]\.length /\]\.bytesize /g"
    sed -i -e "s|^MOZCVER=.*|MOZCVER=\"${_mozcver}\"|" \
           -e "s|^DATE=.*|DATE=\"${_utdicver}\"|" \
           -e 's|^rm -rf \.\./mozc-$MOZCVER|#&|' \
           -e 's|^tar jxf mozc-$MOZCVER.tar.bz2|#&|' \
           -e "s/^ruby.*/& || exit 1/g" \
           -e 's|^svn.*|#&|' \
      generate-mozc-ut.sh
    [[ "$_NICODIC" = "yes" ]] && sed -i 's/NICODIC="false"/NICODIC="true"/' generate-mozc-ut.sh
    msg "Generating UT dictionary seeds..."
    sh ./generate-mozc-ut.sh
    msg "Done."
  else
    7z x -y mozc-ut-${pkgver}.7z
  fi

  cd "${srcdir}/${pkgbase}-${pkgver}"

  # uim-mozc
  if [[ "$_uim_mozc" = "yes" ]]; then
      # patch to link protobuf statically
      cp -rf "${srcdir}/protobuf-${_protobuf_ver}" protobuf/files
      patch -p0 -i "${srcdir}/uim-mozc-${_uimmozcrev}/mozc-linux-protobuf.diff"
      cp -rf "${srcdir}/uim-mozc-${_uimmozcrev}/uim" unix/
      patch -p0 -i "${srcdir}/uim-mozc-${_uimmozcrev}/mozc-kill-line.diff"
      # Extract license part of uim-mozc
      head -n 32 unix/uim/mozc.cc > unix/uim/LICENSE
  fi

  # Adjust for python2
  find . -name  \*.py        -type f | xargs sed -i "1s|python.*$|python2|"
  find . -regex ".*\.gypi?$" -type f | xargs sed -i "s|'python'|'python2'|g"

  # Add zip code
  msg "Generating zip code seed..."
  python2 dictionary/gen_zip_code_seed.py --zip_code="${srcdir}/KEN_ALL.CSV" --jigyosyo="${srcdir}/JIGYOSYO.CSV" >> data/dictionary/dictionary09.txt
  msg "Done."

  # patch to add some (hidden) tool's menu items into lang panel of ibus by Vine Linux.
  patch -p1 -i "${srcdir}/mozc-1.1.690.102-ibus-lang_panel.patch"

  msg "Starting make..."

  # Get make -j option from $MAKEFLAGS
  _jobs=`sed -n -e "s/.*--jobs=\([0-9]\+\).*/\1/p" -e "s/.*-j *\([0-9]\+\).*/\1/p" <<< "$MAKEFLAGS"`
  [[ -z $_jobs ]] && _jobs=1

  _targets="server/server.gyp:mozc_server gui/gui.gyp:mozc_tool "
  [[ "$_emacs_mozc" = "yes" ]] && _targets+="unix/emacs/emacs.gyp:mozc_emacs_helper "
  [[ "$_ibus_mozc"  = "yes" ]] && _targets+="unix/ibus/ibus.gyp:ibus_mozc "
  [[ "$_scim_mozc"  = "yes" ]] && _targets+="unix/scim/scim.gyp:scim_mozc unix/scim/scim.gyp:scim_mozc_setup "
  [[ "$_uim_mozc"   = "yes" ]] && _targets+="unix/uim/uim.gyp:uim-mozc "

  QTDIR="$_qtdir" python2 build_mozc.py gyp --channel_dev=0
  python2 build_mozc.py build_tools -c $_bldtype -j $_jobs
  python2 build_mozc.py build -c $_bldtype -j $_jobs $_targets

  [[ "$_ibus_mozc" = "yes" ]] && sed -i 's|/usr/libexec/|/usr/lib/ibus-mozc/|g' out_linux/${_bldtype}/obj/gen/unix/ibus/mozc.xml

  if [[ "$_emacs_mozc" = "yes" ]]; then
    cd unix/emacs
    emacs -batch -f batch-byte-compile mozc.el
    cd ~-
  fi

  # Extract liccense part of mozc
  head -n 28 server/mozc_server.cc > LICENSE
}

package_mozc-ut() {
  pkgdesc="Mozc the Japanese Input Method comes with Mozc UT Dictionary (additional dictionary) and uim-mozc (optional)"
  arch=('i686' 'x86_64')
  groups=('mozc-im')
  depends=('curl')
  [[ "$_uim_mozc" != "yes" ]] && depends+=('protobuf')
  provides=('mozc')
  replaces=('mozc-server-ut' 'mozc-utils-gui-ut')
  conflicts=('mozc' 'mozc-server' 'mozc-utils-gui')
  optdepends=('zinnia: hand-writing recognition support (Experimental)'
              'tegaki-models-zinnia-japanese: hand-writing recognition support (Experimental)')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/mozc_server "${pkgdir}/usr/lib/mozc/mozc_server"
  install -D -m 755 out_linux/${_bldtype}/mozc_tool "${pkgdir}/usr/lib/mozc/mozc_tool"
  install -d "${pkgdir}/usr/lib/mozc/documents/"
  install    -m 644 data/installer/*.html "${pkgdir}/usr/lib/mozc/documents/"

  install -D -m 644 LICENSE "${pkgdir}/usr/share/licenses/${pkgbase}/LICENSE_MOZC"

  cd doc-ut
  _licpath="${pkgdir}/usr/share/licenses/${pkgbase}"
  install -D -m 644 README ${_licpath}/README_MOZC-UT
  _dics="skk jinmei hatena edict altcanna"
  [[ "$_gendic" = "yes" && "$_NICODIC" = "yes" ]] && _dics+=" niconico"
  for d in $_dics
  do
    install -d "${_licpath}/dictionary/${d}"
    install -m 644 dictionary/${d}/* "${_licpath}/dictionary/${d}"
  done
}

package_emacs-mozc-ut() {
  pkgdesc="Mozc for Emacs"
  arch=('i686' 'x86_64')
  groups=('mozc-im')
  depends=("mozc-ut=${pkgver}" 'emacs')
  install=emacs-mozc.install
  replaces=('emacs-mozc-bin')
  provides=('emacs-mozc')
  conflicts=('emacs-mozc' 'emacs-mozc-bin')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/mozc_emacs_helper "${pkgdir}/usr/bin/mozc_emacs_helper"
  install -d "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc/"
  install -m 644 unix/emacs/mozc.el{,c} "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc"
}

package_ibus-mozc-ut() {
  pkgdesc="IBus engine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-im')
  depends=("mozc-ut=${pkgver}" 'ibus')
  provides=('ibus-mozc')
  conflicts=('ibus-mozc')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/ibus_mozc       "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
  install -D -m 644 out_linux/${_bldtype}/obj/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"
}

package_scim-mozc-ut() {
  pkgdesc="SCIM IMEngine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-im')
  depends=("mozc-ut=${pkgver}" 'scim')
  provides=('scim-mozc')
  conflicts=('scim-mozc')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  _moduledir=`pkg-config scim --variable=moduledir`
  install -D -m 755 out_linux/${_bldtype}/lib.target/libscim_mozc.so       "${pkgdir}${_moduledir}/IMEngine/mozc.so"
  install -D -m 755 out_linux/${_bldtype}/lib.target/libscim_mozc_setup.so "${pkgdir}${_moduledir}/SetupUI/mozc-setup.so"
  _icondir=`pkg-config scim --variable=icondir`
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}${_icondir}/scim-mozc.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}${_icondir}/scim-mozc-tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}${_icondir}/scim-mozc-properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}${_icondir}/scim-mozc-dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}${_icondir}/scim-mozc-direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}${_icondir}/scim-mozc-hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}${_icondir}/scim-mozc-katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}${_icondir}/scim-mozc-katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}${_icondir}/scim-mozc-alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}${_icondir}/scim-mozc-alpha_full.png"
}

package_uim-mozc-ut() {
  pkgdesc="uim IMEngine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-im')
  depends=("mozc-ut=${pkgver}" 'uim')
  install=uim-mozc.install
  provides=('uim-mozc')
  conflicts=('uim-mozc')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/libuim-mozc.so  "${pkgdir}/usr/lib/uim/plugin/libuim-mozc.so"
  install -d "${pkgdir}/usr/share/uim"
  install    -m 644 ${srcdir}/uim-mozc-${_uimmozcrev}/scm/*.scm       "${pkgdir}/usr/share/uim/"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/uim/pixmaps/mozc.png"
  install    -m 644 data/images/unix/ui-tool.png       "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_selector.png"
  install    -m 644 data/images/unix/ui-properties.png "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_config_dialog.png"
  install    -m 644 data/images/unix/ui-dictionary.png "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_dictionary_tool.png"

  install -D -m 644 unix/uim/LICENSE "${pkgdir}/usr/share/licenses/${pkgbase}/uim-mozc/LICENSE"
}

# Global pkgdesc and depends are here so that they will be picked up by AUR
pkgdesc="Mozc the Japanese Input Method comes with Mozc UT Dictionary (additional dictionary) and uim-mozc (optional)"
depends=('curl' 'qt')
