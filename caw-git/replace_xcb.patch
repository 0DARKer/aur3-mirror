--- setup.py
+++ setup.py
@@ -5,7 +5,7 @@

 # Check for Python Xlib
 try:
-    import xcb
+    import xcffib
 except:
     print "\nCaw! requires the XPYB"
     print "http://sourceforge.net/projects/python-xlib/"

--- caw/widgets/desktop.py
+++ caw/widgets/desktop.py
@@ -1,5 +1,5 @@
 import caw.widget
-import xcb
+import xcffib
 import struct

 class Desktop(caw.widget.Widget):
@@ -49,7 +49,7 @@
         totalc = conn.core.GetProperty(0,
                 scr.root,
                 self._NET_NUMBER_OF_DESKTOPS,
-                xcb.XA_CARDINAL,
+                xcffib.XA_CARDINAL,
                 0,
                 12)

@@ -80,7 +80,7 @@
         conn = self.parent.connection
         scr = self.parent.screen
         currc = conn.core.GetProperty(0, scr.root, self._NET_CURRENT_DESKTOP,
-                xcb.XA_CARDINAL, 0, 12)
+                xcffib.XA_CARDINAL, 0, 12)
         currp = currc.reply()
         self.current = struct.unpack_from("I", currp.value.buf())[0]
         self.width_hint = self.parent.text_width(self._output())

--- caw/widgets/tasklist.py
+++ caw/widgets/tasklist.py
@@ -1,7 +1,7 @@
 import caw.widget
-import xcb
+import xcffib
 import struct
-import xcb.xproto as xproto
+import xcffib.xproto as xproto

 class Tasklist(caw.widget.Widget):
     """Basic tasklist.
@@ -117,7 +117,7 @@

         self.parent.atoms[self._NET_WM_DESKTOP].append(self._update_desktop)
         self.parent.atoms[self._NET_CLIENT_LIST].append(self._update_clients)
-        self.parent.atoms[xcb.XA_WM_NAME].append(self._update_name)
+        self.parent.atoms[xcffib.XA_WM_NAME].append(self._update_name)
         self.parent.atoms[self._NET_WM_NAME].append(self._update_name)
         self.parent.events[xproto.FocusInEvent].append(self._update_focus)
         self.parent.events[xproto.DestroyNotifyEvent].append(self._destroynotify)
@@ -130,7 +130,7 @@
         conn = self.parent.connection
         scr = self.parent.screen
         currc = conn.core.GetProperty(0, scr.root, self._NET_NUMBER_OF_DESKTOPS,
-                xcb.XA_CARDINAL, 0, 12)
+                xcffib.XA_CARDINAL, 0, 12)
         currp = currc.reply()
         self.number_of_desktops = struct.unpack_from("I", currp.value.buf())[0]

@@ -140,7 +140,7 @@
         conn = self.parent.connection
         scr = self.parent.screen
         currc = conn.core.GetProperty(0, scr.root, self._NET_CURRENT_DESKTOP,
-                xcb.XA_CARDINAL, 0, 12)
+                xcffib.XA_CARDINAL, 0, 12)
         currp = currc.reply()
         self.current_desktop = struct.unpack_from("I", currp.value.buf())[0]
         nf = self._next_focus.get(self.current_desktop, 0)
@@ -151,7 +151,7 @@
         self.parent.update()

     def input_focus(self, win):
-        self.parent.connection.core.SetInputFocus(xproto.InputFocus.Parent, win, xcb.CurrentTime)
+        self.parent.connection.core.SetInputFocus(xproto.InputFocus.Parent, win, xcffib.CurrentTime)

     def _destroynotify(self, evt):
         id = evt.window
@@ -175,7 +175,7 @@
         #event = struct.pack('BBHII5I', 33, 32, 0, win, self.WM_CHANGE_STATE, 3,0,0,0,0)
         #e = conn.core.SendEvent(0, win, 0xffffff, event)
         #print e.check()
-        #conn.core.ChangeProperty(xproto.PropMode.Replace, win, self.WM_CHANGE_STATE, xcb.XA_ATOM, 32, 1, struct.pack("I",self._NET_WM_STATE_HIDDEN))
+        #conn.core.ChangeProperty(xproto.PropMode.Replace, win, self.WM_CHANGE_STATE, xcffib.XA_ATOM, 32, 1, struct.pack("I",self._NET_WM_STATE_HIDDEN))

         return

@@ -184,7 +184,7 @@
         conn = self.parent.connection
         id = evt.window
         if id in self.clients:
-            r = conn.core.GetProperty(0, id, self._NET_WM_STATE, xcb.XA_ATOM, 0, 2**16).reply()
+            r = conn.core.GetProperty(0, id, self._NET_WM_STATE, xcffib.XA_ATOM, 0, 2**16).reply()
             state = struct.unpack_from('%dI' % r.value_len, r.value.buf())
             #print state
             if self._NET_WM_STATE_HIDDEN in state:
@@ -198,7 +198,7 @@
         if id in self.clients:
             r = conn.core.GetProperty(0, id, self._NET_WM_NAME, 0, 0, 2**16).reply()
             if not r.value_len:
-                r = conn.core.GetProperty(0, id, xcb.XA_WM_NAME, 0, 0, 2**16).reply()
+                r = conn.core.GetProperty(0, id, xcffib.XA_WM_NAME, 0, 0, 2**16).reply()
             val = struct.unpack_from('%ds' % r.value_len, r.value.buf())[0]
             #print "updated name value:", val, r.value_len, r.value.buf()
             self.clients[id]['name'] = val.strip("\x00")
@@ -208,7 +208,7 @@
         conn = self.parent.connection
         id = evt.window
         if id in self.clients:
-            r = conn.core.GetProperty(0, id, self._NET_WM_DESKTOP, xcb.XA_CARDINAL, 0, 12).reply()
+            r = conn.core.GetProperty(0, id, self._NET_WM_DESKTOP, xcffib.XA_CARDINAL, 0, 12).reply()
             #print "updating desktop:", id, self.clients[id]['name'], r.value_len
             if r.value_len > 0:
                 self.clients[id]['desktop'] = struct.unpack_from('I',r.value.buf())[0]
@@ -222,7 +222,7 @@
         clientsc = conn.core.GetProperty(0,
                 scr.root,
                 self._NET_CLIENT_LIST,
-                xcb.XA_WINDOW,
+                xcffib.XA_WINDOW,
                 0,
                 2**16)

@@ -237,11 +237,11 @@

         for id in clients:
             if id not in self.clients and id != self.parent.window:
-                classes[id] = conn.core.GetProperty(0, id, xcb.XA_WM_CLASS, xcb.XA_STRING, 0, 2**16)
-                desktops[id] = conn.core.GetProperty(0, id, self._NET_WM_DESKTOP, xcb.XA_CARDINAL, 0, 12)
+                classes[id] = conn.core.GetProperty(0, id, xcffib.XA_WM_CLASS, xcffib.XA_STRING, 0, 2**16)
+                desktops[id] = conn.core.GetProperty(0, id, self._NET_WM_DESKTOP, xcffib.XA_CARDINAL, 0, 12)
                 names[id] = conn.core.GetProperty(0, id, self._NET_WM_NAME, 0, 0, 2**16)
-                names_alt[id] = conn.core.GetProperty(0, id, xcb.XA_WM_NAME, 0, 0, 2**16)
-                states[id] = conn.core.GetProperty(0, id, self._NET_WM_STATE, xcb.XA_ATOM, 0, 2**16)
+                names_alt[id] = conn.core.GetProperty(0, id, xcffib.XA_WM_NAME, 0, 0, 2**16)
+                states[id] = conn.core.GetProperty(0, id, self._NET_WM_STATE, xcffib.XA_ATOM, 0, 2**16)

         for id in classes:
             #print "new window:", id

--- caw/widgets/systray.py
+++ caw/widgets/systray.py
@@ -1,6 +1,6 @@
 import caw.widget
-import xcb
-import xcb.xproto as xproto
+import xcffib
+import xcffib.xproto as xproto
 import caw.cawc as cawc

 class Systray(caw.widget.Widget):
@@ -49,8 +49,8 @@

         #print "Systray window:", self.window

-        conn.core.SetSelectionOwner(self.window, self._NET_SYSTEM_TRAY_S0, xcb.CurrentTime)
-        self.parent.send_event(scr.root, self.MANAGER, xcb.CurrentTime, self._NET_SYSTEM_TRAY_S0, self.window)
+        conn.core.SetSelectionOwner(self.window, self._NET_SYSTEM_TRAY_S0, xcffib.CurrentTime)
+        self.parent.send_event(scr.root, self.MANAGER, xcffib.CurrentTime, self._NET_SYSTEM_TRAY_S0, self.window)

         # have to manually build the event!
         #response_type = 33 # XCB_CLIENT_MESSAGE

--- caw/caw.py
+++ caw/caw.py
@@ -1,7 +1,7 @@
 import select
 import collections
-import xcb
-import xcb.xproto as xproto
+import xcffib
+import xcffib.xproto as xproto
 import struct
 import array
 import sys
@@ -68,7 +68,7 @@
         self.screen_c = cawc.xcb_screen(self.connection_c)
         self.visualtype_c = cawc.xcb_visualtype(self.screen_c)
 
-        self.connection = xcb.wrap(self.connection_c)
+        self.connection = xcffib.wrap(self.connection_c)
         self.screen = self.connection.get_setup().roots[0]
 
         self.border_width = kwargs.get('border_width', 2)
@@ -245,7 +245,7 @@
         conn = self.connection
         scr = self.screen
         cookie = conn.core.GetProperty(False, scr.root, self._XROOTPMAP_ID,
-                xcb.XA_PIXMAP, 0, 10)
+                xcffib.XA_PIXMAP, 0, 10)
 
         rep = cookie.reply()
         if len(rep.value.buf()) < 4:
@@ -257,26 +257,26 @@
         scr = self.screen
         win = self.window
 
-        conn.core.ChangeProperty(xproto.PropMode.Replace, win, xcb.XA_WM_NAME, xcb.XA_STRING, 8, len("CAW!"), "CAW!")
-
-        conn.core.ChangeProperty(xproto.PropMode.Replace, win, xcb.XA_WM_CLASS, xcb.XA_STRING, 8, len("caw\0CAW\0"), "caw\0CAW\0")
+        conn.core.ChangeProperty(xproto.PropMode.Replace, win, xcffib.XA_WM_NAME, xcffib.XA_STRING, 8, len("CAW!"), "CAW!")
+
+        conn.core.ChangeProperty(xproto.PropMode.Replace, win, xcffib.XA_WM_CLASS, xcffib.XA_STRING, 8, len("caw\0CAW\0"), "caw\0CAW\0")
 
         cawc.set_hints(self.connection_c, self.window, self.x, self.y, self.width, self.height);
 
-        conn.core.ChangeProperty(xproto.PropMode.Replace, win, self._NET_WM_DESKTOP, xcb.XA_CARDINAL, 32, 1, struct.pack("I",0xffffffff))
-
-        conn.core.ChangeProperty(xproto.PropMode.Replace, win, self._WIN_STATE, xcb.XA_CARDINAL, 32, 1, struct.pack("I",1))
+        conn.core.ChangeProperty(xproto.PropMode.Replace, win, self._NET_WM_DESKTOP, xcffib.XA_CARDINAL, 32, 1, struct.pack("I",0xffffffff))
+
+        conn.core.ChangeProperty(xproto.PropMode.Replace, win, self._WIN_STATE, xcffib.XA_CARDINAL, 32, 1, struct.pack("I",1))
 
 
         conn.core.ChangeWindowAttributes(scr.root,
                 xproto.CW.EventMask, 
                 [xproto.EventMask.PropertyChange|xproto.EventMask.StructureNotify])
 
-        conn.core.ChangeProperty(xproto.PropMode.Replace, win, self._NET_WM_WINDOW_TYPE, xcb.XA_ATOM, 32, 1, struct.pack("I",self._NET_WM_WINDOW_TYPE_DOCK))
+        conn.core.ChangeProperty(xproto.PropMode.Replace, win, self._NET_WM_WINDOW_TYPE, xcffib.XA_ATOM, 32, 1, struct.pack("I",self._NET_WM_WINDOW_TYPE_DOCK))
         if self.above:
-            conn.core.ChangeProperty(xproto.PropMode.Replace, win, self._NET_WM_STATE, xcb.XA_ATOM, 32, 4, struct.pack("IIII",self._NET_WM_STATE_SKIP_TASKBAR, self._NET_WM_STATE_SKIP_PAGER, self._NET_WM_STATE_STICKY, self._NET_WM_STATE_ABOVE))
+            conn.core.ChangeProperty(xproto.PropMode.Replace, win, self._NET_WM_STATE, xcffib.XA_ATOM, 32, 4, struct.pack("IIII",self._NET_WM_STATE_SKIP_TASKBAR, self._NET_WM_STATE_SKIP_PAGER, self._NET_WM_STATE_STICKY, self._NET_WM_STATE_ABOVE))
         else:
-            conn.core.ChangeProperty(xproto.PropMode.Replace, win, self._NET_WM_STATE, xcb.XA_ATOM, 32, 4, struct.pack("IIII",self._NET_WM_STATE_SKIP_TASKBAR, self._NET_WM_STATE_SKIP_PAGER, self._NET_WM_STATE_STICKY, self._NET_WM_STATE_BELOW))
+            conn.core.ChangeProperty(xproto.PropMode.Replace, win, self._NET_WM_STATE, xcffib.XA_ATOM, 32, 4, struct.pack("IIII",self._NET_WM_STATE_SKIP_TASKBAR, self._NET_WM_STATE_SKIP_PAGER, self._NET_WM_STATE_STICKY, self._NET_WM_STATE_BELOW))
 
 
     def _update_struts(self):
@@ -360,11 +360,11 @@
                     event = xproto.ClientMessageEvent(event)
                 for func in self.events[type(event)]:
                     func(event)
-            except xcb.xproto.BadWindow as e:
+            except xcffib.xproto.BadWindow as e:
                 # FIXME: not sure why i have to ignore this
                 # it is a fix for the system tray crashing
                 print "Bad Window:", (e.args[0].bad_value), e.args[0].major_opcode
-            except xcb.xproto.BadMatch as e:
+            except xcffib.xproto.BadMatch as e:
                 print "Bad Match:", (e.args[0].bad_value), e.args[0].major_opcode
             except IOError:
                 break
