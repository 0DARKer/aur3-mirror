--- Nagstamon/Server/Generic.py.orig	2011-05-10 08:34:56.324841334 +0200
+++ Nagstamon/Server/Generic.py	2011-05-08 22:12:33.000000000 +0200
@@ -87,6 +87,7 @@
         self.new_hosts = dict()
         self.new_hosts_in_maintenance = list()
         self.new_hosts_acknowledged = list()
+        self.new_hosts_disabled_notifications = list()
         self.thread = ""
         self.isChecking = False
         self.debug = False
@@ -372,6 +373,8 @@
         # hosts that are acknowledged, we will later omit services on those hosts
         # hostproperty 4 = HOST_STATE_ACKNOWLEDGED 
         nagcgiurl_hosts_acknowledged = self.nagios_cgi_url + "/status.cgi?hostgroup=all&style=hostdetail&hostprops=4"
+        # hosts that have disabled notifications, we will later omit services on these hosts
+        nagcgiurl_hosts_disabled_notifications = self.nagios_cgi_url + "/status.cgi?hostgroup=all&style=hostdetail&hostprops=4096"
 
         # hosts - mostly the down ones
         # unfortunately the hosts status page has a different structure so
@@ -617,6 +620,45 @@
             self.isChecking = False
             result, error = self.Error(sys.exc_info())
             return Result(result=result, error=error)
+
+        # hosts which have disabled notifications
+        try:
+            #result = Result()
+            result = self.FetchURL(nagcgiurl_hosts_disabled_notifications)
+            htobj, error = result.result, result.error
+            if error != "": return Result(result=copy.deepcopy(htobj), error=error)
+            # workaround for Nagios < 2.7 which has an <EMBED> in its output
+            try:
+                table = copy.deepcopy(htobj.body.table[self.HTML_BODY_TABLE_INDEX])
+            except:
+                table = copy.deepcopy(htobj.body.embed.table)
+                
+            # do some cleanup    
+            del htobj               
+
+            for i in range(1, len(table.tr)):
+                try:
+                    # ignore empty <tr> rows
+                    if not table.tr[i].countchildren() == 1:
+                        # host
+                        try:
+                            self.new_hosts_disabled_notifications.append(str(table.tr[i].td[0].table.tr.td[0].table.tr.td.text))
+                            # get real status of host with disabled notification
+                            if self.new_hosts.has_key(self.new_hosts_disabled_notifications[-1]):
+                                self.new_hosts[self.new_hosts_disabled_notifications[-1]].status = str(table.tr[i].td[1].text)
+                        except:
+                            self.Error(sys.exc_info())
+                except:
+                    self.Error(sys.exc_info())
+
+            # do some cleanup
+            del table
+
+        except:
+            # set checking flag back to False
+            self.isChecking = False
+            result, error = self.Error(sys.exc_info())
+            return Result(result=result, error=error)
                 
         # some cleanup
         del nagitems
@@ -668,7 +710,9 @@
             and (not (host.name in self.new_hosts_in_maintenance and \
             str(self.conf.filter_hosts_services_maintenance) == "True") and \
             not (host.name in self.new_hosts_acknowledged and \
-            str(self.conf.filter_acknowledged_hosts_services) == "True")) and \
+            str(self.conf.filter_acknowledged_hosts_services) == "True") and \
+            not (host.name in self.new_hosts_disabled_notifications and \
+            str(self.conf.filter_hosts_services_disabled_notifications) == "True")) and \
             str(self.conf.filter_all_down_hosts) == "False": 
                 self.nagitems_filtered["hosts"]["DOWN"].append(host)
                 self.downs += 1
