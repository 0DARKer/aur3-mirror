diff -urN xf86-input-wacom-0.10.11-orig//src/wcmCommon.c xf86-input-wacom-0.10.11/src/wcmCommon.c
--- xf86-input-wacom-0.10.11-orig//src/wcmCommon.c	2011-02-21 09:21:17.000000000 +0100
+++ xf86-input-wacom-0.10.11/src/wcmCommon.c	2011-02-21 09:22:26.000000000 +0100
@@ -1430,9 +1430,6 @@
 	out.device_id = wcmGetPhyDeviceID(priv);
 	DBG(2, priv->common, "send a soft prox-out\n");
 	wcmSendEvents(pInfo, &out);
-
-	if (out.device_type == TOUCH_ID)
-		priv->common->wcmTouchpadMode = 0;
 }
 
 /*****************************************************************************
diff -urN xf86-input-wacom-0.10.11-orig//src/wcmTouchFilter.c xf86-input-wacom-0.10.11/src/wcmTouchFilter.c
--- xf86-input-wacom-0.10.11-orig//src/wcmTouchFilter.c	2011-02-21 09:21:17.000000000 +0100
+++ xf86-input-wacom-0.10.11/src/wcmTouchFilter.c	2011-02-21 09:29:04.000000000 +0100
@@ -140,33 +140,45 @@
 	}
 }
 
-
-/* process single finger Relative mode events
- * if touch is not in an active gesture mode.
+/* A single finger tap is defined as 1 finger tap that lasts less than
+ * wcmTapTime.  It results in a left button press.
+ *
+ * Some work must be done to make sure two fingers were not touching
+ * during this gesture. This is easy if first finger is released
+ * first.  To handle case of second finger released first, require
+ * second finger to have been released before first finger ever touched.
+ *
+ * Function relies on ds[0/1].sample to be updated only when entering or
+ * exiting proximity so no storage is needed when initial touch occurs.
  */
-static void wcmFirstFingerClick(WacomCommonPtr common)
+static void wcmSingleFingerTap(WacomDevicePtr priv)
 {
-	static int tmpStamp = 0;
-	WacomChannelPtr aChannel = common->wcmChannel;
-	WacomDeviceState ds = aChannel->valid.states[0];
-	WacomDeviceState dsLast = aChannel->valid.states[1];
-	if (ds.proximity)
-	{
-		if (common->wcmTouchpadMode)
-			/* continuing left button down */
-			aChannel->valid.states[0].buttons |= 1;
-		else if (!dsLast.proximity &&
-		    (abs(tmpStamp - ds.sample) <= common->wcmGestureParameters.wcmTapTime))
+	WacomCommonPtr common = priv->common;
+	WacomChannelPtr firstChannel = common->wcmChannel;
+	WacomChannelPtr secondChannel = common->wcmChannel + 1;
+	WacomDeviceState ds[2] = { firstChannel->valid.states[0],
+		secondChannel->valid.states[0] };
+	WacomDeviceState dsLast[2] = { firstChannel->valid.states[1],
+		secondChannel->valid.states[1] };
+
+	DBG(10, priv, "\n");
+
+	if (!ds[0].proximity && dsLast[0].proximity && !ds[1].proximity)
+	{
+		/* Single Tap must have lasted less than wcmTapTime
+		 * and second finger must not have released after
+		 * first finger touched.
+		 */
+		if (ds[0].sample - dsLast[0].sample <=
+			common->wcmGestureParameters.wcmTapTime &&
+			ds[1].sample < dsLast[0].sample)
 		{
-			/* initial left button down */
-			aChannel->valid.states[0].buttons |= 1;
-			common->wcmTouchpadMode = 1;
+			/* left button down */
+			wcmSendButtonClick(priv, 1, 1);
+
+			/* left button up */
+			wcmSendButtonClick(priv, 1, 0);
 		}
-	} else {
-		tmpStamp = GetTimeInMillis();
-		if (common->wcmTouchpadMode)
-			aChannel->valid.states[0].buttons &= ~1;
-		common->wcmTouchpadMode = 0;
 	}
 }
 
@@ -198,7 +210,6 @@
 	 * was in in prox */
 	if (ds[1].proximity && !common->wcmGestureMode && dsLast[0].proximity)
 	{
-		common->wcmTouchpadMode = 0;
 		common->wcmGestureMode = GESTURE_LAG_MODE;
 	}
 
@@ -248,7 +259,6 @@
 		common->wcmGestureMode = 0;
 		common->wcmGestureParameters.wcmScrollDirection = 0;
 
-		common->wcmTouchpadMode = 0;
 		goto ret;
 	}
 
@@ -288,7 +298,7 @@
 	}
 ret:
 	if (!common->wcmGestureMode && !channel && !is_absolute(priv->pInfo))
-		wcmFirstFingerClick(common);
+		wcmSingleFingerTap(priv);
 }
 
 static void wcmSendScrollEvent(WacomDevicePtr priv, int dist,
diff -urN xf86-input-wacom-0.10.11-orig//src/xf86WacomDefs.h xf86-input-wacom-0.10.11/src/xf86WacomDefs.h
--- xf86-input-wacom-0.10.11-orig//src/xf86WacomDefs.h	2011-02-21 09:21:17.000000000 +0100
+++ xf86-input-wacom-0.10.11/src/xf86WacomDefs.h	2011-02-21 09:23:27.000000000 +0100
@@ -460,7 +460,6 @@
 	int wcmGesture;	     	     /* disable/enable touch gesture */
 	int wcmGestureDefault;       /* default touch gesture to disable when not supported */
 	int wcmGestureMode;	       /* data is in Gesture Mode? */
-	int wcmTouchpadMode;           /* in touchpad mode? */
 	WacomDeviceState wcmGestureState[MAX_FINGERS]; /* inital state when in gesture mode */
 	int wcmCapacity;	     /* disable/enable capacity */
 	int wcmCapacityDefault;      /* default to -1 when capacity isn't supported/disabled */
