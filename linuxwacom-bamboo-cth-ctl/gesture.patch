diff -ur xf86-input-wacom-0.10.99.1-orig//src/wcmCommon.c xf86-input-wacom-0.10.99.1/src/wcmCommon.c
--- xf86-input-wacom-0.10.99.1-orig//src/wcmCommon.c	2011-04-03 11:16:06.000000000 +0200
+++ xf86-input-wacom-0.10.99.1/src/wcmCommon.c	2011-04-05 22:31:48.000000000 +0200
@@ -199,14 +199,14 @@
 	return count;
 }
 
-static void sendAction(InputInfoPtr pInfo, int press,
+void sendAction(InputInfoPtr pInfo, int press,
 		       unsigned int *keys, int nkeys,
 		       int first_val, int num_val, int *valuators)
 {
 	int i;
 
 	/* Actions only trigger on press, not release */
-	for (i = 0; press && i < nkeys; i++)
+	for (i = 0; i < nkeys; i++)
 	{
 		unsigned int action = keys[i];
 
@@ -219,6 +219,17 @@
 				{
 					int btn_no = (action & AC_CODE);
 					int is_press = (action & AC_KEYBTNPRESS);
+
+					if (!press)
+					{
+						if (!is_press)
+							break;
+						if (countPresses(btn_no, &keys[i], nkeys - i))
+							is_press = 0;
+						else
+							break;
+					}
+					
 					xf86PostButtonEventP(pInfo->dev,
 							    is_absolute(pInfo), btn_no,
 							    is_press, first_val, num_val,
@@ -229,6 +240,17 @@
 				{
 					int key_code = (action & AC_CODE);
 					int is_press = (action & AC_KEYBTNPRESS);
+
+					if (!press)
+					{
+						if (!is_press)
+							break;
+						if (countPresses(key_code, &keys[i], nkeys - i))
+							is_press = 0;
+						else
+							break;
+					}
+
 					wcmEmitKeycode(pInfo->dev, key_code, is_press);
 				}
 				break;
@@ -239,43 +261,6 @@
 				break;
 		}
 	}
-
-	/* Release all non-released keys for this button. */
-	for (i = 0; !press && i < nkeys; i++)
-	{
-		unsigned int action = keys[i];
-
-		switch ((action & AC_TYPE))
-		{
-			case AC_BUTTON:
-				{
-					int btn_no = (action & AC_CODE);
-
-					/* don't care about releases here */
-					if (!(action & AC_KEYBTNPRESS))
-						break;
-
-					if (countPresses(btn_no, &keys[i], nkeys - i))
-						xf86PostButtonEvent(pInfo->dev,
-								is_absolute(pInfo), btn_no,
-								0, first_val, num_val,
-								VCOPY(valuators, num_val));
-				}
-				break;
-			case AC_KEY:
-				{
-					int key_code = (action & AC_CODE);
-
-					/* don't care about releases here */
-					if (!(action & AC_KEYBTNPRESS))
-						break;
-
-					if (countPresses(key_code, &keys[i], nkeys - i))
-						wcmEmitKeycode(pInfo->dev, key_code, 0);
-				}
-		}
-
-	}
 }
 
 /*****************************************************************************
diff -ur xf86-input-wacom-0.10.99.1-orig//src/wcmTouchFilter.c xf86-input-wacom-0.10.99.1/src/wcmTouchFilter.c
--- xf86-input-wacom-0.10.99.1-orig//src/wcmTouchFilter.c	2011-04-03 11:16:06.000000000 +0200
+++ xf86-input-wacom-0.10.99.1/src/wcmTouchFilter.c	2011-04-05 22:31:20.000000000 +0200
@@ -95,6 +95,7 @@
 	int x = 0;
 	int y = 0;
 	int mode = is_absolute(priv->pInfo);
+	int valuators[priv->naxes];
 
 	if (mode)
 	{
@@ -102,10 +103,26 @@
 		y = priv->oldY;
 	}
 
-	/* send button event in state */
-	xf86PostButtonEvent(priv->pInfo->dev, mode,button,
-		state,0,priv->naxes,x,y,0,0,0,0);
+	valuators[0] = x;
+	valuators[1] = y;
+	valuators[2] = 0;
+	valuators[3] = 0;
+	valuators[4] = 0;
+	valuators[5] = 0;
 
+	if (!priv->keys[button][0])
+	{
+		/* No button action configured, send button */
+		xf86PostButtonEventP(priv->pInfo->dev, mode,
+				     button, (state != 0),
+				     0, priv->naxes, valuators);
+	}
+	else
+	{
+		sendAction(priv->pInfo, (state != 0), priv->keys[button],
+			   ARRAY_SIZE(priv->keys[button]),
+			   0, priv->naxes, valuators);
+	}
 	/* We have changed the button state (from down to up) for the device
 	 * so we need to update the record */
 	if (button == 1)
diff -ur xf86-input-wacom-0.10.99.1-orig//src/xf86Wacom.h xf86-input-wacom-0.10.99.1/src/xf86Wacom.h
--- xf86-input-wacom-0.10.99.1-orig//src/xf86Wacom.h	2011-04-03 11:16:06.000000000 +0200
+++ xf86-input-wacom-0.10.99.1/src/xf86Wacom.h	2011-04-05 22:31:20.000000000 +0200
@@ -153,6 +153,9 @@
 extern int wcmTilt2R(int x, int y, double offset);
 extern void wcmGestureFilter(WacomDevicePtr priv, int channel);
 extern void wcmEmitKeycode(DeviceIntPtr keydev, int keycode, int state);
+extern void sendAction(InputInfoPtr pInfo, int press,
+		       unsigned int *keys, int nkeys,
+		       int first_val, int num_val, int *valuators);
 extern void wcmSoftOutEvent(InputInfoPtr pInfo);
 
 extern void wcmRotateTablet(InputInfoPtr pInfo, int value);
