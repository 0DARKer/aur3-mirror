Index: src/cd_ripper.c
===================================================================
--- src/cd_ripper.c	(revision 1267)
+++ src/cd_ripper.c	(working copy)
@@ -30,12 +30,11 @@
 #include <gdk-pixbuf/gdk-pixbuf.h>
 #include <gtk/gtk.h>
 
-#undef HAVE_CDDB
-#include "undef_ac_pkg.h"
-#include <cdio/paranoia.h>
-#undef HAVE_CDDB
-#include "undef_ac_pkg.h"
-#include <config.h>	/* re-establish undefined autoconf macros */
+// This prevents cdio/cdio_config.h from being processed
+#ifndef __CDIO_CONFIG_H__
+#define __CDIO_CONFIG_H__
+#endif /* !__CDIO_CONFIG_H__ */
+#include <cdio/paranoia/paranoia.h>
 
 #include "common.h"
 #include "utils.h"
Index: src/cdda.c
===================================================================
--- src/cdda.c	(revision 1267)
+++ src/cdda.c	(working copy)
@@ -28,14 +28,14 @@
 #include <gdk-pixbuf/gdk-pixbuf.h>
 #include <gtk/gtk.h>
 
-#undef HAVE_CDDB
-#include "undef_ac_pkg.h"
+// This prevents cdio/cdio_config.h from being processed
+#ifndef __CDIO_CONFIG_H__
+#define __CDIO_CONFIG_H__
+#endif /* !__CDIO_CONFIG_H__ */
+
 #include <cdio/cdio.h>
-#include <cdio/cdda.h>
+#include <cdio/paranoia/cdda.h>
 #include <cdio/logging.h>
-#undef HAVE_CDDB
-#include "undef_ac_pkg.h"
-#include <config.h>	/* re-establish undefined autoconf macros */
 
 #include "common.h"
 #include "utils_gui.h"
@@ -568,56 +568,56 @@
 	CdIo_t * cdio;
 	cdtext_t * cdtext;
 	GtkTreeIter iter;
-	int i;
+	track_t i;
 	int ret = 0;
+	char * info;
 
 	cdio = cdio_open(drive->device_path, DRIVER_UNKNOWN);
-	cdtext = cdio_get_cdtext(cdio, 0);
+	cdtext = cdio_get_cdtext(cdio);
 
 	if (cdtext == NULL) {
-		ret = 1;
+		cdio_destroy(cdio);
+		return 1; // Immidiately return, there's no point in going on...
 	} else {
 		char tmp[MAXLEN];
 
 		tmp[0] = '\0';
 
-		if (cdtext->field[CDTEXT_PERFORMER] != NULL && *(cdtext->field[CDTEXT_PERFORMER]) != '\0') {
-			strncat(tmp, cdtext->field[CDTEXT_PERFORMER], MAXLEN-1);
-			strncpy(drive->disc.artist_name, cdtext->field[CDTEXT_PERFORMER], MAXLEN-1);
+		info = cdtext_get(cdtext, CDTEXT_FIELD_PERFORMER, 0);
+		if (info != NULL && *info != '\0') {
+			strncat(tmp, info, MAXLEN-1);
+			strncpy(drive->disc.artist_name, info, MAXLEN-1);
 		} else {
 			ret = 1;
 		}
+		free(info);
 
 		strncat(tmp, ": ", MAXLEN - strlen(tmp) - 1);
 
-		if (cdtext->field[CDTEXT_TITLE] != NULL && *(cdtext->field[CDTEXT_TITLE]) != '\0') {
-			strncat(tmp, cdtext->field[CDTEXT_TITLE], MAXLEN - strlen(tmp) - 1);
-			strncpy(drive->disc.record_name, cdtext->field[CDTEXT_TITLE], MAXLEN-1);
+		info = cdtext_get(cdtext, CDTEXT_FIELD_TITLE, 0);
+		if (info != NULL && *info != '\0') {
+			strncat(tmp, info, MAXLEN - strlen(tmp) - 1);
+			strncpy(drive->disc.record_name, info, MAXLEN-1);
 		} else {
 			ret = 1;
 		}
+		free(info);
 
 		if (ret == 0) {
 			gtk_tree_store_set(music_store, iter_drive, MS_COL_NAME, tmp, -1);
 		}
 	}
 
-
 	i = 0;
 	while (gtk_tree_model_iter_nth_child(GTK_TREE_MODEL(music_store), &iter, iter_drive, i++)) {
 
-		cdtext = cdio_get_cdtext(cdio, i);
-
-		if (cdtext == NULL) {
-			ret = 1;
-			continue;
-		}
-
-		if (cdtext->field[CDTEXT_TITLE] != NULL && *(cdtext->field[CDTEXT_TITLE]) != '\0') {
-			gtk_tree_store_set(music_store, &iter, MS_COL_NAME, cdtext->field[CDTEXT_TITLE], -1);
+		info = cdtext_get(cdtext, CDTEXT_FIELD_TITLE, i);
+		if (info != NULL && *info != '\0') {
+			gtk_tree_store_set(music_store, &iter, MS_COL_NAME, info, -1);
 		} else {
 			ret = 1;
 		}
+		free(info);
 	}
 
 	cdio_destroy(cdio);
Index: src/decoder/dec_cdda.c
===================================================================
--- src/decoder/dec_cdda.c	(revision 1267)
+++ src/decoder/dec_cdda.c	(working copy)
@@ -27,13 +27,13 @@
 #include <sys/types.h>
 #include <glib.h>
 
-#undef HAVE_CDDB
-#include "../undef_ac_pkg.h"
+// This prevents cdio/cdio_config.h from being processed
+#ifndef __CDIO_CONFIG_H__
+#define __CDIO_CONFIG_H__
+#endif /* !__CDIO_CONFIG_H__ */
+
 #include <cdio/bytesex.h>
-#include <cdio/paranoia.h>
-#undef HAVE_CDDB
-#include "../undef_ac_pkg.h"
-#include <config.h>	/* re-establish undefined autoconf macros */
+#include <cdio/paranoia/paranoia.h>
 
 #include "../cdda.h"
 #include "../common.h"
Index: src/decoder/dec_cdda.h
===================================================================
--- src/decoder/dec_cdda.h	(revision 1267)
+++ src/decoder/dec_cdda.h	(working copy)
@@ -21,13 +21,13 @@
 #ifndef AQUALUNG_DEC_CDDA_H
 #define AQUALUNG_DEC_CDDA_H
 
-#undef HAVE_CDDB
-#include "../undef_ac_pkg.h"
-#include <cdio/cdda.h>
+// This prevents cdio/cdio_config.h from being processed
+#ifndef __CDIO_CONFIG_H__
+#define __CDIO_CONFIG_H__
+#endif /* !__CDIO_CONFIG_H__ */
+
+#include <cdio/paranoia/cdda.h>
 #include <cdio/cdio.h>
-#undef HAVE_CDDB
-#include "../undef_ac_pkg.h"
-#include <config.h>	/* re-establish undefined autoconf macros */
 
 #include "../cdda.h"
 #include "../common.h"
Index: src/options.c
===================================================================
--- src/options.c	(revision 1267)
+++ src/options.c	(working copy)
@@ -36,11 +36,12 @@
 
 #ifdef HAVE_CDDA
 #undef HAVE_CDDB
-#include "undef_ac_pkg.h"
-#include <cdio/paranoia.h>
-#undef HAVE_CDDB
-#include "undef_ac_pkg.h"
-#include <config.h>	/* re-establish undefined autoconf macros */
+
+// This prevents cdio/cdio_config.h from being processed
+#ifndef __CDIO_CONFIG_H__
+#define __CDIO_CONFIG_H__
+#endif /* !__CDIO_CONFIG_H__ */
+#include <cdio/paranoia/paranoia.h>
 #endif /* HAVE_CDDA */
 
 #ifdef HAVE_JACK
Index: src/store_cdda.c
===================================================================
--- src/store_cdda.c	(revision 1267)
+++ src/store_cdda.c	(working copy)
@@ -28,12 +28,11 @@
 #include <gdk/gdkkeysyms.h>
 #include <gdk-pixbuf/gdk-pixbuf.h>
 
-#undef HAVE_CDDB
-#include "undef_ac_pkg.h"
+// This prevents cdio/cdio_config.h from being processed
+#ifndef __CDIO_CONFIG_H__
+#define __CDIO_CONFIG_H__
+#endif /* !__CDIO_CONFIG_H__ */
 #include <cdio/cdio.h>
-#undef HAVE_CDDB
-#include "undef_ac_pkg.h"
-#include <config.h>	/* re-establish undefined autoconf macros */
 
 #ifdef HAVE_CDDB
 #include "cddb_lookup.h"
@@ -332,7 +331,8 @@
 	track_t itrack;
 	track_t ntracks;
 	track_t track_last;
-	int i;
+	cdtext_field_t i;
+	char * info;
 
         GtkWidget * dialog;
 	GtkWidget * table;
@@ -369,7 +369,7 @@
 
 
 	cdio = cdio_open(drive->device_path, DRIVER_UNKNOWN);
-	cdtext = cdio_get_cdtext(cdio, 0);
+	cdtext = cdio_get_cdtext(cdio);
 
 	if (cdtext != NULL) {
 		table = gtk_table_new(MAX_CDTEXT_FIELDS, 2, FALSE);
@@ -378,7 +378,10 @@
 
 		for (i = 0; i < MAX_CDTEXT_FIELDS; i++) {
 
-			if (cdtext->field[i] == NULL || *(cdtext->field[i]) == '\0') {
+			info = cdtext_get(cdtext, i, 0);
+			if (info == NULL) continue;
+			if (*info == '\0') {
+				free(info);
 				continue;
 			}
 
@@ -390,9 +393,10 @@
 			gtk_table_attach(GTK_TABLE(table), hbox, 0, 1, i, i + 1, GTK_FILL, GTK_FILL, 4, 1);
 
 			hbox = gtk_hbox_new(FALSE, 0);
-			label = gtk_label_new(cdtext->field[i]);
+			label = gtk_label_new(info);
 			gtk_box_pack_start(GTK_BOX(hbox), label, FALSE, FALSE, 0);
 			gtk_table_attach(GTK_TABLE(table), hbox, 1, 2, i, i + 1, GTK_FILL, GTK_FILL, 4, 1);
+			free(info);
 		}
 	}
 
@@ -432,25 +436,27 @@
 	ntracks = cdio_get_num_tracks(cdio);
 	track_last = itrack + ntracks;
 
-	for (; itrack < track_last; itrack++) {
+	if (cdtext != NULL) {
+		for (; itrack < track_last; itrack++) {
 
-		GtkTreeIter iter;
+			GtkTreeIter iter;
 
-		gtk_list_store_append(list, &iter);
-		gtk_list_store_set(list, &iter, 0, itrack, -1);
+			gtk_list_store_append(list, &iter);
+			gtk_list_store_set(list, &iter, 0, itrack, -1);
 
-		cdtext = cdio_get_cdtext(cdio, itrack);
+			for (i = 0; i < MAX_CDTEXT_FIELDS; i++) {
 
-		if (cdtext == NULL) {
-			continue;
-		}
+				info = cdtext_get(cdtext, i, itrack);
+				if (info == NULL) continue;
+				if (*info == '\0') {
+					free(info);
+					continue;
+				}
 
-		for (i = 0; i < MAX_CDTEXT_FIELDS; i++) {
-
-			if (cdtext->field[i] != NULL && *(cdtext->field[i]) != '\0') {
-				gtk_list_store_set(list, &iter, i + 1, cdtext->field[i], -1);
+				gtk_list_store_set(list, &iter, i + 1, info, -1);
 				visible[i + 1] = 1;
 				has_some_cdtext = 1;
+				free(info);
 			}
 		}
 	}
