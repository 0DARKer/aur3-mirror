From: Julian Taylor <jtaylor.debian@googlemail.com>
Date: Sun, 17 Apr 2011 18:54:38 +0200
Subject: add translation search paths

 also search for translations in XDG_CONFIG_HOME and XDG_DATA_HOME
Applied-Upstream: 2.16
---
 KeePass/App/Configuration/AppConfigSerializer.cs |   24 ++++++-
 KeePass/Forms/LanguageForm.cs                    |   70 +++++++++++++++-------
 KeePass/Program.cs                               |   60 ++++++++++++-------
 3 files changed, 106 insertions(+), 48 deletions(-)

diff --git a/KeePass/App/Configuration/AppConfigSerializer.cs b/KeePass/App/Configuration/AppConfigSerializer.cs
index 24deaa1..62f58fe 100644
--- a/KeePass/App/Configuration/AppConfigSerializer.cs
+++ b/KeePass/App/Configuration/AppConfigSerializer.cs
@@ -40,6 +40,7 @@ namespace KeePass.App.Configuration
 		private static string m_strBaseName = null; // Null prop allowed
 
 		private static string m_strCreateDir = null;
+		private static string m_strCreateDirLocal = null;
 		private static string m_strEnforcedConfigFile = null;
 		private static string m_strGlobalConfigFile = null;
 		private static string m_strUserConfigFile = null;
@@ -53,6 +54,15 @@ namespace KeePass.App.Configuration
 			}
 		}
 
+		public static string LocalAppDataDirectory
+		{
+			get
+			{
+				AppConfigSerializer.GetConfigPaths();
+				return m_strCreateDirLocal;
+			}
+		}
+
 		/// <summary>
 		/// Get/set the base name for the configuration. If this property is
 		/// <c>null</c>, the class constructs names based on the current
@@ -67,6 +77,7 @@ namespace KeePass.App.Configuration
 				m_strBaseName = value;
 
 				m_strCreateDir = null;
+				m_strCreateDirLocal = null;
 				m_strEnforcedConfigFile = null; // Invalidate paths
 				m_strGlobalConfigFile = null;
 				m_strUserConfigFile = null;
@@ -125,19 +136,24 @@ namespace KeePass.App.Configuration
 					strUserDir = UrlUtil.GetFileDirectory(UrlUtil.FileUrlToPath(
 						Assembly.GetExecutingAssembly().GetName().CodeBase), true, false);
 				}
+				strUserDir = UrlUtil.EnsureTerminatingSeparator(strUserDir, false);
 
-				if(!strUserDir.EndsWith(new string(Path.DirectorySeparatorChar, 1)) &&
-					!strUserDir.EndsWith("\\") && !strUserDir.EndsWith("/"))
+				string strUserDirLocal;
+				try
 				{
-					strUserDir += new string(Path.DirectorySeparatorChar, 1);
+					strUserDirLocal = Environment.GetFolderPath(
+						Environment.SpecialFolder.LocalApplicationData);
 				}
+				catch(Exception) { strUserDirLocal = strUserDir; }
+				strUserDirLocal = UrlUtil.EnsureTerminatingSeparator(strUserDirLocal, false);
 
 				m_strCreateDir = strUserDir + strBaseDirName;
+				m_strCreateDirLocal = strUserDirLocal + strBaseDirName;
 				m_strUserConfigFile = m_strCreateDir + Path.DirectorySeparatorChar +
 					strBaseDirName + ".config.xml";
 			}
 
-			Debug.Assert(m_strCreateDir != null); Debug.Assert(m_strCreateDir.Length > 0);
+			Debug.Assert(!string.IsNullOrEmpty(m_strCreateDir));
 		}
 
 		private static void EnsureAppDataDirAvailable()
diff --git a/KeePass/Forms/LanguageForm.cs b/KeePass/Forms/LanguageForm.cs
index 8478a23..c5c9360 100644
--- a/KeePass/Forms/LanguageForm.cs
+++ b/KeePass/Forms/LanguageForm.cs
@@ -26,6 +26,7 @@ using System.Windows.Forms;
 using System.IO;
 
 using KeePass.App;
+using KeePass.App.Configuration;
 using KeePass.UI;
 using KeePass.Resources;
 using KeePass.Util;
@@ -68,37 +69,62 @@ namespace KeePass.Forms
 			lvi.SubItems.Add(AppDefs.DefaultTrlAuthor);
 			lvi.SubItems.Add(AppDefs.DefaultTrlContact);
 
+			List<string> vList = new List<string>();
+			GetAvailableTranslations(AppConfigSerializer.AppDataDirectory, vList);
+			GetAvailableTranslations(AppConfigSerializer.LocalAppDataDirectory, vList);
+
 			string strExe = WinUtil.GetExecutable();
 			string strPath = UrlUtil.GetFileDirectory(strExe, false, true);
-			GetAvailableTranslations(strPath);
+			GetAvailableTranslations(strPath, vList);
 		}
 
-		private void GetAvailableTranslations(string strPath)
+		private void GetAvailableTranslations(string strPath, List<string> vList)
 		{
-			DirectoryInfo di = new DirectoryInfo(strPath);
-			FileInfo[] vFiles = di.GetFiles();
-
-			foreach(FileInfo fi in vFiles)
+			try
 			{
-				if(fi.FullName.ToLower().EndsWith("." + KPTranslation.FileExtension))
+				DirectoryInfo di = new DirectoryInfo(strPath);
+				FileInfo[] vFiles = di.GetFiles();
+
+				foreach(FileInfo fi in vFiles)
 				{
-					try
-					{
-						KPTranslation kpTrl = KPTranslation.LoadFromFile(fi.FullName);
-
-						ListViewItem lvi = m_lvLanguages.Items.Add(
-							kpTrl.Properties.NameEnglish, 0);
-						lvi.SubItems.Add(kpTrl.Properties.ApplicationVersion);
-						lvi.SubItems.Add(kpTrl.Properties.AuthorName);
-						lvi.SubItems.Add(kpTrl.Properties.AuthorContact);
-						lvi.Tag = UrlUtil.GetFileName(fi.FullName);
-					}
-					catch(Exception ex)
+					string strFullName = fi.FullName;
+
+					if(strFullName.ToLower().EndsWith("." + KPTranslation.FileExtension))
 					{
-						MessageService.ShowWarning(ex.Message);
+						string strFileName = UrlUtil.GetFileName(strFullName);
+
+						bool bFound = false;
+						foreach(string strExisting in vList)
+						{
+							if(strExisting.Equals(strFileName, StrUtil.CaseIgnoreCmp))
+							{
+								bFound = true;
+								break;
+							}
+						}
+						if(bFound) continue;
+
+						try
+						{
+							KPTranslation kpTrl = KPTranslation.LoadFromFile(strFullName);
+
+							ListViewItem lvi = m_lvLanguages.Items.Add(
+								kpTrl.Properties.NameEnglish, 0);
+							lvi.SubItems.Add(kpTrl.Properties.ApplicationVersion);
+							lvi.SubItems.Add(kpTrl.Properties.AuthorName);
+							lvi.SubItems.Add(kpTrl.Properties.AuthorContact);
+							lvi.Tag = strFileName;
+
+							vList.Add(strFileName);
+						}
+						catch(Exception ex)
+						{
+							MessageService.ShowWarning(ex.Message);
+						}
 					}
 				}
 			}
+			catch(Exception) { } // Directory might not exist or cause access violation
 		}
 
 		private void OnBtnClose(object sender, EventArgs e)
@@ -113,13 +139,13 @@ namespace KeePass.Forms
 			if(lvic[0].Index == 0) // First item selected = English
 			{
 				if(Program.Config.Application.LanguageFile.Length == 0)
-					return; // Is built-English already
+					return; // Is English already
 
 				Program.Config.Application.LanguageFile = string.Empty;
 			}
 			else
 			{
-				string strSelID = lvic[0].Tag as string;
+				string strSelID = (lvic[0].Tag as string);
 				if(strSelID == Program.Config.Application.LanguageFile) return;
 
 				Program.Config.Application.LanguageFile = strSelID;
diff --git a/KeePass/Program.cs b/KeePass/Program.cs
index c8e9ef4..9cd0417 100644
--- a/KeePass/Program.cs
+++ b/KeePass/Program.cs
@@ -225,28 +225,7 @@ namespace KeePass
 			string strHelpFile = UrlUtil.StripExtension(WinUtil.GetExecutable()) + ".chm";
 			AppHelp.LocalHelpFile = strHelpFile;
 
-			string strLangFile = m_appConfig.Application.LanguageFile;
-			if((strLangFile != null) && (strLangFile.Length > 0))
-			{
-				strLangFile = UrlUtil.GetFileDirectory(WinUtil.GetExecutable(), true,
-					false) + strLangFile;
-
-				try
-				{
-					m_kpTranslation = KPTranslation.LoadFromFile(strLangFile);
-
-					KPRes.SetTranslatedStrings(
-						m_kpTranslation.SafeGetStringTableDictionary(
-						"KeePass.Resources.KPRes"));
-					KLRes.SetTranslatedStrings(
-						m_kpTranslation.SafeGetStringTableDictionary(
-						"KeePassLib.Resources.KLRes"));
-
-					StrUtil.RightToLeft = m_kpTranslation.Properties.RightToLeft;
-				}
-				catch(FileNotFoundException) { } // Ignore
-				catch(Exception) { Debug.Assert(false); }
-			}
+			LoadTranslation();
 
 			if(m_appConfig.Application.Start.PluginCacheClearOnce)
 			{
@@ -574,5 +553,42 @@ namespace KeePass
 
 			MainCleanUp();
 		}
+
+		private static void LoadTranslation()
+		{
+			string strLangFile = m_appConfig.Application.LanguageFile;
+			if((strLangFile != null) && (strLangFile.Length > 0))
+			{
+				string[] vLangDirs = new string[]{
+					AppConfigSerializer.AppDataDirectory,
+					AppConfigSerializer.LocalAppDataDirectory,
+					UrlUtil.GetFileDirectory(WinUtil.GetExecutable(), false, false)
+				};
+
+				foreach(string strLangDir in vLangDirs)
+				{
+					string strLangPath = UrlUtil.EnsureTerminatingSeparator(
+						strLangDir, false) + strLangFile;
+
+					try
+					{
+						m_kpTranslation = KPTranslation.LoadFromFile(strLangPath);
+
+						KPRes.SetTranslatedStrings(
+							m_kpTranslation.SafeGetStringTableDictionary(
+							"KeePass.Resources.KPRes"));
+						KLRes.SetTranslatedStrings(
+							m_kpTranslation.SafeGetStringTableDictionary(
+							"KeePassLib.Resources.KLRes"));
+
+						StrUtil.RightToLeft = m_kpTranslation.Properties.RightToLeft;
+						break;
+					}
+					catch(DirectoryNotFoundException) { } // Ignore
+					catch(FileNotFoundException) { } // Ignore
+					catch(Exception) { Debug.Assert(false); }
+				}
+			}
+		}
 	}
 }
-- 
