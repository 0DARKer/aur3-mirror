diff -U 3 -H -d -r -N -- fst.orig/Makefile fst-1.8+git20091228/Makefile
--- fst.orig/Makefile	2009-12-28 15:07:55.000000000 +0000
+++ fst-1.8+git20091228/Makefile	2010-06-12 15:00:50.000000000 +0100
@@ -6,24 +6,16 @@
 DLLS                  =
 EXES                  = fst
 
-LASH_EXISTS := $(shell if pkg-config --exists lash-1.0; then echo yes; else echo no; fi)
-
 ### Common settings
 
 PKG_CONFIG_MODULES    := glib-2.0
 PKG_CONFIG_MODULES    += gtk+-2.0
 PKG_CONFIG_MODULES    += jack
-ifeq ($(LASH_EXISTS),yes)
-PKG_CONFIG_MODULES    += lash-1.0
-endif
 
 CEXTRA                := $(shell pkg-config --cflags $(PKG_CONFIG_MODULES)) -fPIC -m32 -g
-ifneq (,$(findstring lash-1.0,$(PKG_CONFIG_MODULES)))
-CEXTRA                += -DHAVE_LASH
-endif
 CXXEXTRA              = -mno-cygwin
 RCEXTRA               =
-INCLUDE_PATH          = -I. -I/usr/include -I/usr/include -I/usr/include/wine -I/usr/include/wine/windows -I/usr/local/include/wine -I/usr/local/include/wine/windows
+INCLUDE_PATH          = -I. -I/usr/include -I/usr/include -I/usr/include/wine -I/usr/include/wine/windows -I/usr/local/include/wine -I/usr/local/include/wine/windows -I/usr/include/glib-2.0 -I/usr/include/glib-2.0/include -I/usr/include/gtk-2.0
 DLL_PATH              =
 LIBRARY_PATH          =-L/usr/lib32
 LIBRARIES             := $(shell pkg-config --libs $(PKG_CONFIG_MODULES)) -L/usr/X11R6/lib -lpthread -lrt -lX11 -m32
diff -U 3 -H -d -r -N -- fst.orig/README fst-1.8+git20091228/README
--- fst.orig/README	2009-12-28 15:07:55.000000000 +0000
+++ fst-1.8+git20091228/README	2010-06-12 16:51:24.000000000 +0100
@@ -6,7 +6,7 @@
 Uses jack midi input.
 Only works for GUI plugins currently.
 
-Supports LASH.
+Supports Ladish.
 
 Getting Started
 ---------------
@@ -15,39 +15,34 @@
 
    gtk-devel
    jack-devel
-   lash-devel (optional)
 
 2) Type 'make'. If everything works correctly this should create an
    executable file called 'fst'.
 
-3) On 64bit it may fail with a link error, when it cant find a 32bit lash
-   but the 64bit stuff is in place. 
-   build yourself a 32bit lash, or:
-   make LASH_EXISTS=no
+3) To run your vst plugins:
 
-4) To run your vst plugins:
-   
-   ./fst /path/to/someplugin.dll
+   ./fst /path/to/ladish/filename /path/to/someplugin.dll
 
    and set up the inputs and outputs, eg. using qjackctl's
    'Connections' window.
 
-5) To install copy both fst and fst.exe.so into your $PATH
+   The Ladish file name may not exist.
+   But, if it does, it will load it's state.
+
+4) To install copy both fst and fst.exe.so into your $PATH
    (i think they need to be in the same folder)
 
+
 Stuff
 -----
 
-With LASH you can save and restore the state of the plugin.
-in order to promote lash i pushed other methods of load/save
-pretty much down in my priority list.
-
 There is a first version of midi learn, load/save of midimap
 will come tomorrow. i had my beer now and its 5:15
 i should be in a club. but i go to bed now.
 just press midi learn, move a plugin control and your midi
 control.
 
+
 License
 -------
 
diff -U 3 -H -d -r -N -- fst.orig/fst.h fst-1.8+git20091228/fst.h
--- fst.orig/fst.h	2009-12-28 15:07:55.000000000 +0000
+++ fst-1.8+git20091228/fst.h	2010-06-12 16:35:18.000000000 +0100
@@ -24,6 +24,9 @@
  */
 void fst_set_error_function (void (*func)(const char *));
 
+int ladish_save_now;
+char* ladish_state_filename;
+
 #include <vestige/aeffectx.h>
 
 typedef struct _FST FST;
diff -U 3 -H -d -r -N -- fst.orig/gtk.c fst-1.8+git20091228/gtk.c
--- fst.orig/gtk.c	2009-12-28 15:07:55.000000000 +0000
+++ fst-1.8+git20091228/gtk.c	2010-06-12 16:46:32.000000000 +0100
@@ -9,11 +9,6 @@
 
 #include <glib-2.0/glib.h>
 
-#ifdef HAVE_LASH
-#include <lash/lash.h>
-extern lash_client_t *lash_client;
-#endif
-
 gboolean g_quit = FALSE;
 gboolean quit = FALSE;
 
@@ -266,101 +261,6 @@
 	gtk_widget_grab_focus( gtk_socket );
 }
 
-#ifdef HAVE_LASH
-void
-save_data( JackVST *jvst )
-{
-	int i, bytelen;
-	lash_config_t *config;
-	void *chunk;
-
-	for( i=0; i<jvst->fst->plugin->numParams; i++ ) {
-	    char buf[10];
-	    float param;
-	    
-	    snprintf( buf, 9, "%d", i );
-
-	    config = lash_config_new_with_key( buf );
-
-	    pthread_mutex_lock( &(jvst->fst->lock) );
-	    param = jvst->fst->plugin->getParameter( jvst->fst->plugin, i ); 
-	    pthread_mutex_unlock( &(jvst->fst->lock) );
-
-	    lash_config_set_value_double(config, param);
-	    lash_send_config(lash_client, config);
-	    //lash_config_destroy( config );
-	}
-
-	for( i=0; i<128; i++ ) {
-	    char buf[16];
-	    
-	    snprintf( buf, 15, "midi_map%d", i );
-	    config = lash_config_new_with_key( buf );
-	    lash_config_set_value_int(config, jvst->midi_map[i]);
-	    lash_send_config(lash_client, config);
-	    //lash_config_destroy( config );
-	}
-
-	if( jvst->fst->plugin->flags & 32 ) {
-	    // TODO: calling from this thread is wrong.
-	    //       is should move it to fst gui thread.
-	    printf( "getting chunk...\n" );
-
-	    // XXX: alternative. call using the fst->lock
-	    //pthread_mutex_lock( &(fst->lock) );
-	    //bytelen = jvst->fst->plugin->dispatcher( jvst->fst->plugin, 23, 0, 0, &chunk, 0 );
-	    //pthread_mutex_unlock( &(fst->lock) );
-
-	    bytelen = fst_call_dispatcher( jvst->fst, 23, 0, 0, &chunk, 0 );
-	    printf( "got tha chunk..\n" );
-	    if( bytelen ) {
-		if( bytelen < 0 ) {
-		    printf( "Chunke len < 0 !!! Not saving chunk.\n" );
-		} else {
-		    config = lash_config_new_with_key( "bin_chunk" );
-		    lash_config_set_value(config, chunk, bytelen );
-		    lash_send_config(lash_client, config);
-		    //lash_config_destroy( config );
-		}
-
-
-	    }
-	}
-
-}
-
-void
-restore_data(lash_config_t * config, JackVST *jvst )
-{
-	const char *key;
-
-	key = lash_config_get_key(config);
-
-	if (strncmp(key, "midi_map", strlen( "midi_map")) == 0) {
-	    int cc = atoi( key+strlen("midi_map") );
-	    int param = lash_config_get_value_int( config );
-
-	    if( cc < 0 || cc>=128 || param<0 || param>=jvst->fst->plugin->numParams ) 
-		return;
-
-	    jvst->midi_map[cc] = param;
-	    return;
-	}
-
-	if( jvst->fst->plugin->flags & 32 ) {
-	    if (strcmp(key, "bin_chunk") == 0) {
-		fst_call_dispatcher( jvst->fst, 24, 0, lash_config_get_value_size( config ), (void *) lash_config_get_value( config ), 0 );
-		return;
-	    } 
-	} else {
-	    pthread_mutex_lock( & jvst->fst->lock );
-	    jvst->fst->plugin->setParameter( jvst->fst->plugin, atoi( key ), lash_config_get_value_double( config ) );
-	    pthread_mutex_unlock( & jvst->fst->lock );
-	}
-
-}
-#endif
-
 static gboolean
 idle_cb(JackVST *jvst)
 {
@@ -383,43 +283,6 @@
 		gtk_toggle_button_set_active( GTK_TOGGLE_BUTTON( midi_learn_toggle ), 0 );
 	}
 
-#ifdef HAVE_LASH
-	if (lash_enabled(lash_client)) {
-	    lash_event_t *event;
-	    lash_config_t *config;
-
-	    while ((event = lash_get_event(lash_client))) {
-		switch (lash_event_get_type(event)) {
-		    case LASH_Quit:
-			quit = 1;
-			lash_event_destroy(event);
-			break;
-		    case LASH_Restore_Data_Set:
-			printf( "lash_restore... \n" );
-			lash_send_event(lash_client, event);
-			break;
-		    case LASH_Save_Data_Set:
-			printf( "lash_save... \n" );
-			save_data( jvst );
-			lash_send_event(lash_client, event);
-			break;
-		    case LASH_Server_Lost:
-			return 1;
-		    default:
-			printf("%s: receieved unknown LASH event of type %d",
-				__FUNCTION__, lash_event_get_type(event));
-			lash_event_destroy(event);
-			break;
-		}
-	    }
-
-	    while ((config = lash_get_config(lash_client))) {
-		restore_data(config, jvst);
-		lash_config_destroy(config);
-	    }
-
-	}
-#endif
 	return TRUE;
 }
 
@@ -443,6 +306,12 @@
 
 	if( fst->plugin->numPrograms > 0 )
 		fst->plugin->dispatcher( fst->plugin, effSetProgram, 0, 0, NULL, 0.0 );
+	else
+	{
+		GtkTreeIter new_row_iter;
+		gtk_list_store_insert( retval, &new_row_iter, 0 );
+		gtk_list_store_set( retval, &new_row_iter, 0, "no programs", 1, 0, -1 );
+	}
 
 	return retval;
 }
diff -U 3 -H -d -r -N -- fst.orig/jfst.c fst-1.8+git20091228/jfst.c
--- fst.orig/jfst.c	2009-12-28 15:07:55.000000000 +0000
+++ fst-1.8+git20091228/jfst.c	2010-06-12 16:44:15.000000000 +0100
@@ -28,9 +28,6 @@
 #include "jackvst.h"
 #include "jack/midiport.h"
 
-#ifdef HAVE_LASH
-#include <lash/lash.h>
-#endif
 #include <windows.h>
 
 /* audiomaster.c */
@@ -42,6 +39,10 @@
 extern void gui_init (int* argc, char** argv[]);
 extern int  manage_vst_plugin (JackVST*);
 
+/* Ladish support */
+extern int ladish_save_now;
+extern char* ladish_state_filename;
+
 /* Prototype for plugin "canDo" helper function*/
 int canDo(struct AEffect* plugin, char* feature);
 
@@ -58,11 +59,6 @@
 void queue_midi_message(JackVST* jvst, int status, int d1, int d2, jack_nframes_t delta);
 
 
-#ifdef HAVE_LASH
-lash_client_t * lash_client;
-#endif
-
-
 // Until i get Jack to call me when he wants to create a thread,
 // i need to go through this.
 
@@ -218,6 +214,7 @@
 int process_callback( jack_nframes_t nframes, void* data) 
 {
 	int i, o;
+	int current_program;
 	JackVST* jvst = (JackVST*) data;
 	struct AEffect* plugin = jvst->fst->plugin;
 
@@ -312,7 +309,9 @@
 			}
 		}
 
-		jvst->current_program = plugin->dispatcher( plugin, effGetProgram, 0, 0, NULL, 0.0f );
+		current_program = plugin->dispatcher( plugin, effGetProgram, 0, 0, NULL, 0.0f );
+		if( current_program >= 0 )
+			jvst->current_program = current_program;
 
 		if (plugin->flags & effFlagsCanReplacing) {
 			
@@ -332,6 +331,13 @@
 			process_midi_output(jvst, nframes);
 		}
 	}
+	
+	if (ladish_save_now)
+	{
+	  printf("got ladish save here\n");
+	  fst_save_state (jvst->fst, ladish_state_filename);
+	  ladish_save_now = 0;
+	}
 
 	return 0;      
 }
@@ -649,6 +655,13 @@
 	return (plugin->dispatcher(plugin, effCanDo, 0, 0, (void*)feature, 0.0f) > 0);
 }
 
+//Ladish SIGUSR1
+static void sig_ladish(int sig)
+{
+    printf("got SIGUSR1, saving state now...\n");
+    ladish_save_now = 1;
+}
+
 int WINAPI
 WinMain(HINSTANCE hInst, HINSTANCE hPrevInst, LPSTR cmdline, int cmdshow)
 //int 
@@ -672,18 +685,17 @@
 	int argc;
 	char **argv;
 
-	create_argc_argv_from_cmdline( cmdline, "./fst", &argc, &argv );
-
-#ifdef HAVE_LASH
-
-	lash_event_t *event;
-	lash_args_t *lash_args;
+        //Ladish SIGUSR1
+        struct sigaction sa;
+        memset(&sa, 0, sizeof(sa));
+        sa.sa_handler = sig_ladish;
+        sigaction(SIGUSR1, &sa, NULL);
+        ladish_save_now = 0;
 
-	lash_args = lash_extract_args(&argc, &argv);
-#endif
+	create_argc_argv_from_cmdline( cmdline, "./fst", &argc, &argv );
 
-	if (argc < 2) {
-		fprintf (stderr, "usage: %s <plugin>\n", argv[0]);
+	if (argc < 3) {
+		fprintf (stderr, "usage: %s <ladish-state-filename> <plugin>\n", argv[0]);
 		return 1;
 	}
 
@@ -691,38 +703,16 @@
 	//setpgrp();
 
 	gui_init (&argc, &argv);
-
-	for (i = 1; i < argc; ++i) {
-		if (argv[i][0] == '-') {
-			if (argv[i][1] == 'n') {
-				with_editor = 0;
-			}
-			if (argv[i][1] == 'r') {
-				resume_not_rt = 0;
-			}
-			if (argv[i][1] == 's') {
-				load_state = 1;
-				state_file = argv[i+1];
-				i++;
-				if (i + 2 >= argc) {
-					fprintf (stderr, "usage: %s <plugin>\n", argv[0]);
-					return 1;
-				}
-			}
-			if (argv[i][1] == 'c') {
-				client_name = argv[i+1];
-				i++;
-				if (i + 2 >= argc) {
-					fprintf (stderr, "usage: %s <plugin>\n", argv[0]);
-					return 1;
-				}
-			}
-		} else {
-			plug = argv[i];
-			break;
-		}
+	
+	ladish_state_filename = argv[1];
+	
+	if (open(ladish_state_filename, O_RDONLY) > 0) {
+	  load_state = 1;
+	  state_file = ladish_state_filename;
 	}
 
+	plug = argv[2];
+
 	if (fst_init (hInst)) {
 		return 1;
 	}
@@ -731,14 +721,11 @@
 	for (i=0; i<128; i++ )
 		jvst->midi_map[i] = -1;
 
-	if (!client_name) {
-		client_name = g_path_get_basename(strdup (plug));
-		if ((period = strrchr (client_name, '.')) != NULL) {
-			*period = '\0';
-		}
+	client_name = g_path_get_basename(strdup (plug));
+	if ((period = strrchr (client_name, '.')) != NULL) {
+		*period = '\0';
 	}
 
-
 	if ((jvst->handle = fst_load (plug)) == NULL) {
 		fst_error ("can't load plugin %s", plug);
 		return 1;
@@ -769,32 +756,6 @@
 	plugin->dispatcher (plugin, effSetBlockSize, 0, 
 			    jack_get_buffer_size (jvst->client), NULL, 0.0f);
 
-	if( resume_not_rt ) {
-	    jvst->resume_called = TRUE;
-	    plugin->dispatcher (plugin, effMainsChanged, 0, 1, NULL, 0.0f);
-	}
-	
-	// ok.... plugin is running... lets bind to lash...
-	
-#ifdef HAVE_LASH
-	int flags = LASH_Config_Data_Set;
-
-	lash_client =
-		lash_init(lash_args, client_name, flags, LASH_PROTOCOL(2, 0));
-
-	if (!lash_client) {
-	    fprintf(stderr, "%s: could not initialise lash\n", __FUNCTION__);
-	    fprintf(stderr, "%s: running fst without lash session-support\n", __FUNCTION__);
-	    fprintf(stderr, "%s: to enable lash session-support launch the lash server prior fst\n", __FUNCTION__);
-	}
-
-	if (lash_enabled(lash_client)) {
-		event = lash_event_new_with_type(LASH_Client_Name);
-		lash_event_set_string(event, client_name);
-		lash_send_event(lash_client, event);
-	}
-#endif
-
 
 	/* set program to zero */
 	/* i comment this out because it breaks dfx Geometer
@@ -922,14 +883,6 @@
 		printf( "no Editor\n" );
 	}
 
-#ifdef HAVE_LASH
-	if( lash_enabled( lash_client ) ) {
-	    event = lash_event_new_with_type(LASH_Jack_Client_Name);
-	    lash_event_set_string(event, client_name);
-	    lash_send_event(lash_client, event);
-	}
-#endif
-
         /* load state if requested */
 
 	if (load_state) {
