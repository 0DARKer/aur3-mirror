diff a/3rdparty/dyncall/dyncall/dyncall_api.c b/3rdparty/dyncall/dyncall/dyncall_api.c
--- a/3rdparty/dyncall/dyncall/dyncall_api.c
+++ b/3rdparty/dyncall/dyncall/dyncall_api.c
@@ -156,6 +156,7 @@ DCint dcGetError(DCCallVM *vm)
   return vm->mError;
 }
 
+const char* dcGetErrorString(int mode);
 const char* dcGetErrorString(int mode)
 {
   switch(mode) {
diff a/3rdparty/dyncall/dyncall/dyncall_callvm_x64.c b/3rdparty/dyncall/dyncall/dyncall_callvm_x64.c
--- a/3rdparty/dyncall/dyncall/dyncall_callvm_x64.c
+++ b/3rdparty/dyncall/dyncall/dyncall_callvm_x64.c
@@ -168,6 +168,7 @@ static void dc_callvm_argStruct_x64(DCCallVM* in_self, DCstruct* s, DCpointer x)
 
 
 /* Call. */
+void dc_callvm_call_x64(DCCallVM* in_self, DCpointer target);
 void dc_callvm_call_x64(DCCallVM* in_self, DCpointer target)
 {
   DCCallVM_x64* self = (DCCallVM_x64*)in_self;
diff a/3rdparty/dyncall/dyncallback/dyncall_callback_x64.c b/3rdparty/dyncall/dyncallback/dyncall_callback_x64.c
--- a/3rdparty/dyncall/dyncallback/dyncall_callback_x64.c
+++ b/3rdparty/dyncall/dyncallback/dyncall_callback_x64.c
@@ -30,8 +30,8 @@
 
 
 /* Callback symbol. */
-extern void dcCallback_x64_sysv();
-extern void dcCallback_x64_win64();
+extern void dcCallback_x64_sysv(void);
+extern void dcCallback_x64_win64(void);
 
 
 void dcbInitCallback(DCCallback* pcb, const char* signature, DCCallbackHandler* handler, void* userdata)
diff a/3rdparty/dyncall/dyncallback/dyncall_callback_x86.c b/3rdparty/dyncall/dyncallback/dyncall_callback_x86.c
--- a/3rdparty/dyncall/dyncallback/dyncall_callback_x86.c
+++ b/3rdparty/dyncall/dyncallback/dyncall_callback_x86.c
@@ -34,7 +34,7 @@
  * assembly thunk entry for callbacks
  */
 
-extern void dcCallbackThunkEntry();
+extern void dcCallbackThunkEntry(void);
 
 /* compute stacksize for callee cleanup calling conventions:
  *
diff a/3rdparty/dyncall/dyncallback/dyncall_thunk.h b/3rdparty/dyncall/dyncallback/dyncall_thunk.h
--- a/3rdparty/dyncall/dyncallback/dyncall_thunk.h
+++ b/3rdparty/dyncall/dyncallback/dyncall_thunk.h
@@ -56,7 +56,7 @@ typedef struct DCThunk_ DCThunk;
 extern "C" {
 #endif
 
-void   dcbInitThunk(DCThunk* p, void (*entry)());
+void   dcbInitThunk(DCThunk* p, void (*entry)(void));
 
 #if defined(DC__Arch_Intel_x86)
 #include "dyncall_thunk_x86.h"
diff a/3rdparty/dyncall/dyncallback/dyncall_thunk_x64.c b/3rdparty/dyncall/dyncallback/dyncall_thunk_x64.c
--- a/3rdparty/dyncall/dyncallback/dyncall_thunk_x64.c
+++ b/3rdparty/dyncall/dyncallback/dyncall_thunk_x64.c
@@ -25,7 +25,7 @@
 
 #include "dyncall_thunk.h"
 
-void dcbInitThunk(DCThunk* p, void (*entry)())
+void dcbInitThunk(DCThunk* p, void (*entry)(void))
 {
   /*
     # x64 thunk code:
diff a/3rdparty/dyncall/dyncallback/dyncall_thunk_x64.h b/3rdparty/dyncall/dyncallback/dyncall_thunk_x64.h
--- a/3rdparty/dyncall/dyncallback/dyncall_thunk_x64.h
+++ b/3rdparty/dyncall/dyncallback/dyncall_thunk_x64.h
@@ -29,7 +29,7 @@
 struct DCThunk_
 {
   unsigned long long code[2];
-  void (*entry)();
+  void (*entry)(void);
 };
 
 #define DCTHUNK_X64_SIZE	24
diff a/3rdparty/dyncall/dyncallback/dyncall_thunk_x86.h b/3rdparty/dyncall/dyncallback/dyncall_thunk_x86.h
--- a/3rdparty/dyncall/dyncallback/dyncall_thunk_x86.h
+++ b/3rdparty/dyncall/dyncallback/dyncall_thunk_x86.h
@@ -31,7 +31,7 @@ struct DCThunk_
   unsigned int code_load;
   void*        addr_self;
   unsigned int code_jump;
-  void        (*addr_entry)();
+  void        (*addr_entry)(void);
 };
 
 #define DCTHUNK_X86_SIZE	16
