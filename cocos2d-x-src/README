Very important point to have a full functionnal cocos2d-x install:


*****************
**    ERROR    **
*****************
 * cmake update 3.2.1 breaks linker command, not adding anymore libx11 dependency
   Issue done to cocos2d guys. Meantime, please use cmake 3.1.3


*******************
**    WARNING    **
*******************
 * All cocos2d scripts use python2. Calling "python2 script" is not enough
   as other submodule will be called with "env python" (which could point to python3).
   cocos2d scripts will failed if called with python3.

   In order to use cocos2d wrapper correctly without forcing symlink python to be python2,
   you can use this : https://wiki.archlinux.org/index.php/python#Dealing_with_version_problem_in_build_scripts
   A first pattern I suggest is "/opt/cocos2d-x/*"


************************
**    CONFIGURATION   **
************************
 * To setup you environement, you can use "python2 /opt/cocos2d-x/setup"
   or manually update your .bashrc, .zshrc, .whateverrc with :
export COCOS_X_ROOT=/opt/cocos2d-x
export COCOS_CONSOLE_ROOT=$COCOS_X_ROOT/tools/cocos2d-console/bin
export COCOS_TEMPLATES_ROOT=$COCOS_X_ROOT/templates
export PATH=$COCOS_X_ROOT:$PATH
export PATH=$COCOS_CONSOLE_ROOT:$PATH
export PATH=$COCOS_TEMPLATES_ROOT:$PATH

   In order to use android, you should also define :
export NDK_ROOT=/opt/android-ndk
export ANDROID_SDK_ROOT=/opt/android-sdk
export ANT_ROOT=/usr/bin
   (Each path came with package aur/android-ndk aur/android-sdk and extra/apache-ant)


 * Use "cocos" wrapper to create, compile, run your project...
   "cocos" will echo you basic command
   "cocos command" will echo you basic parameter for "command"

   Basic setup :
   cocos new -l cpp -p com.firm.app myapp
   cd myapp
   cocos run -p android -j3
   cocos run -p linux -j3

   Alternative 1 :
   cocos new -l cpp -p com.firm.app myapp
   mkdir linux-build && cd linux-build
   cmake ..
   ../bin/debug/linux/MyGame

   Alternative 2 (howewer compile failed near 70% on unfound malloc/free):
   export CC=/usr/bin/clang
   export CXX=/usr/bin/clang++
   cocos new -l cpp -p com.firm.app myapp
   mkdir linux-build && cd linux-build
   cmake -G Ninja -DCLANG=ON ..
   ../bin/debug/linux/MyGame
   

 * Personnal preference :
   Each time a new project is done, a full cocos2d src directory is copied (400Mb),
   you can delete it and create a simlink "cocos2d" pointing to /opt/cocos2d-x.

   You can also edit myapp/CMakeLists.txt to adjust personnal preference
   (and speed up compile time, avoiding unnecessary things)
   Here my personnal customisation :
set(DEBUG_MODE OFF CACHE BOOL                "Debug or release? Release!")
set(BUILD_EXTENSIONS OFF CACHE BOOL          "Turn off build extension library")
set(BUILD_EDITOR_SPINE OFF CACHE BOOL        "Turn off build editor support for spine")
set(BUILD_EDITOR_COCOSTUDIO OFF CACHE BOOL   "Turn off build editor support for cocostudio")
set(BUILD_EDITOR_COCOSBUILDER OFF CACHE BOOL "Turn off build editor support for cocosbuilder")
set(BUILD_CPP_TESTS OFF CACHE BOOL           "Turn off build TestCpp samples")
set(BUILD_LUA_LIBS OFF CACHE BOOL            "Turn off build lua libraries")
set(BUILD_LUA_TESTS OFF CACHE BOOL           "Turn off build TestLua samples")

I think that's all for the moment.
I hope you'll enjoy as mush as I am !
