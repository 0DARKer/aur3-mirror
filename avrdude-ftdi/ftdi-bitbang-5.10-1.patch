diff -Nur avrdude-5.10.orig/avrdude.conf.in avrdude-5.10.ftdi.new/avrdude.conf.in
--- avrdude-5.10.orig/avrdude.conf.in	2010-01-19 20:39:11.000000000 +1000
+++ avrdude-5.10.ftdi.new/avrdude.conf.in	2010-06-26 15:21:03.000000000 +1100
@@ -17,7 +17,7 @@
 #       desc     = <description> ;                  # quoted string
 #       type     = par | stk500 | stk500v2 | stk500pp | stk500hvsp | stk500generic |
 #                  stk600 | stk600pp | stk600hvsp |
-#                  avr910 | butterfly | usbasp |
+#                  avr910 | butterfly | usbasp | ft245r |
 #                  jtagmki | jtagmkii | jtagmkii_isp | jtagmkii_dw |
 #                  jtagmkII_avr32 | jtagmkii_pdi |
 #                  dragon_dw | dragon_jtag | dragon_isp | dragon_pp |
@@ -320,6 +320,37 @@
   type  = arduino;
 ;
 
+#arduino duemilanove
+programmer
+  id    = "duemilanove";
+  desc  = "FT232R Synchronous BitBang";
+  type  = ft245r;
+  miso  = 3;  # CTS X3(1)
+  sck   = 5;  # DSR X3(2)
+  mosi  = 6;  # DCD X3(3)
+  reset = 7;  # RI X3(4)
+;
+
+programmer
+  id    = "ft245r";
+  desc  = "FT245R Synchronous BitBang";
+  type  = ft245r;
+  miso  = 1; # D1
+  sck   = 0; # D0
+  mosi  = 2; # D2
+  reset = 4; # D4
+;
+
+programmer
+  id    = "ft232r";
+  desc  = "FT232R Synchronous BitBang";
+  type  = ft245r;
+  miso  = 1;  # RxD
+  sck   = 0;  # RTS
+  mosi  = 2;  # TxD
+  reset = 4;  # DTR
+;
+
 programmer
   id    = "avrisp";
   desc  = "Atmel AVR ISP";
diff -Nur avrdude-5.10.orig/config_gram.y avrdude-5.10.ftdi.new/config_gram.y
--- avrdude-5.10.orig/config_gram.y	2010-01-19 20:39:11.000000000 +1000
+++ avrdude-5.10.ftdi.new/config_gram.y	2010-06-26 15:24:05.000000000 +1100
@@ -148,6 +148,7 @@
 %token K_STK600HVSP
 %token K_STK600PP
 %token K_AVR910
+%token K_FT245R
 %token K_USBASP
 %token K_USBTINY
 %token K_BUTTERFLY
@@ -462,6 +463,12 @@
     }
   } |
 
+  K_TYPE TKN_EQUAL K_FT245R {
+    {
+      ft245r_initpgm(current_prog);
+    }
+  } |
+
   K_TYPE TKN_EQUAL K_USBASP {
     {
       usbasp_initpgm(current_prog);
@@ -1371,10 +1378,10 @@
 
   value = v->value.number;
 
-  if ((value <= 0) || (value >= 18)) {
+  if ((value < 0) || (value >= 18)) {
     fprintf(stderr, 
             "%s: error at line %d of %s: pin must be in the "
-            "range 1-17\n",
+            "range 0-17\n",
             progname, lineno, infile);
     exit(1);
   }
diff -Nur avrdude-5.10.orig/configure.ac avrdude-5.10.ftdi.new/configure.ac
--- avrdude-5.10.orig/configure.ac	2010-01-19 20:39:11.000000000 +1000
+++ avrdude-5.10.ftdi.new/configure.ac	2010-06-27 15:35:38.000000000 +1100
@@ -172,6 +172,36 @@
 		esac],
 	[enabled_parport=yes])
 
+#### FTDI BitBang: start ####
+AH_TEMPLATE([HAVE_LIBFTDI],
+            [Define if libftdi is present in system])
+AH_TEMPLATE([SUPPORT_FT245R],
+            [There is FTDI BitBang programming mode])
+
+AC_ARG_ENABLE(
+	[ftdi-bitbang],
+	AC_HELP_STRING(
+		[--enable-ftdi-bitbang],
+		[enable FTDI bitbang programming mode (needs libftdi library)]),
+	[case "${enableval}" in
+		yes) enabled_ftdi_bitbang=yes ;;
+		no)  enabled_ftdi_bitbang=no ;;
+		*)   AC_MSG_ERROR(bad value ${enableval} for enable-ftdi-bitbang option) ;;
+		esac],
+	[enabled_ftdi_bitbang=no])
+
+if test "$enabled_ftdi_bitbang" = "yes"; then
+    PKG_CHECK_MODULES(LIBFTDI, [libftdi], [have_libftdi=yes], [have_libftdi=no])
+
+    if test "$have_libftdi" = "yes"; then
+        AC_DEFINE([HAVE_LIBFTDI])
+        AC_DEFINE([SUPPORT_FT245R])
+        CFLAGS="$CFLAGS $LIBFTDI_CFLAGS "
+        LIBS="$LIBS $LIBFTDI_LIBS"
+    fi
+fi
+#### FTDI BitBang: end ####
+
 DIST_SUBDIRS_AC='doc windows'
 
 if test "$enabled_doc" = "yes"; then
@@ -253,10 +283,10 @@
 
 	AC_TRY_COMPILE(, [ int main () { return 0 ; } ], [
 		no_pointer_sign=yes
-		AC_MSG_RESULT([yes]) 
+		AC_MSG_RESULT([yes])
 		], [
 		no_pointer_sign=no
-		AC_MSG_RESULT([no]) 
+		AC_MSG_RESULT([no])
 		])
 	CFLAGS=$safe_CFLAGS
 
diff -Nur avrdude-5.10.orig/ft245r.c avrdude-5.10.ftdi.new/ft245r.c
--- avrdude-5.10.orig/ft245r.c	1970-01-01 10:00:00.000000000 +1000
+++ avrdude-5.10.ftdi.new/ft245r.c	2010-06-27 15:56:20.000000000 +1100
@@ -0,0 +1,1201 @@
+/*
+ * avrdude - A Downloader/Uploader for AVR device programmers
+ * Copyright (C) 2003-2004  Theodore A. Roth  <troth@openavr.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program; if not, write to the Free Software
+ * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
+ */
+
+/* $Id$ */
+
+/* ft245r -- FT245R/FT232R Synchronous BitBangMode Programmer
+  default pin assign
+               FT232R / FT245R
+  miso  = 1;  # RxD   / D1
+  sck   = 0;  # RTS   / D0
+  mosi  = 2;  # TxD   / D2
+  reset = 4;  # DTR   / D4
+*/
+
+#include "ac_cfg.h"
+
+#include <stdio.h>
+#include <stdlib.h>
+#include <string.h>
+#include <errno.h>
+#include <sys/time.h>
+#include <unistd.h>
+
+#include <errno.h>
+#include <math.h>
+
+#include "config.h"
+#include "avr.h"
+#include "pindefs.h"
+#include "pgm.h"
+#include "bitbang.h"
+#include "ft245r.h"
+
+#define FT245R_DEBUG 0
+
+// Start DEBUG framework
+#if FT245R_DEBUG == 1
+static int _func_depth = 0;
+
+#   define _PRINT_INDENT(depth) {int i; for(i = 0; i < 4 * depth; i++) fprintf(stderr, " ");}
+
+#   define DATA_HEX_DUMP(str, buf, len) \
+    { \
+        int i, j; \
+        printf("\n%s:\n  ", str); \
+        for (i = 0, j = 0; i < len; i++, j++) \
+        { \
+        if (j == 16) \
+        { \
+            j = 0; \
+            printf("\n  "); \
+        } \
+        if (buf[i] < 0x10) \
+        {\
+            printf("0x%.2x ", buf[i]); \
+        } \
+        else \
+        { \
+            printf("0x%.2x ", buf[i]); \
+        } \
+        } \
+        printf("\n"); \
+    }
+
+
+#   define FUNC_BEGIN() \
+    { \
+        fprintf(stderr, "\n"); \
+        _PRINT_INDENT(_func_depth); \
+        fprintf(stderr, "%s(): being\n", __FUNCTION__); \
+        _func_depth++; \
+    }
+
+#   define FUNC_END() \
+    { \
+        fprintf(stderr, "\n"); \
+        _func_depth--; \
+        _PRINT_INDENT(_func_depth); \
+        fprintf(stderr, "%s(): end\n", __FUNCTION__); \
+    }
+
+#else
+#   define DATA_HEX_DUMP(str, buf, len) {}
+#   define FUNC_BEGIN(name) {}
+#   define FUNC_END() {}
+#endif
+
+// End DEBUG framework
+
+
+#if defined(_WIN32) || defined(SUPPORT_FT245R)
+
+#include <ftdi.h>
+
+struct device_info {
+    int vendor_id;
+    int product_id;
+};
+
+// Known devices for auto search and open
+static struct device_info devices[] = {
+    // FT232R, FT232RL
+    {
+        .vendor_id  = 0x0403,
+        .product_id = 0x6001
+    },
+
+    // List end
+    {
+        .vendor_id  = 0x00,
+        .product_id = 0x00
+    },
+};
+
+#define FT245R_CYCLES           2
+
+/*
+  With big Fragment Size and a lot of REQ_OUTSTANDINGS programmer fail.
+  Experementaly established that at one time amount of data greated then 384 bytes
+  can't be writed/readed.
+  I can't found any documented description for this behaviour.
+  In any case multiplication
+        FT245R_FRAGMENT_SIZE*REQ_OUTSTANDINGS
+  can't be greated then 384. Now I take size information from device info.
+*/
+//#define FT245R_FRAGMENT_SIZE    512
+#define FT245R_FRAGMENT_SIZE    (max_packet_size)
+#define REQ_OUTSTANDINGS        (max_packet_size < 128 ? 2 : max_packet_size / 64)
+
+extern char * progname;
+extern int    do_cycles;
+extern int    ovsigck;
+extern int    verbose;
+
+static struct ftdi_context *handle;
+static int                  max_packet_size;
+
+static unsigned char ft245r_ddr;
+static unsigned char ft245r_sck;
+static unsigned char ft245r_mosi;
+static unsigned char ft245r_reset;
+static unsigned char ft245r_miso;
+
+static inline int packet_size()
+{
+    int                 packet_size = 64;
+    struct usb_device  *dev;
+
+    dev = usb_device(handle->usb_dev);
+    if (dev == NULL)
+        return packet_size;
+
+    if (dev->descriptor.bNumConfigurations > 0 && dev->config)
+    {
+        struct usb_config_descriptor config = dev->config[0];
+        if (handle->interface < config.bNumInterfaces)
+        {
+            struct usb_interface interface = config.interface[handle->interface];
+            if (interface.num_altsetting > 0)
+            {
+                struct usb_interface_descriptor descriptor = interface.altsetting[0];
+                // TODO: check for valid end-point
+                if (descriptor.bNumEndpoints > 0)
+                {
+                    packet_size = descriptor.endpoint[0].wMaxPacketSize;
+                }
+            }
+        }
+    }
+
+    if (verbose)
+        fprintf(stderr, " ft245r: max packet size = %d\n", packet_size);
+
+    return packet_size;
+}
+
+static inline void setbit(unsigned char *data, int pinno, int v)
+{
+    FUNC_BEGIN();
+    if (v)
+    {
+        *data |= (1 << (pinno));
+    }
+    else
+    {
+        *data &= ~(1 <<(pinno));
+    }
+    FUNC_END();
+}
+
+static int ft245r_send(PROGRAMMER * pgm, char * buf, size_t len)
+{
+    FUNC_BEGIN();
+    int r   = -1;
+    int ret =  0;
+    r = ftdi_write_data(handle, buf, len);
+
+    DATA_HEX_DUMP("WRITED DATA", buf, r);
+
+    if (r <= 0 || len != r)
+    {
+        fprintf(stderr,
+                "%s: ft245r_send(): can't write data to programmer: writed = %d, asked = %d, error = %s, error2 = %s\n",
+                progname,
+                r,
+                len,
+                handle->error_str,
+                strerror(errno));
+        ret = -1;
+    }
+
+    FUNC_END();
+    return ret;
+}
+
+
+static int ft245r_recv(PROGRAMMER * pgm, char * buf, size_t len)
+{
+    int r;
+    int ret = 0;
+    FUNC_BEGIN();
+
+    r = ftdi_read_data(handle, buf, len);
+
+    DATA_HEX_DUMP("READED DATA", buf, r);
+
+    if (r <= 0 || len != r )
+    {
+        fprintf(stderr,
+                "%s: ft245r_recv(): programmer is not responding: readed = %d / asked = %d, error = %s\n",
+                progname,
+                r,
+                len,
+                handle->error_str);
+        ret = -1;
+    }
+
+    FUNC_END();
+    return ret;
+}
+
+
+static int ft245r_drain(PROGRAMMER * pgm, int display)
+{
+    int r;
+    int n;
+
+    FUNC_BEGIN();
+
+    r = ftdi_set_bitmode(handle, 0, BITMODE_RESET); // reset
+    if (r != 0) {FUNC_END(); return -1;}
+
+    r = ftdi_set_bitmode(handle, ft245r_ddr, BITMODE_SYNCBB); // set Synchronuse BitBang
+    if (r != 0) {FUNC_END(); return -1;}
+
+    // TODO: investigate: how to take amount of bytes in input buffer
+    //r = FT_GetQueueStatus(handle, &n);
+    //if (r != FT_OK) return -1;
+    n = handle->readbuffer_remaining;
+    if (n)
+    {
+        fprintf(stderr, "ft245r_drain called but queue is not empty %d \n", n);
+    }
+
+    FUNC_END();
+    return 0;
+}
+
+static inline int ft245r_sync(PROGRAMMER * pgm)
+{
+    // TODO
+    int r;
+    unsigned char ch;
+    //r = FT_GetBitMode(handle, &ch);
+    r = ftdi_read_pins(handle, &ch);
+    if (r != 0) return -1;
+
+    fprintf(stderr, "ft245_sync: readed pins: %d, stored mode: %d\n", ch, handle->bitbang_mode);
+
+    return 0;
+}
+
+static int ft245r_chip_erase(PROGRAMMER * pgm, AVRPART * p)
+{
+    unsigned char cmd[4];
+    unsigned char res[4];
+
+    FUNC_BEGIN();
+
+    if (p->op[AVR_OP_CHIP_ERASE] == NULL)
+    {
+        fprintf(stderr, "chip erase instruction not defined for part \"%s\"\n", p->desc);
+        FUNC_END();
+        return -1;
+    }
+
+    memset(cmd, 0, sizeof(cmd));
+
+    avr_set_bits(p->op[AVR_OP_CHIP_ERASE], cmd);
+    pgm->cmd(pgm, cmd, res);
+    usleep(p->chip_erase_delay);
+    pgm->initialize(pgm, p);
+
+    FUNC_END();
+    return 0;
+}
+
+static unsigned char saved_signature[3];
+
+static int valid_rates[] = {
+   2400, 4800, 9600, 14400, 19200, 38400, 57600,
+   115200, 230400, 460800, 921600, 3000000
+};
+
+static void ft245r_set_bitclock(PROGRAMMER * pgm)
+{
+    int    r;
+    int    rate     = 0;
+    double tmp_rate = 0.0;
+    int    i;
+
+    FUNC_BEGIN();
+
+    if (pgm->bitclock == 0.0)        // using default
+    {
+        tmp_rate = 235000.0 / 2.0;
+    }
+    else if (pgm->bitclock >= 0.50 )
+    {
+        tmp_rate = 500000.0 / 2.0;
+    }
+    else if (pgm->bitclock <  0.01)
+    {
+        tmp_rate =   1000.0 / 2.0;
+    }
+    else
+    {
+        tmp_rate = pgm->bitclock * 1000000.0 / 2.0;
+    }
+
+    rate = round(tmp_rate);
+
+    for (i= sizeof(valid_rates) / sizeof(valid_rates[0]) - 1; i >= 0; --i)
+    {
+        if (valid_rates[i] <= rate)
+        {
+            rate = valid_rates[i];
+            break;
+        }
+    }
+
+    if (i<0) rate = valid_rates[0];
+
+    r = ftdi_set_baudrate(handle, rate);
+    if (r < 0)
+    {
+        fprintf(stderr, "ERROR: can't set bit clock to %d\n", rate * 2);
+    }
+    else if ((verbose>=1) || FT245R_DEBUG)
+    {
+        fprintf(stderr," ft245r:  bitclk %d -> ft baud %d\n", rate * 2, rate);
+    }
+
+    FUNC_END();
+}
+
+static int set_reset(PROGRAMMER * pgm, int val)
+{
+    unsigned char buf[1];
+    FUNC_BEGIN();
+
+    buf[0] = 0;
+    if (val) buf[0] |= ft245r_reset;
+
+    ft245r_send (pgm, buf, 1);
+    ft245r_recv (pgm, buf, 1);
+
+    FUNC_END();
+    return 0;
+}
+
+static int ft245r_cmd(PROGRAMMER * pgm, unsigned char cmd[4], unsigned char res[4]);
+/*
+ * issue the 'program enable' command to the AVR device
+ */
+static int ft245r_program_enable(PROGRAMMER * pgm, AVRPART * p)
+{
+    int           retry_count = 0;
+    int           i;
+    int           reset_ok;
+
+    unsigned char cmd[4];
+    unsigned char res[4];
+
+    FUNC_BEGIN();
+
+    ft245r_set_bitclock(pgm);
+
+retry:
+    reset_ok = 0;
+    set_reset(pgm, 0);
+    usleep(5000); // 5ms
+    set_reset(pgm, 1);
+    usleep(5000); // 5ms
+    set_reset(pgm, 0);
+    usleep(5000); // 5ms
+
+    cmd[0] = 0xAC;
+    cmd[1] = 0x53;
+    cmd[2] = 0;
+    cmd[3] = 0;
+
+    ft245r_cmd(pgm, cmd, res);
+
+    if (res[2] == 0x53 )
+        reset_ok = 1;
+
+    for (i = 0; i < 3; i++)
+    {
+        cmd[0] = 0x30;
+        cmd[1] = 0;
+        cmd[2] = i;
+        cmd[3] = 0;
+
+        ft245r_cmd(pgm, cmd, res);
+        saved_signature[i] = res[3];
+    }
+
+    if (reset_ok && (saved_signature[0] == 0x1e)) // success
+    {
+        FUNC_END();
+        return 0;
+    }
+
+    if (retry_count < 5)
+    {
+        retry_count++;
+        goto retry;
+    }
+
+    if ((verbose>=1) || FT245R_DEBUG)
+    {
+        fprintf(stderr, "%s: ft245r_program_enable: failed\n", progname);
+        fflush(stderr);
+    }
+
+    FUNC_END();
+    return -1;
+}
+
+static int ft245r_read_sig_bytes(PROGRAMMER * pgm, AVRPART * p, AVRMEM * m)
+{
+    FUNC_BEGIN();
+    m->buf[0] = saved_signature[0];
+    m->buf[1] = saved_signature[1];
+    m->buf[2] = saved_signature[2];
+    FUNC_END();
+    return 3;
+}
+
+/*
+ * initialize the AVR device and prepare it to accept commands
+ */
+static int ft245r_initialize(PROGRAMMER * pgm, AVRPART * p)
+{
+    int r;
+    FUNC_BEGIN();
+    r = ft245r_program_enable(pgm, p);
+    FUNC_END();
+    return r;
+}
+
+static void ft245r_disable(PROGRAMMER * pgm)
+{
+    FUNC_BEGIN();
+    FUNC_END();
+    return;
+}
+
+
+static void ft245r_enable(PROGRAMMER * pgm)
+{
+    /* Do nothing. */
+    FUNC_BEGIN();
+    FUNC_END();
+    return;
+}
+
+static inline int set_data(unsigned char *buf, unsigned char data)
+{
+    int           j;
+    int           buf_pos = 0x00;
+    unsigned char bit     = 0x80;
+
+    FUNC_BEGIN();
+
+    for (j = 0; j < 8; j++)
+    {
+        buf[buf_pos] = 0;
+        if (data & bit)
+        {
+            buf[buf_pos] |= ft245r_mosi;
+        }
+
+        buf_pos++;
+
+        buf[buf_pos] = 0;
+
+        if (data & bit)
+        {
+            buf[buf_pos] |= ft245r_mosi;
+        }
+
+        buf[buf_pos] |= ft245r_sck;
+        buf_pos++;
+
+        bit >>= 1;
+    }
+
+    FUNC_END();
+    return buf_pos;
+}
+
+static inline unsigned char extract_data(unsigned char *buf, int offset)
+{
+    int           j;
+    int           buf_pos = 1;
+    unsigned char bit     = 0x80;
+    unsigned char r       = 0;
+
+    FUNC_BEGIN();
+
+    buf += offset * (8 * FT245R_CYCLES);
+    for (j = 0; j < 8; j++)
+    {
+        if (buf[buf_pos] & ft245r_miso)
+        {
+            r |= bit;
+        }
+        buf_pos += FT245R_CYCLES;
+        bit >>= 1;
+    }
+
+    FUNC_END();
+    return r;
+}
+
+/* to check data */
+static inline unsigned char extract_data_out(unsigned char *buf, int offset)
+{
+    int j;
+    int buf_pos = 1;
+    unsigned char bit = 0x80;
+    unsigned char r = 0;
+
+    FUNC_BEGIN();
+
+    buf += offset * (8 * FT245R_CYCLES);
+    for (j=0; j<8; j++)
+    {
+        if (buf[buf_pos] & ft245r_mosi)
+        {
+            r |= bit;
+        }
+        buf_pos += FT245R_CYCLES;
+        bit >>= 1;
+    }
+
+    FUNC_END();
+    return r;
+}
+
+
+/*
+ * transmit an AVR device command and return the results; 'cmd' and
+ * 'res' must point to at least a 4 byte data buffer
+ */
+static int ft245r_cmd(PROGRAMMER  * pgm,
+                      unsigned char cmd[4],
+                      unsigned char res[4])
+{
+    int           i;
+    int           buf_pos;
+    unsigned char buf[128];
+
+    FUNC_BEGIN();
+
+    buf_pos = 0;
+    for (i = 0; i < 4; i++)
+    {
+        buf_pos += set_data(buf+buf_pos, cmd[i]);
+    }
+
+    buf[buf_pos] = 0;
+    buf_pos++;
+
+
+    ft245r_send (pgm, buf, buf_pos);
+    ft245r_recv (pgm, buf, buf_pos);
+
+    res[0] = extract_data(buf, 0);
+    res[1] = extract_data(buf, 1);
+    res[2] = extract_data(buf, 2);
+    res[3] = extract_data(buf, 3);
+
+    FUNC_END();
+    return 0;
+}
+
+static int ft245r_open(PROGRAMMER * pgm, char * port)
+{
+    int                 r      = -1;
+    struct device_info *device = NULL;
+    unsigned int        chip_id;
+
+    FUNC_BEGIN();
+
+    strcpy(pgm->port, port);
+
+    handle = ftdi_new();
+    if (handle == NULL)
+    {
+        fprintf(stderr, "can't alloc data for ftdi context\n");
+        FUNC_END();
+        exit(1);
+    }
+
+    if (port != default_parallel)
+    {
+        // TODO: add support for Port by usb ID, like 003/001
+        //       or by chip id
+        struct usb_bus    *bus;
+        struct usb_device *dev;
+        char               dev_string[PATH_MAX + 1];
+        int                min_size;
+        char               dev_found = 0;
+
+        do
+        {
+            usb_init();
+
+            r = usb_find_busses();
+            if (r < 0) break;
+
+            r = usb_find_devices();
+            if (r < 0) break;
+
+            for (bus = usb_get_busses(); bus; bus = bus->next)
+            {
+                for (dev = bus->devices; dev; dev = dev->next)
+                {
+                    snprintf(dev_string,
+                             sizeof(dev_string),
+                             "%s/%s",
+                             bus->dirname,
+                             dev->filename);
+
+                    min_size = strlen(port) > strlen(dev_string) ? strlen(dev_string) : strlen(port);
+
+                    if (strncmp(port, dev_string, min_size) == 0)
+                    {
+                        r = ftdi_usb_open_dev(handle, dev);
+                        dev_found = 1;
+                        break;
+                    }
+                }
+
+                if (dev_found == 1)
+                    break;
+            }
+        }
+        while(0);
+    }
+    else
+    {
+        // Search first avail device
+        device = devices;
+        while(device->vendor_id && device->product_id)
+        {
+            r = ftdi_usb_open(handle, device->vendor_id, device->product_id);
+            if (r == 0)
+                break;
+            device++;
+        }
+    }
+
+    if (r != 0)
+    {
+        fprintf(stderr, "%s: %s open failed \n", progname, port);
+        FUNC_END();
+        exit(1);
+    }
+
+    max_packet_size = packet_size();
+
+    fprintf(stderr, "Chip type: %d\n", handle->type);
+    ftdi_read_chipid(handle, &chip_id);
+    fprintf(stderr, "Chip ID: %X\n", chip_id);
+
+    ftdi_write_data_set_chunksize(handle, 128);
+    ftdi_read_data_set_chunksize(handle,  128);
+
+    r = ftdi_set_bitmode(handle, 0x00, BITMODE_SYNCBB); // set Synchronuse BitBang
+    if (r != 0)
+    {
+        fprintf(stderr, "%s: Synchronuse BitBangMode is not supported\n", progname);
+        FUNC_END();
+        exit(1);
+    }
+
+    if (verbose ||  FT245R_DEBUG)
+    {
+        fprintf(stderr, "%s: BitBang OK \n", progname);
+        fflush(stderr);
+    }
+
+    ft245r_ddr = 0;
+    setbit(&ft245r_ddr, pgm->pinno[PIN_AVR_SCK], 1);
+    setbit(&ft245r_ddr, pgm->pinno[PIN_AVR_MOSI], 1);
+    setbit(&ft245r_ddr, pgm->pinno[PIN_AVR_RESET], 1);
+
+    ft245r_sck = 0;
+    setbit(&ft245r_sck, pgm->pinno[PIN_AVR_SCK], 1);
+
+    ft245r_mosi = 0;
+    setbit(&ft245r_mosi, pgm->pinno[PIN_AVR_MOSI], 1);
+
+    ft245r_reset = 0;
+    setbit(&ft245r_reset, pgm->pinno[PIN_AVR_RESET], 1);
+
+    ft245r_miso = 0;
+    setbit(&ft245r_miso, pgm->pinno[PIN_AVR_MISO], 1);
+
+    if ((verbose>=1) || FT245R_DEBUG)
+    {
+        fprintf(stderr,
+                "%s: pin assign miso %d sck %d mosi %d reset %d\n",
+                progname,
+                pgm->pinno[PIN_AVR_MISO],
+                pgm->pinno[PIN_AVR_SCK],
+                pgm->pinno[PIN_AVR_MOSI],
+                pgm->pinno[PIN_AVR_RESET]);
+    }
+
+    /*
+     * drain any extraneous input
+     */
+    ft245r_drain (pgm, 0);
+    if ((verbose>=1) || FT245R_DEBUG)
+    {
+        fprintf(stderr, "%s: drain OK \n", progname);
+        fflush(stderr);
+    }
+
+    FUNC_END();
+    return 0;
+}
+
+static void ft245r_close(PROGRAMMER * pgm)
+{
+    FUNC_BEGIN();
+
+    // Set RESET signal to HIGH, MCU should start work
+    set_reset(pgm, 1);
+
+    ftdi_usb_close(handle);
+    ftdi_free(handle);
+
+    FUNC_END();
+}
+
+static void ft245r_display(PROGRAMMER * pgm, const char * p)
+{
+    FUNC_BEGIN();
+    FUNC_END();
+    return;
+}
+
+static int ft245r_paged_write_gen(PROGRAMMER * pgm,
+                                  AVRPART    * p,
+                                  AVRMEM     * m,
+                                  int          page_size,
+                                  int          n_bytes)
+{
+    unsigned long  i;
+    int            rc;
+
+    FUNC_BEGIN();
+
+    for (i = 0; i < n_bytes; i++)
+    {
+        report_progress(i, n_bytes, NULL);
+
+        rc = avr_write_byte_default(pgm, p, m, i, m->buf[i]);
+        if (rc != 0)
+        {
+            FUNC_END();
+            return -2;
+        }
+
+        if (m->paged)
+        {
+            /*
+             * check to see if it is time to flush the page with a page
+             * write
+             */
+            if (((i % m->page_size) == m->page_size-1) || (i == n_bytes-1))
+            {
+                rc = avr_write_page(pgm, p, m, i);
+                if (rc != 0)
+                {
+                    FUNC_END();
+                    return -2;
+                }
+            }
+        }
+    }
+
+    return i;
+}
+
+static struct ft245r_request {
+    int addr;
+    int bytes;
+    int n;
+    struct ft245r_request *next;
+} *req_head, *req_tail, *req_pool;
+
+static void put_request(int addr, int bytes, int n)
+{
+    struct ft245r_request *p;
+
+    FUNC_BEGIN();
+
+    if (req_pool)
+    {
+        p = req_pool;
+        req_pool = p->next;
+    }
+    else
+    {
+        p = malloc(sizeof(struct ft245r_request));
+        if (!p)
+        {
+            fprintf(stderr, "can't alloc memory\n");
+            FUNC_END();
+            exit(1);
+        }
+    }
+
+    memset(p, 0, sizeof(struct ft245r_request));
+    p->addr = addr;
+    p->bytes = bytes;
+    p->n = n;
+
+    if (req_tail)
+    {
+        req_tail->next = p;
+        req_tail = p;
+    }
+    else
+    {
+        req_head = req_tail = p;
+    }
+
+    FUNC_END();
+}
+
+static int do_request(PROGRAMMER * pgm, AVRMEM *m)
+{
+    struct ft245r_request * p;
+    int                     addr;
+    int                     bytes;
+    int                     j;
+    int                     n;
+    char                    buf[FT245R_FRAGMENT_SIZE + 1 + 128];
+
+    FUNC_BEGIN();
+
+    if (!req_head)
+    {
+        FUNC_END();
+        return 0;
+    }
+
+    p = req_head;
+    req_head = p->next;
+    if (!req_head)
+    {
+        req_tail = req_head;
+    }
+
+    addr = p->addr;
+    bytes = p->bytes;
+    n = p->n;
+    memset(p, 0, sizeof(struct ft245r_request));
+    p->next = req_pool;
+    req_pool = p;
+
+    ft245r_recv(pgm, buf, bytes);
+    for (j = 0; j < n; j++)
+    {
+        m->buf[addr++] = extract_data(buf , (j * 4 + 3));
+    }
+
+#if 0
+if (n == 0) // paged_write
+fprintf(stderr, "recv addr 0x%04x buf size %d \n",addr, bytes);
+#endif
+
+    FUNC_END();
+    return 1;
+}
+
+static int ft245r_paged_write_flash(PROGRAMMER * pgm,
+                                    AVRPART    * p,
+                                    AVRMEM     * m,
+                                    int          page_size,
+                                    int          n_bytes)
+{
+    unsigned int i;
+    unsigned int j;
+    int          addr;
+    int          addr_save;
+    int          buf_pos;
+    int          do_page_write;
+    int          req_count;
+    char         buf[FT245R_FRAGMENT_SIZE + 1 + 128];
+
+    FUNC_BEGIN();
+
+    req_count = 0;
+    addr      = 0;
+    for (i = 0; i < n_bytes; )
+    {
+        addr_save     = addr;
+        buf_pos       = 0;
+        do_page_write = 0;
+
+        for (j = 0; j < FT245R_FRAGMENT_SIZE/8/FT245R_CYCLES/4; j++)
+        {
+            buf_pos += set_data(buf+buf_pos, (addr & 1) ? 0x48 : 0x40);
+            buf_pos += set_data(buf+buf_pos, (addr >> 9) & 0xff );
+            buf_pos += set_data(buf+buf_pos, (addr >> 1) & 0xff );
+            buf_pos += set_data(buf+buf_pos, m->buf[i]);
+
+            addr++;
+            i++;
+
+            if ( (m->paged) &&
+                 (((i % m->page_size) == 0) || (i == n_bytes)))
+            {
+                do_page_write = 1;
+                break;
+            }
+        }
+
+        if (i >= n_bytes)
+        {
+            buf[buf_pos++] = 0; // sck down
+        }
+
+        ft245r_send(pgm, buf, buf_pos);
+        put_request(addr_save, buf_pos, 0);
+        //ft245r_sync(pgm);
+
+        req_count++;
+        if (req_count >= REQ_OUTSTANDINGS)
+            do_request(pgm, m);
+
+        if (do_page_write)
+        {
+            int addr_wk = addr_save - (addr_save % m->page_size);
+            int rc;
+
+            while (do_request(pgm, m));
+
+            rc = avr_write_page(pgm, p, m, addr_wk);
+            if (rc != 0)
+            {
+                FUNC_END();
+                return -2;
+            }
+
+            req_count = 0;
+        }
+        report_progress(i, n_bytes, NULL);
+    }
+
+    while (do_request(pgm, m));
+
+    FUNC_END();
+    return i;
+}
+
+
+static int ft245r_paged_write(PROGRAMMER * pgm,
+                              AVRPART    * p,
+                              AVRMEM     * m,
+                              int          page_size,
+                              int          n_bytes)
+{
+    FUNC_BEGIN();
+
+    int r = -2;
+
+    if (strcmp(m->desc, "flash") == 0)
+    {
+        r = ft245r_paged_write_flash(pgm, p, m, page_size, n_bytes);
+    }
+    else if (strcmp(m->desc, "eeprom") == 0)
+    {
+        r = ft245r_paged_write_gen(pgm, p, m, page_size, n_bytes);
+    }
+
+    FUNC_END();
+    return r;
+}
+
+static int ft245r_paged_load_gen(PROGRAMMER * pgm,
+                                 AVRPART    * p,
+                                 AVRMEM     * m,
+                                 int          page_size,
+                                 int          n_bytes)
+{
+    unsigned char    rbyte;
+    unsigned long    i;
+    int              rc;
+
+    FUNC_BEGIN();
+
+    for (i = 0; i < n_bytes; i++)
+    {
+        rc = avr_read_byte_default(pgm, p, m, i, &rbyte);
+        if (rc != 0)
+        {
+            FUNC_END();
+            return -2;
+        }
+        m->buf[i] = rbyte;
+        report_progress(i, n_bytes, NULL);
+    }
+
+    FUNC_END();
+    return 0;
+}
+
+
+static int ft245r_paged_load_flash(PROGRAMMER * pgm,
+                                   AVRPART    * p,
+                                   AVRMEM     * m,
+                                   int          page_size,
+                                   int          n_bytes)
+{
+    unsigned long i;
+    unsigned long j;
+    unsigned long n;
+    int           addr;
+    int           addr_save;
+    int           buf_pos;
+    int           req_count = 0;
+    char          buf[FT245R_FRAGMENT_SIZE + 1];
+
+    FUNC_BEGIN();
+
+    addr = 0;
+    for (i = 0; i < n_bytes; )
+    {
+        buf_pos = 0;
+        addr_save = addr;
+        for (j = 0; j < FT245R_FRAGMENT_SIZE/8/FT245R_CYCLES/4; j++)
+        {
+            if (i >= n_bytes)
+                break;
+
+            buf_pos += set_data(buf+buf_pos, (addr & 1)?0x28:0x20 );
+            buf_pos += set_data(buf+buf_pos, (addr >> 9) & 0xff );
+            buf_pos += set_data(buf+buf_pos, (addr >> 1) & 0xff );
+            buf_pos += set_data(buf+buf_pos, 0);
+            addr++;
+            i++;
+        }
+
+        if (i >= n_bytes)
+        {
+            buf[buf_pos++] = 0; // sck down
+        }
+
+        n = j;
+        ft245r_send(pgm, buf, buf_pos);
+        put_request(addr_save, buf_pos, n);
+        req_count++;
+
+        if (req_count >= REQ_OUTSTANDINGS)
+            do_request(pgm, m);
+
+        report_progress(i, n_bytes, NULL);
+    }
+
+    while (do_request(pgm, m)) {}
+
+    FUNC_END();
+    return 0;
+}
+
+static int ft245r_paged_load(PROGRAMMER * pgm,
+                             AVRPART    * p,
+                             AVRMEM     * m,
+                             int          page_size,
+                             int          n_bytes)
+{
+    int r = -2;
+    FUNC_BEGIN();
+
+    if (strcmp(m->desc, "flash") == 0)
+    {
+        r = ft245r_paged_load_flash(pgm, p, m, page_size, n_bytes);
+    }
+    else if (strcmp(m->desc, "eeprom") == 0)
+    {
+        r = ft245r_paged_load_gen(pgm, p, m, page_size, n_bytes);
+    }
+
+    FUNC_END();
+    return r;
+}
+
+void ft245r_initpgm(PROGRAMMER * pgm)
+{
+    FUNC_BEGIN();
+    strcpy(pgm->type, "ft245r");
+
+    /*
+     * mandatory functions
+     */
+    pgm->initialize     = ft245r_initialize;
+    pgm->display        = ft245r_display;
+    pgm->enable         = ft245r_enable;
+    pgm->disable        = ft245r_disable;
+    pgm->program_enable = ft245r_program_enable;
+    pgm->chip_erase     = ft245r_chip_erase;
+    pgm->cmd            = ft245r_cmd;
+    pgm->open           = ft245r_open;
+    pgm->close          = ft245r_close;
+    pgm->read_byte      = avr_read_byte_default;
+    pgm->write_byte     = avr_write_byte_default;
+
+    /*
+     * optional functions
+     */
+    pgm->paged_write = ft245r_paged_write;
+    pgm->paged_load = ft245r_paged_load;
+
+    pgm->read_sig_bytes = ft245r_read_sig_bytes;
+
+    FUNC_END();
+}
+#else // If FTDI support turned off
+static int ft245r_turned_off()
+{
+    FUNC_BEGIN();
+    fprintf(stderr, " ft245r: support for FTDI BitBang does not compiled in.\n");
+    FUNC_END();
+    return -1;
+}
+
+static int ft245r_open(PROGRAMMER * pgm, char * port)
+{
+    return ft245r_turned_off();
+}
+
+static int ft245r_initialize(PROGRAMMER * pgm, AVRPART * p)
+{
+    return ft245r_turned_off();;
+}
+
+void ft245r_initpgm(PROGRAMMER * pgm)
+{
+    FUNC_BEGIN();
+    strcpy(pgm->type, "ft245r");
+    pgm->initialize     = ft245r_initialize;
+    pgm->open           = ft245r_open;
+    FUNC_END();
+}
+#endif
diff -Nur avrdude-5.10.orig/ft245r.h avrdude-5.10.ftdi.new/ft245r.h
--- avrdude-5.10.orig/ft245r.h	1970-01-01 10:00:00.000000000 +1000
+++ avrdude-5.10.ftdi.new/ft245r.h	2010-06-26 15:12:58.000000000 +1100
@@ -0,0 +1,8 @@
+#ifndef ft245r_h
+#define ft245r_h
+
+#include "avrpart.h"
+
+void ft245r_initpgm (PROGRAMMER * pgm);
+
+#endif /* ft245r_h */
diff -Nur avrdude-5.10.orig/lexer.l avrdude-5.10.ftdi.new/lexer.l
--- avrdude-5.10.orig/lexer.l	2010-01-19 20:39:11.000000000 +1000
+++ avrdude-5.10.ftdi.new/lexer.l	2010-06-26 15:24:45.000000000 +1100
@@ -120,6 +120,7 @@
 arduino          { yylval=NULL; return K_ARDUINO; }
 avr910           { yylval=NULL; return K_AVR910; }
 avr910_devcode   { yylval=NULL; return K_AVR910_DEVCODE; }
+ft245r           { yylval=NULL; return K_FT245R; }
 usbasp           { yylval=NULL; return K_USBASP; }
 usbtiny          { yylval=NULL; return K_USBTINY; }
 bank_size        { yylval=NULL; return K_PAGE_SIZE; }
diff -Nur avrdude-5.10.orig/Makefile.am avrdude-5.10.ftdi.new/Makefile.am
--- avrdude-5.10.orig/Makefile.am	2010-01-19 20:39:11.000000000 +1000
+++ avrdude-5.10.ftdi.new/Makefile.am	2010-06-27 15:41:50.000000000 +1100
@@ -88,6 +88,8 @@
 	avrpart.h \
 	bitbang.c \
 	bitbang.h \
+	ft245r.c \
+	ft245r.h \
 	buspirate.c \
 	buspirate.h \
 	butterfly.c \
