diff -Naurdp mc-4.6.1.orig/edit/edit.c mc-4.6.1/edit/edit.c
--- mc-4.6.1.orig/edit/edit.c	2005-09-05 18:54:23.000000000 +0200
+++ mc-4.6.1/edit/edit.c	2005-09-05 18:38:26.000000000 +0200
@@ -2600,6 +2600,11 @@ edit_execute_cmd (WEdit *edit, int comma
 	edit_insert_file_cmd (edit);
 	break;
 
+    case CK_Toggle_Syntax:
+	option_syntax_highlighting^=1;
+	edit->force |= REDRAW_PAGE;
+	break;
+
     case CK_Find:
 	edit_search_cmd (edit, 0);
 	break;
diff -Naurdp mc-4.6.1.orig/edit/editcmddef.h mc-4.6.1/edit/editcmddef.h
--- mc-4.6.1.orig/edit/editcmddef.h	2004-08-15 21:34:37.000000000 +0200
+++ mc-4.6.1/edit/editcmddef.h	2005-09-05 18:38:26.000000000 +0200
@@ -108,6 +108,8 @@
 #define CK_Check_Save_And_Quit	457
 #define CK_Maximize		458
 
+#define CK_Toggle_Syntax	480
+
 /* macro */
 #define CK_Begin_Record_Macro	501
 #define CK_End_Record_Macro	502
diff -Naurdp mc-4.6.1.orig/edit/editkeys.c mc-4.6.1/edit/editkeys.c
--- mc-4.6.1.orig/edit/editkeys.c	2005-09-05 18:54:23.000000000 +0200
+++ mc-4.6.1/edit/editkeys.c	2005-09-05 18:39:54.000000000 +0200
@@ -77,6 +77,7 @@ static long const common_key_map[] = {
     KEY_END, CK_End,
     KEY_HOME, CK_Home,
     KEY_IC, CK_Toggle_Insert,
+    XCTRL ('s'), CK_Toggle_Syntax,
     KEY_LEFT, CK_Left,
     KEY_NPAGE, CK_Page_Down,
     KEY_PPAGE, CK_Page_Up,
diff -Naurdp mc-4.6.1.orig/src/cmd.c mc-4.6.1/src/cmd.c
--- mc-4.6.1.orig/src/cmd.c	2005-05-27 16:19:18.000000000 +0200
+++ mc-4.6.1/src/cmd.c	2005-09-05 18:42:24.642063270 +0200
@@ -478,6 +478,7 @@ select_unselect_cmd (const char *title, 
     int i;
     int c;
     int dirflag = 0;
+    int fileflag = 1;
 
     reg_exp = input_dialog (title, "", easy_patterns ? "*" : ".");
     if (!reg_exp)
@@ -494,8 +495,9 @@ select_unselect_cmd (const char *title, 
 	dirflag = 1;
 	reg_exp_t++;
     }
-    if (reg_exp_t[strlen (reg_exp_t) - 1] == PATH_SEP) {
+    if ((*reg_exp_t) && reg_exp_t[strlen (reg_exp_t) - 1] == PATH_SEP) {
 	dirflag = 1;
+	fileflag = 0;
 	reg_exp_t[strlen (reg_exp_t) - 1] = 0;
     }
 
@@ -506,7 +508,7 @@ select_unselect_cmd (const char *title, 
 	    if (!dirflag)
 		continue;
 	} else {
-	    if (dirflag)
+	    if (!fileflag)
 		continue;
 	}
 	c = regexp_match (reg_exp_t, current_panel->dir.list[i].fname,
diff -Naurdp mc-4.6.1.orig/src/command.c mc-4.6.1/src/command.c
--- mc-4.6.1.orig/src/command.c	2005-05-27 16:19:18.000000000 +0200
+++ mc-4.6.1/src/command.c	2005-09-05 18:53:38.345325900 +0200
@@ -42,6 +42,27 @@
 /* This holds the command line */
 WInput *cmdline;
 
+/* Wildcard matching routine by A'rpi/ESP-team */
+static int wildcard_cmp_names(char *n,char *m){
+next:
+  if(m[0]=='*'){
+    int i;
+    m++;
+    if(m[0]==0) return 1;
+    while(n[0]){
+      if(wildcard_cmp_names(n,m)) return 1;
+      n++;
+    }
+    return 0;
+  }
+  if(n[0]==m[0] || (m[0]=='?' && n[0])){
+    if(n[0]==0) return 1;
+    n++;m++;
+    goto next;
+  }
+  return 0;
+}
+
 /*
  * Expand the argument to "cd" and change directory.  First try tilde
  * expansion, then variable substitution.  If the CDPATH variable is set
@@ -106,6 +127,35 @@ examine_cd (char *path)
 
     result = do_cd (q, cd_parse_command);
 
+    if(!result && strchr(q,92)){
+      // quoted dirname
+      char *q2=g_malloc(strlen(q)+1);
+      char *s=q;
+      char *d=q2;
+      int c;
+      do{
+        c=*s++;
+        if(c==92 || c=='%') c=*s++;
+        *d++=c;
+      } while(c);
+      free(q);
+      q=q2;
+      result = do_cd (q, cd_parse_command);
+    }
+    
+    if(!result && (strchr(q,'*')||strchr(q,'?'))){
+	// wildcarded dirname
+	int i;
+        for (i = 0; i < current_panel->count; i++)
+    	    if(S_ISDIR(current_panel->dir.list [i].st.st_mode)){
+		if(wildcard_cmp_names(current_panel->dir.list [i].fname,q)){
+		    // found it!!!
+		    result = do_cd (current_panel->dir.list [i].fname, cd_parse_command);
+		    if(result) break;
+		}
+	    }
+    }
+
     /* CDPATH handling */
     if (*q != PATH_SEP && !result) {
 	char * const cdpath = g_strdup (getenv ("CDPATH"));
diff -Naurdp mc-4.6.1.orig/src/file.c mc-4.6.1/src/file.c
--- mc-4.6.1.orig/src/file.c	2005-09-05 18:54:33.000000000 +0200
+++ mc-4.6.1/src/file.c	2005-09-05 18:59:44.287586113 +0200
@@ -90,6 +90,9 @@ int file_op_compute_totals = 1;
 /* If on, default for "No" in delete operations */
 int safe_delete = 0;
 
+/* Beep never (0), after 2+ file ops (1), or after any file ops (2) */
+int op_beep_when_finished = 0;
+
 /* This is a hard link cache */
 struct link {
     struct link *next;
@@ -1814,6 +1817,10 @@ panel_operate (void *source_panel, FileO
 	    return 0;
 	}
     }
+
+    if( (op_beep_when_finished==2) || (op_beep_when_finished==1) )
+        SLtt_beep();
+
 #ifdef WITH_BACKGROUND
     /* Did the user select to do a background operation? */
     if (do_bg) {
diff -Naurdp mc-4.6.1.orig/src/key.c mc-4.6.1/src/key.c
--- mc-4.6.1.orig/src/key.c	2005-06-08 14:27:19.000000000 +0200
+++ mc-4.6.1/src/key.c	2005-09-05 19:01:46.007078880 +0200
@@ -898,8 +898,19 @@ int get_key_code (int no_delay)
 	                c = KEY_F (c - '0');
 		    else if (c == ' ')
 			c = ESC_CHAR;
-	            else
-			c = ALT(c);
+                    else switch (c){
+                        case '!': c = KEY_F(11);break;
+                        case '@': c = KEY_F(12);break;
+                        case '#': c = KEY_F(13);break;
+                        case '$': c = KEY_F(14);break;
+                        case '%': c = KEY_F(15);break;
+                        case '^': c = KEY_F(16);break;
+                        case '&': c = KEY_F(17);break;
+                        case '*': c = KEY_F(18);break;
+                        case '(': c = KEY_F(19);break;
+                        case ')': c = KEY_F(20);break;
+                        default: c = ALT(c);break;
+                    }
 
 		    pending_keys = seq_append = NULL;
 		    this = NULL;
diff -Naurdp mc-4.6.1.orig/src/main.c mc-4.6.1/src/main.c
--- mc-4.6.1.orig/src/main.c	2005-09-05 18:54:52.000000000 +0200
+++ mc-4.6.1/src/main.c	2005-09-05 18:52:31.782214116 +0200
@@ -219,6 +219,12 @@ int confirm_exit = 1;
    are tagged files */
 int confirm_view_dir = 0;
 
+/* Command prompt type: 0=no_prompt  1=CWD  2=get_from_subshell */
+int command_prompt_type = 2;
+
+/* Allow subshell to change MC's CWD */
+int allow_subshell_chdir = 1;
+
 /* This flag indicates if the pull down menus by default drop down */
 int drop_menus = 0;
 
@@ -422,6 +428,7 @@ save_cwds_stat (void)
 void
 do_possible_cd (const char *new_dir)
 {
+    if(!allow_subshell_chdir) return;
     if (!do_cd (new_dir, cd_exact))
 	message (1, _("Warning"),
 		 _(" The Commander can't change to the directory that \n"
@@ -698,8 +705,18 @@ load_prompt (int fd, void *unused)
     if (current_dlg == midnight_dlg && command_prompt) {
 	int prompt_len;
 
-	prompt = strip_ctrl_codes (subshell_prompt);
-	prompt_len = strlen (prompt);
+	if(command_prompt_type==0){
+	    prompt = (geteuid () == 0) ? "# " : "$ ";
+	} else
+	if(command_prompt_type==1){
+	    prompt = current_panel->cwd;
+	} else
+	if(command_prompt_type==2){
+	    prompt = strip_ctrl_codes (subshell_prompt);
+	} else
+	    prompt = "C:\\> ";
+	prompt_len = mbstrlen (prompt);
+        if(command_prompt_type==1) ++prompt_len;
 
 	/* Check for prompts too big */
 	if (COLS > 8 && prompt_len > COLS - 8) {
@@ -860,7 +877,7 @@ static menu_entry FileMenu[] = {
     {' ', N_("&Quick cd          M-c"), 'Q', quick_cd_cmd},
     {' ', "", ' ', 0},
     {' ', N_("select &Group      M-+"), 'G', select_cmd},
-    {' ', N_("u&Nselect group    M-\\"), 'N', unselect_cmd},
+    {' ', N_("u&Nselect group    M--"), 'N', unselect_cmd},
     {' ', N_("reverse selec&Tion M-*"), 'T', reverse_selection_cmd},
     {' ', "", ' ', 0},
     {' ', N_("e&Xit              F10"), 'X', quit_cmd}
@@ -1265,6 +1282,7 @@ static const key_map default_map[] = {
 
     /* To access the directory hotlist */
     {XCTRL ('\\'), quick_chdir_cmd},
+    {ALT('\\'), quick_chdir_cmd },
 
     /* Suspend */
     {XCTRL ('z'), suspend_cmd},
diff -Naurdp mc-4.6.1.orig/src/screen.c mc-4.6.1/src/screen.c
--- mc-4.6.1.orig/src/screen.c	2005-09-05 18:54:54.000000000 +0200
+++ mc-4.6.1/src/screen.c	2005-09-05 18:46:43.645247582 +0200
@@ -2270,7 +2270,6 @@ static const panel_key_map panel_keymap 
     { ALT('u'),   directory_history_next },
     { ALT('+'),	  cmd_select },
     { KEY_KP_ADD, cmd_select },
-    { ALT('\\'),  cmd_unselect },
     { ALT('-'),	  cmd_unselect },
     { KEY_KP_SUBTRACT, cmd_unselect },
     { ALT('*'),	  cmd_reverse_selection },
diff -Naurdp mc-4.6.1.orig/src/setup.c mc-4.6.1/src/setup.c
--- mc-4.6.1.orig/src/setup.c	2005-05-27 16:19:18.000000000 +0200
+++ mc-4.6.1/src/setup.c	2005-09-05 18:38:26.047756870 +0200
@@ -62,6 +62,11 @@ extern char *find_ignore_dirs;
 
 extern int num_history_items_recorded;
 
+extern int subshell_blocks_ctrlo;
+extern int command_prompt_type;
+extern int allow_subshell_chdir;
+extern int op_beep_when_finished;
+
 char *profile_name;		/* .mc/ini */
 char *global_profile_name;	/* mc.lib */
 
@@ -128,6 +133,7 @@ static const struct {
     { "xterm_title", &xterm_title },
     { "output_lines", &output_lines },
     { "command_prompt", &command_prompt },
+    { "command_prompt_type", &command_prompt_type },
     { "menubar_visible", &menubar_visible },
     { "show_mini_info", &show_mini_info },
     { "permission_mode", &permission_mode },
@@ -158,6 +164,7 @@ static const struct {
     { "confirm_execute", &confirm_execute },
     { "confirm_exit", &confirm_exit },
     { "safe_delete", &safe_delete },
+    { "beep_when_finished", &op_beep_when_finished },
     { "mouse_repeat_rate", &mou_auto_repeat },
     { "double_click_speed", &double_click_speed },
 #ifndef HAVE_CHARSET
@@ -182,6 +189,8 @@ static const struct {
     { "alternate_plus_minus", &alternate_plus_minus },
     { "only_leading_plus_minus", &only_leading_plus_minus },
     { "show_output_starts_shell", &output_starts_shell },
+    { "allow_subshell_chdir", &allow_subshell_chdir },
+    { "subshell_blocks_ctrlo", &subshell_blocks_ctrlo },
     { "panel_scroll_pages", &panel_scroll_pages },
     { "xtree_mode", &xtree_mode },
     { "num_history_items_recorded", &num_history_items_recorded },
diff -Naurdp mc-4.6.1.orig/src/subshell.c mc-4.6.1/src/subshell.c
--- mc-4.6.1.orig/src/subshell.c	2005-06-07 11:19:19.000000000 +0200
+++ mc-4.6.1/src/subshell.c	2005-09-05 18:50:14.148458321 +0200
@@ -91,6 +91,9 @@ FALSE;
 TRUE;
 #endif
 
+/* Don't allow ctrl+o (panels ON) if shell already dunning a command: */
+int subshell_blocks_ctrlo=1;
+
 /* File descriptor of the pseudoterminal used by the subshell */
 int subshell_pty = 0;
 
@@ -894,7 +897,7 @@ feed_subshell (int how, int fail_on_erro
     fd_set read_set;		/* For `select' */
     int maxfdp;
     int bytes;			/* For the return value from `read' */
-    int i;			/* Loop counter */
+    int i,j;			/* Loop counter */
 
     struct timeval wtime;	/* Maximum time we wait for the subshell */
     struct timeval *wptr;
@@ -992,6 +995,18 @@ feed_subshell (int how, int fail_on_erro
 		exit (1);
 	    }
 
+		if(subshell_blocks_ctrlo){
+		    if (pty_buffer[0] == subshell_switch_key &&
+                	subshell_ready==TRUE){
+		    	    subshell_state = INACTIVE;
+		    	    return TRUE;
+                	}
+		    // remove ctrl+o codes from buffer:
+		    for (i=0,j=0; i<bytes; ++i)
+			if (pty_buffer[i] != subshell_switch_key)
+                    	    pty_buffer[j++]=pty_buffer[i];
+		    bytes=j;
+                } else {
 	    for (i = 0; i < bytes; ++i)
 		if (pty_buffer[i] == subshell_switch_key) {
 		    write (subshell_pty, pty_buffer, i);
@@ -999,7 +1014,7 @@ feed_subshell (int how, int fail_on_erro
 			subshell_state = INACTIVE;
 		    return TRUE;
 		}
-
+                }
 	    write (subshell_pty, pty_buffer, bytes);
 	    subshell_ready = FALSE;
 	} else {
