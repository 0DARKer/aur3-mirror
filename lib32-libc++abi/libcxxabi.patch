Index: libcxxabi/lib/buildit
===================================================================
--- libcxxabi/lib/buildit	(revision 205436)
+++ libcxxabi/lib/buildit	(working copy)
@@ -70,7 +70,7 @@
     SOEXT=so
     LDSHARED_FLAGS="-o libc++abi.so.1.0 \
         -shared -nodefaultlibs -Wl,-soname,libc++abi.so.1 \
-        -lpthread -lrt -lc -lstdc++"
+        -lpthread -lrt -lc"
     ;;
 esac
 
Index: libcxxabi/src/cxa_demangle.cpp
===================================================================
--- libcxxabi/src/cxa_demangle.cpp	(revision 205436)
+++ libcxxabi/src/cxa_demangle.cpp	(working copy)
@@ -5686,7 +5686,7 @@
             if (__right_ != 0)
                 r += __right_->size();
             else if (__size_ != 0)
-                r += static_cast<size_t>(snprintf(0, 0, "%ld", __size_));
+                r += static_cast<size_t>(snprintf(0, 0, "%ld", (long)__size_));
             const_cast<long&>(__cached_size_) = static_cast<long>(r);
         }
         return static_cast<size_t>(__cached_size_);
@@ -5701,7 +5701,7 @@
             buf = __right_->get_demangled_name(buf);
         else if (__size_ != 0)
         {
-            int rs = sprintf(buf, "%ld", __size_);
+            int rs = sprintf(buf, "%ld", (long)__size_);
             buf += rs;
         }
         *buf++ = ']';
@@ -5726,7 +5726,7 @@
         if (__right_ != 0)
             r += __right_->size();
         else if (__size_ != 0)
-            r += static_cast<size_t>(snprintf(0, 0, "%ld", __size_));
+            r += static_cast<size_t>(snprintf(0, 0, "%ld", (long)__size_));
         return r;
     }
 
@@ -5738,7 +5738,7 @@
             buf = __right_->get_demangled_name(buf);
         else if (__size_ != 0)
         {
-            int off = sprintf(buf, "%ld", __size_);
+            int off = sprintf(buf, "%ld", (long)__size_);
             buf += off;
         }
         char* t = buf;
Index: libcxxabi/src/stdexcept.cpp
===================================================================
--- libcxxabi/src/stdexcept.cpp	(revision 205436)
+++ libcxxabi/src/stdexcept.cpp	(working copy)
@@ -47,7 +47,7 @@
 #if __APPLE__
     static
     const void*
-    compute_gcc_empty_string_storage() _LIBCPP_CANTTHROW
+    compute_gcc_empty_string_storage() _NOEXCEPT
     {
         void* handle = dlopen("/usr/lib/libstdc++.6.dylib", RTLD_NOLOAD);
         if (handle == 0)
@@ -57,7 +57,7 @@
     
     static
     const void*
-    get_gcc_empty_string_storage() _LIBCPP_CANTTHROW
+    get_gcc_empty_string_storage() _NOEXCEPT
     {
         static const void* p = compute_gcc_empty_string_storage();
         return p;
@@ -66,9 +66,9 @@
 
 public:
     explicit __libcpp_nmstr(const char* msg);
-    __libcpp_nmstr(const __libcpp_nmstr& s) _LIBCPP_CANTTHROW;
-    __libcpp_nmstr& operator=(const __libcpp_nmstr& s) _LIBCPP_CANTTHROW;
-    ~__libcpp_nmstr() _LIBCPP_CANTTHROW;
+    __libcpp_nmstr(const __libcpp_nmstr& s) _NOEXCEPT;
+    __libcpp_nmstr& operator=(const __libcpp_nmstr& s) _NOEXCEPT;
+    ~__libcpp_nmstr();
     const char* c_str() const _NOEXCEPT {return str_;}
 };
 
@@ -84,7 +84,7 @@
 }
 
 inline
-__libcpp_nmstr::__libcpp_nmstr(const __libcpp_nmstr& s)
+__libcpp_nmstr::__libcpp_nmstr(const __libcpp_nmstr& s) _NOEXCEPT
     : str_(s.str_)
 {
 #if __APPLE__
@@ -94,7 +94,7 @@
 }
 
 __libcpp_nmstr&
-__libcpp_nmstr::operator=(const __libcpp_nmstr& s)
+__libcpp_nmstr::operator=(const __libcpp_nmstr& s) _NOEXCEPT
 {
     const char* p = str_;
     str_ = s.str_;
