# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

## You can choose the input method framework to use either ibus, scim or both.
## If you will not be using ibus, comment out below.
_ibus_mozc="yes"
## If you will be using scim, uncomment below.
#_scim_mozc="yes"
## If you will be using uim, uncomment below.
#_uim_mozc="yes"

## If you will be using mozc.el on Emacs, uncomment below.
#_emacs_mozc="yes"

## You can add Japanese zip code provided by Japan Post.
## If you want to use it, uncomment below.
#_zipcode="yes"
## zip code data is as of 2011-03-31.

#*************************************************************
# Upstreams:
#
# mozc
# http://code.google.com/p/mozc/
#
# Japanese zip code data by Japan Post
# http://www.post.japanpost.jp/zipcode/download.html
#
# macuim (uim-mozc)
# http://code.google.com/p/macuim/
#
#*************************************************************
#
# Changes to original mozc:
#
# 1. Add uim-mozc
# 2. Link protobuf statically when uim-mozc is enabled
# 3. Add .desktop files for Mozc tool menu items
#
#*************************************************************

pkgbase=mozc-svn
pkgname=mozc-svn
true && pkgname=('mozc-server-svn' 'mozc-utils-gui-svn')
pkgver=53
pkgrel=1
_protobuf_ver=2.3.0
arch=('i686' 'x86_64')
url="http://code.google.com/p/mozc/"
license=('BSD' 'custom')
makedepends=('pkg-config' 'python2' 'curl' 'qt' 'gtest' 'zinnia' 'subversion')
changelog=${pkgbase}.ChangeLog
source=(mozc_tool_config.desktop
        mozc_tool_dic.desktop
)
md5sums=('6ab5654bb41bfb6cfba963243265f927'
         '78bed1d5989071fc07b554e7197d07bf'
)
_copt=Release
#_copt=Debug

if [[ "$_ibus_mozc" = "yes" ]]; then
    true && pkgname=(${pkgname[@]} 'ibus-mozc-svn')
    makedepends=(${makedepends[@]} 'ibus')
fi
if [[ "$_scim_mozc" = "yes" ]]; then
    true && pkgname=(${pkgname[@]} 'scim-mozc-svn')
    makedepends=(${makedepends[@]} 'scim')
fi
if [[ "$_emacs_mozc" = "yes" ]]; then
    true && pkgname=(${pkgname[@]} 'emacs-mozc-svn' 'emacs-mozc-bin-svn')
fi
if [[ "$_uim_mozc"  = "yes" ]]; then
    true && pkgname=(${pkgname[@]} 'uim-mozc-svn')
    makedepends=(${makedepends[@]} 'uim')
    source=(${source[@]}
            http://protobuf.googlecode.com/files/protobuf-${_protobuf_ver}.tar.bz2)
    md5sums=(${md5sums[@]}
             'f2964f636b3c67d1e9d8b90819fa8ddb')
else
    makedepends=(${depends[@]} 'protobuf')
fi

if [[ "$_zipcode" = "yes" ]]; then
    source=(${source[@]}
            'http://www.post.japanpost.jp/zipcode/dl/kogaki/lzh/ken_all.lzh'
            'http://www.post.japanpost.jp/zipcode/dl/jigyosyo/lzh/jigyosyo.lzh')
    md5sums=(${md5sums[@]}
            '729b682fb3a7ea34c082b36ac104f214'
            '48edd2077fa330c3a9c25b65970ec4c0')
  if [[ "$CARCH" = "x86_64" ]]; then
      makedepends=(${makedepends[@]} 'bin32-lha')
  else
      makedepends=(${makedepends[@]} 'lha')
  fi
fi

_svntrunk="http://mozc.googlecode.com/svn/trunk/src"
_svnmod="src"

build() {
  if [[ "$_ibus_mozc" != "yes" && "$_uim_mozc" != "yes" && "$_scim_mozc" != "yes" ]]; then
      msg "***********************************************************"
      msg " Please choose either one of ibus, scim or uim at least."
      msg " See PKGBUILD."
      msg "***********************************************************"
      return 1
  fi

  cd "$srcdir"

  ln -sf /usr/bin/python2 ./python
  PATH="${srcdir}:${PATH}"

  # Checkout depot_tools
  msg "Connecting to depot_tools SVN server..."
  if [[ -d depot_tools/.svn ]]; then
      (cd depot_tools ; svn update)
  else
      svn co http://src.chromium.org/svn/trunk/tools/depot_tools --config-dir ./
  fi
  msg "SVN checkout done or server timeout"
  PATH="${srcdir}/depot_tools:${PATH}"

  # Checkout mozc
  msg "Connecting to mozc SVN server..."
  if [[ ! -f .gclient ]]; then
      [[ -d $_svnmod ]] && rm -rf $_svnmod
      gclient config $_svntrunk
  fi
  gclient sync
  msg "SVN checkout done or server timeout"

  # Checkout macuim-mozc (for uim-mozc)
  if [[ "$_uim_mozc" = "yes" ]]; then
      msg "Connecting to macuim SVN server..."
      if [[ -d uim-mozc/.svn ]]; then
          (cd uim-mozc ; svn update)
      else
          svn co http://macuim.googlecode.com/svn/trunk/Mozc uim-mozc
      fi
      msg "SVN checkout done or server timeout"
  fi

  msg "Copying source to src-build..."
  rm -rf ${_svnmod}-build
  cp -r $_svnmod ${_svnmod}-build
  cd ${_svnmod}-build

  if [[ "$_uim_mozc" = "yes" ]]; then
      # patch to link protobuf statically
      cp -r "${srcdir}/protobuf-${_protobuf_ver}" protobuf/files
      patch -p0 -i "${srcdir}/uim-mozc/mozc-linux-protobuf.diff"
      cp -r "${srcdir}/uim-mozc/uim" unix/
      patch -p0 -i "${srcdir}/uim-mozc/mozc-kill-line.diff"
      #patch -p0 -i "${srcdir}/temp-mozc-kill-line.patch"
  fi

  # Add zip code
  if [[ "$_zipcode" = "yes" ]]; then
      msg "Generating zip code seed..."
      cd data/dictionary
      lha x "${srcdir}/ken_all.lzh"
      lha x "${srcdir}/jigyosyo.lzh"
      python2 ../../dictionary/gen_zip_code_seed.py --zip_code=ken_all.csv --jigyosyo=jigyosyo.csv > zip_code_seed.tsv
      cd -
  fi

  msg "Starting make..."
  # build mozc server and tools
  python2 build_mozc.py gyp
  python2 build_mozc.py build_tools -c $_copt
  python2 build_mozc.py build -c $_copt \
      server/server.gyp:mozc_server \
      gui/gui.gyp:mozc_tool

  # build mozc_emacs_helper
  if [[ "$_emacs_mozc" = "yes" ]]; then
      python2 build_mozc.py build -c $_copt unix/emacs/emacs.gyp:mozc_emacs_helper
  fi

  # build ibus-mozc
  if [[ "$_ibus_mozc" = "yes" ]]; then
      python2 build_mozc.py build -c $_copt unix/ibus/ibus.gyp:ibus_mozc
      sed -i 's|/usr/libexec/ibus-engine-mozc|/usr/lib/ibus-mozc/ibus-engine-mozc|' \
              out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml
  fi

  # build scim-mozc
  if [[ "$_scim_mozc" = "yes" ]]; then
      python2 build_mozc.py build -c $_copt unix/scim/scim.gyp:scim_mozc unix/scim/scim.gyp:scim_mozc_setup
  fi

  # build uim-mozc
  if [[ "$_uim_mozc" = "yes" ]]; then
      python2 build_mozc.py build -c $_copt unix/uim/uim.gyp:uim-mozc
  fi

  # update icon path in .desktop files
  if [[ "$_ibus_mozc" = "yes" ]]; then
      _icon_prop="/usr/share/ibus-mozc/properties.png"
      _icon_dic="/usr/share/ibus-mozc/dictionary.png"
  elif [[ "$_scim_mozc" = "yes" ]]; then
      _icondir=`pkg-config scim --variable=icondir`
      _icon_prop="${_icondir}/scim-mozc-properties.png"
      _icon_dic="${_icondir}/scim-mozc-dictionary.png"
  else
      _icon_prop="/usr/share/uim/pixmaps/mozc-properties.png"
      _icon_dic="/usr/share/uim/pixmaps/mozc-dictionary.png"
  fi
  sed "s|^Icon=|Icon=${_icon_prop}|" "${srcdir}/mozc_tool_config.desktop" > mozc_tool_config.desktop
  sed "s|^Icon=|Icon=${_icon_dic}|"  "${srcdir}/mozc_tool_dic.desktop"    > mozc_tool_dic.desktop
}

package_mozc-server-svn() {
  pkgdesc="Server part of the Mozc input method"
  arch=('i686' 'x86_64')
  depends=('curl')
  [[ "$_emacs_mozc" != "yes" ]] && depends=(${depends[@]} 'protobuf')
  replaces=('mozc')
  provides=('mozc' 'mozc-server')
  conflicts=('mozc' 'mozc-server')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 755 out_linux/${_copt}/mozc_server "${pkgdir}/usr/lib/mozc/mozc_server"
  install -d "${pkgdir}/usr/lib/mozc/documents/"
  install    -m 644 data/installer/*.html "${pkgdir}/usr/lib/mozc/documents/"
}

package_mozc-utils-gui-svn() {
  pkgdesc="Mozc GUI uitilities, such as the configuration dialog, user dictionary tool and about dialog"
  arch=('i686' 'x86_64')
  depends=('mozc-server' 'qt')
  provides=('mozc-utils-gui')
  conflicts=('mozc-utils-gui')

  cd "${srcdir}/${_svnmod}-build"
   install -D -m 755 out_linux/${_copt}/mozc_tool "${pkgdir}/usr/lib/mozc/mozc_tool"

  # install .desktop files
  install -d "${pkgdir}/usr/share/applications"
  install -m 644 *.desktop "${pkgdir}/usr/share/applications/"
}

package_emacs-mozc-svn() {
  pkgdesc="Mozc for Emacs"
  arch=('any')
  depends=('emacs-mozc-bin' 'emacs')
  install=emacs-mozc.install
  provides=('emacs-mozc')
  conflicts=('emacs-mozc')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 644 unix/emacs/mozc.el "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc/mozc.el"
}

package_emacs-mozc-bin-svn() {
  pkgdesc="Helper module for emacs-mozc"
  arch=('i686' 'x86_64')
  depends=('mozc-server')
  provides=('emacs-mozc-bin')
  conflicts=('emacs-mozc-bin')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 755 out_linux/${_copt}/mozc_emacs_helper "${pkgdir}/usr/bin/mozc_emacs_helper"
}

package_ibus-mozc-svn() {
  pkgdesc="IBus engine module for Mozc"
  arch=('i686' 'x86_64')
  depends=('mozc-server' 'ibus')
  provides=('ibus-mozc')
  conflicts=('ibus-mozc')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 755 out_linux/${_copt}/ibus_mozc          "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
  install -D -m 644 out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"
}

package_scim-mozc-svn() {
  pkgdesc="SCIM IMEngine module for Mozc"
  arch=('i686' 'x86_64')
  depends=('mozc-server' 'scim')
  provides=('scim-mozc')
  conflicts=('scim-mozc')

  cd "${srcdir}/${_svnmod}-build"
  _moduledir=`pkg-config scim --variable=moduledir`
  install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc.so       "${pkgdir}${_moduledir}/IMEngine/mozc.so"
  install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc_setup.so "${pkgdir}${_moduledir}/SetupUI/mozc-setup.so"
  _icondir=`pkg-config scim --variable=icondir`
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}${_icondir}/scim-mozc.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}${_icondir}/scim-mozc-tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}${_icondir}/scim-mozc-properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}${_icondir}/scim-mozc-dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}${_icondir}/scim-mozc-direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}${_icondir}/scim-mozc-hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}${_icondir}/scim-mozc-katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}${_icondir}/scim-mozc-katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}${_icondir}/scim-mozc-alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}${_icondir}/scim-mozc-alpha_full.png"
}

package_uim-mozc-svn() {
  pkgdesc="uim IMEngine module for Mozc"
  arch=('i686' 'x86_64')
  depends=('mozc-server' 'uim')
  install=uim-mozc-svn.install
  provides=('uim-mozc')
  conflicts=('uim-mozc')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 755 out_linux/${_copt}/libuim-mozc.so  "${pkgdir}/usr/lib/uim/plugin/libuim-mozc.so"
  install -d "${pkgdir}/usr/share/uim"
  install    -m 644 ${srcdir}/uim-mozc/scm/*.scm    "${pkgdir}/usr/share/uim/"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/uim/pixmaps/mozc.png"
  install    -m 644 data/images/unix/ui-properties.png "${pkgdir}/usr/share/uim/pixmaps/mozc-properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png "${pkgdir}/usr/share/uim/pixmaps/mozc-dictionary.png"
}

pkgdesc="A Japanese input method originates from Google Japanese Input, with uim-mozc (optional)"
depends=('curl' 'protobuf' 'qt')
