# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

## You can choose the input method framework to use either ibus, scim or both.
## If you will not be using ibus, comment out below.
_ibus_mozc="yes"
## If you will be using scim, uncomment below.
#_scim_mozc="yes"
## If you will be using uim, uncomment below.
#_uim_mozc="yes"

## If you will be using mozc.el on Emacs, uncomment below.
#_emacs_mozc="yes"

## You can add Japanese zip code provided by Japan Post.
## If you want to use it, uncomment below.
#_zipcode="yes"
## zip code data is as of 2011-07-29.

## Install .desktop files for adding menu items of mozc tools
#_desktop_files="yes"

#*************************************************************
# Upstreams:
#
# mozc
# http://code.google.com/p/mozc/
#
# Japanese zip code data by Japan Post
# http://www.post.japanpost.jp/zipcode/download.html
#
# macuim (uim-mozc)
# http://code.google.com/p/macuim/
#
#*************************************************************
# Changes to original mozc:
#
# 1. Add uim-mozc (optional)
# 2. Link protobuf statically when uim-mozc is enabled
# 3. Add .desktop files for Mozc tool menu items (optional)
#
#*************************************************************

pkgbase=mozc-svn
pkgname=mozc-svn
true && pkgname=('mozc-server-svn' 'mozc-utils-gui-svn')
pkgver=58
pkgrel=3
_protobuf_ver=2.4.1 # mozc (>=r57) requires protobuf >= 2.4.0
arch=('i686' 'x86_64')
url="http://code.google.com/p/mozc/"
license=('BSD' 'custom')
makedepends=('pkg-config' 'python2' 'curl' 'qt' 'gtest' 'zinnia' 'subversion')
changelog=ChangeLog
source=(mozc_tool_config.desktop
        mozc_tool_dic.desktop
        mozc_tool_word_register.desktop
        mozc_tool_hand_writing.desktop
        mozc_tool_character_palette.desktop
        mozc-1.1.690.102-ibus-lang_panel.patch
        fix_zipcode.patch
        libpng14.patch
)
sha1sums=('66e0141e93129e8ded499cff67cc8828cce5efae'
          '53ff0c5d492665046bc3224b354ca57911634d7b'
          '1632582e54d270bdc5bf48669911d0c54e1fed46'
          'bd396538ea4d9d0bbcd1967fa640035513dc2948'
          'f8072d377b09f58b0be1a20eb1902de320e0e231'
          'ac0c9bef87b3ca3efe16554c00713ad1b4dc4cf8'
          '74e493483c0de206ee214f7d063e9e6f32b68aed'
          'b1a9beb571a6f5ed51623da6bfab489ef7817716')
_copt=Release
#_copt=Debug

if [[ "$_ibus_mozc" = "yes" ]]; then
    true && pkgname+=('ibus-mozc-svn')
    makedepends+=('ibus')
fi
if [[ "$_scim_mozc" = "yes" ]]; then
    true && pkgname+=('scim-mozc-svn')
    makedepends+=('scim')
fi
if [[ "$_emacs_mozc" = "yes" ]]; then
    true && pkgname+=('emacs-mozc-svn' 'emacs-mozc-bin-svn')
fi
if [[ "$_uim_mozc"  = "yes" ]]; then
    true && pkgname+=('uim-mozc-svn')
    makedepends+=('uim')
    source+=(http://protobuf.googlecode.com/files/protobuf-${_protobuf_ver}.tar.bz2)
    sha1sums+=('df5867e37a4b51fb69f53a8baf5b994938691d6d')
else
    makedepends+=('protobuf')
fi

if [[ "$_zipcode" = "yes" ]]; then
    source+=('http://www.post.japanpost.jp/zipcode/dl/kogaki/zip/ken_all.zip'
             'http://www.post.japanpost.jp/zipcode/dl/jigyosyo/zip/jigyosyo.zip')
    sha1sums+=(
              'fb50270dc8a5981ad9abf8035c070e5d477a0ed2'
              'be23fc7dc1dcbb70ccd6023f5434ab048504908e')
fi

_svntrunk="http://mozc.googlecode.com/svn/trunk/src"
_svnmod="src"

build() {
  if [[ "$_ibus_mozc" != "yes" && "$_uim_mozc" != "yes" && "$_scim_mozc" != "yes" ]]; then
      msg "***********************************************************"
      msg " Please choose either one of ibus, scim or uim at least."
      msg " See PKGBUILD."
      msg "***********************************************************"
      return 1
  fi

  cd "$srcdir"

  ln -sf /usr/bin/python2 ./python
  PATH="${srcdir}:${PATH}"

  # Checkout depot_tools
  msg "Connecting to depot_tools SVN server..."
  if [[ -d depot_tools/.svn ]]; then
      (cd depot_tools ; svn update)
  else
      svn co http://src.chromium.org/svn/trunk/tools/depot_tools --config-dir ./
  fi
  msg "SVN checkout done or server timeout"
  PATH="${srcdir}/depot_tools:${PATH}"

  # Checkout mozc
  msg "Connecting to mozc SVN server..."
  if [[ ! -f .gclient ]]; then
      [[ -d $_svnmod ]] && rm -rf $_svnmod
      gclient config $_svntrunk
  fi
  gclient sync
  msg "SVN checkout done or server timeout"

  # Checkout macuim-mozc (for uim-mozc)
  if [[ "$_uim_mozc" = "yes" ]]; then
      msg "Connecting to macuim SVN server..."
      if [[ -d uim-mozc/.svn ]]; then
          (cd uim-mozc ; svn update)
      else
          svn co http://macuim.googlecode.com/svn/trunk/Mozc uim-mozc
      fi
      msg "SVN checkout done or server timeout"
  fi

  msg "Copying source to src-build..."
  rm -rf "${_svnmod}-build"
  cp -r $_svnmod "${_svnmod}-build"
  cd "${_svnmod}-build"

  if [[ "$_uim_mozc" = "yes" ]]; then
      cp -rf "${srcdir}/protobuf-${_protobuf_ver}" protobuf/files
      patch -p0 -i "${srcdir}/uim-mozc/mozc-linux-protobuf.diff"
      cp -rf "${srcdir}/uim-mozc/uim" unix/
      patch -p0 -i "${srcdir}/uim-mozc/mozc-kill-line.diff"
      # Extract license part of uim-mozc
      cd unix/uim
      sed -n '2,31p' mozc.cc > LICENSE
      cd ~-
  fi

  # patch to add some (hidden) tool's menu items into lang panel of ibus by Vine Linux.
  patch -p1 -i "${srcdir}/mozc-1.1.690.102-ibus-lang_panel.patch"
  # fix zipcode seed generator problem
  patch -p1 -i "${srcdir}/fix_zipcode.patch"
  # fix build error if QTDIR= is specified.
  patch -p1 -i "${srcdir}/libpng14.patch"

  # Add zip code
  if [[ "$_zipcode" = "yes" ]]; then
      msg "Generating zip code seed..."
      cd data/dictionary
      python2 ../../dictionary/gen_zip_code_seed.py --zip_code="${srcdir}/KEN_ALL.CSV" --jigyosyo="${srcdir}/JIGYOSYO.CSV" > zip_code_seed.tsv
      cd ~-
  fi

  msg "Starting make..."

  _targets="server/server.gyp:mozc_server gui/gui.gyp:mozc_tool"
  [[ "$_emacs_mozc" = "yes" ]] && _targets+=" unix/emacs/emacs.gyp:mozc_emacs_helper"
  [[ "$_ibus_mozc"  = "yes" ]] && _targets+=" unix/ibus/ibus.gyp:ibus_mozc"
  [[ "$_scim_mozc"  = "yes" ]] && _targets+=" unix/scim/scim.gyp:scim_mozc unix/scim/scim.gyp:scim_mozc_setup"
  [[ "$_uim_mozc"   = "yes" ]] && _targets+=" unix/uim/uim.gyp:uim-mozc"

  python2 build_mozc.py gyp --channel_dev=0
  python2 build_mozc.py build_tools -c $_copt
  python2 build_mozc.py build -c $_copt $_targets

  [[ "$_ibus_mozc" = "yes" ]] && sed -i 's|/usr/libexec/|/usr/lib/ibus-mozc/|g' out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml

  # Extract liccense part of mozc
  sed -n '1,28p' server/mozc_server.cc > LICENSE

  if [[ "$_desktop_files" = "yes" ]]; then
  # modify icon path in .desktop files
      if [[ "$_ibus_mozc" = "yes" ]]; then
          _icon_prop="/usr/share/ibus-mozc/properties.png"
          _icon_dic="/usr/share/ibus-mozc/dictionary.png"
          _icon_tool="/usr/share/ibus-mozc/tool.png"
      elif [[ "$_scim_mozc" = "yes" ]]; then
          _icondir=`pkg-config scim --variable=icondir`
          _icon_prop="${_icondir}/scim-mozc-properties.png"
          _icon_dic="${_icondir}/scim-mozc-dictionary.png"
          _icon_tool="${_icondir}/scim-mozc-tool.png"
      else
          _icon_prop="/usr/share/uim/pixmaps/mozc_tool_config_dialog.png"
          _icon_dic="/usr/share/uim/pixmaps/mozc_tool_dictionary_tool.png"
          _icon_tool="/usr/share/uim/pixmaps/mozc_tool_selector.png"
      fi
      sed "s|^Icon=|&${_icon_prop}|" "${srcdir}/mozc_tool_config.desktop"            > mozc_tool_config.desktop
      sed "s|^Icon=|&${_icon_dic}|"  "${srcdir}/mozc_tool_dic.desktop"               > mozc_tool_dic.desktop
      sed "s|^Icon=|&${_icon_dic}|"  "${srcdir}/mozc_tool_word_register.desktop"     > mozc_tool_word_register.desktop
      sed "s|^Icon=|&${_icon_tool}|" "${srcdir}/mozc_tool_hand_writing.desktop"      > mozc_tool_hand_writing.desktop
      sed "s|^Icon=|&${_icon_tool}|" "${srcdir}/mozc_tool_character_palette.desktop" > mozc_tool_character_palette.desktop
  fi
}

package_mozc-server-svn() {
  pkgdesc="Server part of the Mozc input method"
  arch=('i686' 'x86_64')
  groups=('mozc-svn')
  depends=('curl')
  [[ "$_uim_mozc" != "yes" ]] && depends+=('protobuf')
  replaces=('mozc')
  provides=('mozc' 'mozc-server')
  conflicts=('mozc' 'mozc-server')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 755 out_linux/${_copt}/mozc_server "${pkgdir}/usr/lib/mozc/mozc_server"
  install -d "${pkgdir}/usr/lib/mozc/documents/"
  install -m 644 data/installer/*.html "${pkgdir}/usr/lib/mozc/documents/"

  install -D -m 644 LICENSE "${pkgdir}/usr/share/licenses/${pkgbase}/LICENSE"
}

package_mozc-utils-gui-svn() {
  pkgdesc="Mozc GUI uitilities, such as the configuration dialog, user dictionary tool and about dialog"
  arch=('i686' 'x86_64')
  groups=('mozc-svn')
  depends=('mozc-server-svn' 'qt')
  optdepends=('zinnia: hand-writing recognition support (Experimental)'
              'tegaki-models-zinnia-japanese: hand-writing recognition support (Experimental)')
  provides=('mozc-utils-gui')
  conflicts=('mozc-utils-gui')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 755 out_linux/${_copt}/mozc_tool "${pkgdir}/usr/lib/mozc/mozc_tool"

  if [[ "$_desktop_files" = "yes" ]]; then
      install -d "${pkgdir}/usr/share/applications"
      install -m 644 *.desktop "${pkgdir}/usr/share/applications/"
  fi
}

package_emacs-mozc-svn() {
  pkgdesc="Mozc for Emacs"
  arch=('any')
  groups=('mozc-svn')
  depends=('emacs-mozc-bin-svn' 'emacs')
  install=emacs-mozc.install
  provides=('emacs-mozc')
  conflicts=('emacs-mozc')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 644 unix/emacs/mozc.el "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc/mozc.el"
}

package_emacs-mozc-bin-svn() {
  pkgdesc="Helper module for emacs-mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-svn')
  depends=('mozc-server-svn')
  provides=('emacs-mozc-bin')
  conflicts=('emacs-mozc-bin')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 755 out_linux/${_copt}/mozc_emacs_helper "${pkgdir}/usr/bin/mozc_emacs_helper"
}

package_ibus-mozc-svn() {
  pkgdesc="IBus engine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-svn')
  depends=('mozc-server-svn' 'ibus')
  provides=('ibus-mozc')
  conflicts=('ibus-mozc')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 755 out_linux/${_copt}/ibus_mozc          "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
  install -D -m 644 out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"
}

package_scim-mozc-svn() {
  pkgdesc="SCIM IMEngine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-svn')
  depends=('mozc-server-svn' 'scim')
  provides=('scim-mozc')
  conflicts=('scim-mozc')

  cd "${srcdir}/${_svnmod}-build"
  _moduledir=`pkg-config scim --variable=moduledir`
  install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc.so       "${pkgdir}${_moduledir}/IMEngine/mozc.so"
  install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc_setup.so "${pkgdir}${_moduledir}/SetupUI/mozc-setup.so"
  _icondir=`pkg-config scim --variable=icondir`
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}${_icondir}/scim-mozc.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}${_icondir}/scim-mozc-tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}${_icondir}/scim-mozc-properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}${_icondir}/scim-mozc-dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}${_icondir}/scim-mozc-direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}${_icondir}/scim-mozc-hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}${_icondir}/scim-mozc-katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}${_icondir}/scim-mozc-katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}${_icondir}/scim-mozc-alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}${_icondir}/scim-mozc-alpha_full.png"
}

package_uim-mozc-svn() {
  pkgdesc="uim IMEngine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-svn')
  depends=('mozc-server-svn' 'uim')
  install=uim-mozc.install
  provides=('uim-mozc')
  conflicts=('uim-mozc')

  cd "${srcdir}/${_svnmod}-build"
  install -D -m 755 out_linux/${_copt}/libuim-mozc.so  "${pkgdir}/usr/lib/uim/plugin/libuim-mozc.so"
  install -d "${pkgdir}/usr/share/uim"
  install    -m 644 ${srcdir}/uim-mozc/scm/*.scm       "${pkgdir}/usr/share/uim/"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/uim/pixmaps/mozc.png"
  install    -m 644 data/images/unix/ui-tool.png       "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_selector.png"
  install    -m 644 data/images/unix/ui-properties.png "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_config_dialog.png"
  install    -m 644 data/images/unix/ui-dictionary.png "${pkgdir}/usr/share/uim/pixmaps/mozc_tool_dictionary_tool.png"

  install -D -m 644 unix/uim/LICENSE "${pkgdir}/usr/share/licenses/${pkgbase}/uim-mozc/LICENSE"
}

# Global pkgdesc and depends are here so that they will be picked up by AUR
pkgdesc="A Japanese Input Method for Chromium OS, Mac and Linux (the Open Source Edition of Google Japanese Input), with uim-mozc (optional)"
depends=('curl' 'protobuf' 'qt')
