diff -aur src/lrc-0.9/src/compiler/lrc.cxx src.patched/lrc-0.9/src/compiler/lrc.cxx
--- src/lrc-0.9/src/compiler/lrc.cxx	2012-05-06 16:13:35.000000000 +0200
+++ src.patched/lrc-0.9/src/compiler/lrc.cxx	2012-05-06 18:55:03.618431904 +0200
@@ -30,6 +30,7 @@
 
 #include <iostream>
 #include <cstring>
+#include <unistd.h>
 #include "include/CompressDecompress.hxx"
 #include "include/EncryptDecrypt.hxx"
 #include "../lrcExceptions.hxx"
diff -aur src/lrc-0.9/src/strategies/cryptopp/algebra.cpp src.patched/lrc-0.9/src/strategies/cryptopp/algebra.cpp
--- src/lrc-0.9/src/strategies/cryptopp/algebra.cpp	2011-08-24 22:21:43.000000000 +0200
+++ src.patched/lrc-0.9/src/strategies/cryptopp/algebra.cpp	2012-05-06 18:38:04.836010054 +0200
@@ -58,7 +58,7 @@
 	Element g[3]={b, a};
 	unsigned int i0=0, i1=1, i2=2;
 
-	while (!Equal(g[i1], this->Identity()))
+	while (!this->Equal(g[i1], this->Identity()))
 	{
 		g[i2] = Mod(g[i0], g[i1]);
 		unsigned int t = i0; i0 = i1; i1 = i2; i2 = t;
diff -aur src/lrc-0.9/src/strategies/cryptopp/eccrypto.cpp src.patched/lrc-0.9/src/strategies/cryptopp/eccrypto.cpp
--- src/lrc-0.9/src/strategies/cryptopp/eccrypto.cpp	2011-08-24 22:21:43.000000000 +0200
+++ src.patched/lrc-0.9/src/strategies/cryptopp/eccrypto.cpp	2012-05-06 18:40:37.518371243 +0200
@@ -435,7 +435,7 @@
 	StringSource ssG(param.g, true, new HexDecoder);
 	Element G;
 	bool result = GetCurve().DecodePoint(G, ssG, (size_t)ssG.MaxRetrievable());
-	SetSubgroupGenerator(G);
+	this->SetSubgroupGenerator(G);
 	assert(result);
 
 	StringSource ssN(param.n, true, new HexDecoder);
@@ -591,7 +591,7 @@
 	if (level >= 2 && pass)
 	{
 		const Integer &q = GetSubgroupOrder();
-		Element gq = gpc ? gpc->Exponentiate(this->GetGroupPrecomputation(), q) : ExponentiateElement(g, q);
+		Element gq = gpc ? gpc->Exponentiate(this->GetGroupPrecomputation(), q) : this->ExponentiateElement(g, q);
 		pass = pass && IsIdentity(gq);
 	}
 	return pass;
@@ -629,7 +629,7 @@
 	typename EC::Point P;
 	if (!this->GetGroupParameters().GetCurve().DecodePoint(P, bt, size))
 		BERDecodeError();
-	SetPublicElement(P);
+	this->SetPublicElement(P);
 }
 
 template <class EC>
diff -aur src/lrc-0.9/src/strategies/cryptopp/eccrypto.h src.patched/lrc-0.9/src/strategies/cryptopp/eccrypto.h
--- src/lrc-0.9/src/strategies/cryptopp/eccrypto.h	2011-08-24 22:21:43.000000000 +0200
+++ src.patched/lrc-0.9/src/strategies/cryptopp/eccrypto.h	2012-05-06 18:41:15.238954592 +0200
@@ -43,7 +43,7 @@
 	void Initialize(const EllipticCurve &ec, const Point &G, const Integer &n, const Integer &k = Integer::Zero())
 	{
 		this->m_groupPrecomputation.SetCurve(ec);
-		SetSubgroupGenerator(G);
+		this->SetSubgroupGenerator(G);
 		m_n = n;
 		m_k = k;
 	}
@@ -145,9 +145,9 @@
 	typedef typename EC::Point Element;
 
 	void Initialize(const DL_GroupParameters_EC<EC> &params, const Element &Q)
-		{this->AccessGroupParameters() = params; SetPublicElement(Q);}
+		{this->AccessGroupParameters() = params; this->SetPublicElement(Q);}
 	void Initialize(const EC &ec, const Element &G, const Integer &n, const Element &Q)
-		{this->AccessGroupParameters().Initialize(ec, G, n); SetPublicElement(Q);}
+		{this->AccessGroupParameters().Initialize(ec, G, n); this->SetPublicElement(Q);}
 
 	// X509PublicKey
 	void BERDecodePublicKey(BufferedTransformation &bt, bool parametersPresent, size_t size);
@@ -166,9 +166,9 @@
 	void Initialize(const EC &ec, const Element &G, const Integer &n, const Integer &x)
 		{this->AccessGroupParameters().Initialize(ec, G, n); this->SetPrivateExponent(x);}
 	void Initialize(RandomNumberGenerator &rng, const DL_GroupParameters_EC<EC> &params)
-		{GenerateRandom(rng, params);}
+		{this->GenerateRandom(rng, params);}
 	void Initialize(RandomNumberGenerator &rng, const EC &ec, const Element &G, const Integer &n)
-		{GenerateRandom(rng, DL_GroupParameters_EC<EC>(ec, G, n));}
+		{this->GenerateRandom(rng, DL_GroupParameters_EC<EC>(ec, G, n));}
 
 	// PKCS8PrivateKey
 	void BERDecodePrivateKey(BufferedTransformation &bt, bool parametersPresent, size_t size);
diff -aur src/lrc-0.9/src/strategies/cryptopp/panama.cpp src.patched/lrc-0.9/src/strategies/cryptopp/panama.cpp
--- src/lrc-0.9/src/strategies/cryptopp/panama.cpp	2011-08-24 22:21:43.000000000 +0200
+++ src.patched/lrc-0.9/src/strategies/cryptopp/panama.cpp	2012-05-06 18:51:27.895095835 +0200
@@ -422,7 +422,7 @@
 {
 	this->ThrowIfInvalidTruncatedSize(size);
 
-	PadLastBlock(this->BLOCKSIZE, 0x01);
+	this->PadLastBlock(this->BLOCKSIZE, 0x01);
 	
 	HashEndianCorrectedBlock(this->m_data);
 
diff -aur src/lrc-0.9/src/strategies/cryptopp/secblock.h src.patched/lrc-0.9/src/strategies/cryptopp/secblock.h
--- src/lrc-0.9/src/strategies/cryptopp/secblock.h	2011-08-24 22:21:43.000000000 +0200
+++ src.patched/lrc-0.9/src/strategies/cryptopp/secblock.h	2012-05-06 18:34:39.389499590 +0200
@@ -88,7 +88,7 @@
 
 	pointer allocate(size_type n, const void * = NULL)
 	{
-		CheckSize(n);
+		this->CheckSize(n);
 		if (n == 0)
 			return NULL;
 
