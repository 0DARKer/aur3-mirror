#!/bin/bash
while (( "$#" )); do
  #Find the number of physical cores (for hyperthreading control)
  CORES="$(grep "^core id" /proc/cpuinfo | sort -u | wc -l)"
  case "$1" in
    full|performance|cut|powersave)
      case "$1" in
        full|performance)
          GOVERNOR="performance"
          XPSTURBO="0"
          HYPERTHREADS="1"
          POLICY="max_performance"
          CONTROL="on"
          AUTOSUSPEND="-1"
          POWERSAVE="0"
          CONTROLLER="N"
          WLPOWERSAVE="off"
          WOLA="g"
          WOLB="enabled"
          LEDBRIGHT="255"
          LAPTOP="0"
          DIRTYWBC="500"
          APM="255"
          AAM="254"
          NMIDOG="1" # Always off
          NVPM="1"
        ;;
        cut|powersave)
          GOVERNOR="powersave"
          XPSTURBO="1"  
          HYPERTHREADS="0"
          POLICY="min_power"
          CONTROL="auto"
          AUTOSUSPEND="1"
          POWERSAVE="1"
          CONTROLLER="Y"
          WLPOWERSAVE="on"
          WOLA="d"
          WOLB="disabled"
          LEDBRIGHT="0"
          LAPTOP="5"
          DIRTYWBC="1500"
          APM="1"
          AAM="128"
          NMIDOG="1"
          NVPM="0"
        ;;
      esac

      # CPU Governor
      for i in /sys/bus/cpu/drivers/processor/cpu*/cpufreq/scaling_governor; do [[ -f "${i}" ]] && echo $GOVERNOR > ${i} & done &

      # Disable Intel P-State Turbo
      [[ -f /sys/devices/system/cpu/intel_pstate/no_turbo ]] && echo $XPSTURBO > /sys/devices/system/cpu/intel_pstate/no_turbo &

      # Hyperthreads
      for i in /sys/devices/system/cpu/cpu*/online; do [[ $(echo "${i}" | tr -cd [:digit:]) -ge $CORES ]] && echo $HYPERTHREADS > ${i} & done &

      # Virtual Memory (Swap)
      echo $LAPTOP > /proc/sys/vm/laptop_mode &
      echo $DIRTYWBC > /proc/sys/vm/dirty_writeback_centisecs &
      echo $DIRTYWBC > /proc/sys/vm/dirty_expire_centisecs &

      # SATA link power management
      for i in /sys/class/scsi_host/host*/link_power_management_policy; do [[ -f "${i}" ]] && echo $POLICY > ${i} & done &

      # Hard drives
      hdparm -qB $APM -qM $AAM /dev/[hs]d[a-z] 2> /dev/null &

      # Runtime power management for devices (by class)
      for i in /sys/class/*/*/power/control; do [[ -f "${i}" ]] && echo $CONTROL > ${i} & done &

      # Runtime power-management for devices (by bus)
      for i in /sys/bus/*/devices/*/power/control; do [[ -f "${i}" ]] && echo $CONTROL > ${i} & done &

      # USB Autosuspend (may disable some older devices!)
      for i in /sys/bus/usb/devices/*/power/autosuspend; do [[ -f "${i}" ]] && echo $AUTOSUSPEND > ${i} & done &
      for i in /sys/bus/usb/devices/*/power/autosuspend_delay_ms; do [[ -f "${i}" ]] && echo $AUTOSUSPEND > ${i} & done &

      # Powersaving for modules
      for i in /sys/module/*/parameters/power_save; do [[ -f "${i}" ]] && echo $POWERSAVE > ${i} & done &
      for i in /sys/module/*/parameters/power_save_controller; do [[ -f "${i}" ]] && echo $CONTROLLER > ${i} & done &

      # Network powersaving
      for i in /sys/class/net/wl*; do [[ -d "${i}" ]] && iw dev $(echo ${i} | sed 's/^.*wl/wl/') set power_save $WLPOWERSAVE 2> /dev/null & done &
      for i in /sys/class/net/e*; do [[ -d "${i}" ]] && ethtool -s $(echo ${i} | sed 's/^.*e/e/') wol $WOLA 2> /dev/null & done &
      for i in /sys/class/net/*/device/power/wakeup; do [[ -f "${i}" ]] && echo $WOLB > ${i} & done &

      # LEDs
      for i in /sys/class/leds/*/brightness; do [[ -f "${i}" ]] && echo $LEDBRIGHT > ${i} & done &

      # NMI watchdog
      [[ -f /proc/sys/kernel/watchdog ]] && echo $NMIDOG > /proc/sys/kernel/watchdog &

      # Nvidia PowerMizer
      #DISPLAY=":0.0" nvidia-settings -a [gpu:0]/GPUPowerMizerMode=$NVPM > /dev/null &

      shift
    ;;
    ht-on|ht-off)
      case "$1" in
        ht-on)
          # Hyperthreads on
          HYPERTHREADS="1"
        ;;
        ht-off)
          # Hyperthreads off
          HYPERTHREADS="0"
        ;;
      esac
          for i in /sys/devices/system/cpu/cpu*/online; do [[ $(echo "${i}" | tr -cd [:digit:]) -ge $CORES ]] && echo $HYPERTHREADS > ${i} & done &

      shift
    ;;
    turbo-on|turbo-off)
      case "$1" in
        turbo-on)
          # Enable Intel P-State Turbo
          XPSTURBO="0"
        ;;
        turbo-off)
          # Disable Intel P-State Turbo
          XPSTURBO="1" 
        ;;
      esac
      [[ -f /sys/devices/system/cpu/intel_pstate/no_turbo ]] && echo $XPSTURBO > /sys/devices/system/cpu/intel_pstate/no_turbo &
      shift
    ;;
    gpu-full|gpu-cut)
      case "$1" in
        gpu-full)
          # Nvidia PowerMizer - Performance
          NVPM="1"
        ;;
        gpu-cut)
          # Nvidia PowerMizer - Adaptive # or "2" (Auto)
          NVPM="0"
        ;;
      esac
      #DISPLAY=":0.0" nvidia-settings -a [gpu:0]/GPUPowerMizerMode=$NVPM > /dev/null &
      shift
    ;;
    check)
      echo "CPU Governor"
      for i in /sys/bus/cpu/drivers/processor/cpu*/cpufreq/scaling_governor; do [[ -f "${i}" ]] && printf "${i}\n$(cat ${i})\n"; done

      echo "Disable Intel P-State Turbo"
      [[ -f /sys/devices/system/cpu/intel_pstate/no_turbo ]] && printf "/sys/devices/system/cpu/intel_pstate/no_turbo\n$(cat /sys/devices/system/cpu/intel_pstate/no_turbo)\n" || printf "N/A\n"

      echo "Hyperthreads"
      for i in /sys/devices/system/cpu/cpu*/online; do [[ $(echo "${i}" | tr -cd [:digit:]) -ge $CORES ]] && printf "${i}\n$(cat ${i})\n"; done

      echo "Virtual Memory (Swap)"
      printf "/proc/sys/vm/laptop_mode\n$(cat /proc/sys/vm/laptop_mode)\n"
      printf "/proc/sys/vm/dirty_writeback_centisecs\n$(cat /proc/sys/vm/dirty_writeback_centisecs)\n"
      printf "/proc/sys/vm/dirty_expire_centisecs\n$(cat /proc/sys/vm/dirty_expire_centisecs)\n"

      echo "SATA link power management"
      for i in /sys/class/scsi_host/host*/link_power_management_policy; do [[ -f "${i}" ]] && printf "${i}\n$(cat ${i})\n"; done

      echo "Hard drives"
      hdparm -B -M /dev/[hs]d[a-z] 2> /dev/null # REQUIRES SUID

      echo "Runtime power management for devices (by class)"
      for i in /sys/class/*/*/power/control; do [[ -f "${i}" ]] && printf "${i}\n$(cat ${i})\n"; done

      echo "Runtime power management for devices (by bus)"
      for i in /sys/bus/*/devices/*/power/control; do [[ -f "${i}" ]] && printf "${i}\n$(cat ${i})\n"; done

      echo "USB Autosuspend (may disable some older devices!)"
      for i in /sys/bus/usb/devices/*/power/autosuspend; do [[ -f "${i}" ]] && printf "${i}\n$(cat ${i})\n"; done
      for i in /sys/bus/usb/devices/*/power/autosuspend_delay_ms; do [[ -f "${i}" ]] && printf "${i}\n$(cat ${i})\n"; done

      echo "Power saving for modules"
      for i in /sys/module/*/parameters/power_save; do [[ -f "${i}" ]] && printf "${i}\n$(cat ${i})\n"; done

      echo "Network powersaving"
      for i in /sys/class/net/wl*; do [[ -d "${i}" ]] && printf "${i}\n$(iw dev $(echo ${i} | sed 's/^.*wl/wl/') get power_save)"; done
      for i in /sys/class/net/e*; do [[ -d "${i}" ]] && printf "${i}\n$(ethtool $(echo ${i} | sed 's/^.*e/e/') | grep Wake-on)"; done
      for i in /sys/class/net/*/device/power/wakeup; do [[ -f "${i}" ]] && printf "${i}\n$(cat ${i})\n"; done

      echo "LEDs"
      for i in /sys/class/leds/*/brightness; do [[ -f "${i}" ]] && printf "${i}\n$(cat ${i})\n"; done

      echo "NMI watchdog"
      [[ -f /proc/sys/kernel/watchdog ]] && printf "/proc/sys/kernel/watchdog\n$(cat /proc/sys/kernel/watchdog)\n" || printf "N/A\n"

      echo "Nvidia PowerMizer"
      #DISPLAY=":0.0" nvidia-settings -q [gpu:0]/GPUPowerMizerMode | grep "Attribute"

      shift
    ;;
    *)
      if [ -n $# ]; then
        printf "\nInvalid input: $@\n"
        printf "\nRuntime power management:\n"
        echo "$0 cut/powersave - enable runtime powersaving"
        echo "$0 full/performance - disable runtime powersaving"
        printf "\nExtras:\n"
        echo "$0 turbo-on/off - en/disable Intel P-State Turbo"
        echo "$0 ht-on/off - en/disable Hyperthreads"
        #echo "$0 gpu-cut/full - en/disable GPU runtime powersaving (only Nvidia ATM)"
        printf "\nOptions are stackable and occur in order:\n"
        echo "$0 cut turbo-on gpu-full check"
        exit
      fi
    ;;
  esac
done
