diff --git a/data/Makefile.am b/data/Makefile.am
index fc6784b..04d4d9f 100644
--- a/data/Makefile.am
+++ b/data/Makefile.am
@@ -20,6 +20,7 @@ dist_searchproviders_DATA =				\
 themedir = $(pkgdatadir)/theme
 dist_theme_DATA = \
 	theme/add-workspace.png			\
+	theme/add-workspace-hover.png		\
 	theme/calendar-arrow-left.svg		\
 	theme/calendar-arrow-right.svg		\
 	theme/calendar-today.svg		\
@@ -50,6 +51,7 @@ dist_theme_DATA = \
 	theme/toggle-off-intl.svg		\
 	theme/toggle-on-us.svg			\
 	theme/toggle-on-intl.svg		\
+	theme/trash-icon.png			\
 	theme/ws-switch-arrow-up.svg		\
 	theme/ws-switch-arrow-down.svg		\
 	theme/player-paused.svg		\
diff --git a/data/Makefile.in b/data/Makefile.in
index 6407f87..38d2b82 100644
--- a/data/Makefile.in
+++ b/data/Makefile.in
@@ -304,6 +304,7 @@ dist_searchproviders_DATA = \
 themedir = $(pkgdatadir)/theme
 dist_theme_DATA = \
 	theme/add-workspace.png			\
+	theme/add-workspace-hover.png		\
 	theme/calendar-arrow-left.svg		\
 	theme/calendar-arrow-right.svg		\
 	theme/calendar-today.svg		\
@@ -334,6 +335,7 @@ dist_theme_DATA = \
 	theme/toggle-off-intl.svg		\
 	theme/toggle-on-us.svg			\
 	theme/toggle-on-intl.svg		\
+	theme/trash-icon.png			\
 	theme/ws-switch-arrow-up.svg		\
 	theme/ws-switch-arrow-down.svg		\
 	theme/player-paused.svg		\
diff --git a/data/org.cinnamon.gschema.xml b/data/org.cinnamon.gschema.xml
index 896d61f..a413619 100644
--- a/data/org.cinnamon.gschema.xml
+++ b/data/org.cinnamon.gschema.xml
@@ -151,6 +151,12 @@
       <description>Duration of the delay (in milliseconds)</description>
     </key>
 
+    <key type="b" name="activate-menu-applet-on-hover">
+      <default>false</default>
+      <summary>Enable or disable activation menu applet on hover</summary>
+      <description>Another way to open the menu by just hovering the mouse pointer as opposed to clicking on it.</description>
+    </key>
+
     <key type="i" name="number-workspaces">
 	<default>2</default>
 	<summary>Number of workspaces in Cinnamon session</summary>
diff --git a/data/org.cinnamon.gschema.xml.in b/data/org.cinnamon.gschema.xml.in
index d21d28f..c496c3d 100644
--- a/data/org.cinnamon.gschema.xml.in
+++ b/data/org.cinnamon.gschema.xml.in
@@ -207,6 +207,14 @@
       </_description>
     </key>
 
+    <key type="b" name="activate-menu-applet-on-hover">
+      <default>false</default>
+      <_summary>Enable or disable activation menu applet on hover</_summary>
+      <_description>
+            Another way to open the menu by just hovering the mouse pointer as opposed to clicking on it.
+      </_description>
+    </key>
+
     <key type="i" name="number-workspaces">
 	<default>2</default>
 	<_summary>Number of workspaces in Cinnamon session</_summary>
diff --git a/data/theme/add-workspace-hover.png b/data/theme/add-workspace-hover.png
new file mode 100644
index 0000000..0b09af1
Binary files /dev/null and b/data/theme/add-workspace-hover.png differ
diff --git a/data/theme/add-workspace.png b/data/theme/add-workspace.png
index 9b1a80d..220fd3c 100644
Binary files a/data/theme/add-workspace.png and b/data/theme/add-workspace.png differ
diff --git a/data/theme/cinnamon.css b/data/theme/cinnamon.css
index eda3fb8..9f2f12c 100644
--- a/data/theme/cinnamon.css
+++ b/data/theme/cinnamon.css
@@ -358,8 +358,11 @@ StTooltip StLabel {
 	background-image: url("add-workspace.png");
 	height: 200px;
 	width: 35px;
+	transition-duration: 300;
 }
-.workspace-add-button:hover {	
+.workspace-add-button:hover {
+	background-image: url("add-workspace-hover.png");
+	transition-duration: 300;
 }
 
 .workspace-close-button {
@@ -390,6 +393,17 @@ StTooltip StLabel {
 .window-close:rtl {
 	-st-background-image-shadow: 2px 2px 6px rgba(0,0,0,0.5);
 }
+
+.window-close-area {
+	background-image: url("trash-icon.png");
+	background-color: rgba(60, 60, 60, 0.8);
+	border: 4px solid rgba(128,128,128,0.8);
+	border-bottom-width: 0px;
+	border-radius: 20px 20px 0px 0px;
+	height: 120px;
+	width: 400px;
+}
+
 .icon-grid {
 	spacing: 36px;
 	-cinnamon-grid-item-size: 118px;
@@ -406,6 +420,12 @@ StTooltip StLabel {
 	transition-duration: 100;
 	text-align: center;
 }
+
+.expo-background {
+	background-gradient-start: #000;
+	background-gradient-end: #AAA;
+	background-gradient-direction: vertical
+}
 /* ===================================================================
  * ViewSelector 
  * ===================================================================*/
diff --git a/data/theme/trash-icon.png b/data/theme/trash-icon.png
new file mode 100644
index 0000000..af4d881
Binary files /dev/null and b/data/theme/trash-icon.png differ
diff --git a/files/usr/share/cinnamon/applets/menu@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/menu@cinnamon.org/applet.js
index 8dc374f..59518ff 100644
--- a/files/usr/share/cinnamon/applets/menu@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/menu@cinnamon.org/applet.js
@@ -500,6 +500,18 @@ MyApplet.prototype = {
             this.menuManager.addMenu(this.menu);   
                         
             this.actor.connect('key-press-event', Lang.bind(this, this._onSourceKeyPress));
+
+            let openOnHover = global.settings.get_boolean("activate-menu-applet-on-hover");
+            if (openOnHover)
+                this._openMenuId = this.actor.connect('enter-event', Lang.bind(this, this.openMenu));
+
+            global.settings.connect("changed::activate-menu-applet-on-hover", Lang.bind(this, function() {
+                let openOnHover = global.settings.get_boolean("activate-menu-applet-on-hover");
+                if (openOnHover)
+                    this._openMenuId = this.actor.connect('enter-event', Lang.bind(this, this.openMenu));
+                else
+                    this.actor.disconnect(this._openMenuId);
+            }));
                         
             this.menu.actor.add_style_class_name('menu-background');
             this.menu.connect('open-state-changed', Lang.bind(this, this._onOpenStateChanged));                                
@@ -562,7 +574,11 @@ MyApplet.prototype = {
             global.logError(e);
         }
     },
-    
+
+    openMenu: function() {
+        this.menu.open(true);
+    },
+
     on_orientation_changed: function (orientation) {
         this.menu.destroy();
         this.menu = new Applet.AppletPopupMenu(this, orientation);
diff --git a/files/usr/share/cinnamon/applets/panel-launchers@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/panel-launchers@cinnamon.org/applet.js
index 03c22c2..ab9d3ae 100644
--- a/files/usr/share/cinnamon/applets/panel-launchers@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/panel-launchers@cinnamon.org/applet.js
@@ -11,6 +11,7 @@ const Signals = imports.signals;
 const GLib = imports.gi.GLib;
 const Tooltips = imports.ui.tooltips;
 const DND = imports.ui.dnd;
+const Tweener = imports.ui.tweener;
 
 let pressLauncher = null;
 
@@ -145,7 +146,34 @@ PanelAppLauncher.prototype = {
         else return this.app.create_icon_texture(20);
     },
     
+    _animateIcon: function(step){
+        if (step>=3) return;
+        Tweener.addTween(this.icon,
+                         { width: 13,
+                           height: 13,
+                           time: 0.2,
+                           transition: 'easeOutQuad',
+                           onComplete: function(){
+                               Tweener.addTween(this.icon,
+                                                 { width: 20,
+                                                   height: 20,
+                                                   time: 0.2,
+                                                   transition: 'easeOutQuad',
+                                                   onComplete: function(){
+                                                       this._animateIcon(step+1);
+                                                   },
+                                                   onCompleteScope: this
+                                                 });
+                           },
+                           onCompleteScope: this
+                         });
+    },
+    
     launch: function() {
+        let allocation = this._iconBox.get_allocation_box();
+        this._iconBox.width = allocation.x2 - allocation.x1;
+        this._iconBox.height = allocation.y2 - allocation.y1;
+        this._animateIcon(0);
         if (this.is_custom()) this.appinfo.launch([], null);
         else this.app.open_new_window(-1);
     },
diff --git a/files/usr/share/cinnamon/applets/systray@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/systray@cinnamon.org/applet.js
index a8ccef3..6ede694 100644
--- a/files/usr/share/cinnamon/applets/systray@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/systray@cinnamon.org/applet.js
@@ -50,6 +50,8 @@ MyApplet.prototype = {
             this._insertStatusItem(box, -1);
             
             let themeNode = buttonBox.actor.get_theme_node();
+            if (!themeNode.get_length('width')) icon.width = 22;
+            else icon.width = themeNode.get_length('width');
             if (!themeNode.get_length('height')) icon.height = 22;
             else icon.height = themeNode.get_length('height');
         }
diff --git a/files/usr/share/cinnamon/applets/window-list@cinnamon.org/applet.js b/files/usr/share/cinnamon/applets/window-list@cinnamon.org/applet.js
index 85b0a08..b599885 100644
--- a/files/usr/share/cinnamon/applets/window-list@cinnamon.org/applet.js
+++ b/files/usr/share/cinnamon/applets/window-list@cinnamon.org/applet.js
@@ -224,8 +224,10 @@ AppMenuButton.prototype = {
         this._container.add_actor(this._label);
 
         this._iconBottomClip = 0;
-
-        this._visible = !Main.overview.visible;
+		if (!Main.overview.visible || !Main.expo.visible)
+        	this._visible = true;
+		else
+			this._visible = false;
         if (!this._visible)
             this.actor.hide();
         Main.overview.connect('hiding', Lang.bind(this, function () {
@@ -234,6 +236,12 @@ AppMenuButton.prototype = {
         Main.overview.connect('showing', Lang.bind(this, function () {
             this.hide();
         }));
+		Main.expo.connect('hiding', Lang.bind(this, function () {
+            this.show();
+        }));
+        Main.expo.connect('showing', Lang.bind(this, function () {
+            this.hide();
+        }));
         this.actor.connect('destroy', Lang.bind(this, this._onDestroy));
         
         this._updateCaptionId = this.metaWindow.connect('notify::title', Lang.bind(this, function () {
@@ -306,6 +314,7 @@ AppMenuButton.prototype = {
     _onDestroy: function() {
         this.metaWindow.disconnect(this._updateCaptionId);
         this._tooltip.destroy();
+        this.rightClickMenu.destroy();
     },
     
     doFocus: function() {
@@ -315,7 +324,7 @@ AppMenuButton.prototype = {
             let icon = app.create_icon_texture(16);
     		this._iconBox.set_child(icon);	
         }         
-        if (this.metaWindow.has_focus()) {                                     
+        if (this.metaWindow.has_focus() && !this.metaWindow.minimized) {                                     
         	this.actor.add_style_pseudo_class('focus');    
             this.actor.remove_style_class_name("window-list-item-demands-attention");    	
             this.actor.remove_style_class_name("window-list-item-demands-attention-top");
@@ -334,7 +343,6 @@ AppMenuButton.prototype = {
             this._windowHandle(false);
         } else if (Cinnamon.get_event_state(event) & Clutter.ModifierType.BUTTON2_MASK) {
             this.metaWindow.delete(global.get_current_time());
-            this.rightClickMenu.destroy();
         } else if (Cinnamon.get_event_state(event) & Clutter.ModifierType.BUTTON3_MASK) {
             this.rightClickMenu.mouseEvent = event;
             this.rightClickMenu.toggle();   
@@ -591,6 +599,8 @@ MyAppletBox.prototype = {
         this._clearDragPlaceholder();
         actor.destroy();
         
+        this._applet.saveWindowsOrder();
+        
         return true;
     },
     
@@ -617,6 +627,8 @@ MyApplet.prototype = {
             this.orientation = orientation;
             this.dragInProgress = false;
             
+            this._windows_order = {};
+            
             this.myactorbox = new MyAppletBox(this);
             this.myactor = this.myactorbox.actor;
         
@@ -657,17 +669,17 @@ MyApplet.prototype = {
                                             
             Main.expo.connect('showing', Lang.bind(this, 
 	    					function(){	global.window_manager.disconnect(this.switchWorkspaceHandler);}));
-	    Main.expo.connect('hidden', Lang.bind(this, 
-						function(){	this.switchWorkspaceHandler=global.window_manager.connect('switch-workspace', 
+	    	Main.expo.connect('hidden', Lang.bind(this, 
+							function(){	this.switchWorkspaceHandler=global.window_manager.connect('switch-workspace', 
 												Lang.bind(this, this._refreshItems)); 
-								this._refreshItems();}));
+												this._refreshItems();}));
 
-	    Main.overview.connect('showing', Lang.bind(this, 
-						function(){	global.window_manager.disconnect(this.switchWorkspaceHandler);}));
-	    Main.overview.connect('hidden', Lang.bind(this, 
-						function(){	this.switchWorkspaceHandler=global.window_manager.connect('switch-workspace', 
+	    	Main.overview.connect('showing', Lang.bind(this, 
+							function(){	global.window_manager.disconnect(this.switchWorkspaceHandler);}));
+	    	Main.overview.connect('hidden', Lang.bind(this, 
+							function(){	this.switchWorkspaceHandler=global.window_manager.connect('switch-workspace', 
 												Lang.bind(this, this._refreshItems)); 
-								this._refreshItems();}));
+												this._refreshItems();}));
             
             this._workspaces = [];
             this._changeWorkspaces();
@@ -684,6 +696,13 @@ MyApplet.prototype = {
         }
     },
     
+    saveWindowsOrder: function() {
+        let order = [];
+        let children = this.myactor.get_children();
+        for (var i in children) if (children[i]._delegate && children[i]._delegate.metaWindow) order.push(children[i]._delegate.metaWindow);
+        this._windows_order[global.screen.get_active_workspace()] = order;
+    },
+    
     on_applet_clicked: function(event) {
             
     },        
@@ -713,9 +732,18 @@ MyApplet.prototype = {
 
         let metaWorkspace = global.screen.get_active_workspace();
         let windows = metaWorkspace.list_windows();
-        windows.sort(function(w1, w2) {
-            return w1.get_stable_sequence() - w2.get_stable_sequence();
-        });
+        windows.sort(Lang.bind(this, function(w1, w2) {
+            if (this._windows_order){
+                let order = this._windows_order[metaWorkspace];
+                if (order){
+                    let iw1 = order.indexOf(w1);
+                    let iw2 = order.indexOf(w2);
+                    if (iw1==-1) return 1;
+                    else if (iw2==-1) return -1;
+                    else return iw1 - iw2;
+                }else return w1.get_stable_sequence() - w2.get_stable_sequence;
+            }else return w1.get_stable_sequence() - w2.get_stable_sequence;
+        }));
                 
         // Create list items for each window
         let tracker = Cinnamon.WindowTracker.get_default();
diff --git a/js/ui/expo.js b/js/ui/expo.js
index 3905d3f..9eb7be0 100644
--- a/js/ui/expo.js
+++ b/js/ui/expo.js
@@ -8,6 +8,7 @@ const St = imports.gi.St;
 const Cinnamon = imports.gi.Cinnamon;
 const Gdk = imports.gi.Gdk;
 
+const DND = imports.ui.dnd;
 const Main = imports.ui.main;
 const MessageTray = imports.ui.messageTray;
 const Params = imports.misc.params;
@@ -118,7 +119,7 @@ Expo.prototype = {
 
         this.visible = false;           // animating to overview, in overview, animating out
         this._shown = false;            // show() and not hide()
-        this._shownTemporarily = false; // showTemporarily() and not hideTemporarily()
+        this._shownTemporarily = false; // showTemporarily() and not hilog("huasuhashusu");deTemporarily()
         this._modal = false;            // have a modal grab
         this.animationInProgress = false;
         this._hideInProgress = false;
@@ -128,7 +129,7 @@ Expo.prototype = {
         // Dash elements, or mouseover handlers in the workspaces.
 
         this._gradient = new St.Button({reactive: false});
-        this._gradient.set_style("background-gradient-end: #AAA;background-gradient-start: #000;background-gradient-direction: vertical;");
+        this._gradient.set_style_class_name("expo-background");
         this._group.add_actor(this._gradient);
         this._coverPane = new Clutter.Rectangle({ opacity: 0,
                                                   reactive: true });
@@ -137,18 +138,28 @@ Expo.prototype = {
 
         this._addWorkspaceButton = new St.Button({style_class: 'workspace-add-button'});
         this._group.add_actor(this._addWorkspaceButton);
-        this._addWorkspaceButton.opacity = 160;
         this._addWorkspaceButton.connect('clicked', Lang.bind(this, function () { Main._addWorkspace();}));
-        this._addWorkspaceButton.connect('enter-event', Lang.bind(this, function () { 
-                Tweener.addTween(this._addWorkspaceButton, { opacity: 255,
-                                                             time: ADD_BUTTON_HOVER_TIME,
-                                                             transition: 'easeOutQuad'});
-                                                                                        }));
-        this._addWorkspaceButton.connect('leave-event', Lang.bind(this, function () { 
-                Tweener.addTween(this._addWorkspaceButton, { opacity: 160,
-                                                             time: ADD_BUTTON_HOVER_TIME,
-                                                             transition: 'easeOutQuad'});
-                                                                                        }));
+
+        this._windowCloseArea = new St.Button({style_class: 'window-close-area'});
+        this._windowCloseArea.handleDragOver = function(source, actor, x, y, time) {
+                return DND.DragMotionResult.MOVE_DROP;
+            };
+        this._windowCloseArea.acceptDrop = function(source, actor, x, y, time) {
+                
+                if (source.realWindow) {
+                    let win = source.realWindow;
+
+                    let metaWindow = win.get_meta_window();
+                    
+                    source._draggable._restoreOnSuccess = false;
+                    metaWindow.delete(global.get_current_time());
+                    return true;
+                }
+                return false;
+            };
+
+        this._windowCloseArea._delegate = this._windowCloseArea;
+        this._group.add_actor(this._windowCloseArea);
 
         this._group.hide();
         global.overlay_group.add_actor(this._group);
@@ -156,6 +167,7 @@ Expo.prototype = {
         this._gradient.hide();
         this._coverPane.hide();
         this._addWorkspaceButton.hide();
+        this._windowCloseArea.hide();
 
         this._windowSwitchTimeoutId = 0;
         this._windowSwitchTimestamp = 0;
@@ -213,6 +225,8 @@ Expo.prototype = {
         this._group.set_position(primary.x, primary.y);
         this._group.set_size(primary.width, primary.height);
 
+        this._group.set_clip(primary.x, primary.y, primary.width, primary.height);
+
         this._gradient.set_position(0, 0);
         this._gradient.set_size(primary.width, primary.height);
 
@@ -228,6 +242,10 @@ Expo.prototype = {
         let buttonWidth = node.get_length('width');
         let buttonHeight = node.get_length('height');
 
+        node = this._windowCloseArea.get_theme_node();
+        this._windowCloseArea.height = node.get_length('height');
+        this._windowCloseArea.width = node.get_length('width');
+
         this._expo.actor.set_position(0, 0);
         this._expo.actor.set_size((primary.width - buttonWidth), primary.height);
 
@@ -237,6 +255,26 @@ Expo.prototype = {
         this._addWorkspaceButton.set_size(buttonWidth, buttonHeight); 
         if (this._addWorkspaceButton.get_theme_node().get_background_image() == null)
             this._addWorkspaceButton.set_style('background-image: url("/usr/share/cinnamon/theme/add-workspace.png");'); 
+
+        this._windowCloseArea.set_position((primary.width - this._windowCloseArea.width) / 2 , primary.height);
+        this._windowCloseArea.set_size(this._windowCloseArea.width, this._windowCloseArea.height);
+        this._windowCloseArea.raise_top();
+    },
+
+    showCloseArea : function() {
+        let primary = Main.layoutManager.primaryMonitor;
+        this._windowCloseArea.show();
+        Tweener.addTween(this._windowCloseArea, {   y: primary.height - this._windowCloseArea.height,
+                                                    time: ANIMATION_TIME,
+                                                    transition: 'easeOutQuad'});
+    },
+
+    hideCloseArea : function() {
+        let primary = Main.layoutManager.primaryMonitor;
+        Tweener.addTween(this._windowCloseArea, {   y: primary.height,
+                                                    time: ANIMATION_TIME,
+                                                    transition: 'easeOutQuad',
+                                                    onComplete: this.hide});
     },
 
     //// Public methods ////
@@ -521,6 +559,7 @@ Expo.prototype = {
 
         this._expo.hide();
         this._addWorkspaceButton.hide();
+        this._windowCloseArea.hide();
 
         this._background.hide();
         this._group.hide();
@@ -549,4 +588,4 @@ Expo.prototype = {
         Main.layoutManager._chrome.updateRegions();
     }
 };
-Signals.addSignalMethods(Expo.prototype);
\ No newline at end of file
+Signals.addSignalMethods(Expo.prototype);
diff --git a/js/ui/expoThumbnail.js b/js/ui/expoThumbnail.js
index 6ed4b04..2ebf792 100644
--- a/js/ui/expoThumbnail.js
+++ b/js/ui/expoThumbnail.js
@@ -109,11 +109,13 @@ ExpoWindowClone.prototype = {
     },
 
     _onDragBegin : function (draggable, time) {
+        Main.expo.showCloseArea();
         this.inDrag = true;
         this.emit('drag-begin');
     },
 
     _onDragEnd : function (draggable, time, snapback) {
+        Main.expo.hideCloseArea();
         this.inDrag = false;
         // We may not have a parent if DnD completed successfully, in
         // which case our clone will shortly be destroyed and replaced
@@ -201,11 +203,12 @@ ExpoWorkspaceThumbnail.prototype = {
         let windows = global.get_window_actors().filter(this._isMyWindow, this);
 
         // Create clones for windows that should be visible in the Expo
+        this.count = 0;
         this._windows = [];
         this._uninterestingWindows = new Clutter.Group();
         this._uninterestingWindows.hide();
-        this._uninterestingWindows.raise(this._background);
         this._contents.add_actor(this._uninterestingWindows);
+        this._uninterestingWindows.raise(this._background);
         for (let i = 0; i < windows.length; i++) {
             windows[i].meta_window._minimizedChangedId =
                 windows[i].meta_window.connect('notify::minimized',
@@ -392,6 +395,7 @@ ExpoWorkspaceThumbnail.prototype = {
                 metaWin.disconnect(metaWin._minimizedChangedId);
                 delete metaWin._minimizedChangedId;
             }
+            this._windows[i].destroy();
         }
 
         this._windows = [];
@@ -461,7 +465,7 @@ ExpoWorkspaceThumbnail.prototype = {
 
     _addUninterestingWindowClone : function(win) {
         let clone = new ExpoWindowClone(win);
-        this._uninterestingWindows.add_actor(clone.actor)
+        this._uninterestingWindows.add_actor(clone.actor);
         return clone;
     },
 
@@ -747,6 +751,8 @@ ExpoThumbnailsBox.prototype = {
             thumbnail.actor.connect('leave-event', Lang.bind(this, function () { this.button.hide(); if (thumbnail.metaWorkspace != global.screen.get_active_workspace()) thumbnail._shade(); thumbnail.hovered = false; thumbnail._overviewModeOff();}));
             thumbnail.connect('remove-event', Lang.bind(this, function () { this.button.hide(); if (thumbnail.metaWorkspace != global.screen.get_active_workspace()) thumbnail._shade(); thumbnail.hovered = false; thumbnail._overviewModeOff();}));
 
+            Main.expo.connect('hiding', Lang.bind(this, function() { this.button.hide();}));
+
             if (start > 0) { // not the initial fill
                 thumbnail.state = ThumbnailState.NEW;
                 thumbnail.slidePosition = 1; // start slid out
@@ -1072,4 +1078,4 @@ ExpoThumbnailsBox.prototype = {
         if (thumbnail.shade.opacity > 0)
             thumbnail._highlight();
     }
-};
\ No newline at end of file
+};
diff --git a/js/ui/keyboard.js b/js/ui/keyboard.js
index b8d5cb3..f30c2e5 100644
--- a/js/ui/keyboard.js
+++ b/js/ui/keyboard.js
@@ -337,6 +337,15 @@ Keyboard.prototype = {
             trayButton.remove_style_pseudo_class('grayed');
         }));
 
+        Main.expo.connect('showing', Lang.bind(this, function () {
+            trayButton.reactive = false;
+            trayButton.add_style_pseudo_class('grayed');
+        }));
+        Main.expo.connect('hiding', Lang.bind(this, function () {
+            trayButton.reactive = true;
+            trayButton.remove_style_pseudo_class('grayed');
+        }));
+
         return trayButton;
     },
 
diff --git a/js/ui/magnifier.js b/js/ui/magnifier.js
index be60ce5..cbfe32a 100644
--- a/js/ui/magnifier.js
+++ b/js/ui/magnifier.js
@@ -604,6 +604,7 @@ ZoomRegion.prototype = {
             this._updateMagViewGeometry();
             this._updateCloneGeometry();
             this._updateMousePosition();
+            global.top_window_group.raise_top();
         } else if (!activate && this.isActive()) {
             this._destroyActors();
         }
diff --git a/js/ui/messageTray.js b/js/ui/messageTray.js
index 09ec320..5d09dbe 100644
--- a/js/ui/messageTray.js
+++ b/js/ui/messageTray.js
@@ -241,6 +241,14 @@ FocusGrabber.prototype = {
             function() {
                 this._toggleFocusGrabMode();
             }));
+        Main.expo.connect('showing', Lang.bind(this,
+            function() {
+                this._toggleFocusGrabMode();
+            }));
+        Main.expo.connect('hidden', Lang.bind(this,
+            function() {
+                this._toggleFocusGrabMode();
+            }));
     },
 
     grabFocus: function(actor) {
@@ -1363,7 +1371,10 @@ MessageTray.prototype = {
         this._notificationState = State.HIDDEN;
         this._notificationTimeoutId = 0;
         this._notificationExpandedId = 0;
-        this._overviewVisible = Main.overview.visible;
+        if (Main.overview.visible || Main.expo.visible)
+            this._overviewVisible = true;
+        else
+            this._overviewVisible = false;
         this._notificationRemoved = false;
         this._reNotifyAfterHideNotification = null;
         
@@ -1392,6 +1403,25 @@ MessageTray.prototype = {
                     this._updateState();
                 }
             }));
+
+        Main.expo.connect('showing', Lang.bind(this,
+            function() {
+                this._overviewVisible = true;
+                if (this._locked) {
+                    this._unlock();
+                } else {
+                    this._updateState();
+                }
+            }));
+        Main.expo.connect('hiding', Lang.bind(this,
+            function() {
+                this._overviewVisible = false;
+                if (this._locked) {
+                    this._unlock();
+                } else {
+                    this._updateState();
+                }
+            }));
     },
 
     _setSizePosition: function() {
@@ -1571,9 +1601,9 @@ MessageTray.prototype = {
         this._notificationBin.child = this._notification.actor;
         this._notificationBin.opacity = 0;        
         let monitor = Main.layoutManager.primaryMonitor;
-        this._notificationBin.y = this._notification._table.get_theme_node().get_length('margin-from-top-edge-of-screen') * 2; // Notifications appear from here (for the animation)
+        this._notificationBin.y = monitor.y + this._notification._table.get_theme_node().get_length('margin-from-top-edge-of-screen') * 2; // Notifications appear from here (for the animation)
         let margin = this._notification._table.get_theme_node().get_length('margin-from-right-edge-of-screen');                
-        this._notificationBin.x = monitor.width - this._notification._table.width - margin;
+        this._notificationBin.x = monitor.x + monitor.width - this._notification._table.width - margin;
         this._notificationBin.show();
 
         this._updateShowingNotification();
@@ -1624,8 +1654,9 @@ MessageTray.prototype = {
                             onComplete: this._showNotificationCompleted,
                             onCompleteScope: this
                           };
+        let monitor = Main.layoutManager.primaryMonitor;
         if (!this._notification.expanded)        	 
-            tweenParams.y = this._notification._table.get_theme_node().get_length('margin-from-top-edge-of-screen');             
+            tweenParams.y = monitor.y + this._notification._table.get_theme_node().get_length('margin-from-top-edge-of-screen');             
 
         this._tween(this._notificationBin, '_notificationState', State.SHOWN, tweenParams);
    },
@@ -1671,7 +1702,7 @@ MessageTray.prototype = {
         }
 
         this._tween(this._notificationBin, '_notificationState', State.HIDDEN,
-                    { y: 0,
+                    { y: Main.layoutManager.primaryMonitor.y,
                       opacity: 0,
                       time: ANIMATION_TIME,
                       transition: 'easeOutQuad',
diff --git a/js/ui/panel.js b/js/ui/panel.js
index f7b9e97..4f3628d 100644
--- a/js/ui/panel.js
+++ b/js/ui/panel.js
@@ -525,6 +525,13 @@ Panel.prototype = {
             this.actor.remove_style_class_name('in-overview');
         }));
 
+        Main.expo.connect('shown', Lang.bind(this, function () {
+            this.actor.add_style_class_name('in-overview');
+        }));
+        Main.expo.connect('hiding', Lang.bind(this, function () {
+            this.actor.remove_style_class_name('in-overview');
+        }));
+
         this._menus = new PopupMenu.PopupMenuManager(this);                        
         
         this._leftBox = new St.BoxLayout({ name: 'panelLeft' });
