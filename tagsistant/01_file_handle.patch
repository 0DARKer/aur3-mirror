--- src/tagsistant.h.orig	2011-12-02 15:46:12.046424536 -0700
+++ src/tagsistant.h	2011-12-02 15:46:50.729548305 -0700
@@ -163,13 +163,13 @@
 /**
  * used in linked list of returned results
  */
-typedef struct file_handle {
+typedef struct tagsistant_file_handle {
 	/** filename pointed by this structure */
 	char *name;
 
 	/** next element in results */
-	struct file_handle *next;
-} file_handle_t;
+	struct tagsistant_file_handle *next;
+} tagsistant_file_handle_t;
 
 /* codes used in plugin chain processing */
 
@@ -250,10 +250,10 @@
 extern int is_cached(const char *path);
 
 extern ptree_or_node_t *build_querytree(const char *path);
-extern file_handle_t *build_filetree(ptree_or_node_t *query, const char *path);
+extern tagsistant_file_handle_t *build_filetree(ptree_or_node_t *query, const char *path);
 
 extern void destroy_querytree(ptree_or_node_t *pt);
-extern void destroy_filetree(file_handle_t *fh);
+extern void destroy_filetree(tagsistant_file_handle_t *fh);
 
 #define  do_sql(dbh, statement, callback, firstarg)\
 	real_do_sql(dbh, statement, callback, firstarg, __FILE__, (unsigned int) __LINE__)

--- src/tagsistant.c.orig	2011-12-02 15:46:16.059736129 -0700
+++ src/tagsistant.c	2011-12-02 15:46:58.006175552 -0700
@@ -950,13 +950,13 @@
 		if (pt == NULL)
 			return -EBADF;
 	
-		file_handle_t *fh = build_filetree(pt, path);
+		tagsistant_file_handle_t *fh = build_filetree(pt, path);
 		if (fh == NULL) {
 			destroy_querytree(pt);
 			return -EBADF;
 		}
 
-		file_handle_t *fh_save = fh;
+		tagsistant_file_handle_t *fh_save = fh;
 	
 		do {
 			if ( (fh->name != NULL) && strlen(fh->name)) {

--- src/path_resolution.c.orig	2011-12-02 15:51:30.274700545 -0700
+++ src/path_resolution.c	2011-12-02 15:51:37.414661866 -0700
@@ -298,7 +298,7 @@
 
 struct atft {
 	sqlite_int64 id;
-	file_handle_t **fh;
+	tagsistant_file_handle_t **fh;
 	sqlite3 *dbh;
 };
 
@@ -307,7 +307,7 @@
 	(void) argc;
 	(void) azColName;
 	struct atft *atft = (struct atft*) atft_struct;
-	file_handle_t **fh = atft->fh;
+	tagsistant_file_handle_t **fh = atft->fh;
 
 #if VERBOSE_DEBUG
 	dbg(LOG_INFO, "add_to_file_tree: %s", argv[0]);
@@ -319,7 +319,7 @@
 
 	(*fh)->name = strdup(argv[0]);
 	dbg(LOG_INFO, "adding %s to filetree", (*fh)->name);
-	(*fh)->next = calloc(sizeof(file_handle_t), 1);
+	(*fh)->next = calloc(sizeof(tagsistant_file_handle_t), 1);
 	if ((*fh)->next == NULL) {
 		dbg(LOG_ERR, "Can't allocate memory in build_filetree");
 		return 1;
@@ -381,7 +381,7 @@
  * @param query the ptree_or_node_t* query structure to
  * be resolved.
  */
-file_handle_t *build_filetree(ptree_or_node_t *query, const char *path)
+tagsistant_file_handle_t *build_filetree(ptree_or_node_t *query, const char *path)
 {
 	/* opening a persistent connection */
 	sqlite3 *dbh = NULL;
@@ -400,7 +400,7 @@
 
 	ptree_or_node_t *query_dup = query;
 
-	file_handle_t *fh = calloc(sizeof(file_handle_t), 1);
+	tagsistant_file_handle_t *fh = calloc(sizeof(tagsistant_file_handle_t), 1);
 	if ( fh == NULL ) {
 		dbg(LOG_ERR, "Can't allocate memory in build_filetree");
 		sqlite3_close(dbh);
@@ -409,7 +409,7 @@
 	fh->next = NULL;
 	fh->name = NULL;
 
-	file_handle_t *result = fh;
+	tagsistant_file_handle_t *result = fh;
 
 	dbg(LOG_INFO, "building filetree...");
 
@@ -563,7 +563,7 @@
 	return result;
 }
 
-void destroy_filetree(file_handle_t *fh)
+void destroy_filetree(tagsistant_file_handle_t *fh)
 {
 	if (fh == NULL)
 		return;
