--- audio.c
+++ audio.c
@@ -227,9 +227,11 @@
   blen = ftell(fd)-pos;
   fseek(fd,pos,0);
 
+/*
   data = (char *) ((malloc(blen*play_delay+16)+15) & 0xfffffff0);
   fread(data,1,blen,fd);
   fclose(fd);
+*/
 
   switch(type)
   {
--- better.c
+++ better.c
@@ -184,10 +184,11 @@
 
 
  
-void init_robot(void)
+int init_robot(void)
 {
   srand48(258245);
   strcpy(sm->owncomment,"Ich weiss, dass ich besser bin!");
+  return 1;
 }
 
 void start_robot(int num)
--- config.h
+++ config.h
@@ -4,17 +4,17 @@
  */
 
 /* #define HPUX 1  */
-#define SunOS4 1
+/* #define SunOS4 1 */
 /* #define IRIX 1 */
-/* #define Linux 1 */
+#define Linux 1
 /* #define RS6000 1 */  /* look at CREDITS */
 /* #define NeXT 1   */  /* look at CREDITS */
 
-/* #define USE_SOUND 1 */
+#define USE_SOUND 1
 
 /* set the paths, according to your environment: */
-#define AUDIOPATH "./lib/netmaze.seq"
-#define TEXTUREPATH "./lib/"
+#define AUDIOPATH "/usr/share/games/netmaze/netmaze.seq"
+#define TEXTUREPATH "/usr/share/games/netmaze/"
 
 /*********************************************************
  * Setup machinedepend configuration
--- dummy.c
+++ dummy.c
@@ -10,10 +10,11 @@
  * the init_robot is called one time right after the start
  */
 
-void init_robot(void)
+int init_robot(void)
 {
   strcpy(sm->ownname,"Dr.Dummy");
   strcpy(sm->owncomment,"Gotcha!!!");
+  return 1;
 }
 
 void start_robot(int number)
--- follower.c
+++ follower.c
@@ -14,13 +14,14 @@
  * the init_robot is called one time right after the start
  */
 
-void init_robot(void)
+int init_robot(void)
 {
   strcpy(sm->ownname,"Follower2");
   strcpy(sm->owncomment,"Look Behind You");
+  return 1;
 }
 
-void start_robot(void)
+void start_robot(int x)
 {
   printf("Here We Go Again\n");
   printf("The number of players in this game is:  %d\n",sm->anzplayers);
--- iocntl.c
+++ iocntl.c
@@ -16,8 +16,8 @@
 #include <sys/ioctl.h>
 
 #ifdef HAVE_FDSET
- struct fd_set readmask;
- struct fd_set writemask;
+ fd_set readmask;
+ fd_set writemask;
 #else
  struct fd_mask readmask;
  struct fd_mask writemask;
@@ -60,7 +60,7 @@
     perror(" sigaction(SIGIO)");
 #else
   vec.sa_handler = (void (*)) io_handler;
- #ifdef RS6000 /* ibm rs/6000 */
+ #if defined(RS6000) || defined(__linux__) /* ibm rs/6000 */
    sigemptyset(&vec.sa_mask);
  #else
   vec.sa_mask = 0;
@@ -144,8 +144,8 @@
   static char	buf[256];
 
 #ifdef HAVE_FDSET
-  struct fd_set	 readmask1;
-  struct fd_set	 writemask1;
+  fd_set	 readmask1;
+  fd_set	 writemask1;
 #else
   struct fd_mask readmask1;
   struct fd_mask writemask1;
diff -Naur netmaze/netmaze.c netmaze2/netmaze.c
--- netmaze.c
+++ netmaze.c
@@ -32,6 +32,7 @@
 #include <stdio.h>
 #include <stdlib.h>
 #include <string.h>
+#include <signal.h>
 #include <sys/signal.h>
 #include <sys/time.h>
 #include <sys/ioctl.h>
@@ -380,10 +381,10 @@
   if ( sigvector(SIGALRM, &vec, &ovec) == -1) perror("SIGALRM\n");
 #else
   vec.sa_handler = (void (*)(int)) solo_timer;
- #ifdef RS6000 /* ibm rs/6000 */
+ #if defined(RS6000) || defined(__linux__) /* ibm rs/6000 */
    sigemptyset(&vec.sa_mask);
  #else
-   vec.sa_mask = 0;
+  vec.sa_mask = 0;
  #endif
   vec.sa_flags = 0;
   if ( sigaction(SIGALRM, &vec, &ovec) == -1) perror("SIGALRM\n");
@@ -409,7 +410,7 @@
   struct sigaction vec;
 
   vec.sa_handler = (void (*)(int)) child_signal;
- #ifdef RS6000 /* ibm rs/6000 */
+ #if defined(RS6000) || defined(__linux__) /* ibm rs/6000 */
    sigemptyset(&vec.sa_mask);
  #else
   vec.sa_mask = 0;
--- netmaze.h
+++ netmaze.h
@@ -306,3 +306,17 @@
   int outputsize;                      /* Outputsize */
 };
 
+/* extern: allmove.c */
+extern void move_all(PLAYER*,int*);
+extern void run_game(MAZE*,PLAYER*);
+extern void myrandominit(long);
+
+/* extern: user-defined-functions */
+extern int own_action(void);
+extern void start_robot(int);
+extern int init_robot(void);
+
+/* extern: network.c */
+extern struct robot_functions robot;
+extern void handle_socket(void);
+extern void ident_player(void);
--- netserv.c
+++ netserv.c
@@ -106,7 +106,7 @@
 
 
 #ifdef HAVE_FDSET
-  struct fd_set readmask;
+  fd_set readmask;
 #else
   struct fd_mask readmask;
 #endif
@@ -626,7 +626,7 @@
   if (sigvector(SIGALRM, &vec1, (struct sigvec *) 0) == -1) perror("SIGALRM\n");
 #else
   vec1.sa_handler = (void (*)(int)) inter;
- #ifdef RS6000 /* ibm rs/6000 */
+ #if defined(RS6000) || defined(__linux__) /* ibm rs/6000 */
    sigemptyset(&vec1.sa_mask);
  #else
   vec1.sa_mask = 0;
@@ -649,7 +649,7 @@
   struct sigaction svec1;
 
   svec1.sa_handler = (void (*)(int)) handle_sigchild;
- #ifdef RS6000 /* ibm rs/6000 */
+ #if defined(RS6000) || defined(__linux__) /* ibm rs/6000 */
    sigemptyset(&svec1.sa_mask);
  #else
   svec1.sa_mask = 0;
@@ -779,7 +779,7 @@
 void io_cntl(void)
 {
 #ifdef HAVE_FDSET
-  struct fd_set readmask1;
+  fd_set readmask1;
 #else
   struct fd_mask readmask1;
 #endif
diff -Naur netmaze/robot.c netmaze2/robot.c
--- robot.c
+++ robot.c
@@ -49,7 +49,7 @@
 extern void ident_player(void);
 
 #ifdef HAVE_FDSET
-struct fd_set readmask;
+fd_set readmask;
 #else
 struct fd_mask readmask;
 #endif
@@ -94,7 +94,7 @@
     perror(" sigaction(SIGIO)");
 #else
   vec.sa_handler = (void (*)(int)) io_handler;
- #ifdef RS6000 /* ibm rs/6000 */
+ #if defined(RS6000) || defined(__linux__) /* ibm rs/6000 */
    sigemptyset(&vec.sa_mask);
  #else
   vec.sa_mask = 0;
@@ -139,7 +139,7 @@
   int	numfds;
 
 #ifdef HAVE_FDSET
-  struct fd_set readmask1;
+  fd_set readmask1;
 #else
   struct fd_mask readmask1;
 #endif
--- x11cntrl.c
+++ x11cntrl.c
@@ -99,10 +99,14 @@
             switch(key)
             {
               case XK_Up:
+	      case XK_a:
+	      case XK_A:
                 sm->ownstick |= JOY_UP;
                 sm->ownstick &= ~JOY_HIDE;
                 break;
               case XK_Down:
+              case XK_y:
+              case XK_Y:
                 sm->ownstick &= ~JOY_HIDE;
                 sm->ownstick |= JOY_DOWN;
                 break;
@@ -179,9 +183,13 @@
             switch(key)
             {
               case XK_Up:
+              case XK_a:
+              case XK_A:
                 sm->ownstick &= ~JOY_UP;
                 break;
               case XK_Down:
+              case XK_y:
+              case XK_Y:
                 sm->ownstick &= ~JOY_DOWN;
                 break;
               case XK_Right:
