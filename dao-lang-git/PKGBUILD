# Maintainer: dumblob <dumblob@gmail.com>
# Contributor: dumblob <dumblob@gmail.com>

# FIXME check, that all modules are getting compiled properly

_basename=dao

pkgname=${_basename}-lang-git
pkgver=1397.416d787
pkgrel=1
pkgdesc='A very lightweight, portable, optionally typed programming language and VM written in C featuring blazingly fast real concurrency, deferring, OOP, AOP, LLVM JIT, bytecode, many advanced modules & bindings and much more!'
url='http://www.daovm.net/'
license=('BSD')
arch=('i686' 'x86_64')
# FIXME add + update_optdepends
#   DaoFLTK|FLTK
#   DaoGraphicsMagick (formerly Graphics)
#   DaoGame
source=(
  "$_basename::git+https://github.com/daokoder/$_basename"
  "$_basename-tools::git+https://github.com/daokoder/$_basename-tools"
  #"$_basename-tools::git+https://github.com/daokoder/$_basename-tools#branch=Compatibility_Clang_3_3"
  "$_basename-modules::git+https://github.com/daokoder/$_basename-modules"
  #"$_basename-modules::git+https://github.com/daokoder/$_basename-modules#branch=Compatibility_Clang_3_3"
  "DaoGenomeTools::git+https://github.com/daokoder/DaoGenomeTools"
  "DaoGObject::git+https://github.com/daokoder/DaoGObject"
  "DaoGraphics::git+https://github.com/daokoder/DaoGraphics"
  "DaoGSL::git+https://github.com/daokoder/DaoGSL"
  "DaoOpenGL::git+https://github.com/daokoder/DaoOpenGL"
  "DaoSQL::git+https://github.com/daokoder/DaoSQL"
  "DaoSDL::git+https://github.com/daokoder/DaoSDL"
  # WebDao renamed to web.http and moved to dao-modules/ (=> no more separated)
)
sha256sums=(
  'SKIP'
  'SKIP'
  #'SKIP'
  'SKIP'
  #'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
)
depends=('gcc-libs-multilib' 'readline')
makedepends=(
  #'emscripten-git' (wait until clang 3.4 becomes supported)
  #'genometools'
  'glib2'
  'gobject-introspection'

  'glu'
  'freeglut'
  'mesa'

  'sqlite'
  'libmariadbclient'
  'postgresql-libs'
  'libffi'
  'sdl2'
  'cblas'
  'gsl'
  'clang'
  'readline'
  'zlib'
)
optdepends=(
  #'emscripten-git:        support for compilation to JavaScript'
  #'genometools:           needed by the DaoGenomeTools module'
  'glib2:                 needed by the DaoGObject module (runtime binding generation)'
  'gobject-introspection: needed by the DaoGObject module (runtime binding generation)'
  'mesa:                  needed by the Graphics module'
  'glu:                   needed by the Graphics module'
  'glu:                   needed by the DaoOpenGL module'
  'freeglut:              needed by the Graphics module'
  'mesa:                  needed by the DaoOpenGL module'
  'sqlite:                needed by the DaoSQLite module'
  'libmariadbclient:      needed by the DaoMySQL module'
  'postgresql-libs:       needed by the DaoPostgreSQL module'
  'libffi:                needed by the clinker module (allows calling C functions directly from Dao)'
  'sdl2:                  needed by the DaoSDL module'
  'cblas:                 needed by the cblas module'
  'gsl:                   needed by the DaoGSL module (GNU Scientific Library)'
  'clang:                 needed by clangdao (a C/C++ library autobinding tool)'
  'zlib:                  needed by the JIT and CXX modules'
)
provides=('dao')
conflicts=('dao')

build() {
  mv "$_basename-tools/"*   "$_basename/tools/"
  mv "$_basename-modules/"* "$_basename/modules/"
  mv "DaoGenomeTools/"      "$_basename/modules/"
  # FIXME not getting compiled
  mv "DaoGObject/"          "$_basename/modules/"
  # FIXME not getting compiled
  mv "DaoGraphics/"         "$_basename/modules/"
  # FIXME not getting compiled
  mv "DaoGSL/"              "$_basename/modules/"
  # FIXME not getting compiled
  mv "DaoOpenGL/"           "$_basename/modules/"
  # FIXME not getting compiled
  mv "DaoSQL/"              "$_basename/modules/"
  # FIXME not getting compiled
  mv "DaoSDL/"              "$_basename/modules/"
  cd "$_basename"

  # remove clang 3.2 compatibility and add clang 3.4 compatibility
  (
  cd tools/clangdao/ || exit 1
  a='(FunctionTypeLoc) +(ftypeloc) *= *cast *< *FunctionTypeLoc *> *\( *typeloc *\) *;'
  b='\1 \2 = typeloc.castAs<\1>();'
  sed -i -r "s|$a|$b|" cdaoUserType.cpp
  sed -i -r \
    -e 's|(compiler *\. *createDiagnostics *\() *argc, *argv *(\) *;)|\1\2|' \
    -e 's|(compiler *\. *getDiagnostics\( *\) *,) *(compiler *\. *getTargetOpts *\( *\))|\1 \&\2|' \
    clangdao.cpp
  sed -i -r 's|^([[:space:]]*lexer *. *)Lex( *\( *token *\) *;)|\1 LexFromRawLexer \2|' \
    cdaoVariable.cpp
  sed -i -r 's|isFromMainFile|isInMainFile|g' cdaoModule.cpp
  # order matters when using gcc!
  patch -R makefile.dao << EOF
@@ -44,9 +44,9 @@
 clangdao_exe.AddLinkingFlag( "-lclangSema" )
 clangdao_exe.AddLinkingFlag( "-lclangAnalysis" )
 clangdao_exe.AddLinkingFlag( "-lclangAST" )
-clangdao_exe.AddLinkingFlag( "-lclangEdit" )
 clangdao_exe.AddLinkingFlag( "-lclangLex" )
 clangdao_exe.AddLinkingFlag( "-lclangBasic" )
+clangdao_exe.AddLinkingFlag( "-lclangEdit" )
 clangdao_exe.AddLinkingFlag( "-lclangSerialization" )
 clangdao_exe.AddLinkingFlag( "-lclangStaticAnalyzerCheckers" )
 clangdao_exe.AddLinkingFlag( "-lclangStaticAnalyzerCore" )
EOF
  )

  # remove clang 3.2 compatibility and add clang 3.4 compatibility
  patch -R modules/DaoCXX/daoCXX.cpp <<\EOF
@@ -663,22 +663,22 @@
 	DString_SetChars( mbs, header_suffix_pattern );
 	header_suffix_regex = DaoRegex_New( mbs );
 
-	compiler.createDiagnostics();
+	compiler.createDiagnostics(argc, argv);
 
 	DiagnosticsEngine & DG = compiler.getDiagnostics();
 	CompilerInvocation::CreateFromArgs( compiler.getInvocation(), argv + 1, argv + argc, DG );
-	compiler.setTarget( TargetInfo::CreateTargetInfo( DG, & compiler.getTargetOpts() ) );
+	compiler.setTarget( TargetInfo::CreateTargetInfo( DG, compiler.getTargetOpts() ) );
 
 	clang::HeaderSearchOptions & headers = compiler.getHeaderSearchOpts();
 	DString_SetChars( mbs, DaoVmSpace_CurrentLoadingPath( vms ) );
 	DString_AppendChars( mbs, "/../" ); // /usr/local/dao relative to /usr/local/dao/lib
-	headers.AddPath( mbs->chars, clang::frontend::System, false, true );
+	headers.AddPath( mbs->chars, clang::frontend::System, false, false, true );
 #ifdef DAO_DIR
-	headers.AddPath( DAO_DIR "/include", clang::frontend::System, false, true );
+	headers.AddPath( DAO_DIR "/include", clang::frontend::System, false, false, true );
 #endif
 	DString_SetChars( mbs, DaoVmSpace_CurrentLoadingPath( vms ) );
 	DString_AppendChars( mbs, "/../../kernel" ); // at build
-	headers.AddPath( mbs->chars, clang::frontend::System, false, true );
+	headers.AddPath( mbs->chars, clang::frontend::System, false, false, true );
 
 	DString_Delete( mbs );
 
EOF

  # remove clang 3.2 compatibility and add clang 3.4 compatibility
  _x="LLVMContext.h"
  _x="${_x}|IRBuilder.h"
  _x="${_x}|Module.h"
  _x="${_x}|DerivedTypes.h"
  _x="${_x}|Constants.h"
  _x="${_x}|Instructions.h"
  _x="${_x}|DataLayout.h"
  for _f in 'modules/DaoJIT/daoJIT.h' \
            'modules/DaoJIT/daoJIT.cpp' \
            'modules/DaoCXX/daoCXX.cpp'; do
    sed -i -r "s@(llvm/)($_x)@\1IR/\2@" "$_f"
  done

  # enable disabled-by-default GObject bindings
  # FIXME not getting compiled (not anymore in dao-modules/makefile.dao???)
  patch modules/DaoGObject/makefile.dao <<\EOF
@@ -4,7 +4,8 @@
 glib = DaoMake::FindPackage( "GLib", $REQUIRED )
 gir = DaoMake::FindPackage( "GIR", $REQUIRED )
 
-if( daovm == none or ffi == none or glib == none or gir == none ) return
+if( daovm == none or ffi == none or glib == none or gir == none )
+	error( 'one of packages daovm, ffi, glib, gir is missing' )
 
 project = DaoMake::Project( "DaoGobject" ) 
 
@@ -35,7 +36,7 @@
 
 
 
-#project.GenerateFinder( $TRUE );
-#project.Install( daovm.GetPath( "MOD-PATH" ), gobject_dll );
-#project.Install( daovm.GetPath( "MOD-PATH" ), ffiite_dll );
-#project.Install( daovm.GetPath( "MOD-PATH" ), myffi_dll );
+project.GenerateFinder( $TRUE );
+project.Install( daovm.GetPath( "MOD-PATH" ), gobject_dll );
+project.Install( daovm.GetPath( "MOD-PATH" ), ffiite_dll );
+project.Install( daovm.GetPath( "MOD-PATH" ), myffi_dll );
EOF

  sed -i -r -e "s/# *(cpu *=).*/\1$(grep '^processor' /proc/cpuinfo | wc -l)/" \
            -e 's/# *(jit *=).*/\1yes/' dao.conf
  # stop right after the daomake tool creates the Makefile
  #sed -i -r 's|^[[:space:]]*\$\(MAKE\)[[:space:]]*$||' Makefile.daomake

  #FIXME remove MODE=debug after stable release
  MODE=debug make -f Makefile.daomake linux RESET='--reset' \
    OPTIONS="--option-INSTALL-PATH '/usr' --no-local-rpath"
}

pkgver() {
  cd "$_basename"
  echo "$(git rev-list --count HEAD).$(git rev-parse --short HEAD)"
}

package() {
  cd "$_basename"
  make install INSTALL="$pkgdir/usr"

  # ELF file outside of a valid path
  rm "$pkgdir/usr/share/dao/demo/modules/clinker/libsample.so"

  # FIXME still not solved?
  #rmdir "$pkgdir/usr/lib/daomake/packages/DaoMake.Objs"

  # inst <src> <dst>
  inst() {
    # FIXME make it aware of system-wide policy on chmod & chown of dirs
    [ ! -d "$2" ] && {
      if [ "$(printf %s "$2" | sed -r 's|.*(.)$|\1|')" = '/' ]; then
        mkdir -p "$2"
      else
        mkdir -p "$(dirname "$2")"
      fi
    }
    cp -p -r -- "$1" "$2"
    # FIXME print the resulting file/dir full path
  }
  inst license.txt "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
  chmod 644        "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
  inst share/dao-logo.png "$pkgdir/usr/share/icons/"
  inst share/daohelp.vim  "$pkgdir/usr/share/vim/vimfiles/syntax/"
  inst share/dao.vim      "$pkgdir/usr/share/vim/vimfiles/syntax/"
  inst tools/webdemo/     "$pkgdir/usr/share/$_basename/"
  mkdir -p "$pkgdir/usr/share/doc/"
  mv "$pkgdir/usr/share/$_basename/doc/" "$pkgdir/usr/share/doc/$_basename"
}
