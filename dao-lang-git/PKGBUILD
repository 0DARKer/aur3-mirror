# Maintainer: dumblob <dumblob@gmail.com>
# Contributor: dumblob <dumblob@gmail.com>

_basename=dao
pkgname=${_basename}-lang-git
pkgver=1187.e62f549
pkgrel=1
pkgdesc='A lightweight, portable, optionally typed programming language and VM written in C featuring blazingly fast real concurrency, deferring, OOP, aspects, LLVM JIT, bytecode, BNF syntax customization, many advanced modules & bindings and much more!'
url='http://www.daovm.net/'
license=('BSD')
arch=('i686' 'x86_64')
source=(
  "$_basename::git+https://github.com/daokoder/$_basename"
  "$_basename-tools::git+https://github.com/daokoder/$_basename-tools"
  #"$_basename-tools::git+https://github.com/daokoder/$_basename-tools#branch=Compatibility_Clang_3_3"
  "$_basename-modules::git+https://github.com/daokoder/$_basename-modules"
  #"$_basename-modules::git+https://github.com/daokoder/$_basename-modules#branch=Compatibility_Clang_3_3"
  "DaoGenomeTools::git+https://github.com/daokoder/DaoGenomeTools"
  "DaoGObject::git+https://github.com/daokoder/DaoGObject"
  "DaoGraphics::git+https://github.com/daokoder/DaoGraphics"
  "DaoGSL::git+https://github.com/daokoder/DaoGSL"
  "DaoOpenGL::git+https://github.com/daokoder/DaoOpenGL"
  "DaoSQL::git+https://github.com/daokoder/DaoSQL"
  "DaoSDL::git+https://github.com/daokoder/DaoSDL"
  "webdao::git+https://github.com/daokoder/WebDao"
)
sha256sums=(
  'SKIP'
  'SKIP'
  #'SKIP'
  'SKIP'
  #'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
  'SKIP'
)
depends=('gcc-libs-multilib')
makedepends=(
  #'emscripten-git' (wait until clang 3.3 becomes supported)
  #'genometools'
  'glib2'
  'gobject-introspection'
  'mesa'
  'glu'
  'freeglut'
  'sqlite'
  'mariadb'
  'postgresql'
  'libffi'
  'sdl'
  'cblas'
  'gsl'
  'clang'
)
optdepends=(
  #'emscripten-git:        support for compilation to JavaScript'
  #'genometools:           needed by the DaoGenomeTools module'
  'glib2:                 needed by the DaoGObject module (runtime binding generation)'
  'gobject-introspection: needed by the DaoGObject module (runtime binding generation)'
  'mesa:                  needed by the Graphics module'
  'glu:                   needed by the Graphics module'
  'freeglut:              needed by the Graphics module'
  'mesa:                  needed by the DaoOpenGL module'
  'sqlite:                needed by the DaoSQLite module'
  'mariadb:               needed by the DaoMySQL module'
  'postgresql:            needed by the DaoPostgreSQL module'
  'libffi:                needed by the clinker module (allows calling C functions directly from Dao)'
  'sdl:                   needed by the DaoSDL module'
  'cblas:                 needed by the cblas module'
  'gsl:                   needed by the DaoGSL module (GNU Scientific Library)'
  'clang:                 needed by the cblas module'
  #'clang:                 needed by C/C++ library binding tool'
)
provides=('dao')
conflicts=()

build() {
  # will be probably abandoned => use DaoGraphics instead (`load Graphics')
  #rm -rf "$_basename-modules/graphics/"

  mv "$_basename-tools/"*   "$_basename/tools/"
  mv "$_basename-modules/"* "$_basename/modules/"
  mv "DaoGenomeTools/"      "$_basename/modules/"
  mv "DaoGObject/"          "$_basename/modules/"
  mv "DaoGraphics/"         "$_basename/modules/"
  mv "DaoGSL/"              "$_basename/modules/"
  mv "DaoOpenGL/"           "$_basename/modules/"
  mv "DaoSQL/"              "$_basename/modules/"
  mv "DaoSDL/"              "$_basename/modules/"
  mv "webdao/"              "$_basename/modules/"

  cd "$_basename"

  # remove clang 3.2 compatibility and add clang 3.4 compatibility
  (
  cd tools/clangdao/ || exit 1
  a='(FunctionTypeLoc) +(ftypeloc) *= *cast *< *FunctionTypeLoc *> *\( *typeloc *\) *;'
  b='\1 \2 = typeloc.castAs<\1>();'
  sed -i -r "s|$a|$b|" cdaoUserType.cpp
  sed -i -r \
    -e 's|(compiler *\. *createDiagnostics *\() *argc, *argv *(\) *;)|\1\2|' \
    -e 's|(compiler *\. *getDiagnostics\( *\) *,) *(compiler *\. *getTargetOpts *\( *\))|\1 \&\2|' \
    clangdao.cpp
  sed -i -r 's|^([[:space:]]*lexer *. *)Lex( *\( *token *\) *;)|\1 LexFromRawLexer \2|' \
    cdaoVariable.cpp
  sed -i -r 's|isFromMainFile|isInMainFile|g' cdaoModule.cpp
  # order matters when using gcc!
  patch -R makefile.dao << EOF
@@ -44,9 +44,9 @@
 clangdao_exe.AddLinkingFlag( "-lclangSema" )
 clangdao_exe.AddLinkingFlag( "-lclangAnalysis" )
 clangdao_exe.AddLinkingFlag( "-lclangAST" )
-clangdao_exe.AddLinkingFlag( "-lclangEdit" )
 clangdao_exe.AddLinkingFlag( "-lclangLex" )
 clangdao_exe.AddLinkingFlag( "-lclangBasic" )
+clangdao_exe.AddLinkingFlag( "-lclangEdit" )
 clangdao_exe.AddLinkingFlag( "-lclangSerialization" )
 clangdao_exe.AddLinkingFlag( "-lclangStaticAnalyzerCheckers" )
 clangdao_exe.AddLinkingFlag( "-lclangStaticAnalyzerCore" )
EOF
  )

  # remove clang 3.2 compatibility and add clang 3.4 compatibility
  patch -R modules/DaoCXX/daoCXX.cpp <<\EOF
@@ -664,22 +664,22 @@
 	DString_SetChars( mbs, header_suffix_pattern );
 	header_suffix_regex = DaoRegex_New( mbs );
 
-	compiler.createDiagnostics();
+	compiler.createDiagnostics(argc, argv);
 
 	DiagnosticsEngine & DG = compiler.getDiagnostics();
 	CompilerInvocation::CreateFromArgs( compiler.getInvocation(), argv + 1, argv + argc, DG );
-	compiler.setTarget( TargetInfo::CreateTargetInfo( DG, & compiler.getTargetOpts() ) );
+	compiler.setTarget( TargetInfo::CreateTargetInfo( DG, compiler.getTargetOpts() ) );
 
 	clang::HeaderSearchOptions & headers = compiler.getHeaderSearchOpts();
 	DString_SetChars( mbs, DaoVmSpace_CurrentLoadingPath( vms ) );
 	DString_AppendChars( mbs, "/../" ); // /usr/local/dao relative to /usr/local/dao/lib
-	headers.AddPath( mbs->chars, clang::frontend::System, false, true );
+	headers.AddPath( mbs->chars, clang::frontend::System, false, false, true );
 #ifdef DAO_DIR
-	headers.AddPath( DAO_DIR "/include", clang::frontend::System, false, true );
+	headers.AddPath( DAO_DIR "/include", clang::frontend::System, false, false, true );
 #endif
 	DString_SetChars( mbs, DaoVmSpace_CurrentLoadingPath( vms ) );
 	DString_AppendChars( mbs, "/../../kernel" ); // at build
-	headers.AddPath( mbs->chars, clang::frontend::System, false, true );
+	headers.AddPath( mbs->chars, clang::frontend::System, false, false, true );
 
 	DString_Delete( mbs );
 
EOF

  # remove clang 3.2 compatibility and add clang 3.4 compatibility
  _x="LLVMContext.h"
  _x="${_x}|IRBuilder.h"
  _x="${_x}|Module.h"
  _x="${_x}|DerivedTypes.h"
  _x="${_x}|Constants.h"
  _x="${_x}|Instructions.h"
  _x="${_x}|DataLayout.h"
  for _f in 'modules/DaoJIT/daoJIT.h' \
            'modules/DaoJIT/daoJIT.cpp' \
            'modules/DaoCXX/daoCXX.cpp'; do
    sed -i -r 's@(llvm/)('"$_x"')@\1IR/\2@' "$_f"
  done

  # do not use the system libdao.so
  patch makefile.dao <<\EOF
@@ -334,8 +334,8 @@
 daovm_doc.AddCommand( "@$(DAOMAKE) mkdir2 ./doc/html/" );
 daovm_doc.AddCommand( "@$(DAOMAKE) mkdir2 ./doc/html/en" );
 daovm_doc.AddCommand( "@$(DAOMAKE) mkdir2 ./doc/html/zh" );
-daovm_doc.AddCommand( "$(DAO) -e \"load help; help::set_language('en'); help::export('','./doc/html/en')\"" );
-daovm_doc.AddCommand( "$(DAO) -e \"load help; help::set_language('zh'); help::export('','./doc/html/zh')\"" );
+daovm_doc.AddCommand( "LD_PRELOAD=./libdao.so $(DAO) -e \"load help; help::set_language('en'); help::export('','./doc/html/en')\"" );
+daovm_doc.AddCommand( "LD_PRELOAD=./libdao.so $(DAO) -e \"load help; help::set_language('zh'); help::export('','./doc/html/zh')\"" );
 daovm_doc.AddDependency( daovm_dll );
 
 daovm.Install( daovm_doc_path, "./doc" )
EOF

  # Arch Linux doesn't provide gl3.h
  sed -i -r 's|/gl3\.h|/gl.h|' modules/DaoGraphics/source/dao_opengl.h
  sed -i -r 's|/gl3\.h|/gl.h|' modules/DaoGraphics/source/dao_scene.c
  sed -i -r 's|/gl3\.h|/gl.h|' tools/daomake/packages/FindOpenGL3.dao

  # allow installation of disabled-by-default modules
  for f in \
      modules/clinker/libffi/makefile.dao \
      modules/DaoGObject/makefile.dao \
      modules/DaoSQL/makefile.dao; do
    sed -i -r 's/^ *#+(.*project.*(Install|GenerateFinder).*)$/\1/' "$f"
  done

  # FIXME prepend rpath (/usr/lib/dao/) of dao_libdao.so
  sed -i -r 's|rpath=|rpath=/usr/lib/dao/ -Wl,-rpath=|' \
    tools/daomake/platforms/unix.dao

  # enable JIT and set CPU count
  sed -i -r -e "s/# *(cpu *=).*/\1$(grep '^processor' /proc/cpuinfo | wc -l)/" \
            -e 's/# *(jit *=).*/\1yes/' dao.conf

  # stop right after creating Makefile using the daomake tool
  #sed -i -r 's|^[[:space:]]*\$\(MAKE\)[[:space:]]*$||' Makefile.daomake

  msg "Starting bootstrap and make..."
  _opts="       --option-INSTALL-PATH '$pkgdir/usr/lib/dao/'"
  _opts="$_opts --option-BIN-PATH     '$pkgdir/usr/bin/'"
  _opts="$_opts --option-LIB-PATH     '$pkgdir/usr/lib/dao/'"
  _opts="$_opts --option-INC-PATH     '$pkgdir/usr/include/dao/'"
  _opts="$_opts --option-MOD-PATH     '$pkgdir/usr/lib/dao/modules/'"
  _opts="$_opts --option-DOC-PATH     '$pkgdir/usr/share/doc/dao/'"
  make -f Makefile.daomake linux RESET='--reset' OPTIONS="$_opts"
    #JAVASCRIPT='ON'
}

pkgver() {
  cd "$_basename"
  echo "$(git rev-list --count HEAD).$(git rev-parse --short HEAD)"
}

package() {
  cd "$_basename"
  make install
  # FIXME rm
  #dao-lang-git E: ELF file ('usr/share/doc/dao/demo/modules/clinker/libsample.so') outside of a valid path.
  install -D -m644 license.txt "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}
