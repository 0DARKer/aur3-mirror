diff --git a/kwin/effects.cpp b/kwin/effects.cpp
--- a/kwin/effects.cpp
+++ b/kwin/effects.cpp
@@ -200,7 +200,7 @@ void EffectsHandlerImpl::reconfigure()
 void EffectsHandlerImpl::prePaintScreen(ScreenPrePaintData& data, int time)
 {
     if (current_paint_screen < loaded_effects.size()) {
-        loaded_effects[current_paint_screen++].second->prePaintScreen(data, time);
+        loaded_effects.at(current_paint_screen++).second->prePaintScreen(data, time);
         --current_paint_screen;
     }
     // no special final code
@@ -209,7 +209,7 @@ void EffectsHandlerImpl::prePaintScreen(ScreenPrePaintData& data, int time)
 void EffectsHandlerImpl::paintScreen(int mask, QRegion region, ScreenPaintData& data)
 {
     if (current_paint_screen < loaded_effects.size()) {
-        loaded_effects[current_paint_screen++].second->paintScreen(mask, region, data);
+        loaded_effects.at(current_paint_screen++).second->paintScreen(mask, region, data);
         --current_paint_screen;
     } else
         scene->finalPaintScreen(mask, region, data);
@@ -218,7 +218,7 @@ void EffectsHandlerImpl::paintScreen(int mask, QRegion region, ScreenPaintData&
 void EffectsHandlerImpl::postPaintScreen()
 {
     if (current_paint_screen < loaded_effects.size()) {
-        loaded_effects[current_paint_screen++].second->postPaintScreen();
+        loaded_effects.at(current_paint_screen++).second->postPaintScreen();
         --current_paint_screen;
     }
     // no special final code
@@ -227,7 +227,7 @@ void EffectsHandlerImpl::postPaintScreen()
 void EffectsHandlerImpl::prePaintWindow(EffectWindow* w, WindowPrePaintData& data, int time)
 {
     if (current_paint_window < loaded_effects.size()) {
-        loaded_effects[current_paint_window++].second->prePaintWindow(w, data, time);
+        loaded_effects.at(current_paint_window++).second->prePaintWindow(w, data, time);
         --current_paint_window;
     }
     // no special final code
@@ -236,7 +236,7 @@ void EffectsHandlerImpl::prePaintWindow(EffectWindow* w, WindowPrePaintData& dat
 void EffectsHandlerImpl::paintWindow(EffectWindow* w, int mask, QRegion region, WindowPaintData& data)
 {
     if (current_paint_window < loaded_effects.size()) {
-        loaded_effects[current_paint_window++].second->paintWindow(w, mask, region, data);
+        loaded_effects.at(current_paint_window++).second->paintWindow(w, mask, region, data);
         --current_paint_window;
     } else
         scene->finalPaintWindow(static_cast<EffectWindowImpl*>(w), mask, region, data);
@@ -245,7 +245,7 @@ void EffectsHandlerImpl::paintWindow(EffectWindow* w, int mask, QRegion region,
 void EffectsHandlerImpl::paintEffectFrame(EffectFrame* frame, QRegion region, double opacity, double frameOpacity)
 {
     if (current_paint_effectframe < loaded_effects.size()) {
-        loaded_effects[current_paint_effectframe++].second->paintEffectFrame(frame, region, opacity, frameOpacity);
+        loaded_effects.at(current_paint_effectframe++).second->paintEffectFrame(frame, region, opacity, frameOpacity);
         --current_paint_effectframe;
     } else {
         const EffectFrameImpl* frameImpl = static_cast<const EffectFrameImpl*>(frame);
@@ -256,7 +256,7 @@ void EffectsHandlerImpl::paintEffectFrame(EffectFrame* frame, QRegion region, do
 void EffectsHandlerImpl::postPaintWindow(EffectWindow* w)
 {
     if (current_paint_window < loaded_effects.size()) {
-        loaded_effects[current_paint_window++].second->postPaintWindow(w);
+        loaded_effects.at(current_paint_window++).second->postPaintWindow(w);
         --current_paint_window;
     }
     // no special final code
@@ -273,7 +273,7 @@ bool EffectsHandlerImpl::provides(Effect::Feature ef)
 void EffectsHandlerImpl::drawWindow(EffectWindow* w, int mask, QRegion region, WindowPaintData& data)
 {
     if (current_draw_window < loaded_effects.size()) {
-        loaded_effects[current_draw_window++].second->drawWindow(w, mask, region, data);
+        loaded_effects.at(current_draw_window++).second->drawWindow(w, mask, region, data);
         --current_draw_window;
     } else
         scene->finalDrawWindow(static_cast<EffectWindowImpl*>(w), mask, region, data);
@@ -282,7 +282,7 @@ void EffectsHandlerImpl::drawWindow(EffectWindow* w, int mask, QRegion region, W
 void EffectsHandlerImpl::buildQuads(EffectWindow* w, WindowQuadList& quadList)
 {
     if (current_build_quads < loaded_effects.size()) {
-        loaded_effects[current_build_quads++].second->buildQuads(w, quadList);
+        loaded_effects.at(current_build_quads++).second->buildQuads(w, quadList);
         --current_build_quads;
     }
 }
diff --git a/kwin/geometry.cpp b/kwin/geometry.cpp
--- a/kwin/geometry.cpp
+++ b/kwin/geometry.cpp
@@ -2153,9 +2153,10 @@ void Client::setMaximize(bool vertically, bool horizontally)
         clientGroup()->updateStates(this);
 }
 
+static bool changeMaximizeRecursion = false;
 void Client::changeMaximize(bool vertical, bool horizontal, bool adjust)
 {
-    if (!isMaximizable())
+    if (!isMaximizable() || changeMaximizeRecursion)
         return;
 
     MaximizeMode old_mode = max_mode;
@@ -2186,8 +2187,13 @@ void Client::changeMaximize(bool vertical, bool horizontal, bool adjust)
     else
         clientArea = workspace()->clientArea(MaximizeArea, this);
 
-    if (options->borderlessMaximizedWindows())
+    if (options->borderlessMaximizedWindows()) {
+        // triggers a maximize change.
+        // The next setNoBorder interation will exit since there's no change but the first recursion pullutes the restore/pretile geometry
+        changeMaximizeRecursion = true;
         setNoBorder(app_noborder || max_mode == MaximizeFull);
+        changeMaximizeRecursion = false;
+    }
 
     // save sizes for restoring, if maximalizing
     if (!adjust && !(old_mode & MaximizeVertical)) {
diff --git a/kwin/kcmkwin/kwinrules/ruleswidget.cpp b/kwin/kcmkwin/kwinrules/ruleswidget.cpp
--- a/kwin/kcmkwin/kwinrules/ruleswidget.cpp
+++ b/kwin/kcmkwin/kwinrules/ruleswidget.cpp
@@ -116,6 +116,11 @@ RulesWidget::RulesWidget(QWidget* parent)
     SETUP(strictgeometry, force);
     SETUP(disableglobalshortcuts, force);
     SETUP(blockcompositing, force);
+
+    connect (title_match, SIGNAL(currentIndexChanged(int)), SLOT(titleMatchChanged()));
+    connect (extra_match, SIGNAL(currentIndexChanged(int)), SLOT(extraMatchChanged()));
+    connect (machine_match, SIGNAL(currentIndexChanged(int)), SLOT(machineMatchChanged()));
+
     int i;
     for (i = 1;
             i <= KWindowSystem::numberOfDesktops();
diff --git a/kwin/manage.cpp b/kwin/manage.cpp
--- a/kwin/manage.cpp
+++ b/kwin/manage.cpp
@@ -316,7 +316,7 @@ bool Client::manage(Window w, bool isMapped)
     if (!noBorder()) {
         client_group = NULL;
         // Automatically add to previous groups on session restore
-        if (session && session->clientGroupClient && session->clientGroupClient != this)
+        if (session && session->clientGroupClient && session->clientGroupClient != this && session->clientGroupClient->clientGroup())
             session->clientGroupClient->clientGroup()->add(this, -1, true);
         else if (isMapped)
             // If the window is already mapped (Restarted KWin) add any windows that already have the
