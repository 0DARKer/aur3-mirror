Desription: change type of count of bytes from 'long' to 'unsigned long long'
 According to bug #692214 there is an overflow when trying to process
 10000000000 (>2.147.483.647) bytes. The error occurs after about 30min.
 As there is a type 'unsigned long long' in C99 now, I use this type to 
 lengthen the time before the overflow will be reached. The affected computer
 should reach it after 50000days now.
 I am open for other suggestions.
Author: Thorsten Alteholz <debian@alteholz.de>

Index: ent/ent.c
===================================================================
--- ent.orig/ent.c	2012-11-07 10:26:13.000000000 +0100
+++ ent/ent.c	2012-11-07 10:30:40.000000000 +0100
@@ -119,8 +119,8 @@
 int main(int argc, char *argv[])
 {
 	int i, oc, opt;
-	long ccount[256];	      /* Bins to count occurrences of values */
-	long totalc = 0;	      /* Total character count */
+	unsigned long long ccount[256];/* Bins to count occurrences of values */
+	unsigned long long totalc = 0; /* Total character count */
 	char *samp;
 	double a, montepi, chip,
 	       scc, ent, mean, chisq;
@@ -206,7 +210,7 @@
 	if (terse) {
            V printf("0,File-%ss,Entropy,Chi-square,Mean,Monte-Carlo-Pi,Serial-Correlation\n",
               binary ? "bit" : "byte");
-           V printf("1,%ld,%f,%f,%f,%f,%f\n",
+           V printf("1,%lld,%f,%f,%f,%f,%f\n",
 	      totalc, ent, chisq, mean, montepi, scc);
 	}
 
@@ -232,11 +236,11 @@
 	   }
 	   for (i = 0; i < (binary ? 2 : 256); i++) {
 	      if (terse) {
-                 V printf("3,%d,%ld,%f\n", i,
+                 V printf("3,%d,%lld,%f\n", i,
 		    ccount[i], ((double) ccount[i] / totalc));
 	      } else {
 		 if (ccount[i] > 0) {
-                    V printf("%3d   %c   %10ld   %f\n", i,
+                    V printf("%3d   %c   %10lld   %f\n", i,
 		       /* The following expression shows ISO 8859-1
 			  Latin1 characters and blanks out other codes.
 			  The test for ISO space replaces the ISO
@@ -251,7 +255,7 @@
 	      }
 	   }
 	   if (!terse) {
-              V printf("\nTotal:    %10ld   %f\n\n", totalc, 1.0);
+              V printf("\nTotal:    %10lld   %f\n\n", totalc, 1.0);
 	   }
 	}
 
@@ -260,11 +264,11 @@
 	if (!terse) {
            V printf("Entropy = %f bits per %s.\n", ent, samp);
            V printf("\nOptimum compression would reduce the size\n");
-           V printf("of this %ld %s file by %d percent.\n\n", totalc, samp,
+           V printf("of this %lld %s file by %d percent.\n\n", totalc, samp,
 		    (short) ((100 * ((binary ? 1 : 8) - ent) /
 			      (binary ? 1.0 : 8.0))));
 	   V printf(
-              "Chi square distribution for %ld samples is %1.2f, and randomly\n",
+              "Chi square distribution for %lld samples is %1.2f, and randomly\n",
 	      totalc, chisq);
            V printf("would exceed this value %1.2f percent of the times.\n\n",
 	      chip * 100);
Index: ent/randtest.c
===================================================================
--- ent.orig/randtest.c	2012-11-07 10:30:40.000000000 +0100
+++ ent/randtest.c	2012-11-07 10:31:58.000000000 +0100
@@ -15,8 +15,8 @@
 
 static int binary = FALSE;	   /* Treat input as a bitstream */
 
-static long ccount[256],	   /* Bins to count occurrences of values */
-	    totalc = 0; 	   /* Total bytes counted */
+static unsigned long long ccount[256],/* Bins to count occurrences of values */
+	    totalc = 0;		      /* Total bytes counted */
 static double prob[256];	   /* Probabilities per bin for entropy */
 
 #define MONTEN	6		      /* Bytes used as Monte Carlo
