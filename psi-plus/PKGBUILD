# Contributor: Joker-jar <joker-jar@yandex.ru>

pkgname="psi-plus"
pkgver=0.15
pkgrel=20
pkgdesc="Psi+ is a powerful Jabber client (Qt, C++) designed for the Jabber power users"
url="http://psi-plus.com"
license=('GPL2')
arch=('i686' 'x86_64')
depends=('qt' 'qca' 'qca-ossl' 'qca-gnupg' 'aspell' 'libxss' 'openssl' 'dbus' 'zlib')
makedepends=('subversion' 'git' 'patch' 'qconf')
conflicts=('psi' 'psi-svn' 'psi-git' 'psi-plus-svn')
provides=('psi+' 'psi-plus-svn' 'psi')
# Plugins list. Includes certain plugins
# * - include all plugins
# Available plugins: attentionplugin, autoreplyplugin, birthdayreminderplugin, captchaformsplugin,
#                    chessplugin, cleanerplugin, clientswitcherplugin, conferenceloggerplugin,
#                    contentdownloaderplugin, extendedmenuplugin, extendedoptionsplugin, gmailserviceplugin,
#                    gomokugameplugin, historykeeperplugin, icqdieplugin, imageplugin,
#                    jabberdiskplugin, juickplugin, pepchangenotifyplugin, pstoplugin, qipxstatusesplugin,
#                    screenshotplugin, skinsplugin, stopspamplugin, storagenotesplugin,
#                    translateplugin, videostatusplugin, watcherplugin
# Example: plugins_list="imageplugin translateplugin"
# includes only imageplugin and translateplugin to package
plugins_list="*"
# Use WebKit (http://psi-plus.com/wiki/doku.php/webkit)
# CAUTION: webkit is EXPERIMENTAL feature! Use it at your own risk!
# values: (0|1)
usewebkit=0
 
build() {
        
  cd $srcdir
  
  PSI_DIR=$srcdir
  
  ICONSETS="system clients activities moods affiliations roster"
  
  WORK_OFFLINE=0
  
  PATCH_LOG="${PSI_DIR}/psipatch.log"
  
  SKIP_INVALID_PATCH=1
  
  CONF_OPTS=""
  [ $usewebkit -eq "1" ] && CONF_OPTS="${CONF_OPTS} --enable-webkit"
  
  INSTALL_ROOT=$pkgdir
    
  PLUGINS=$plugins_list
  
  # checkout libpsibuild
  msg "Checking for a new version of libpsibuild.sh..."
  scripts_repo="http://psi-dev.googlecode.com/svn/trunk/scripts/posix"
  librevraw=`svn ls -v ${scripts_repo}/libpsibuild.sh`
  librev=`echo $librevraw | cut -f 1 -d ' '`
  [ ! -f libpsibuild_r${librev}.sh ] && {
    msg "Updating libpsibuild..."
    #rm libpsibuild_r*.sh 2>/dev/null
    svn cat ${scripts_repo}/libpsibuild.sh > libpsibuild_r${librev}.sh
    [ ! -f libpsibuild_r${librev}.sh ] && {
      msg "can't update libpsibuild.sh"
      exit 1
    }
  }
  
  . ./libpsibuild_r${librev}.sh
  
  MAKEOPT=${MAKEOPT:--j$((`cat /proc/cpuinfo | grep processor | wc -l`+1))}
  STAT_USER_ID='stat -c %u'
  STAT_USER_NAME='stat -c %U'
  SED_INPLACE_ARG=""
  COMPILE_PREFIX="/usr"
  MAKE="make"

  PATCH_DRYRUN_ARG="--dry-run"
  QMAKE="qmake"
  QCONF="qconf"
    
  # Plugins
  plugins_enabled=0
  case "${CONF_OPTS}" in *--enable-plugins*) plugins_enabled=1; ;; *) ;; esac

  [ -n "${PLUGINS}" ] && [ "${plugins_enabled}" = 0 ] && {
    echo "WARNING: there are selected plugins but plugins are disabled in"
    echo "configuration options. no one will be built"
    PLUGINS=""
  } || {
    local plugins_tmp=""
    [ "$PLUGINS" = "*" ] && PLUGINS=`echo $(svn ls ${SVN_BASE_REPO}/plugins/generic | grep 'plugin/' | sed 's:plugin/::')`
    for name in ${PLUGINS}; do
      plugins_tmp="${plugins_tmp} ${name}plugin"
    done
    PLUGINS="${plugins_tmp}"
  }
 
  CONF_OPTS="${CONF_OPTS} --prefix=$COMPILE_PREFIX"
  
  #############
  # Go Go Go! #
  #############
  
  #check_env
  prepare_workspace
  fetch_all
  prepare_all
  compile_all
  install_all

}
