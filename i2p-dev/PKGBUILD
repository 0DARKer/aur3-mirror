# Maintainer: skydrome <skydrome@i2pmail.org>
# Contributor: skydrome <skydrome@i2pmail.org>

########[ OPTIONS ]########################################
## Clone i2p from github
__gitroot="git://github.com/i2p/i2p.i2p.git"

## Clone i2p through i2p
# Add and Start a new Standard client tunnel with the following settings:
#   Name: pull.git.repo.i2p
#   Port: 9450  or some other unused port
#   Tunnel Destination: 3so7htzxzz6h46qvjm3fbd735zl3lrblerlj2xxybhobublcv67q.b32.i2p
#__gitroot="git://127.0.0.1:9450/i2p.i2p.git"

####[ BUILD OPTIONS ]####
# Build multi language translations
_multilang=0

## Build current java service wrapper
_build_wrapper=1
_wrapper_ver=3.5.17
###########################################################

pkgname=i2p-dev
pkgver=0.9.4
pkgrel=5
pkgdesc="A distributed anonymous network (daily mtn->git sync)"
url="http://www.i2p2.de"
license=('GPL2')
arch=('x86_64' 'i686' 'armv6h')
depends=('java-environment' 'gmp' 'bash' 'libxtst' 'schedtool')
makedepends=('apache-ant' 'git')
[[ "$_multilang" = 1 ]] && depends+=('gettext')
optdepends=('gtk2: for rrd graphs')
conflicts=('i2p' 'i2p-bin' 'i2p-portable' 'i2p-portable-source')
provides=('i2p')
backup=('opt/i2p/wrapper.config'
        'opt/i2p/clients.config'
        'opt/i2p/i2psnark.config'
        'opt/i2p/i2ptunnel.config'
        'opt/i2p/i2prouter')
install='i2p.install'
source=('i2prouter.service' 'schedtool.patch')
sha256sums=('b6939bb58275e67ecc23990d4bc4062987861da482e4b7a92f8be186ca5383f1'
            'e001698938d68f075456ecce80c7778d6895a50c5917aeb81c1bdbd4d99ac8b2')

[[ "$_build_wrapper" = 1 ]] && {
    source+=("https://wrapper.tanukisoftware.com/download/${_wrapper_ver}/wrapper_${_wrapper_ver}_src.tar.gz")
    sha256sums+=('e4432fdef6cfc1d19d8571429c8554748ec21ffa9fecabd464f5f12ec5160f9b')
}

build_jbigi() {
    msg "Building libjbigi..."
    cd ${srcdir}/i2p.i2p/core/c/jbigi
    rm -rf lib; mkdir -p lib
    CFLAGS+=" -fPIC -Wall"
    INCLUDES="-I./jbigi/include -I${JAVA_HOME}/include -I${JAVA_HOME}/include/linux"
    LDFLAGS+=" -shared -Wl,-soname,libjbigi.so"
    echo "${CC} -c ${CFLAGS} ${INCLUDES} jbigi/src/jbigi.c"
    ${CC} -c ${CFLAGS} ${INCLUDES} jbigi/src/jbigi.c
    echo "${CC} ${LDFLAGS} ${INCLUDES} -o lib/libjbigi.so jbigi.o -lgmp"
    ${CC} ${LDFLAGS} ${INCLUDES} -o lib/libjbigi.so jbigi.o -lgmp
    install -Dm644 lib/libjbigi.so "${srcdir}/i2p.i2p/pkg-temp/lib/libjbigi.so"
}
build_jcpuid() {
if [[ "$CARCH" != @(arm)* ]]; then
    msg "Building libjcpuid..."
    cd ${srcdir}/i2p.i2p/core/c/jcpuid
    rm -rf lib; mkdir -p lib
    CFLAGS+=" -fPIC -Wall"
    INCLUDES="-I./include -I${JAVA_HOME}/include -I${JAVA_HOME}/include/linux"
    LDFLAGS+=" -shared -Wl,-soname,libjcpuid-${CARCH}-linux.so"
    echo "${CC} ${CFLAGS} ${LDFLAGS} ${INCLUDES} src/jcpuid.c -o lib/libjcpuid-${CARCH}-linux.so"
    ${CC} ${CFLAGS} ${LDFLAGS} ${INCLUDES} src/jcpuid.c -o lib/libjcpuid-${CARCH}-linux.so
    install -Dm644 lib/libjcpuid-${CARCH}-linux.so "${srcdir}/i2p.i2p/pkg-temp/lib/libjcpuid.so"
fi
}

build() {
    cd "$srcdir"
    if [[ -d "i2p.i2p/.git" ]]; then
        msg "Cleaning repo..."
        cd "i2p.i2p"
        git clean -xdf 2&>/dev/null
        git pull --depth 1
        msg "The local repository was updated."
    else
        msg "Connecting to GIT server..."
        git clone --depth 1 ${__gitroot}
        cd "i2p.i2p"
        msg "The remote repository was cloned."
    fi

    [[ "$_multilang" = 0 ]] &&
        sed 's:require.gettext=true:require.gettext=false:' -i build.properties

CC=${CC:-gcc}
source /etc/profile.d/apache-ant.sh
    patch -uNp0 -i ${srcdir}/schedtool.patch
    ant preppkg-linux
    build_jbigi
    build_jcpuid

    if [[ "$_build_wrapper" = 1 ]]; then
        msg "Building java wrapper..."
        cd "${srcdir}/wrapper_${_wrapper_ver}_src"
        sed 's:value="1.4":value="1.6":' -i build.xml
        [[ "$CARCH" = "x86_64" ]] && _arch=64 || _arch=32
        ./build${_arch}.sh
    fi
}

package() {
    cd "$srcdir/i2p.i2p"
    install -dm755   ${pkgdir}/opt/i2p
    cp -r pkg-temp/* ${pkgdir}/opt/i2p

    sed -i $pkgdir/opt/i2p/{i2prouter,runplain.sh,eepget,wrapper.config} \
        -e 's:%INSTALL_PATH:/opt/i2p:g' \
        -e 's:$INSTALL_PATH:/opt/i2p:' \
        -e 's:%USER_HOME:$I2P:' \
        -e 's:%SYSTEM_java_io_tmpdir:/tmp:g' \
        -e 's:$SYSTEM_java_io_tmpdir:/tmp:g' \
        -e "s:#RUN_AS_USER=.*:RUN_AS_USER=i2p:"
    sed -i $pkgdir/opt/i2p/clients.config \
        -e "s:clientApp.4.startOnLoad=.*:clientApp.4.startOnLoad=false:"
    echo 'router.updateDisabled=true' >${pkgdir}/opt/i2p/router.config

    install -Dm644 ${srcdir}/i2prouter.service       "${pkgdir}/usr/lib/systemd/system/i2prouter.service"
    install -Dm644 ${pkgdir}/opt/i2p/man/eepget.1    "${pkgdir}/usr/share/man/man1/eepget.1"
    install -Dm644 ${pkgdir}/opt/i2p/man/i2prouter.1 "${pkgdir}/usr/share/man/man1/i2prouter.1"
    install -Dm644 ${pkgdir}/opt/i2p/LICENSE.txt "${pkgdir}/usr/share/licenses/i2p/LICENSE"
    mv ${pkgdir}/opt/i2p/licenses/*  "${pkgdir}/usr/share/licenses/i2p/"

    if [[ "$_build_wrapper" = 1 ]]; then
        cd "$srcdir/wrapper_${_wrapper_ver}_src"
        install -m755 bin/wrapper       "${pkgdir}/opt/i2p/i2psvc"
        install -m644 lib/wrapper.jar   "${pkgdir}/opt/i2p/lib/wrapper.jar"
        install -m644 lib/libwrapper.so "${pkgdir}/opt/i2p/lib/libwrapper.so"
    else
        cd "${srcdir}/i2p.i2p/installer/lib/wrapper/all"
        wrapperpath="$pkgdir/opt/i2p/lib/wrapper/linux"
        [[ "$CARCH" = 'x86_64' ]] && wrapperpath+=64
        [[ "$CARCH" = 'armv6h' ]] && wrapperpath+=-armv6
        install -m644 wrapper.jar                "${pkgdir}/opt/i2p/lib/wrapper.jar"
        install -m644 $wrapperpath/libwrapper.so "${pkgdir}/opt/i2p/lib/libwrapper.so"
        install -m644 $wrapperpath/i2psvc        "${pkgdir}/opt/i2p/i2psvc"
    fi

    rm -r ${pkgdir}/opt/i2p/{osid,postinstall.sh,INSTALL-headless.txt,licenses,man,lib/wrapper}
    chmod +x ${pkgdir}/opt/i2p/{eepget,i2prouter}
}
