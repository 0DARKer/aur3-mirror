diff -rupN stjerm-0.14.orig//src/config.c stjerm-0.14/src/config.c
--- stjerm-0.14.orig//src/config.c	2010-08-24 19:07:50.000000000 +0200
+++ stjerm-0.14/src/config.c	2010-10-03 21:44:10.000000000 +0200
@@ -55,6 +55,7 @@ static int _fixedx;
 static int _fixedy;
 static int _scrollpos;
 static char _shell[200];
+static char _emulation[200];
 static int _lines;
 static int _showtab;
 static char _termname[200];
@@ -96,6 +97,7 @@ int conf_get_height(void);
 void conf_get_position(int*, int*);
 int conf_get_scrollbar(void);
 char* conf_get_shell(void);
+char* conf_get_emulation(void);
 int conf_get_lines(void);
 int conf_get_show_tab(void);
 char* conf_get_term_name(void);
@@ -126,6 +128,7 @@ Option options[OPTION_COUNT] = {
     {"position", "-p", "POSITION", "Window position: top, bottom, left, right. Default: top."},
     {"scrollbar", "-s", "POSITION", "Scrollbar position: left, right, none. Default: none."},
     {"shell", "-sh", "STRING", "Terminal Shell. Default: the user's default shell."},
+    {"emulation", "-e", "STRING", "Terminal Emulation. Default: xterm"},
     {"lines", "-l", "NUMBER", "Scrollback lines. 0 to disable scrollback. Default: 1000."},
     {"showtab", "-st", "VALUE", "Tabbar visibility (one: only visible when > 1 tabs): never, one, always."},
     {"tabpos", "-tp", "POSITION", "Tabbar position: top, bottom, left, right. Default: bottom."},
@@ -309,6 +312,7 @@ void init_default_values(void)
     _mod = 0;
     _key = 0;
     strcpy(_shell, getpwuid(getuid())->pw_shell);
+    strcpy(_emulation, "xterm");
     _lines = 1000;
     _showtab = TABS_ONE;
     _tabpos = GTK_POS_BOTTOM;
@@ -379,6 +383,8 @@ void read_value(char *name, char *value)
             set_key(value);
         else if(!strcmp("shell", name) || !strcmp("-sh", name))
             strcpy(_shell, value);
+        else if(!strcmp("emulation", name) || !strcmp("-e", name))
+            strcpy(_emulation, value);
         else if(!strcmp("lines", name) || !strcmp("-bl", name))
             _lines = atoi(value);
         else if(!strcmp("showtab", name) || !strcmp("-st", name))
@@ -734,6 +740,11 @@ char* conf_get_shell(void)
     return _shell;
 }
 
+char* conf_get_emulation(void)
+{
+    return _emulation;
+}
+
 int conf_get_lines(void)
 {
     return _lines;
diff -rupN stjerm-0.14.orig//src/stjerm.h stjerm-0.14/src/stjerm.h
--- stjerm-0.14.orig//src/stjerm.h	2010-08-24 19:07:50.000000000 +0200
+++ stjerm-0.14/src/stjerm.h	2010-10-03 21:44:10.000000000 +0200
@@ -53,7 +53,7 @@
 #define TABS_ONE    1
 #define TABS_ALWAYS 2
 
-#define OPTION_COUNT 26
+#define OPTION_COUNT 27
 
 
 // The following defines borrowed from gnome-terminal:
@@ -135,6 +135,7 @@ extern int conf_get_height(void);
 extern void conf_get_position(int*, int*);
 extern int conf_get_scrollbar(void);
 extern char* conf_get_shell(void);
+extern char* conf_get_emulation(void);
 extern int conf_get_lines(void);
 extern int conf_get_show_tab(void);
 extern char* conf_get_term_name(void);
diff -rupN stjerm-0.14.orig//src/term.c stjerm-0.14/src/term.c
--- stjerm-0.14.orig//src/term.c	2010-08-24 19:07:50.000000000 +0200
+++ stjerm-0.14/src/term.c	2010-10-03 21:44:10.000000000 +0200
@@ -34,7 +34,8 @@ static void term_connect_signals(GtkWidg
 static gboolean term_button_press(GtkWidget*, GdkEventButton*, gpointer);
 static void term_eof_or_child_exited(VteTerminal*, gpointer);
 static void term_app_request(VteTerminal*, gpointer);
-static void term_app_request_resize_move(VteTerminal*, guint, guint, gpointer);
+//static void term_app_request_resize_move(VteTerminal*, guint, guint, gpointer);
+static void term_fork_command(VteTerminal*, char*);
 
 GtkWidget* build_term(void)
 {
@@ -43,8 +44,7 @@ GtkWidget* build_term(void)
 
     GtkWidget* term = vte_terminal_new();
 
-    vte_terminal_fork_command(VTE_TERMINAL(term), conf_get_shell(), NULL, NULL,
-        "", TRUE, TRUE, TRUE);
+    term_fork_command(VTE_TERMINAL(term), conf_get_shell());
     
     if (conf_get_bg_image() != NULL)
         vte_terminal_set_background_image_file(VTE_TERMINAL(term), conf_get_bg_image());
@@ -59,6 +59,10 @@ GtkWidget* build_term(void)
     else
         vte_terminal_set_colors(VTE_TERMINAL(term), &fore, &back, palette, 16);
     
+    #if VTE_CHECK_VERSION(0,25,0)
+    vte_pty_set_term(vte_terminal_get_pty_object(VTE_TERMINAL(term)), conf_get_emulation());
+    #endif
+    
     vte_terminal_set_background_tint_color(VTE_TERMINAL(term), &back);
 
     vte_terminal_set_allow_bold(VTE_TERMINAL(term), conf_get_allow_bold());
@@ -100,10 +104,10 @@ static void term_connect_signals(GtkWidg
         G_CALLBACK(term_app_request), (gpointer)TERM_RESTORE_WINDOW);
     g_signal_connect(G_OBJECT(term), "refresh-window",
         G_CALLBACK(term_app_request), (gpointer)TERM_REFRESH_WINDOW);
-    g_signal_connect(G_OBJECT(term), "resize-window",
+    /*g_signal_connect(G_OBJECT(term), "resize-window",
         G_CALLBACK(term_app_request_resize_move), (gpointer)TERM_RESIZE_WINDOW);
     g_signal_connect(G_OBJECT(term), "move-window",
-        G_CALLBACK(term_app_request_resize_move), (gpointer)TERM_MOVE_WINDOW);
+        G_CALLBACK(term_app_request_resize_move), (gpointer)TERM_MOVE_WINDOW);*/
 }
 
 static CursorMatch term_cursor_match_pattern(GdkEventButton* event)
@@ -156,8 +160,7 @@ static void term_eof_or_child_exited(Vte
     {
         /* restart the terminal if it crashed */
         vte_terminal_reset(VTE_TERMINAL(term), FALSE, TRUE);
-        vte_terminal_fork_command(VTE_TERMINAL(term), conf_get_shell(), NULL, NULL,
-            "", TRUE, TRUE, TRUE);
+        term_fork_command(VTE_TERMINAL(term), conf_get_shell());
     }
     else
     {
@@ -199,9 +202,11 @@ static void term_app_request(VteTerminal
     }
 }
 
-static void term_app_request_resize_move(VteTerminal *term, guint x, guint y,
+/*static void term_app_request_resize_move(VteTerminal *term, guint x, guint y,
     gpointer user_data)
 {
+    // FIXME I can't get this function to call. It may be unused?
+    
     int event = GPOINTER_TO_INT(user_data);
 
     if(event == TERM_RESIZE_WINDOW)
@@ -209,10 +214,13 @@ static void term_app_request_resize_move
         gint owidth, oheight, xpad, ypad;
 
         gtk_window_get_size(GTK_WINDOW(mainwindow), &owidth, &oheight);
-        owidth -= term->char_width * term->column_count;
-        oheight -= term->char_height * term->row_count;
-
-        vte_terminal_get_padding(term, &xpad, &ypad);
+        owidth -= vte_terminal_get_char_width(term) * 
+            vte_terminal_get_column_count(term);
+        oheight -= vte_terminal_get_char_height(term) * 
+            vte_terminal_get_row_count(term);
+        
+        vte_terminal_get_padding(term, &xpad, &ypad);=
+        
         owidth -= xpad;
         oheight -= ypad;
         gtk_window_resize(GTK_WINDOW(mainwindow), x+owidth, y+oheight);
@@ -220,5 +228,20 @@ static void term_app_request_resize_move
     
     if(event == TERM_MOVE_WINDOW)
         gdk_window_move(GTK_WIDGET(mainwindow)->window, x, y);
+}*/
+
+static void term_fork_command(VteTerminal *term, char *cmd)
+{
+    #if VTE_CHECK_VERSION(0,25,0)
+    char **argv = NULL;
+    
+    g_shell_parse_argv(cmd, NULL, &argv, NULL);
+    
+    vte_terminal_fork_command_full(term, VTE_PTY_DEFAULT, NULL, argv, NULL, 
+        G_SPAWN_CHILD_INHERITS_STDIN|G_SPAWN_SEARCH_PATH|G_SPAWN_FILE_AND_ARGV_ZERO,
+        NULL, NULL, NULL, NULL);
+    #else
+    vte_terminal_fork_command(term, cmd, NULL, NULL, "", TRUE, TRUE, TRUE);
+    #endif
 }
 
