diff -Naurp a/engine/factory.py b/engine/factory.py
--- a/engine/factory.py	2014-01-22 23:30:11.369253419 -0430
+++ b/engine/factory.py	2014-01-22 23:31:22.595917253 -0430
@@ -69,7 +69,7 @@ class EngineFactory (IBus.Factory):
             #return engine.get_dbus_object()
             return engine
         except:
-            print "failed to create engine %s" % engine_name
+            print("failed to create engine %s" % (engine_name, ))
             import traceback
             traceback.print_exc ()
             raise Exception("Cannot create engine %s" % engine_name)
diff -Naurp a/engine/hunspell_suggest.py b/engine/hunspell_suggest.py
--- a/engine/hunspell_suggest.py	2014-01-22 23:30:11.369253419 -0430
+++ b/engine/hunspell_suggest.py	2014-01-22 23:33:29.325912211 -0430
@@ -49,12 +49,13 @@ class Dictionary:
         self.load_dictionary()
 
     def load_dictionary(self):
-        print "load_dictionary() ..."
+        print("load_dictionary() ...")
         dic_path = os.path.join(self.loc, self.name+'.dic')
         aff_path = os.path.join(self.loc, self.name+'.aff')
         if not os.path.isfile(dic_path) or not os.path.isfile(aff_path):
-            print("load_dictionary %(n)s: %(d)s %(a)s file missing."
-                  %{'n': self.name, 'd': dic_path, 'a': aff_path})
+            print("load_dictionary %(n)s: %(d)s %(a)s file missing." % {
+                'n': self.name, 'd': dic_path, 'a': aff_path
+            })
             return
         try:
             aff_buffer = open(aff_path).read().replace('\r\n', '\n')
@@ -64,18 +65,21 @@ class Dictionary:
         if aff_buffer:
             encoding_pattern = re.compile(
                 r'^[\s]*SET[\s]+(?P<encoding>[-a-zA-Z0-9_]+)[\s]*$',
-                re.MULTILINE|re.UNICODE)
+                re.MULTILINE|re.UNICODE
+            )
             match = encoding_pattern.search(aff_buffer)
             if match:
                 self.encoding = match.group('encoding')
-                print "load_dictionary(): encoding=%(enc)s found in %(aff)s" %{
-                    'enc': self.encoding, 'aff': aff_path}
+                print("load_dictionary(): encoding=%(enc)s found in %(aff)s" % {
+                    'enc': self.encoding, 'aff': aff_path
+                })
         try:
             self.buffer = codecs.open(
                 dic_path).read().decode(self.encoding).replace('\r\n', '\n')
         except:
-            print "load_dictionary(): loading %(dic)s as %(enc)s encoding failed, fall back to ISO-8859-1." %{
-                'dic': dic_path, 'enc': self.encoding}
+            print("load_dictionary(): loading %(dic)s as %(enc)s encoding failed, fall back to ISO-8859-1." % {
+                'dic': dic_path, 'enc': self.encoding
+            })
             self.encoding = 'ISO-8859-1'
             try:
                 self.buffer = codecs.open(
diff -Naurp a/engine/hunspell_table.py b/engine/hunspell_table.py
--- a/engine/hunspell_table.py	2014-01-22 23:30:11.369253419 -0430
+++ b/engine/hunspell_table.py	2014-01-22 23:36:56.849237291 -0430
@@ -62,7 +62,7 @@ def variant_to_value(variant):
         else:
             return variant.dup_strv()
     else:
-        print 'error: unknown variant type:', type_string
+        print('error: unknown variant type: %s' % (type_string, ))
     return variant
 
 def argb(a, r, g, b):
@@ -1057,7 +1057,9 @@ class tabengine (IBus.Engine):
     def __config_value_changed_cb(self, config, section, name, value):
         if self.config_section_normalize(self._config_section) != self.config_section_normalize(section):
             return
-        print "config value %(n)s for engine %(en)s changed" %{'n': name, 'en': self._name}
+        print("config value %(n)s for engine %(en)s changed" % {
+            'n': name, 'en': self._name
+        })
         value = variant_to_value(value)
         if name == "tabenable":
             if value == 1:
@@ -1091,20 +1093,20 @@ class tabengine (IBus.Engine):
             if value in self._editor._supported_imes:
                 self._editor._current_ime = value
                 if value != 'NoIme':
-                    print "Switching to transliteration using  ime=%s" %value
+                    print("Switching to transliteration using  ime=%s" % (value, ))
                     self._editor.trans_m17n_mode = True
                     self._editor.trans = Transliterator.get(self._editor._m17ndb, value)
                 else:
-                    print "Switching off transliteration."
+                    print("Switching off transliteration.")
                     self._editor.trans_m17n_mode = False
             else:
-                print "error: trying to set unsupported ime: ", value
+                print("error: trying to set unsupported ime: %s" % (value, ))
             self.reset()
             return
         if name == "dictionaryinstalltimestamp":
             # A dictionary has bin updated or installed,
             # (re)load all dictionaries:
-            print "Reloading dictionaries ..."
+            print("Reloading dictionaries...")
             self.db.hunspell_obj.load_dictionaries()
             self.reset()
             return
diff -Naurp a/engine/main.py b/engine/main.py
--- a/engine/main.py	2014-01-22 23:30:11.369253419 -0430
+++ b/engine/main.py	2014-01-22 23:31:52.809249384 -0430
@@ -22,7 +22,7 @@ import optparse
 from gi.repository import IBus
 from gi.repository import GLib
 import re
-patt = re.compile (r'<\?.*\?>\n')
+patt = re.compile(r'<\?.*\?>\n')
 from signal import signal, SIGTERM, SIGINT
 
 import factory
@@ -30,8 +30,14 @@ import tabsqlitedb
 
 
 try:
-    config_file_dir = os.path.join (os.getenv('IBUS_TYPING_BOOSTER_LOCATION'),'hunspell-tables')
-    icon_dir = os.path.join (os.getenv('IBUS_TYPING_BOOSTER_LOCATION'),'icons')
+    config_file_dir = os.path.join(
+        os.getenv('IBUS_TYPING_BOOSTER_LOCATION'),
+        'hunspell-tables'
+    )
+    icon_dir = os.path.join(
+        os.getenv('IBUS_TYPING_BOOSTER_LOCATION'),
+        'icons'
+    )
 except:
     config_file_dir = "/usr/share/ibus-typing-booster/hunspell-tables"
     icon_dir = "/usr/share/ibus-typing-booster/icons"
@@ -68,7 +74,7 @@ if (not options.xml) and options.debug:
     sys.stdout = open (logfile,'a',0)
     sys.stderr = open (logfile,'a',0)
     from time import strftime
-    print '--- ', strftime('%Y-%m-%d: %H:%M:%S'), ' ---'
+    print('--- ', strftime('%Y-%m-%d: %H:%M:%S'), ' ---')
 
 
 
@@ -127,7 +133,7 @@ class IMApp:
     def __bus_destroy_cb(self, bus=None):
         if self.destroyed:
             return
-        print "finalizing:)"
+        print("finalizing:)")
         self.__factory.do_destroy()
         self.destroyed = True
         self.__mainloop.quit()
@@ -224,7 +230,7 @@ def main():
         indent (egs)
         egsout = tostring (egs, encoding='utf8')
         egsout = patt.sub ('',egsout)
-        print egsout
+        print(egsout)
 
         return 0
 
diff -Naurp a/setup/main.py b/setup/main.py
--- a/setup/main.py	2014-01-22 23:30:11.382586753 -0430
+++ b/setup/main.py	2014-01-22 23:31:22.595917253 -0430
@@ -50,7 +50,7 @@ if options.debug:
     logfile = os.path.expanduser('~/.local/share/ibus-typing-booster/setup-debug.log')
     sys.stdout = open (logfile,'a',0)
     sys.stderr = open (logfile,'a',0)
-    print '--- ', strftime('%Y-%m-%d: %H:%M:%S'), ' ---'
+    print('--- ', strftime('%Y-%m-%d: %H:%M:%S'), ' ---')
 
 from gi.repository import Gtk
 from gi.repository import Gdk
diff -Naurp a/setup/user_transliteration.py b/setup/user_transliteration.py
--- a/setup/user_transliteration.py	2014-01-22 23:30:11.382586753 -0430
+++ b/setup/user_transliteration.py	2014-01-22 23:35:45.469240130 -0430
@@ -104,21 +104,24 @@ class LatinConvert:
             match = encoding_pattern.search(aff_buffer)
             if match:
                 encoding = match.group('encoding')
-                print "load_dictionary(): encoding=%(enc)s found in %(aff)s" %{
-                    'enc': encoding, 'aff': self.aff_file}
+                print("load_dictionary(): encoding=%(enc)s found in %(aff)s" % {
+                    'enc': encoding, 'aff': self.aff_file
+                })
         try:
             dict_buffer = codecs.open(
                 self.hunspell_dict).read().decode(encoding).replace('\r\n', '\n')
         except:
-            print "load_dictionary(): loading %(dic)s as %(enc)s encoding failed, fall back to ISO-8859-1." %{
-                'dic': self.hunspell_dict, 'enc': encoding}
+            print("load_dictionary(): loading %(dic)s as %(enc)s encoding failed, fall back to ISO-8859-1." % {
+                'dic': self.hunspell_dict, 'enc': encoding
+            })
             encoding = 'ISO-8859-1'
             try:
                 dict_buffer = codecs.open(
                     self.hunspell_dict).read().decode(encoding).replace('\r\n', '\n')
             except:
-                print "load_dictionary(): loading %(dic)s as %(enc)s encoding failed, giving up." %{
-                    'dic': self.hunspell_dict, 'enc': encoding}
+                print("load_dictionary(): loading %(dic)s as %(enc)s encoding failed, giving up." % {
+                    'dic': self.hunspell_dict, 'enc': encoding
+                })
         if dict_buffer[0] == u'\ufeff':
             dict_buffer = dict_buffer[1:]
         return dict_buffer
@@ -135,7 +138,7 @@ class LatinConvert:
         try:
             return self.trans.transliterate(word)[0]
         except:
-            print "Error while transliteration"
+            print("Error while transliteration")
 
     def remove_accent(self,word):
         word = word.decode('utf-8')
