# Maintainer: ET:Legacy Team <mail@etlegacy.com>
#
# Note about 64 bits support
# - Full 64 bits ET:Legacy clients can only connect to ET:Legacy servers.
# - For compatibility reason with W:ET 2.60b servers (32 bits), ET:Legacy should be cross-compiled for 32 bits.
# - Omni-Bot support requires 32 bits
# 32 bits cross-compilation
# - requires [multilib] enabled
# - requires multilib-devel
# other optional deps
# - (32 bits): 'openal' 'ncurses' 'freetype2'
# - (64 bits): 'lib32-openal' 'lib32-ncurses' 'lib32-freetype2'

LUA51=false
FULL64=false

pkgname=etlegacy-git
pkgver=v2.71rc3.745.g5faf4c5
pkgrel=1
pkgdesc="Wolfenstein: Enemy Territory 2.60b fully compatible client/server"
arch=('i686' 'x86_64')
url="http://www.etlegacy.com/"
license=('GPL3')
if [[ "$CARCH" == "i686" || "$FULL64" == 'true' ]]; then
    depends=('enemy-territory-data' 'alsa-lib' 'curl' 'gcc-libs' 'glew' 'libjpeg' 'libvorbis' 'sdl')
    [[ "$LUA51" == 'true' ]] && depends+=('lua51') || depends+=('lua')
    optdepends=('libtxc_dxtn: S3 Texture Compression (S3TC) library for Mesa')
else
    depends=('enemy-territory-data' 'lib32-alsa-lib' 'lib32-curl' 'lib32-gcc-libs' 'lib32-glew' 'lib32-libjpeg' 'lib32-libvorbis' 'lib32-sdl')
    [[ "$LUA51" == 'true' ]] && depends+=('lib32-lua51') || depends+=('lib32-lua')
    optdepends=('lib32-libtxc_dxtn: S3 Texture Compression (S3TC) library for Mesa')
fi
makedepends=('git' 'cmake' 'zip')
provides=('etlegacy' 'etlegacy-mod')
conflicts=('etlegacy' 'etlegacy-mod')
backup=('etc/xdg/etlegacy/etmain/etl_server.cfg'
        'etc/xdg/etlegacy/etmain/legacy.cfg'
        'etc/xdg/etlegacy/etmain/campaigncycle.cfg'
        'etc/xdg/etlegacy/etmain/lmscycle.cfg'
        'etc/xdg/etlegacy/etmain/mapvotecycle.cfg'
        'etc/xdg/etlegacy/etmain/objectivecycle.cfg')
options=(!strip)
install=etlegacy.install
source=('git://github.com/etlegacy/etlegacy.git')
md5sums=('SKIP')
_gitname=etlegacy

pkgver() {
    cd "$srcdir/$_gitname"
    git describe --always | sed 's/-/./g'
}

prepare() {
    # cleanup
    [[ -e "$HOME/.etlegacy/legacy" ]] && cd $HOME/.etlegacy/legacy && rm -f *.so && rm -f *.dat
    cd "$srcdir/$_gitname"
    rm -rf CMakeFiles include legacy glsl
    rm -f etl etlded *.so *.a *.cmake CMakeCache.txt install_manifest.txt

    # update
    cd "$srcdir/$_gitname"
    #git submodule init && git submodule update
}

build() {
    cd "$srcdir/$_gitname"

    # build type and path
    cmakeopts+=(
        "-D CMAKE_BUILD_TYPE=Debug"
        "-D CMAKE_INSTALL_PREFIX=/usr"
        "-D INSTALL_DEFAULT_BASEDIR=/usr/lib/etlegacy"
        "-D INSTALL_DEFAULT_BINDIR=bin"
        "-D INSTALL_DEFAULT_MODDIR=lib/etlegacy"
    )

    # arch && cross-compilation
    if [[ "$CARCH" == "i686" || "$FULL64" == 'true' ]]; then
        cmakeopts+=(
            "-D CMAKE_LIBRARY_PATH=/usr/lib"
            "-D CMAKE_INCLUDE_PATH=/usr/include"
            "-D CROSS_COMPILE32=0"
        )
    else
        cmakeopts+=(
            "-D CMAKE_LIBRARY_PATH=/usr/lib32"
            "-D CMAKE_INCLUDE_PATH=/usr/include"
            "-D CROSS_COMPILE32=1"
        )
    fi

    # lua 5.1 (default is lua 5.2)
    if [[ "$LUA51" == 'true' ]]; then
        if [[ "$CARCH" == "i686" || "$FULL64" == 'true' ]]; then
            cmakeopts+=(
                "-D LUA_EXECUTABLE=/usr/bin/lua5.1"
                "-D LUA_LIBRARIES=/usr/lib/liblua5.1.so"
            )
        else
            cmakeopts+=(
                "-D LUA_EXECUTABLE=/usr/bin/lua5.132"
                "-D LUA_LIBRARIES=/usr/lib32/liblua5.1.so"
            )
        fi
        cmakeopts+=(
            "-D LUA_INCLUDE_DIR=/usr/include/lua5.1"
            "-D LUA_MATH_LIBRARY=m"
        )
    fi

    # options
    cmakeopts+=(
        "-D BUILD_SERVER=1"
        "-D BUILD_CLIENT=1"
        "-D BUILD_MOD=1"
        "-D PANDORA=0"
    )
    # packing
    cmakeopts+=(
        "-D BUILD_MOD_PK3=1"
        "-D BUILD_PAK3_PK3=1"
    )
    # bundled libs
    cmakeopts+=(
        "-D BUNDLED_LIBS=0"
        "-D BUNDLED_SDL=0"
        "-D BUNDLED_CURL=0"
        "-D BUNDLED_JPEG=0"
        "-D BUNDLED_LUA=0"
        "-D BUNDLED_OGG_VORBIS=0"
        "-D BUNDLED_GLEW=0"
        "-D BUNDLED_FREETYPE=0"
    )
    # features
    cmakeopts+=(
        "-D FEATURE_CURL=1"
        "-D FEATURE_OGG_VORBIS=1"
        "-D FEATURE_OPENAL=0"
        "-D FEATURE_FREETYPE=0"
        "-D FEATURE_TRACKER=1"
        "-D FEATURE_LUA=1"
        "-D FEATURE_MULTIVIEW=0"
        "-D FEATURE_ANTICHEAT=1"
        "-D FEATURE_CURSES=0"
        "-D FEATURE_AUTOUPDATE=1"
        "-D FEATURE_RENDERER2=0"
        "-D FEATURE_RENDERER_GLES=0"
        "-D FEATURE_IPV6=0"
        "-D FEATURE_IRC_CLIENT=0"
        "-D RENDERER_DYNAMIC=1"
        "-D FEATURE_WINDOWS_CONSOLE=1"
        "-D FEATURE_CROUCH=0"
        "-D FEATURE_GETTEXT=1"
        "-D FEATURE_OMNIBOT=1"
        "-D INSTALL_OMNIBOT=1"
    )

    cmake ${cmakeopts[@]} .
    make
}

package() {
    cd "$srcdir/$_gitname"

    # engine and mod
    make DESTDIR="$pkgdir/" install

    # assets
    ln -s /usr/share/enemy-territory/etmain/{pak0,pak1,pak2}.pk3 $pkgdir/usr/lib/$_gitname/etmain/

    # doc
    mkdir -p $pkgdir/usr/share/doc/$_gitname
    mv $pkgdir/usr/lib/$_gitname/README.md $pkgdir/usr/share/doc/$_gitname/
    install -m 644 docs/game/anticheat.html $pkgdir/usr/share/doc/$_gitname/

    # license
    mkdir -p $pkgdir/usr/share/licenses/$_gitname
    mv $pkgdir/usr/lib/$_gitname/COPYING.txt $pkgdir/usr/share/licenses/$_gitname/

    # systemd
    mkdir -p $pkgdir/etc/xdg/$_gitname/etmain
    mkdir -p $pkgdir/usr/lib/systemd/system
    install -m 644 misc/etlegacy.conf $pkgdir/etc/xdg/$_gitname/
    install -m 644 misc/etlegacy.service $pkgdir/usr/lib/systemd/system/

    # config
    mv $pkgdir/usr/lib/$_gitname/etmain/*.cfg $pkgdir/etc/xdg/$_gitname/etmain/
    ln -s /etc/xdg/$_gitname/etmain/{etl_server,legacy,{campaign,lms,mapvote,objective}cycle}.cfg $pkgdir/usr/lib/$_gitname/etmain/

    # server
    mkdir -p $pkgdir/var/lib/$_gitname-server
    ln -s /etc/xdg/$_gitname/etmain $pkgdir/var/lib/$_gitname-server/
}

# vim:set ts=4 sw=2 et:
