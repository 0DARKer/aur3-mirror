# Contributor: Filip Brcic <brcha@gna.org>
# Contributor: jellysheep <max DOT mail AT dameweb DOT de>

pkgname=mingw-w64-angleproject-git
pkgver=1.2.0.r2453
pkgrel=1
pkgdesc='Angle project built from git source (mingw-w64)'
arch=('any')
url='http://code.google.com/p/angleproject/'
license=('LGPLv2+')
groups=('mingw-w64')
depends=()
makedepends=('mingw-w64-gcc' 'gyp-svn' 'git')
provides=('mingw-w64-angleproject')
conflicts=('mingw-w64-angleproject')
options=('!strip' '!buildflags' 'staticlibs')
source=('angleproject::git+https://chromium.googlesource.com/angle/angle'
		'angleproject-fix-case-sensitive-include.patch'
		'angleproject-include-import-library-and-use-def-file.patch'
		'angleproject-fix-mingw-compatibility.patch'
		'angleproject-fix-typedefs-for-win64.patch'
		'angleproject-export-shader-symbols.patch'
		'angleproject-fix-trace_event.patch')
md5sums=('SKIP'
		'3c66f4870446b66b4782a37dc580f5ba'
		'97300dafb8960ca17ece0421df63732f'
		'10b197b483a543fcf7e1ae5ec379848f'
		'20272d2b46091f629962f4f597973ff5'
		'079e79c52e83d4f91b7eebf4d350980c'
		'59a3d60f5b1b6676056444db8a7883fe')

_architectures="i686-w64-mingw32 x86_64-w64-mingw32"

pkgver() {
	cd "$srcdir/angleproject"
	head -n 4 src/common/version.h | sed -e 's/BUILD_REVISION /BUILD_REVISION r/' -e 's/.* //' | tr '\n' '.' | sed 's/.$/\n/'
}

build() {
	cd "${srcdir}"/angleproject

	cp src/build_angle.gypi{,.orig}
	# Make sure an import library is created and the correct .def file is used during the build
	patch -p0 -i "${srcdir}"/angleproject-include-import-library-and-use-def-file.patch

	# .def pieces taken from http://qt.gitorious.org/qt/qtbase/commit/b2c44985e740d0a0ea86b7b9f4cc849258ac2340
	patch -p0 -i "${srcdir}"/angleproject-fix-mingw-compatibility.patch

	# WebKit depends on symbols which are used in the static library called translator
	# This static library is linked into the libGLESv2 shared library
	# To allow building WebKit export the required symbols in the libGLESv2 shared library
	patch -p0 -i "${srcdir}"/angleproject-export-shader-symbols.patch

	# Fix missing methods in trace_event.h
	patch -p0 -i "${srcdir}"/angleproject-fix-trace_event.patch

	export CFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
	export CXXFLAGS="-O2 -g -pipe -Wall -Wp,-D_FORTIFY_SOURCE=2 -fexceptions --param=ssp-buffer-size=4"
	unset LDFLAGS

	CORE_COUNT="$(nproc)"
	touch "${srcdir}/d3dcompiler_46.dll"

	for _arch in ${_architectures}
	do
		mkdir -p build-${_arch} && pushd build-${_arch}

		export CXX="${_arch}-g++"
		export AR="${_arch}-ar"

		if [ "${_arch}" = "i686-w64-mingw32" ]
		then
			target="win32"
		else
			target="win64"
		fi

		sed -i s@'<(windows_sdk_path)/Redist/D3D/<(winsdk_arch)/d3dcompiler_46.dll'@"${srcdir}/d3dcompiler_46.dll"@ ../src/build_angle.gypi
		gyp -D OS=win -D TARGET=$target --depth . -I ../build/common.gypi ../src/build_angle.gyp

		# Make sure the correct libraries are linked in
		sed -i s@'^LIBS :='@'LIBS := -ld3d9 -ldxguid'@ ../src/libGLESv2.target.mk
		sed -i s@'^LIBS :='@'LIBS := -ld3d9 -ldxguid -L. -lGLESv2'@ ../src/libEGL.target.mk

		make V=1 CXXFLAGS="-std=c++11 -msse2 -DUNICODE -D_UNICODE" -j"${CORE_COUNT}"

		# Also build static libraries (which are needed by the static Qt build)
		${AR} rcs libGLESv2.a out/Debug/obj.target/libGLESv2/../src/common/debug.o \
			out/Debug/obj.target/libGLESv2/../src/common/RefCountObject.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/renderer/IndexDataManager.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/renderer/VertexDataManager.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/renderer/Blit.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/Buffer.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/Context.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/Fence.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/Float16ToFloat32.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/Framebuffer.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/HandleAllocator.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/libGLESv2.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/main.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/Program.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/ProgramBinary.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/Query.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/Renderbuffer.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/ResourceManager.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/Shader.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/Texture.o \
			out/Debug/obj.target/libGLESv2/../src/libGLESv2/utilities.o \
			out/Debug/obj.target/../src/libtranslator.a \
			out/Debug/obj.target/../src/libpreprocessor.a
		${AR} rcs libEGL.a out/Debug/obj.target/libEGL/../src/common/debug.o \
			out/Debug/obj.target/libEGL/../src/common/RefCountObject.o \
			out/Debug/obj.target/libEGL/../src/libEGL/Config.o \
			out/Debug/obj.target/libEGL/../src/libEGL/Display.o \
			out/Debug/obj.target/libEGL/../src/libEGL/libEGL.o \
			out/Debug/obj.target/libEGL/../src/libEGL/main.o \
			out/Debug/obj.target/libEGL/../src/libEGL/Surface.o

		popd
	done
}

package() {
	cd "${srcdir}"/angleproject

	for _arch in ${_architectures}
	do
		pushd build-${_arch}

		mkdir -p "${pkgdir}"/usr/${_arch}/{bin,lib,include}

		install out/Debug/src/libGLESv2.so "${pkgdir}"/usr/${_arch}/bin/libGLESv2.dll
		install out/Debug/src/libEGL.so "${pkgdir}"/usr/${_arch}/bin/libEGL.dll

		${_arch}-strip --strip-unneeded "${pkgdir}"/usr/${_arch}/bin/*.dll

		install libGLESv2.a "${pkgdir}"/usr/${_arch}/lib/
		install libEGL.a "${pkgdir}"/usr/${_arch}/lib/

		${_arch}-strip --strip-debug "${pkgdir}"/usr/${_arch}/lib/libEGL.a
		install libEGL.dll.a "${pkgdir}"/usr/${_arch}/lib/
		${_arch}-strip --strip-unneeded "${pkgdir}"/usr/${_arch}/lib/libEGL.dll.a

		install libGLESv2.a "${pkgdir}"/usr/${_arch}/lib/libGLESv2.dll.a

		cp -Rv ../include/* "${pkgdir}"/usr/${_arch}/include/

		popd
	done
}
