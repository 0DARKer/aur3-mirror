--- dds.cpp.orig	2012-07-24 01:21:44.714604613 +0200
+++ dds.cpp	2012-07-24 01:48:52.253124965 +0200
@@ -17,7 +17,7 @@
 /* along with this program; if not, write to the Free Software                */
 /* Foundation, Inc, 51 Franklin Street, 5th Floor, Boston MA 02110-1301, USA. */
 
-#include "stdafx.h" 	/* Needed by Visual C++ */
+/* #include "stdafx.h" */	/* Needed by Visual C++ */
 
 #include "dll.h"
 
@@ -837,7 +837,7 @@
 void InitStart(int gb_ram, int ncores) {
   int k, r, i, j, m;
   unsigned short int res;
-  unsigned __int64 pcmem;	/* kbytes */
+  __uint64 pcmem;	/* kbytes */
 
   if (_initialized)
       return;
@@ -849,27 +849,9 @@
   ttStore = (struct ttStoreType *)calloc(SEARCHSIZE, sizeof(struct ttStoreType));
   if (ttStore==NULL)
     exit(1);
-
-  if ((gb_ram==0)||(ncores==0)) {		/* Autoconfig */
-    SYSTEM_INFO temp; 
-
-    MEMORYSTATUSEX statex;
-	statex.dwLength = sizeof (statex);
-
-    GlobalMemoryStatusEx (&statex);
-
-    pcmem=(unsigned __int64)statex.ullTotalPhys/1024;
-
-    if (pcmem < 1500000)
-	  noOfThreads=Min(MAXNOOFTHREADS, 2);
-    else if (pcmem < 2500000)
-      noOfThreads=Min(MAXNOOFTHREADS, 4);
-    else 
-      noOfThreads=Min(MAXNOOFTHREADS, 8); 
-
-    GetSystemInfo(&temp);
-    noOfCores=Min(noOfThreads, (int)temp.dwNumberOfProcessors);
-	
+  if ((gb_ram==0)||(ncores==0)) {   /* Autoconfig */
+    fprintf (stderr, "libdds autoconfig not supported.\n");
+    exit (1);
   }
   else {
     if (gb_ram < 2)
@@ -881,7 +863,7 @@
 
     noOfCores=Min(noOfThreads, ncores);
 
-    pcmem=(unsigned __int64)(1000000 * gb_ram);
+    pcmem=(__uint64)(1000000 * gb_ram);
   }
 
   /*printf("noOfThreads: %d   noOfCores: %d\n", noOfThreads, noOfCores);*/
@@ -907,7 +889,7 @@
 		   25000001*sizeof(struct winCardType)+
 		   400001*sizeof(struct posSearchType))/noOfThreads);
     else {
-      localVar[k].maxmem = (unsigned __int64)(pcmem-32678) * (700/noOfThreads);  
+      localVar[k].maxmem = (__uint64)(pcmem-32678) * (700/noOfThreads);  
 	  /* Linear calculation of maximum memory, formula by Michiel de Bondt */
 
       if (localVar[k].maxmem < 10485760) exit (1);
--- dll.h.orig	2012-07-24 01:21:59.724711361 +0200
+++ dll.h	2012-07-24 01:24:50.985931117 +0200
@@ -26,6 +26,8 @@
 #    include <omp.h>
 #endif
 
+typedef long long __int64;
+typedef unsigned long long __uint64;
 /* end of portability-macros section */
 
 #define DDS_VERSION		20201	/* Version 2.2.1. Allowing for 2 digit
@@ -330,9 +332,9 @@
   int nodeSetSizeLimit;
   int winSetSizeLimit;
   int lenSetSizeLimit;
-  unsigned __int64 maxmem;		/* bytes */
-  unsigned __int64 allocmem;
-  unsigned __int64 summem;
+  __uint64 maxmem;		/* bytes */
+  __uint64 allocmem;
+  __uint64 summem;
   int wmem;
   int nmem; 
   int lmem;
@@ -445,7 +447,7 @@
 #endif
 #endif
 
-void InitStart(int gb_ram, int ncores);
+EXTERN_C void InitStart(int gb_ram, int ncores);
 void InitGame(int gameNo, int moveTreeFlag, int first, int handRelFirst, int thrId);
 void InitSearch(struct pos * posPoint, int depth,
   struct moveType startMoves[], int first, int mtd, int thrId);
