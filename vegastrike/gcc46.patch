Index: src/gfxlib.h
===================================================================
--- src/gfxlib.h	(revision 13191)
+++ src/gfxlib.h	(working copy)
@@ -37,6 +37,7 @@
  * #include <GL/glut.h>
  * #endif
  #endif*/
+#include <cstddef>
 #include <vector>
 class Matrix;
 
Index: src/cmd/collection.h
===================================================================
--- src/cmd/collection.h	(revision 13191)
+++ src/cmd/collection.h	(working copy)
@@ -13,6 +13,7 @@
 #include "oldcollection.h"
 #elif defined (USE_STL_COLLECTION)
 
+#include <cstddef>
 #include <list>
 #include <vector>
 
Index: src/cmd/ai/fire.cpp
===================================================================
--- src/cmd/ai/fire.cpp	(revision 13191)
+++ src/cmd/ai/fire.cpp	(working copy)
@@ -15,6 +15,9 @@
 #include "lin_time.h" //DEBUG ONLY
 #include "cmd/pilot.h"
 
+extern int numprocessed;
+extern double targetpick;
+
 static bool NoDockWithClear()
 {
     static bool nodockwithclear = XMLSupport::parse_bool( vs_config->getVariable( "physics", "dock_with_clear_planets", "true" ) );
@@ -430,8 +433,6 @@
 {
     float gunspeed, gunrange, missilerange;
     parent->getAverageGunSpeed( gunspeed, gunrange, missilerange );
-    extern int    numprocessed;
-    extern double targetpick;
     static float  targettimer = UniverseUtil::GetGameTime();    //timer used to determine passage of physics frames
     static float  mintimetoswitch =
         XMLSupport::parse_float( vs_config->getVariable( "AI", "Targetting", "MinTimeToSwitchTargets", "3" ) );
Index: src/cmd/ai/aggressive.cpp
===================================================================
--- src/cmd/ai/aggressive.cpp	(revision 13191)
+++ src/cmd/ai/aggressive.cpp	(working copy)
@@ -27,6 +27,8 @@
 #include "faction_generic.h"
 #include "docking.h"
 
+extern double aggfire;
+
 using namespace Orders;
 
 const EnumMap::Pair element_names[] = {
@@ -1608,7 +1610,6 @@
 {
     if (parent == uoi)
         printf( "kewl" );
-    extern double aggfire;
     jump_time_check++;     //just so we get a nicely often wrapping var;
     jump_time_check %= 5;
     Flightgroup  *fg  = parent->getFlightgroup();
