=== modified file 'src/applet-device-wifi.c'
---
 src/applet-device-wifi.c |    4 +
 src/applet.c             |  138 +++++++++++++++++++++++++++++++++++++++++++++--
 src/applet.h             |    3 -
 3 files changed, 139 insertions(+), 6 deletions(-)

Index: network-manager-applet-0.7.1~rc4/src/applet-device-wifi.c
===================================================================
--- network-manager-applet-0.7.1~rc4.orig/src/applet-device-wifi.c
+++ network-manager-applet-0.7.1~rc4/src/applet-device-wifi.c
@@ -1164,18 +1164,20 @@
 		queue_avail_access_point_notification (device);
 
 	if (new_state != NM_DEVICE_STATE_ACTIVATED)
 		return;
 
 	if (new) {
 		const GByteArray *ssid = nm_access_point_get_ssid (new);
 
-		if (ssid)
+		if (ssid) {
 			esc_ssid = nm_utils_ssid_to_utf8 ((const char *) ssid->data, ssid->len);
+			g_object_set_data_full (G_OBJECT(device), "canonical-last-essid", g_strdup (esc_ssid), (GDestroyNotify) g_free);
+		}
 
 		/* Save this BSSID to seen-bssids list */
 		gconf_connection = applet_get_exported_connection_for_device (device, applet);
 		if (gconf_connection && add_seen_bssid (gconf_connection, new))
 			nma_gconf_connection_save (gconf_connection);
 	}
 
 	applet_do_notify_with_pref (applet,
Index: network-manager-applet-0.7.1~rc4/src/applet.c
===================================================================
--- network-manager-applet-0.7.1~rc4.orig/src/applet.c
+++ network-manager-applet-0.7.1~rc4/src/applet.c
@@ -36,16 +36,17 @@
 #include <strings.h>
 #include <gtk/gtk.h>
 #include <glib/gi18n.h>
 #include "wireless-helper.h"
 #include <unistd.h>
 #include <sys/socket.h>
 
 #include <NetworkManagerVPN.h>
+#include <nm-device.h>
 #include <nm-device-ethernet.h>
 #include <nm-device-wifi.h>
 #include <nm-gsm-device.h>
 #include <nm-cdma-device.h>
 #include <nm-utils.h>
 #include <nm-connection.h>
 #include <nm-vpn-connection.h>
 #include <nm-setting-connection.h>
@@ -69,16 +70,29 @@
 #include "applet-dbus-manager.h"
 #include "utils.h"
 #include "gconf-helpers.h"
 
 #define NOTIFY_CAPS_ACTIONS_KEY "actions"
 
 G_DEFINE_TYPE(NMApplet, nma, G_TYPE_OBJECT)
 
+struct _OfflineNotificationContextInfo {
+  NMState state;
+  NMDeviceState device_state;
+  NMDeviceStateReason device_state_reason;
+  NMDeviceType device_type;
+  gchar* title;
+  const gchar* text;
+  const gchar* icon;
+  NotifyUrgency urgency;
+};
+
+typedef struct _OfflineNotificationContextInfo OfflineNotificationContextInfo;
+
 static NMActiveConnection *
 applet_get_best_activating_connection (NMApplet *applet, NMDevice **device)
 {
 	NMActiveConnection *best = NULL;
 	NMDevice *best_dev = NULL;
 	const GPtrArray *connections;
 	int i;
 
@@ -1634,27 +1648,130 @@
 		if (!gconf_connection || !nm_exported_connection_get_connection (NM_EXPORTED_CONNECTION (gconf_connection)))
 			continue;
 
 		return gconf_connection;
 	}
 	return NULL;
 }
 
+static gboolean
+select_merged_notification_text (OfflineNotificationContextInfo *info)
+{
+	info->urgency = NOTIFY_URGENCY_LOW;
+	/* only do something if this is about full offline state */
+	if(info->state != NM_STATE_UNKNOWN || info->device_state != NM_STATE_UNKNOWN) {
+		info->urgency = NOTIFY_URGENCY_NORMAL;
+		if (!info->title)
+			info->title = g_strdup (_("Network"));
+	        if (info->state == NM_STATE_DISCONNECTED || info->state == NM_STATE_ASLEEP) {
+			info->urgency = NOTIFY_URGENCY_CRITICAL;
+			info->text = _("Disconnected - you are now offline");
+		} else
+			info->text = _("Disconnected");
+
+		switch (info->device_type) {
+			case NM_DEVICE_TYPE_ETHERNET:
+				info->icon = "notification-network-ethernet-disconnected";
+				break;
+			case NM_DEVICE_TYPE_WIFI:
+				info->icon = "notification-network-wireless-disconnected";
+				break;
+			case NM_DEVICE_TYPE_GSM:
+				info->icon = "notification-gsm-disconnected";
+				break;
+			default:
+				info->icon = "nm-no-connection";
+				break;
+		}
+		g_debug("going for offline with icon: %s", info->icon);
+		return TRUE;
+	}
+	return FALSE;
+}
+
+static gboolean
+foo_online_offline_deferred_notify (gpointer user_data)
+{
+	NMApplet *applet = NM_APPLET (user_data);
+	OfflineNotificationContextInfo *info = applet->notification_queue_data;
+        if(select_merged_notification_text (info))
+		applet_do_notify (applet, info->urgency, info->title, info->text, info->icon, NULL, NULL, NULL, applet);
+	else
+		g_debug("no notification because merged found that we have nothing to say (e.g. not offline)");
+	if (info->title)
+		g_free (info->title);
+	info->title = NULL;
+	g_free (applet->notification_queue_data);
+	applet->notification_queue_data = NULL;
+	applet->deferred_id = 0;
+	return FALSE;
+}
+
+
 static void
 applet_common_device_state_changed (NMDevice *device,
                                     NMDeviceState new_state,
                                     NMDeviceState old_state,
                                     NMDeviceStateReason reason,
                                     NMApplet *applet)
 {
 	NMConnection *connection;
 	NMActiveConnection *active = NULL;
+	g_debug("applet_common_device_state_changed");
 
 	switch (new_state) {
+	case NM_DEVICE_STATE_FAILED:
+	case NM_DEVICE_STATE_DISCONNECTED:
+	case NM_DEVICE_STATE_UNMANAGED:
+	case NM_DEVICE_STATE_UNAVAILABLE:
+	{
+		if (old_state != NM_DEVICE_STATE_FAILED &&
+		    old_state != NM_DEVICE_STATE_UNKNOWN &&
+		    old_state != NM_DEVICE_STATE_DISCONNECTED &&
+		    old_state != NM_DEVICE_STATE_UNMANAGED &&
+		    old_state != NM_DEVICE_STATE_UNAVAILABLE) {
+	                OfflineNotificationContextInfo *info = applet->notification_queue_data;
+			if (!info) {
+				info = g_new0(OfflineNotificationContextInfo, 1);
+				applet->notification_queue_data = info;
+			}
+
+	                info->device_state = new_state;
+	                info->device_state_reason = reason;
+			if (info->title) {
+				g_free(info->title);
+				info->title = NULL;
+			}
+			if (NM_IS_DEVICE_WIFI (device)) {
+				info->device_type = NM_DEVICE_TYPE_WIFI;
+				info->title = g_strdup(g_object_get_data (G_OBJECT(device), "canonical-last-essid"));
+				if (!info->title)
+					info->title = g_strdup (_("Wireless network"));
+			} else if (NM_IS_DEVICE_ETHERNET (device)) {
+				info->device_type = NM_DEVICE_TYPE_ETHERNET;
+				info->title = g_strdup(_("Wired network"));
+			} else if (NM_IS_GSM_DEVICE (device)) {
+				info->device_type = NM_DEVICE_TYPE_GSM;
+				info->title = g_strdup (_("GSM network"));
+			} else {
+				info->device_type = NM_DEVICE_TYPE_UNKNOWN;
+				info->title = g_strdup (_("Network"));
+			}
+
+	                if (applet->deferred_id)
+	                        g_source_remove (applet->deferred_id);
+	                applet->deferred_id = g_timeout_add (1000, foo_online_offline_deferred_notify, applet);
+	
+			clear_animation_timeout (applet);
+		} else {
+			g_debug ("old state indicates that this was not a disconnect %d", old_state);
+		}
+		break;
+	}
 	case NM_DEVICE_STATE_PREPARE:
 	case NM_DEVICE_STATE_CONFIG:
 	case NM_DEVICE_STATE_NEED_AUTH:
 	case NM_DEVICE_STATE_IP_CONFIG:
 		start_animation_timeout (applet);
 		break;
 	case NM_DEVICE_STATE_ACTIVATED:
 		/* If the device activation was successful, update the corresponding
@@ -1712,23 +1829,36 @@
 	                             applet);
 }
 
 static void
 foo_client_state_changed_cb (NMClient *client, GParamSpec *pspec, gpointer user_data)
 {
 	NMApplet *applet = NM_APPLET (user_data);
 
+	g_debug("foo_client_state_changed_cb");
 	switch (nm_client_get_state (client)) {
 	case NM_STATE_DISCONNECTED:
-		applet_do_notify_with_pref (applet, _("Disconnected"),
-		                            _("The network connection has been disconnected."),
-		                            "nm-no-connection",
-		                            PREF_DISABLE_DISCONNECTED_NOTIFICATIONS);
+	case NM_STATE_ASLEEP:
+	{
+		OfflineNotificationContextInfo *info = applet->notification_queue_data;
+		if (!info) {
+			info = g_new0(OfflineNotificationContextInfo, 1);
+			applet->notification_queue_data = info;
+		}
+
+		info->state = nm_client_get_state (client);
+		select_merged_notification_text (info);
+
+		if (applet->deferred_id)
+			g_source_remove (applet->deferred_id);
+		applet->deferred_id = g_timeout_add (1000, foo_online_offline_deferred_notify, applet);
+
 		/* Fall through */
+	}
 	default:
 		break;
 	}
 
 	applet_schedule_update_icon (applet);
 }
 
 static void
Index: network-manager-applet-0.7.1~rc4/src/applet.h
===================================================================
--- network-manager-applet-0.7.1~rc4.orig/src/applet.h
+++ network-manager-applet-0.7.1~rc4/src/applet.h
@@ -151,17 +151,18 @@
 	GtkWidget *		wifi_enabled_item;
 	guint           wifi_enabled_toggled_id;
 	GtkWidget *		info_menu_item;
 	GtkWidget *		connections_menu_item;
 
 	GladeXML *		info_dialog_xml;
 	NotifyNotification*	notification;
 	gboolean		notify_with_actions;
-
+	gpointer notification_queue_data;
+	guint deferred_id;
 
 #ifdef WITH_MBCA
 	GSList *mbca_assistants; /* list of UdiAssistant */
 	GModule *mbca_module;
 	void (*mbca_assistant_abort_func) (MBCAAssistant*);
 	void (*mbca_assistant_present_func) (MBCAAssistant*);
 	MBCAAssistant* (*mbca_assistant_new_func) ();
 	gint (*mbca_assistant_run_for_device_func) (MBCAAssistant*,
