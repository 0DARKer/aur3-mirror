--- src/rb-segmented-bar.c	2011-05-17 16:27:08.000000000 +0800
+++ src/rb-segmented-bar.c	2011-05-18 12:00:35.000000000 +0800
@@ -38,12 +38,17 @@
 #define MINIMUM_HEIGHT 26
 
 static void rb_segmented_bar_finalize (GObject *object);
+static void rb_segmented_bar_get_preferred_width (GtkWidget *widget,
+						  gint *minimal_width,
+						  gint *natural_width);
+static void rb_segmented_bar_get_preferred_height (GtkWidget *widget,
+						   gint *minimal_height,
+						   gint *natural_height);
 static void rb_segmented_bar_size_request (GtkWidget *widget,
 					   GtkRequisition *requisition);
 static void rb_segmented_bar_size_allocate(GtkWidget *widget,
 					   GtkAllocation *allocation);
-static gboolean rb_segmented_bar_expose (GtkWidget *widget,
-					 GdkEventExpose *event);
+static gboolean rb_segmented_bar_draw (GtkWidget *widget, cairo_t *context);
 static void rb_segmented_bar_get_property (GObject *object, guint param_id,
 					   GValue *value, GParamSpec *pspec);
 static void rb_segmented_bar_set_property (GObject *object, guint param_id,
@@ -135,7 +140,7 @@
 	priv->segment_box_size = 12;
 	priv->segment_box_spacing = 6;
 	priv->value_formatter = rb_segmented_bar_default_value_formatter;
-	GTK_WIDGET_SET_FLAGS (GTK_WIDGET (bar), GTK_NO_WINDOW);
+	gtk_widget_set_has_window(GTK_WIDGET (bar), FALSE);
 }
 
 static void
@@ -148,8 +153,11 @@
 	object_class->get_property = rb_segmented_bar_get_property;
 	object_class->set_property = rb_segmented_bar_set_property;
 
-	widget_class->expose_event = rb_segmented_bar_expose;
-	widget_class->size_request = rb_segmented_bar_size_request;
+	widget_class->draw = rb_segmented_bar_draw;
+
+	widget_class->get_preferred_width = rb_segmented_bar_get_preferred_width;
+	widget_class->get_preferred_height = rb_segmented_bar_get_preferred_height;
+	
 	widget_class->size_allocate = rb_segmented_bar_size_allocate;
 
         /**
@@ -263,6 +271,30 @@
 }
 
 static void
+rb_segmented_bar_get_preferred_width (GtkWidget *widget,
+				      gint *minimal_width,
+				      gint *natural_width)
+{
+	GtkRequisition requisition;
+
+	rb_segmented_bar_size_request (widget, &requisition);
+
+	*minimal_width = *natural_width = requisition.width;
+}
+
+static void
+rb_segmented_bar_get_preferred_height (GtkWidget *widget,
+				       gint *minimal_height,
+				       gint *natural_height)
+{
+	GtkRequisition requisition;
+
+	rb_segmented_bar_size_request (widget, &requisition);
+
+	*minimal_height = *natural_height = requisition.height;
+}
+
+static void
 rb_segmented_bar_size_request (GtkWidget *widget,
 			       GtkRequisition *requisition)
 {
@@ -398,15 +430,15 @@
 	} else {
 		real_height = priv->bar_height;
 	}
-	widget->allocation = *allocation; 
+	gtk_widget_set_allocation (widget, allocation);
 	if (priv->show_labels) {
 		compute_layout_size (RB_SEGMENTED_BAR (widget));
-		widget->allocation.height = MAX (priv->bar_height + priv->bar_label_spacing + priv->layout_height,
+		allocation->height = MAX (priv->bar_height + priv->bar_label_spacing + priv->layout_height,
 						 real_height);
 	} else {
-		widget->allocation.height = real_height;
+		allocation->height = real_height;
 	}
-	widget->allocation.width = priv->layout_width + 2*(priv->h_padding);
+	allocation->width = priv->layout_width + 2*(priv->h_padding);
 	GTK_WIDGET_CLASS(rb_segmented_bar_parent_class)->size_allocate(widget, allocation); 
 }
 
@@ -657,7 +689,7 @@
 	if (priv->segments == NULL) {
 		return;
 	}
-	gdk_color = &GTK_WIDGET (bar)->style->fg[GTK_WIDGET_STATE (GTK_WIDGET (bar))];
+	gdk_color = &gtk_widget_get_style (GTK_WIDGET(bar))->fg[gtk_widget_get_state (GTK_WIDGET(bar))];
 	text_color.red = gdk_color->red / 65535.0;
 	text_color.green = gdk_color->green / 65535.0;
 	text_color.blue = gdk_color->blue / 65535.0;
@@ -739,38 +771,32 @@
 }
 
 static gboolean
-rb_segmented_bar_expose (GtkWidget *widget,
-			 GdkEventExpose *event)
+rb_segmented_bar_draw (GtkWidget *widget, cairo_t *context)
 {
 	RBSegmentedBar *bar;
 	RBSegmentedBarPrivate *priv;
-	cairo_t *context;
 	cairo_pattern_t *bar_pattern;
+	GtkAllocation allocation;
 
 	g_return_val_if_fail (RB_IS_SEGMENTED_BAR (widget), FALSE);
-	if (GTK_WIDGET_DRAWABLE (widget) == FALSE) {
-		return FALSE;
-	}
 
 	bar = RB_SEGMENTED_BAR (widget);
 	priv = RB_SEGMENTED_BAR_GET_PRIVATE (bar);
 
-	context = gdk_cairo_create (GDK_DRAWABLE (widget->window));
-	
 	if (priv->reflect) {
 		cairo_push_group (context);
 	}
 
 	cairo_set_operator (context, CAIRO_OPERATOR_OVER);
-	cairo_translate (context, widget->allocation.x + priv->h_padding,
-			 widget->allocation.y);
+	gtk_widget_get_allocation (widget, &allocation);
+	cairo_translate (context, priv->h_padding, 0);
 	cairo_rectangle (context, 0, 0,
-			 widget->allocation.width - priv->h_padding,
+			 allocation.width - priv->h_padding,
 			 MAX (2*priv->bar_height, priv->bar_height + priv->bar_label_spacing + priv->layout_height));
 	cairo_clip (context);
 
 	bar_pattern = rb_segmented_bar_render (bar, 
-					       widget->allocation.width - 2*priv->h_padding,
+					       allocation.width - 2*priv->h_padding,
 					       priv->bar_height);
 
 	cairo_save (context);
@@ -785,7 +811,7 @@
 		cairo_save (context);
 
 		cairo_rectangle (context, 0, priv->bar_height,
-				 widget->allocation.width - priv->h_padding,
+				 allocation.width - priv->h_padding,
 				 priv->bar_height);
 		cairo_clip (context);
 		cairo_matrix_init_scale (&matrix, 1, -1);
@@ -812,17 +838,16 @@
 	if (priv->show_labels) {
 		if (priv->reflect) {
 			cairo_translate (context,
-					 widget->allocation.x + (widget->allocation.width - priv->layout_width)/2,
-					 widget->allocation.y + priv->bar_height + priv->bar_label_spacing);
+					 (allocation.width - priv->layout_width)/2,
+					 priv->bar_height + priv->bar_label_spacing);
 		} else {
 			cairo_translate (context,
-					 -priv->h_padding + (widget->allocation.width - priv->layout_width)/2,
+					 -priv->h_padding + (allocation.width - priv->layout_width)/2,
 					 priv->bar_height + priv->bar_label_spacing);
 		}
 		rb_segmented_bar_render_labels (bar, context);
 	}
 	cairo_pattern_destroy (bar_pattern);
-	cairo_destroy (context);
 
 	return TRUE;
 }
--- src/nautilus-ideviceinfo.ui	2011-05-17 16:27:08.000000000 +0800
+++ src/nautilus-ideviceinfo.ui	2011-05-18 12:25:46.000000000 +0800
@@ -549,6 +549,7 @@
                 <child>
                   <object class="GtkAlignment" id="disk_usage">
                     <property name="visible">True</property>
+                    <property name="halign">center</property>
                     <child>
                       <placeholder/>
                     </child>
