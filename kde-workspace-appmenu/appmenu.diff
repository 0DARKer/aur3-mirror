diff --git a/kcontrol/style/finetuning.ui b/kcontrol/style/finetuning.ui
index 2d384bc..e740b3c 100644
--- a/kcontrol/style/finetuning.ui
+++ b/kcontrol/style/finetuning.ui
@@ -173,7 +173,66 @@
      </layout>
     </widget>
    </item>
-   <item row="4" column="0">
+   <item row="4" column="0" colspan="3">
+    <widget class="QGroupBox" name="groupBox1">
+     <property name="title">
+      <string>Menubar</string>
+     </property>
+     <layout class="QGridLayout" name="gridLayout1">
+      <item row="0" column="0">
+       <widget class="QLabel" name="label1">
+        <property name="text">
+         <string>Menubar style:</string>
+        </property>
+        <property name="alignment">
+         <set>Qt::AlignRight|Qt::AlignTrailing|Qt::AlignVCenter</set>
+        </property>
+        <property name="buddy">
+         <cstring>comboMenubarStyle</cstring>
+        </property>
+       </widget>
+      </item>
+      <item row="0" column="1">
+       <widget class="KComboBox" name="comboMenubarStyle">
+        <item>
+         <property name="text">
+          <string>In application</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>Title bar button</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>Top screen menubar</string>
+         </property>
+        </item>
+        <item>
+         <property name="text">
+          <string>Only export</string>
+         </property>
+        </item>
+       </widget>
+      </item>
+      <item row="0" column="2">
+       <spacer name="horizontalSpacer_3">
+        <property name="orientation">
+         <enum>Qt::Horizontal</enum>
+        </property>
+        <property name="sizeHint" stdset="0">
+         <size>
+          <width>40</width>
+          <height>20</height>
+         </size>
+        </property>
+       </spacer>
+      </item>
+     </layout>
+    </widget>
+   </item>
+   <item row="5" column="0">
     <spacer name="verticalSpacer">
      <property name="orientation">
       <enum>Qt::Vertical</enum>
diff --git a/kcontrol/style/kcmstyle.cpp b/kcontrol/style/kcmstyle.cpp
index 849a49b..3ab3ac3 100644
--- a/kcontrol/style/kcmstyle.cpp
+++ b/kcontrol/style/kcmstyle.cpp
@@ -259,6 +259,7 @@ KCMStyle::KCMStyle( QWidget* parent, const QVariantList& )
     connect(fineTuningUi.comboGraphicEffectsLevel, SIGNAL(activated(int)),   this, SLOT(setEffectsDirty()));
     connect(fineTuningUi.comboToolbarIcons,    SIGNAL(activated(int)), this, SLOT(setEffectsDirty()));
     connect(fineTuningUi.comboSecondaryToolbarIcons,    SIGNAL(activated(int)), this, SLOT(setEffectsDirty()));
+    connect(fineTuningUi.comboMenubarStyle,    SIGNAL(activated(int)), this, SLOT(setEffectsDirty()));
 
     addWhatsThis();
 
@@ -400,8 +401,34 @@ void KCMStyle::save()
                             toolbarButtonText(fineTuningUi.comboToolbarIcons->currentIndex()));
     toolbarStyleGroup.writeEntry("ToolButtonStyleOtherToolbars",
                             toolbarButtonText(fineTuningUi.comboSecondaryToolbarIcons->currentIndex()));
+
+    KConfigGroup menuBarStyleGroup(&_config, "Menubar style");
+
+    // load kded module if needed
+    bool load = true;
+    QString style = menuBarStyleText(fineTuningUi.comboMenubarStyle->currentIndex());
+
+    menuBarStyleGroup.writeEntry("MenuBarStyle", style);
     _config.sync();
 
+    QDBusMessage method = QDBusMessage::createMethodCall("org.kde.kded", "/modules/appmenu", "org.kde.kded", "reconfigure");
+    QDBusConnection::sessionBus().asyncCall(method);
+
+    if (style == "InApplication")
+        load = false;
+    QList<QVariant> args = QList<QVariant>() << "appmenu" << load;
+    method = QDBusMessage::createMethodCall("org.kde.kded", "/kded", "org.kde.kded", "setModuleAutoloading");
+    method.setArguments(args);
+    QDBusConnection::sessionBus().asyncCall(method);
+
+    args = QList<QVariant>() << "appmenu";
+    if (load)
+        method = QDBusMessage::createMethodCall("org.kde.kded", "/kded", "org.kde.kded", "loadModule");
+    else
+        method = QDBusMessage::createMethodCall("org.kde.kded", "/kded", "org.kde.kded", "unloadModule");
+    method.setArguments(args);
+    QDBusConnection::sessionBus().asyncCall(method);
+
     // Export the changes we made to qtrc, and update all qt-only
     // applications on the fly, ensuring that we still follow the user's
     // export fonts/colors settings.
@@ -487,6 +514,7 @@ void KCMStyle::defaults()
     // Effects
     fineTuningUi.comboToolbarIcons->setCurrentIndex(toolbarButtonIndex("TextBesideIcon"));
     fineTuningUi.comboSecondaryToolbarIcons->setCurrentIndex(toolbarButtonIndex("TextBesideIcon"));
+    fineTuningUi.comboMenubarStyle->setCurrentIndex(menuBarStyleIndex("InApplication"));
     fineTuningUi.cbIconsOnButtons->setChecked(true);
     fineTuningUi.cbIconsInMenus->setChecked(true);
     fineTuningUi.comboGraphicEffectsLevel->setCurrentIndex(fineTuningUi.comboGraphicEffectsLevel->findData(((int) KGlobalSettings::graphicEffectsLevelDefault())));
@@ -708,6 +736,33 @@ int KCMStyle::toolbarButtonIndex(const QString &text)
     return 0;
 }
 
+QString KCMStyle::menuBarStyleText(int index)
+{
+    switch (index) {
+        case 1:
+            return "ButtonVertical";
+        case 2:
+            return "TopHorizontal";
+        case 3:
+            return "Others";
+    }
+
+    return "InApplication";
+}
+
+int KCMStyle::menuBarStyleIndex(const QString &text)
+{
+    if (text == "ButtonVertical") {
+        return 1;
+    } else if (text == "TopHorizontal") {
+        return 2;
+    } else if (text == "Others") {
+        return 3;
+    }
+
+    return 0;
+}
+
 void KCMStyle::loadEffects( KConfig& config )
 {
     // KDE's Part via KConfig
@@ -718,6 +773,10 @@ void KCMStyle::loadEffects( KConfig& config )
     tbIcon = configGroup.readEntry("ToolButtonStyleOtherToolbars", "TextBesideIcon");
     fineTuningUi.comboSecondaryToolbarIcons->setCurrentIndex(toolbarButtonIndex(tbIcon));
 
+    configGroup = config.group("Menubar style");
+    QString menuBarStyle = configGroup.readEntry("MenuBarStyle", "InApplication");
+    fineTuningUi.comboMenubarStyle->setCurrentIndex(menuBarStyleIndex(menuBarStyle));
+
     configGroup = config.group("KDE");
     fineTuningUi.cbIconsOnButtons->setChecked(configGroup.readEntry("ShowIconsOnPushButtons", true));
     fineTuningUi.cbIconsInMenus->setChecked(configGroup.readEntry("ShowIconsInMenuItems", true));
diff --git a/kcontrol/style/kcmstyle.h b/kcontrol/style/kcmstyle.h
index cd1472f..9938915 100644
--- a/kcontrol/style/kcmstyle.h
+++ b/kcontrol/style/kcmstyle.h
@@ -89,6 +89,8 @@ private:
     QString currentStyle();
     static QString toolbarButtonText(int index);
     static int toolbarButtonIndex(const QString &text);
+    static QString menuBarStyleText(int index);
+    static int menuBarStyleIndex(const QString &text);
 
     bool m_bStyleDirty, m_bEffectsDirty;
     QHash <QString,StyleEntry*> styleEntries;
diff --git a/kwin/CMakeLists.txt b/kwin/CMakeLists.txt
index ce69e84..6d49981 100644
--- a/kwin/CMakeLists.txt
+++ b/kwin/CMakeLists.txt
@@ -6,6 +6,7 @@ OPTION(KWIN_MOBILE_EFFECTS "Only build effects relevant for mobile devices" OFF)
 OPTION(KWIN_BUILD_TABBOX "Enable building of KWin Tabbox functionality" ON)
 OPTION(KWIN_BUILD_SCREENEDGES "Enable building of KWin with screen edge support" ON)
 OPTION(KWIN_BUILD_SCRIPTING "Enable building of KWin with scripting support" ON)
+OPTION(KWIN_BUILD_KAPPMENU "Enable building of KWin with application menu support" ON)
 OPTION(KWIN_BUILD_XRENDER_COMPOSITING "Enable building of KWin with XRender Compositing support" ON)
 OPTION(KWIN_BUILD_ACTIVITIES "Enable building of KWin with kactivities support" ON)
 if(${KDE_PLATFORM_PROFILE} STREQUAL "Desktop")
@@ -28,6 +29,10 @@ if(KWIN_PLASMA_ACTIVE)
     set(KWIN_NAME "kwinactive")
 endif(KWIN_PLASMA_ACTIVE)
 
+if (NOT KWIN_BUILD_DECORATIONS)
+    set(KWIN_BUILD_KAPPMENU OFF)
+endif (NOT KWIN_BUILD_DECORATIONS)
+
 # KWIN_HAVE_XRENDER_COMPOSITING - whether XRender-based compositing support is available: may be disabled
 if( KWIN_BUILD_XRENDER_COMPOSITING )
     set( KWIN_HAVE_XRENDER_COMPOSITING 1 )
diff --git a/kwin/client.cpp b/kwin/client.cpp
index c541595..9e17ec0 100644
--- a/kwin/client.cpp
+++ b/kwin/client.cpp
@@ -397,6 +397,10 @@ void Client::updateDecoration(bool check_workspace_pos, bool force)
     if (!noBorder()) {
         setMask(QRegion());  // Reset shape mask
         decoration = workspace()->createDecoration(bridge);
+#ifdef KWIN_BUILD_KAPPMENU
+        connect(this, SIGNAL(appMenuAvailable()), decoration, SIGNAL(appMenuAvailable()));
+        connect(this, SIGNAL(appMenuUnavailable()), decoration, SIGNAL(appMenuUnavailable()));
+#endif
         // TODO: Check decoration's minimum size?
         decoration->init();
         decoration->widget()->installEventFilter(this);
diff --git a/kwin/client.h b/kwin/client.h
index f31707b..1a16d43 100644
--- a/kwin/client.h
+++ b/kwin/client.h
@@ -24,6 +24,8 @@ along with this program.  If not, see <http://www.gnu.org/licenses/>.
 
 #include <config-X11.h>
 
+#include "config-kwin.h"
+
 #include <QFrame>
 #include <QPixmap>
 #include <netwm.h>
@@ -640,6 +642,11 @@ public:
     void setSessionInteract(bool needed);
     virtual bool isClient() const;
 
+#ifdef KWIN_BUILD_KAPPMENU
+    void emitAppMenuAvailable() { emit appMenuAvailable(); }
+    void emitAppMenuUnavailable() { emit appMenuUnavailable(); }
+#endif
+
 public slots:
     void closeWindow();
 
@@ -729,6 +736,18 @@ signals:
      * another group, but not when a Client gets added or removed to the Client's ClientGroup.
      **/
     void tabGroupChanged();
+
+#ifdef KWIN_BUILD_KAPPMENU
+    /**
+     * Emitted whenever the Client's menu is available
+     **/
+    void appMenuAvailable();
+    /**
+     * Emitted whenever the Client's menu is unavailable
+     */
+    void appMenuUnavailable();
+#endif
+
     /**
      * Emitted whenever the demands attention state changes.
      **/
diff --git a/kwin/clients/oxygen/oxygenbutton.cpp b/kwin/clients/oxygen/oxygenbutton.cpp
index 28aa8b1..dadc0ed 100644
--- a/kwin/clients/oxygen/oxygenbutton.cpp
+++ b/kwin/clients/oxygen/oxygenbutton.cpp
@@ -215,9 +215,13 @@ namespace Oxygen
     //___________________________________________________
     void Button::mouseReleaseEvent( QMouseEvent* event )
     {
-
-        _status &= ~Pressed;
-        parentUpdate();
+#ifdef KWIN_BUILD_KAPPMENU
+        if (_type != ButtonApplicationMenu)
+#endif
+        {
+            _status &= ~Pressed;
+            parentUpdate();
+        }
 
         KCommonDecorationButton::mouseReleaseEvent( event );
     }
@@ -338,6 +342,14 @@ namespace Oxygen
             painter->translate(-1.5, -1.5);
             break;
 
+#ifdef KWIN_BUILD_KAPPMENU
+            case ButtonApplicationMenu:
+            painter->drawLine(QPointF(7.5, 7.5), QPointF(13.5, 7.5));
+            painter->drawLine(QPointF(7.5, 10.5), QPointF(13.5, 10.5));
+            painter->drawLine(QPointF(7.5, 13.5), QPointF(13.5, 13.5));
+            break;
+#endif
+
             case ButtonMin:
             painter->drawLine(QPointF( 7.5, 9.5), QPointF(10.5,12.5));
             painter->drawLine(QPointF(10.5,12.5), QPointF(13.5, 9.5));
@@ -410,4 +422,11 @@ namespace Oxygen
         return;
     }
 
+#ifdef KWIN_BUILD_KAPPMENU
+    void Button::slotAppMenuHidden()
+    {
+        _status = Normal;
+        update();
+    }
+#endif
 }
diff --git a/kwin/clients/oxygen/oxygenbutton.h b/kwin/clients/oxygen/oxygenbutton.h
index ea11717..3de4326 100644
--- a/kwin/clients/oxygen/oxygenbutton.h
+++ b/kwin/clients/oxygen/oxygenbutton.h
@@ -28,6 +28,7 @@
 // IN THE SOFTWARE.
 //////////////////////////////////////////////////////////////////////////////
 
+#include <config-kwin.h>
 #include <kcommondecoration.h>
 
 #include "oxygenfactory.h"
@@ -173,6 +174,11 @@ namespace Oxygen
 
         //@}
 
+#ifdef KWIN_BUILD_KAPPMENU
+        private slots:
+            void slotAppMenuHidden();
+#endif
+
         private:
 
         //! parent client
diff --git a/kwin/clients/oxygen/oxygenclient.cpp b/kwin/clients/oxygen/oxygenclient.cpp
index 5fbb4fb..925e730 100644
--- a/kwin/clients/oxygen/oxygenclient.cpp
+++ b/kwin/clients/oxygen/oxygenclient.cpp
@@ -210,8 +210,11 @@ namespace Oxygen
         switch (type) {
 
             case MenuButton:
-            return new Button(*this, i18n("Menu"), ButtonMenu);
-
+            return new Button(*this, i18n("Window Menu"), ButtonMenu);
+#ifdef KWIN_BUILD_KAPPMENU
+            case AppMenuButton:
+            return new Button(*this, i18n("Application Menu"), ButtonApplicationMenu);
+#endif
             case HelpButton:
             return new Button(*this, i18n("Help"), ButtonHelp);
 
diff --git a/kwin/clients/oxygen/oxygenclient.h b/kwin/clients/oxygen/oxygenclient.h
index 98e60cc..52e3e97 100644
--- a/kwin/clients/oxygen/oxygenclient.h
+++ b/kwin/clients/oxygen/oxygenclient.h
@@ -36,6 +36,7 @@
 #include "oxygenshadowcache.h"
 #include "oxygentitleanimationdata.h"
 
+#include <config-kwin.h>
 #include <kcommondecoration.h>
 #include <QtCore/QBasicTimer>
 #include <QtCore/QTextStream>
diff --git a/kwin/clients/oxygen/oxygenfactory.cpp b/kwin/clients/oxygen/oxygenfactory.cpp
index 5502a6a..1d04f59 100644
--- a/kwin/clients/oxygen/oxygenfactory.cpp
+++ b/kwin/clients/oxygen/oxygenfactory.cpp
@@ -144,6 +144,9 @@ namespace Oxygen
 
             // buttons
             case AbilityButtonMenu:
+#ifdef KWIN_BUILD_KAPPMENU
+            case AbilityButtonApplicationMenu:
+#endif
             case AbilityButtonHelp:
             case AbilityButtonMinimize:
             case AbilityButtonMaximize:
diff --git a/kwin/clients/oxygen/oxygenfactory.h b/kwin/clients/oxygen/oxygenfactory.h
index b38b097..22c212b 100644
--- a/kwin/clients/oxygen/oxygenfactory.h
+++ b/kwin/clients/oxygen/oxygenfactory.h
@@ -48,6 +48,9 @@ namespace Oxygen
         ButtonMin,
         ButtonClose,
         ButtonMenu,
+#ifdef KWIN_BUILD_KAPPMENU
+        ButtonApplicationMenu,
+#endif
         ButtonSticky,
         ButtonAbove,
         ButtonBelow,
diff --git a/kwin/config-kwin.h.cmake b/kwin/config-kwin.h.cmake
index e5ed2a6..0eafe35 100644
--- a/kwin/config-kwin.h.cmake
+++ b/kwin/config-kwin.h.cmake
@@ -3,6 +3,7 @@
 #cmakedefine KWIN_BUILD_DESKTOPCHANGEOSD 1
 #cmakedefine KWIN_BUILD_SCREENEDGES 1
 #cmakedefine KWIN_BUILD_SCRIPTING 1
+#cmakedefine KWIN_BUILD_KAPPMENU 1
 #cmakedefine KWIN_BUILD_ACTIVITIES 1
 #define KWIN_NAME "${KWIN_NAME}"
 #define KWIN_CONFIG "${KWIN_NAME}rc"
diff --git a/kwin/kcmkwin/kwindecoration/buttons.cpp b/kwin/kcmkwin/kwindecoration/buttons.cpp
index 2d12244..0153e0f 100644
--- a/kwin/kcmkwin/kwindecoration/buttons.cpp
+++ b/kwin/kcmkwin/kwindecoration/buttons.cpp
@@ -31,6 +31,7 @@
 
 #include "buttons.h"
 #include "pixmaps.h"
+#include "config-kwin.h"
 
 #include <QApplication>
 #include <QPainter>
@@ -42,6 +43,11 @@
 #include <klocale.h>
 #include <kglobalsettings.h>
 
+#ifdef KWIN_BUILD_KAPPMENU
+#include <KConfigGroup>
+#include <KConfig>
+#endif
+
 #include <kdecorationfactory.h>
 
 
@@ -680,7 +686,22 @@ ButtonPositionWidget::ButtonPositionWidget(QWidget *parent)
 
     // insert all possible buttons into the source (backwards to keep the preferred order...)
     bool dummy;
-    m_supportedButtons = "MSHIAX_FBLR"; // support all buttons
+
+#ifdef KWIN_BUILD_KAPPMENU
+    KConfig config("kdeglobals", KConfig::FullConfig);
+    KConfigGroup configGroup = config.group("Menubar style");
+    QString style = configGroup.readEntry("MenuBarStyle", "InApplication");
+
+    if (style == "ButtonVertical") {
+        m_supportedButtons = "MNSHIAX_FBLR"; // support all buttons
+        new ButtonSourceItem(m_buttonSource, getButton('N', dummy));
+    } else {
+#endif
+        m_supportedButtons = "MSHIAX_FBLR";
+#ifdef KWIN_BUILD_KAPPMENU
+    }
+#endif
+
     new ButtonSourceItem(m_buttonSource, getButton('R', dummy));
     new ButtonSourceItem(m_buttonSource, getButton('L', dummy));
     new ButtonSourceItem(m_buttonSource, getButton('B', dummy));
@@ -741,7 +762,13 @@ Button ButtonPositionWidget::getButton(QChar type, bool& success)
     } else if (type == 'M') {
         QBitmap bmp = QBitmap::fromData(QSize(menu_width, menu_height), menu_bits);
         bmp.createMaskFromColor(Qt::white);
-        return Button(i18n("Menu"), bmp, 'M', false, m_supportedButtons.contains('M'));
+        return Button(i18nc("Button showing window actions menu", "Window Menu"), bmp, 'M', false, m_supportedButtons.contains('M'));
+#ifdef KWIN_BUILD_KAPPMENU
+    } else if (type == 'N') {
+        QBitmap bmp = QBitmap::fromData(QSize(menu_width, menu_height), menu_bits);
+        bmp.createMaskFromColor(Qt::white);
+        return Button(i18nc("Button showing application menu imported from dbusmenu", "Application Menu"), bmp, 'N', false, m_supportedButtons.contains('N'));
+#endif
     } else if (type == '_') {
         QBitmap bmp = QBitmap::fromData(QSize(spacer_width, spacer_height), spacer_bits);
         bmp.createMaskFromColor(Qt::white);
diff --git a/kwin/libkdecorations/kcommondecoration.cpp b/kwin/libkdecorations/kcommondecoration.cpp
index 13a4c49..ec07bc7 100644
--- a/kwin/libkdecorations/kcommondecoration.cpp
+++ b/kwin/libkdecorations/kcommondecoration.cpp
@@ -25,6 +25,8 @@
 #include "kcommondecoration.h"
 #include "kcommondecoration_p.h"
 
+#include <config-kwin.h>
+
 #include <QApplication>
 #include <QBasicTimer>
 #include <QCursor>
@@ -48,6 +50,7 @@ KCommonDecoration::KCommonDecoration(KDecorationBridge* bridge, KDecorationFacto
     :   m_previewWidget(0),
         btnHideMinWidth(200),
         btnHideLastWidth(0),
+        m_menuAvailable(false),
         closing(false),
         wrapper(new KCommonDecorationWrapper(this, bridge, factory))
 
@@ -377,7 +380,7 @@ void KCommonDecoration::addButtons(ButtonContainer &btnContainer, const QString&
                 if (!m_button[MenuButton]) {
                     btn = createButton(MenuButton);
                     if (!btn) break;
-                    btn->setTipText(i18n("Menu"));
+                    btn->setTipText(i18nc("Button showing window actions menu", "Window Menu"));
                     btn->setRealizeButtons(Qt::LeftButton | Qt::RightButton);
                     connect(btn, SIGNAL(pressed()), SLOT(menuButtonPressed()));
                     connect(btn, SIGNAL(released()), this, SLOT(menuButtonReleased()));
@@ -388,6 +391,27 @@ void KCommonDecoration::addButtons(ButtonContainer &btnContainer, const QString&
                     m_button[MenuButton] = btn;
                 }
                 break;
+#ifdef KWIN_BUILD_KAPPMENU
+             case 'N': // Application Menu button
+                if (!m_button[AppMenuButton]) {
+                    btn = createButton(AppMenuButton);
+                    if (!btn) break;
+                    btn->setTipText(i18nc("Button showing application menu", "Application Menu"));
+                    btn->setRealizeButtons(Qt::LeftButton);
+                    connect(btn, SIGNAL(pressed()), SLOT(appMenuButtonPressed()));
+                    // Wait for menu to become available before displaying any button
+                    connect(decoration(), SIGNAL(appMenuAvailable()), this, SLOT(slotAppMenuAvailable()));
+                    // On Kded module shutdown, hide application menu button
+                    connect(decoration(), SIGNAL(appMenuUnavailable()), this, SLOT(slotAppMenuUnavailable()));
+                    // Application menu button may need to be modified on this signal
+                    connect(decoration(), SIGNAL(menuHidden()), btn, SLOT(slotAppMenuHidden()));
+
+                    // fix double deletion, see objDestroyed()
+                    connect(btn, SIGNAL(destroyed(QObject*)), this, SLOT(objDestroyed(QObject*)));
+                    m_button[AppMenuButton] = btn;
+                }
+                break;
+#endif
             case 'S': // OnAllDesktops button
                 if (!m_button[OnAllDesktopsButton]) {
                     btn = createButton(OnAllDesktopsButton);
@@ -516,7 +540,16 @@ void KCommonDecoration::addButtons(ButtonContainer &btnContainer, const QString&
             if (btn) {
                 btn->setLeft(isLeft);
                 btn->setSize(QSize(layoutMetric(LM_ButtonWidth, true, btn), layoutMetric(LM_ButtonHeight, true, btn)));
-                btn->show();
+#ifdef KWIN_BUILD_KAPPMENU
+                // will be shown later on window registration
+                if (btn->type() == AppMenuButton) {
+                    btn->hide();
+                } 
+#endif
+                else {
+                    btn->show();
+                }
+
                 btnContainer.append(btn);
             }
 
@@ -532,10 +565,17 @@ void KCommonDecoration::calcHiddenButtons()
     btnHideLastWidth = width();
 
     //Hide buttons in the following order:
+#ifdef KWIN_BUILD_KAPPMENU
+    KCommonDecorationButton* btnArray[] = { m_button[HelpButton], m_button[AppMenuButton], m_button[ShadeButton], m_button[BelowButton],
+                                            m_button[AboveButton], m_button[OnAllDesktopsButton], m_button[MaxButton],
+                                            m_button[MinButton], m_button[MenuButton], m_button[CloseButton]
+                                          };
+#else
     KCommonDecorationButton* btnArray[] = { m_button[HelpButton], m_button[ShadeButton], m_button[BelowButton],
                                             m_button[AboveButton], m_button[OnAllDesktopsButton], m_button[MaxButton],
                                             m_button[MinButton], m_button[MenuButton], m_button[CloseButton]
                                           };
+#endif
     const int buttonsCount = sizeof(btnArray) / sizeof(btnArray[ 0 ]);
 
     int current_width = width();
@@ -556,8 +596,10 @@ void KCommonDecoration::calcHiddenButtons()
 
             if (! btnArray[i]->isHidden())
                 break; // all buttons shown...
-
-            btnArray[i]->show();
+#ifdef KWIN_BUILD_KAPPMENU
+            if (btnArray[i]->type() != AppMenuButton || m_menuAvailable)
+#endif
+                btnArray[i]->show();
         }
     }
 }
@@ -755,6 +797,48 @@ void KCommonDecoration::doShowWindowMenu()
     showWindowMenu(QRect(menutop, menubottom));
 }
 
+
+void KCommonDecoration::appMenuButtonPressed()
+{
+#ifdef KWIN_BUILD_KAPPMENU
+    QRect menuRect = m_button[AppMenuButton]->rect();
+    wrapper->showApplicationMenu(m_button[AppMenuButton]->mapToGlobal(menuRect.bottomLeft()));
+
+    KDecorationFactory* f = factory();
+    if (!f->exists(decoration()))   // 'this' was deleted
+        return;
+    m_button[AppMenuButton]->setDown(false);
+#endif
+}
+
+void KCommonDecoration::slotAppMenuAvailable()
+{
+#ifdef KWIN_BUILD_KAPPMENU
+    if (m_menuAvailable)
+        return;
+
+    m_menuAvailable = true;
+    if (m_button[AppMenuButton]) {
+        m_button[AppMenuButton]->show();
+        updateLayout();
+    }
+#endif
+}
+
+void KCommonDecoration::slotAppMenuUnavailable()
+{
+#ifdef KWIN_BUILD_KAPPMENU
+    if (!m_menuAvailable)
+        return;
+
+    m_menuAvailable = false;
+    if (m_button[AppMenuButton]) {
+        m_button[AppMenuButton]->hide();
+        updateLayout();
+    }
+#endif
+}
+
 void KCommonDecoration::resizeEvent(QResizeEvent */*e*/)
 {
     if (decorationBehaviour(DB_ButtonHide))
diff --git a/kwin/libkdecorations/kcommondecoration.h b/kwin/libkdecorations/kcommondecoration.h
index 3fe9fcf..bc9dec7 100644
--- a/kwin/libkdecorations/kcommondecoration.h
+++ b/kwin/libkdecorations/kcommondecoration.h
@@ -40,6 +40,7 @@ enum ButtonType {
     MinButton,
     CloseButton,
     MenuButton,
+    AppMenuButton,
     OnAllDesktopsButton,
     AboveButton,
     BelowButton,
@@ -274,6 +275,9 @@ public Q_SLOTS:
     void slotKeepBelow();
     void menuButtonPressed();
     void menuButtonReleased();
+    void appMenuButtonPressed();
+    void slotAppMenuAvailable();
+    void slotAppMenuUnavailable();
 public:
     virtual Position mousePosition(const QPoint &point) const;
 
@@ -381,6 +385,7 @@ private:
     void calcHiddenButtons();
     int btnHideMinWidth;
     int btnHideLastWidth;
+    bool m_menuAvailable;
 
     bool closing; // for menu doubleclick closing...
 
diff --git a/kwin/libkdecorations/kdecoration.cpp b/kwin/libkdecorations/kdecoration.cpp
index 71f4f8d..baece53 100644
--- a/kwin/libkdecorations/kdecoration.cpp
+++ b/kwin/libkdecorations/kdecoration.cpp
@@ -25,6 +25,8 @@ DEALINGS IN THE SOFTWARE.
 #include "kdecoration.h"
 #include "kdecoration_p.h"
 
+#include <config-kwin.h>
+
 #include <kdebug.h>
 #include <QApplication>
 #include <kglobal.h>
@@ -38,6 +40,16 @@ DEALINGS IN THE SOFTWARE.
 #include "kdecorationfactory.h"
 #include "kdecorationbridge.h"
 
+#ifdef KWIN_BUILD_KAPPMENU
+#include <QDBusMessage>
+#include <QDBusConnection>
+#include <QDBusReply>
+static const char *KDED_SERVICE = "org.kde.kded";
+static const char *KDED_APPMENU_PATH = "/modules/appmenu";
+static const char *KDED_INTERFACE = "org.kde.kded";
+#endif
+
+
 /*
 
 Extending KDecoration:
@@ -63,6 +75,11 @@ KDecoration::KDecoration(KDecorationBridge* bridge, KDecorationFactory* factory)
         factory_(factory)
 {
     factory->addDecoration(this);
+#ifdef KWIN_BUILD_KAPPMENU
+    // Decoration helper may need to handle this dbus signal
+    QDBusConnection::sessionBus().connect(KDED_SERVICE, KDED_APPMENU_PATH, KDED_INTERFACE, "menuHidden",
+                                          this, SIGNAL(menuHidden()));
+#endif
 }
 
 KDecoration::~KDecoration()
@@ -476,6 +493,16 @@ void KDecorationUnstable::showWindowMenu(const QPoint &pos, long id)
 
 //END tabbing
 
+void KDecorationUnstable::showApplicationMenu(const QPoint &p)
+{
+#ifdef KWIN_BUILD_KAPPMENU
+    QList<QVariant> args = QList<QVariant>() << p.x() << p.y() << qulonglong(windowId());
+    QDBusMessage method = QDBusMessage::createMethodCall(KDED_SERVICE, KDED_APPMENU_PATH, KDED_INTERFACE, "showMenu");
+    method.setArguments(args);
+    QDBusConnection::sessionBus().asyncCall(method);
+#endif
+}
+
 KDecoration::WindowOperation KDecorationUnstable::buttonToWindowOperation(Qt::MouseButtons button)
 {
     return static_cast< KDecorationBridgeUnstable* >(bridge_)->buttonToWindowOperation(button);
diff --git a/kwin/libkdecorations/kdecoration.h b/kwin/libkdecorations/kdecoration.h
index 614b902..6a87d94 100644
--- a/kwin/libkdecorations/kdecoration.h
+++ b/kwin/libkdecorations/kdecoration.h
@@ -188,7 +188,7 @@ public:
         AbilityAnnounceButtons = 0, ///< decoration supports AbilityButton* values (always use)
         AbilityAnnounceColors = 1, ///< decoration supports AbilityColor* values (always use)
         // buttons
-        AbilityButtonMenu = 1000,   ///< decoration supports the menu button
+        AbilityButtonMenu = 1000,   ///< decoration supports the window menu button
         AbilityButtonOnAllDesktops = 1001, ///< decoration supports the on all desktops button
         AbilityButtonSpacer = 1002, ///< decoration supports inserting spacers between buttons
         AbilityButtonHelp = 1003,   ///< decoration supports what's this help button
@@ -199,6 +199,7 @@ public:
         AbilityButtonBelowOthers = 1008, ///< decoration supports a below button
         AbilityButtonShade = 1009, ///< decoration supports a shade button
         AbilityButtonResize = 1010, ///< decoration supports a resize button
+        AbilityButtonApplicationMenu = 1011,   ///< decoration supports the application menu button
         // colors
         AbilityColorTitleBack = 2000, ///< decoration supports titlebar background color
         ABILITYCOLOR_FIRST = AbilityColorTitleBack, ///< @internal
@@ -352,7 +353,8 @@ public:
      * If customButtonPositions() returns true, titleButtonsLeft
      * returns which buttons should be on the left side of the titlebar from left
      * to right. Characters in the returned string have this meaning :
-     * @li 'M' menu button
+     * @li 'N' application menu button
+     * @li 'M' window menu button
      * @li 'S' on_all_desktops button
      * @li 'H' quickhelp button
      * @li 'I' minimize ( iconify ) button
@@ -789,7 +791,11 @@ Q_SIGNALS:
      * This signal is emitted whenever the window's keep-below state changes.
      */
     void keepBelowChanged(bool);
-
+    /**
+     * This signal is emitted whenever application menu is closed
+     * Application menu button may need to be modified on this signal
+     */
+    void menuHidden();
 public:
     /**
      * This method is not any more invoked from KWin core since version 4.8.
@@ -1040,6 +1046,10 @@ public:
      */
     void showWindowMenu(const QPoint& pos, long id);
     /**
+     * show application menu at p
+     */
+    void showApplicationMenu(const QPoint& p);
+    /**
      * unshadow virtuals
      */
     using KDecoration::caption;
@@ -1061,6 +1071,15 @@ public Q_SLOTS:
      * @since 4.8
      */
     QRegion region(KDecorationDefines::Region r);
+Q_SIGNALS:
+    /**
+     * This signal is emitted whenever application menu becomes available
+     */
+    void appMenuAvailable();
+    /**
+     * This signal is emitted whenever application menu becomes unavailable
+     */
+    void appMenuUnavailable();
 };
 
 inline
diff --git a/kwin/workspace.cpp b/kwin/workspace.cpp
index cf3f308..1ee8d36 100644
--- a/kwin/workspace.cpp
+++ b/kwin/workspace.cpp
@@ -169,6 +169,13 @@ Workspace::Workspace(bool restore)
     dbus.connect(QString(), "/KWin", "org.kde.KWin", "reinitCompositing",
                  this, SLOT(slotReinitCompositing()));
 
+#ifdef KWIN_BUILD_KAPPMENU
+    dbus.connect(QString(), "/modules/appmenu", "org.kde.kded", "menuAvailable",
+                 this, SLOT(slotMenuAvailable(qulonglong)));
+    dbus.connect(QString(), "/modules/appmenu", "org.kde.kded", "clearMenus",
+                 this, SLOT(slotClearMenus()));
+#endif
+
     // Initialize desktop grid array
     desktopGrid_[0] = 0;
     desktopGrid_[1] = 0;
@@ -615,6 +622,10 @@ void Workspace::addClient(Client* c, allowed_t)
     if (tabBox()->isDisplayed())
         tab_box->reset(true);
 #endif
+#ifdef KWIN_BUILD_KAPPMENU
+        if (m_windowsMenu.removeOne(c->window()))
+            c->emitAppMenuAvailable();
+#endif
 }
 
 void Workspace::addUnmanaged(Unmanaged* c, allowed_t)
@@ -907,7 +918,25 @@ void Workspace::slotReloadConfig()
 {
     reconfigure();
 }
+#ifdef KWIN_BUILD_KAPPMENU
+void Workspace::slotMenuAvailable(qulonglong wid)
+{
+    Client *c = findClient(WindowMatchPredicate(wid));
+
+    if (c)
+        c->emitAppMenuAvailable();
+    else
+        m_windowsMenu.append(wid);
+}
 
+void Workspace::slotClearMenus()
+{
+    Client *c = 0;
+    foreach (c, clients) {
+       c->emitAppMenuUnavailable();
+    }
+}
+#endif
 void Workspace::reconfigure()
 {
     reconfigureTimer.start(200);
diff --git a/kwin/workspace.h b/kwin/workspace.h
index 16630f7..e1569cb 100644
--- a/kwin/workspace.h
+++ b/kwin/workspace.h
@@ -650,6 +650,10 @@ private slots:
     void writeWindowRules();
     void slotBlockShortcuts(int data);
     void slotReloadConfig();
+#ifdef KWIN_BUILD_KAPPMENU
+    void slotMenuAvailable(qulonglong wid);
+    void slotClearMenus();
+#endif
     void setupCompositing();
     /**
      * Called from setupCompositing() when the CompositingPrefs are ready.
@@ -928,6 +932,10 @@ private:
     QTimer compositeResetTimer; // for compressing composite resets
     bool m_finishingCompositing; // finishCompositing() sets this variable while shutting down
 
+#ifdef KWIN_BUILD_KAPPMENU
+    QList<WId> m_windowsMenu;
+#endif
+
     Scripting *m_scripting;
 
 private:
