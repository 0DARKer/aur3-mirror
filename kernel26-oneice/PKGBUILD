# Maintainer: Ning Bao <phabulosa (at) gmail (dot) com>
# PKGBUILD originaly from
## AUR kernel26-one by Joao Rodrigues <gothicknight (at) gmail (dot) com>
## AUR kernel26-ice by Giuseppe Calderaro <guiseppecalderaro (at) gmail (doc) com>

pkgname=kernel26-oneice
pkgver=2.6.29.3
_basekernel=2.6.29
pkgrel=1
pkgdesc="The Linux Kernel for the Acer Aspire One A150 with Tuxonice support"
arch=('i686')
license=('GPL2')
url="http://www.kernel.org"
groups=(one)
depends=('coreutils' 'module-init-tools')
conflicts=('kernel26-one' 'kernel26-one-dev')
optdepends=('tuxonice-userui' 'hibernate-script' 'fbsplash')
install=kernel26-oneice.install
source=(ftp://ftp.kernel.org/pub/linux/kernel/v2.6/linux-$_basekernel.tar.bz2
        http://www.kernel.org/pub/linux/kernel/v2.6/patch-$pkgver.bz2
	http://www.tuxonice.net/downloads/all/tuxonice-3.0.1-for-2.6.29.patch.bz2
	http://sources.gentoo.org/viewcvs.py/*checkout*/linux-patches/genpatches-2.6/trunk/2.6.29/4200_fbcondecor-0.9.6.patch
	http://piie.net/files/acerhdf-one-2.6.29.patch
	ath5k-patch1.patch
	ath5k-patch2.patch
	lvds-dither.patch
	$pkgname.preset
        config)
md5sums=('64921b5ff5cdadbccfcd3820f03be7d8'
	 '4e16a087ca4455f5e95c5890c4ac23f6'
         '3964043faf7ddd325ee535dc1af23d22'
         'dc0af2aaa5ea81b003847771c1b4600e'
	 'db912179cdd3d110736dd1c31a4a4d20'
         'a4a0f965e5624676d96c2233f6a0bfed'
         '829a15624a124d4d12c11b614d07600d'
	 'a905c394ff4ec9ccf1e4824c53572da8'
         'f6e6ef4be06781e418392cb777ada5ef'
	 '6683eac00785ab0b316a650c80d50f55')

build() {
   # if the user hasn't set his makepkg.conf
   export CFLAGS="-march=prescott -O3 -pipe" 
   export CXXFLAGS="${CFLAGS}"
   export MAKEFLAGS="-j3"
   export CARCH="i686"

   export KARCH="x86"

   # get into the linux source directory and start some magic
   cd ${srcdir}/linux-$_basekernel

   # remove the extraversion from Makefile
   sed -i 's|^EXTRAVERSION = .*$|EXTRAVERSION =|g' Makefile

   # Applying official patch
   patch -Np1 -i $startdir/src/patch-$pkgver || return 1

   # applying tuxonice patch
   patch -Np1 -i $startdir/src/tuxonice-3.0.1-for-2.6.29.patch || return 1

   # Applying gentoo patches, including fbcondecor
   for i in $(ls ../[1-9][0-9][0-9][0-9]*);do
	patch -Np1 -i ../$i || return 1
   done

   # Applying acerhdf patch (EXPERIMENTAL)
   patch -Np1 -i $startdir/src/acerhdf-one-$_basekernel.patch || return 1

   # Applying ath5k LED patch
   patch -Np1 -i ../ath5k-patch1.patch || return 1
   patch -Np1 -i ../ath5k-patch2.patch || return 1

   # Applying lvds-dither patch, refer to http://wiki.msiwind.net/index.php/KMS#Patch
   patch -Np1 -i ../lvds-dither.patch ||return 1

   #echo "patching coretemp.c"
   #patch -p0 -i ../coretemp.c.patch || return 1

   echo load configuration
   cp ../config ./.config

   # set kernel version libpath to basekernel
   . ./.config
   _kernver="${_basekernel}${CONFIG_LOCALVERSION}"   

#   make menuconfig
   make silentoldconfig
# Uncomment to configure the kernel!
# return 1
   echo making the kernel!
   make bzImage modules || return 1
   mkdir -p ${pkgdir}/{lib/modules,boot}
   # install our modules
   make INSTALL_MOD_PATH=${pkgdir} modules_install || return 1
   # install the kernel
   cp System.map $pkgdir/boot/System.map-$pkgname
   cp arch/x86/boot/bzImage $pkgdir/boot/vmlinuz-$pkgname

   # We need a decent /usr/src to build modules, so

  install -D -m644 Makefile \
    $startdir/pkg/usr/src/linux-${_kernver}/Makefile
  install -D -m644 kernel/Makefile \
    $startdir/pkg/usr/src/linux-${_kernver}/kernel/Makefile
  install -D -m644 .config \
    $startdir/pkg/usr/src/linux-${_kernver}/.config
  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/include

  for i in acpi asm-{generic,x86} config linux math-emu media net pcmcia scsi sound video; do
    cp -a include/$i $startdir/pkg/usr/src/linux-${_kernver}/include/
  done

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers $startdir/pkg/usr/src/linux-${_kernver}
  cp -a scripts $startdir/pkg/usr/src/linux-${_kernver}
  # fix permissions on scripts dir
  chmod og-w -R $startdir/pkg/usr/src/linux-${_kernver}/scripts
  #mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/.tmp_versions

  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/arch/$KARCH/kernel

  cp arch/$KARCH/Makefile $startdir/pkg/usr/src/linux-${_kernver}/arch/$KARCH/
  if [ "$CARCH" = "i686" ]; then
    cp arch/$KARCH/Makefile_32.cpu $startdir/pkg/usr/src/linux-${_kernver}/arch/$KARCH/
  fi
  cp arch/$KARCH/kernel/asm-offsets.s $startdir/pkg/usr/src/linux-${_kernver}/arch/$KARCH/kernel/

  # add headers for lirc package
  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/drivers/media/video
  cp drivers/media/video/*.h  $startdir/pkg/usr/src/linux-${_kernver}/drivers/media/video/
  for i in bt8xx cpia2 cx25840 cx88 em28xx et61x251 pwc saa7134 sn9c102 usbvideo zc0301; do
   mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/drivers/media/video/$i
   cp -a drivers/media/video/$i/*.h $startdir/pkg/usr/src/linux-${_kernver}/drivers/media/video/$i
  done
  # add dm headers
  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/drivers/md
  cp drivers/md/*.h  $startdir/pkg/usr/src/linux-${_kernver}/drivers/md
  # add inotify.h
  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/include/linux
  cp include/linux/inotify.h $startdir/pkg/usr/src/linux-${_kernver}/include/linux/
  # add CLUSTERIP file for iptables
  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/net/ipv4/netfilter/
  # add wireless headers
  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/net/mac80211/
  cp net/mac80211/*.h $startdir/pkg/usr/src/linux-${_kernver}/net/mac80211/
  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core
  cp drivers/media/dvb/dvb-core/*.h $startdir/pkg/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core/
  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/11194
  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/include/config/dvb/
  cp include/config/dvb/*.h $startdir/pkg/usr/src/linux-${_kernver}/include/config/dvb/
  # add xfs and shmem for aufs building
  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/fs/xfs
  mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/mm
  cp fs/xfs/xfs_sb.h $startdir/pkg/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h
  # add vmlinux
  cp vmlinux $startdir/pkg/usr/src/linux-${_kernver}
  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do 
    mkdir -p $startdir/pkg/usr/src/linux-${_kernver}/`echo $i | sed 's|/Kconfig.*||'`
    cp $i $startdir/pkg/usr/src/linux-${_kernver}/$i
  done

  cd $startdir/pkg/usr/src/linux-${_kernver}/include && ln -s asm-$KARCH asm

  chown -R root.root $startdir/pkg/usr/src/linux-${_kernver}
  find $startdir/pkg/usr/src/linux-${_kernver} -type d -exec chmod 755 {} \;
  cd $startdir/pkg/lib/modules/${_kernver} && \
    (rm -f source build; ln -sf ../../../usr/src/linux-${_kernver} build)



  # install working and fallback mkinitcpio.conf file and preset file for kernel
  # install -m644 -D $startdir/$pkgname.preset $startdir/pkg/etc/mkinitcpio.d/$pkgname.preset || return 1
  # install -m644 -D $startdir/mkinitcpio-$pkgname-working.conf $startdir/pkg/etc/mkinitcpio.d/$pkgname-working.conf || return 1
  # install -m644 -D $startdir/mkinitcpio-$pkgname-fallback.conf $startdir/pkg/etc/mkinitcpio.d/$pkgname-fallback.conf || return 1

  # set correct depmod command for install
  sed -i -e "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" $startdir/$pkgname.install
  # echo -e "# DO NOT EDIT THIS FILE\nALL_kver='${_kernver}'" > $startdir/pkg/etc/mkinitcpio.d/$pkgname.kver

  # remove unneeded architectures
  rm -rf $startdir/pkg/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,cris,frv,h8300,ia64,m32r,m68k,m68knommu,mips,mn10300,parisc,powerpc,ppc,s390,sh,sh64,sparc,sparc64,um,v850,xtensa} 
  # Delete firmware directory
  rm -rf ${pkgdir}/lib/firmware
}
