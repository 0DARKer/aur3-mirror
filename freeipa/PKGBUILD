# Maintainer: Xiao-Long Chen <chenxiaolong@cxl.epac.to>

# Quite possibly the ugliest PKGBUILD you'll ever see :P

# NOTE: ntp, autofs, and ntp support is currently broken because the formats of
# the /etc/conf.d/ configuration files in Arch Linux differ from the formats of
# Fedora's /etc/sysconfig/ configuration files.

# Active directory trusts will not (probably never) work in Arch. It requires a
# heavily patched version of Samba 4, which uses MIT Kerberos instead of
# Heimdal. (Fedora went through 174 releases to get this working O_O)

# Client only, for now
build_server=false

# SELinux support
build_selinux=false

# AUR workaround
pkgname=freeipa

pkgbase=freeipa
: && pkgname=('freeipa-client' 'python2-freeipa')

if [ "x${build_server}" == "xtrue" ]; then
  pkgname+=('freeipa-server' 'freeipa-admintools')

  if [ "x${build_selinux}" == "xtrue" ]; then
    pkgname+=('freeipa-server-selinux')
  fi
fi

pkgver=3.1.2
pkgrel=1
pkgdesc="The Identity, Policy, and Audit system"
arch=('i686' 'x86_64')
url="http://www.freeipa.org/"
license=('GPL')

# Client dependencies
makedepends=('389-ds-base'
             #'libwbclient' # Samba4 version
             'samba4'
             'svrcore'
             'systemd'
             'talloc'
             'tevent')

# SELinux dependencies
if [ "x${build_selinux}" == "xtrue" ]; then
  makedepends+=('selinux-refpolicy-arch'
                'selinux-usr-checkpolicy'
                'selinux-usr-policycoreutils')
fi

# FreeIPA server dependencies
if [ "x${build_server}" == "xtrue" ]; then
  makedepends+=()
fi

# Other dependencies
makedepends+=('curl'
              'krb5'
              'memcached'
              'nspr'
              'nss'
              'openssl'
              'openldap'
              'popt'
              'pylint'
              'python2'
              'python2-distribute'
              'python2-dnspython'
              'python2-kerberos'
              'python2-krbv'
              'python2-ldap'
              'python2-lxml'
              'python2-m2crypto'
              'python2-netaddr'
              'python2-nss'
              'python2-polib'
              'python2-pyasn1'
              'python2-pyopenssl'
              # Red Hat specific
              #'python2-rhsm'
              'sssd'
              'xmlrpc-c')

# Dependencies for "make check"
checkdepends=('check')

options=('!libtool')
source=("http://www.freeipa.org/downloads/src/freeipa-${pkgver}.tar.gz"
        'sss-auth-setup.py'
        'files.freeipa-server'
        'files.freeipa-server-selinux'
        'files.freeipa-admintools'
        'files.freeipa-client'
        'files.python2-freeipa'
        '0001_Use_ArchLinux_Paths.patch'
        '0002_Add_ArchLinux_Platform.patch'
        '0003_Use_Python_2.patch'
        '0004_NTP_Fixes.patch'
        '0005_ntpdate_path.patch')
sha512sums=('a36f761d148149aac6064b5467e08a75f308d07238197fb73f15a4256cd06219af337d3aac057a64ae952cd67d6711b64965816c15efc791fc0fb094fc8f7ad5'
            'a58d28405adbf2e8d52f998b30f17dc5f494c6507a7754d157f24888b712b4838d38f011a90473fa16976b6ecdb1fb5d70d064b3eac8afcc386d507d0e20b65d'
            'feb25e3e0c65bce79861f5e36afd0e59a6de794987d2444e8beab35488eb4295b0a6116b5c3e33f5d89aa2e1a705ac2a61347a51e864ab885a87cd162b2a15d9'
            '5182d7a9d25f920c3591bf037dd7ad92bf912db55dc9ac5f1e3fc557c19658515a51270e396aa2614dd7f047b7351cfe281519dc3524f953b495cf9164f836a2'
            'cf9b40b305a004342c40695b635a9eadead90c41197d24c3b96658dc5e992c1748ac3f0262e0c5353e7ddaa3fb2db96143fcd3a6ca7ab34cd737c0d52fad00d6'
            'ae93857dc42f6afb3ec67623b14d3294ad3a21f2ad21e60e245f41ce9fc3ff927ea1820f0783f6f4a5c5bf87d05c3c590fbb441f8dd411bab88be0a29c759897'
            '81bbcc2d567b6b154a1bb436c37ad0efb6e104aa9a651d24545eeb0f4889f15424aa805d2b7460faad2a8804fe2ec59fce64360cd9f61f0ac3f14fb5772c350b'
            '26bd6741e185933d47990a961ca811aece38e97b691b81fd718b92a37b3f63cb18810f8328844041d85e09e365a739339b283ef2043348df4154ee9fe9f8c026'
            'f7404c8bd3747df1c4550cc013a0a056fd050d743dc69d76ef6886be7355674d693776b09011dd3faf7f2e6e878eb7b406737069cf27405fc920a7ed5212620b'
            'dd762c4355eac9afd36525ee203cd298cce476ef10f5e0bc75a6d4f994aab88cb5c7377dc58b07179f231ae02e03e1ba02295eb030bfd0dbb778899ef524a76f'
            '3a793bf971eec9287264a512eeb29f4f2c362141f4f0f04e4d2aa249bdfeff9bdc9d6538586027a52e34ea035044ce341d4faa5937ec5a454b56bbb38165624b'
            '23e8415d85399a7857c414326c8e2e0dbcdc97c0515d8ef1d9e5f2a5d41dd9552edddaa408e1d04f4495077d97e86d618128e9391227745f5c95c73a765bbb7c')

build() {
  cd "${srcdir}/${pkgbase}-${pkgver}"

  # Apply my patches
  # 0001_Use_ArchLinux_Paths.patch
  #   Change Fedora's paths to the equivalents in Arch Linux
  patch -p1 -i "${srcdir}/0001_Use_ArchLinux_Paths.patch"
  # 0002_Add_ArchLinux_Platform.patch
  #   Add platform specific code for starting/stopping services, modifying
  #   authentication (/etc/pam.d/) settings, SELinux settings, etc.
  #   This patch contains code from Fedora and Ubuntu
  patch -p1 -i "${srcdir}/0002_Add_ArchLinux_Platform.patch"
  # 0003_Use_Python_2.patch
  #   FreeIPA hasn't been ported to Python 3, so the code must be modified to
  #   run /usr/bin/python2
  patch -p1 -i "${srcdir}/0003_Use_Python_2.patch"
  # 0004_NTP_Fixes.patch
  #   Arch Linux's ntp does not accept the '-U' parameter and does not have a
  #   /etc/sysconfig/ configuration files, so the relevant code must be removed
  patch -p1 -i "${srcdir}/0004_NTP_Fixes.patch"
  # 0005_ntpdate_path.patch
  #   Arch Linux's ntp package puts ntpdate in /usr/bin/ instead of /usr/sbin/
  patch -p1 -i "${srcdir}/0005_ntpdate_path.patch"

  export SUPPORTED_PLATFORM=archlinux
  export PYTHON=python2

  # Force regeneration of platform support
  rm ipapython/services.py

  make version-update

  pushd ipa-client
  ../autogen.sh --prefix=/usr --sysconfdir=/etc
  popd

  if [ "x${build_server}" == "xtrue" ]; then
    pushd daemons
    ../autogen.sh --prefix=/usr --sysconfdir=/etc --with-openldap
    popd

    pushd install
    ../autogen.sh --prefix=/usr --sysconfdir=/etc
    popd

    make IPA_VERSION_IS_GIT_SNAPSHOT=no all

    if [ "x${build_selinux}" == "xtrue" ]; then
      pushd selinux
      make -j1 all
      popd
    fi
  else
    make IPA_VERSION_IS_GIT_SNAPSHOT=no client
  fi

  # Install to temporary directory #############################################

  export SUPPORTED_PLATFORM=archlinux

  # Force regeneration of platform support
  rm ipapython/services.py

  if [ "x${build_server}" == "xtrue" ]; then
    make install DESTDIR="${srcdir}/install_temp"

    if [ "x${build_selinux}" == "xtrue" ]; then
      pushd selinux
      make install DESTDIR="${srcdir}/install_temp"
      popd
    fi
  else
    make client-install DESTDIR="${srcdir}/install_temp"
  fi

  if [ "x${build_server}" == "xtrue" ]; then
    # Some user-modifiable HTML files are provided. Move these to /etc and link
    # back.
    install -dm755 "${srcdir}/install_temp/etc/ipa/html/"
    install -dm755 "${srcdir}/install_temp/var/cache/ipa/sysrestore/"
    install -dm755 "${srcdir}/install_temp/var/cache/ipa/sysupgrade/"
    install -dm755 "${srcdir}/install_temp/var/cache/ipa/pki-ca/publish/"
    install -dm755 "${srcdir}/install_temp/usr/share/ipa/html/"
    ln -s ../../../../etc/ipa/html/ffconfig.js \
      "${srcdir}/install_temp/usr/share/ipa/html/ffconfig.js"
    ln -s ../../../../etc/ipa/html/ffconfig_page.js \
      "${srcdir}/install_temp/usr/share/ipa/html/ffconfig_page.js"
    ln -s ../../../../etc/ipa/html/ssbrowser.html \
      "${srcdir}/install_temp/usr/share/ipa/html/ssbrowser.html"
    ln -s ../../../../etc/ipa/html/unauthorized.html \
      "${srcdir}/install_temp/usr/share/ipa/html/unauthorized.html"
    ln -s ../../../../etc/ipa/html/browserconfig.html \
      "${srcdir}/install_temp/usr/share/ipa/html/browserconfig.html"
    ln -s ../../../../etc/ipa/html/ipa_error.css \
      "${srcdir}/install_temp/usr/share/ipa/html/ipa_error.css"

    # So we can own our Apache configuration
    install -dm755 "${srcdir}/install_temp/etc/httpd/conf/extra/"
    touch "${srcdir}/install_temp/etc/httpd/conf/extra/ipa.conf"
    touch "${srcdir}/install_temp/etc/httpd/conf/extra/ipa-pki-proxy.conf"
    touch "${srcdir}/install_temp/etc/httpd/conf/extra/ipa-rewrite.conf"
    install -dm755 "${srcdir}/install_temp/usr/share/ipa/html/"
    touch "${srcdir}/install_temp/usr/share/ipa/html/ca.crt"
    touch "${srcdir}/install_temp/usr/share/ipa/html/configure.jar"
    touch "${srcdir}/install_temp/usr/share/ipa/html/kerberosauth.xpi"
    touch "${srcdir}/install_temp/usr/share/ipa/html/krb.con"
    touch "${srcdir}/install_temp/usr/share/ipa/html/krb.js"
    touch "${srcdir}/install_temp/usr/share/ipa/html/krb5.ini"
    touch "${srcdir}/install_temp/usr/share/ipa/html/krbrealm.con"
    touch "${srcdir}/install_temp/usr/share/ipa/html/preferences.html"

    # systemd service
    install -dm755 "${srcdir}/install_temp/usr/lib/systemd/system/"
    install -m644 \
      init/systemd/ipa.service \
      init/systemd/ipa_memcached.service \
      "${srcdir}/install_temp/usr/lib/systemd/system/"

    # Configuration files
    # Use /etc/conf.d ##########################################################
    install -dm755 "${srcdir}/install_temp/etc/conf.d/"
    install -m644 init/ipa_memcached.conf \
      "${srcdir}/install_temp/etc/conf.d/"

    # /run
    install -dm755 "${srcdir}/install_temp/run/"
    install -dm700 "${srcdir}/install_temp/run/ipa/"
    install -dm700 "${srcdir}/install_temp/run/ipa_memcached/"

    # krb5 plugins
    install -dm755 "${srcdir}/install_temp/usr/lib/krb5/plugins/libkrb5/"
    touch "${srcdir}/install_temp/usr/lib/krb5/plugins/libkrb5/winbind_krb5_locator.so"

    # systemd tmpfiles.d configuration
    install -dm755 "${srcdir}/install_temp/usr/lib/tmpfiles.d/"
    install -m644 init/systemd/ipa.conf.tmpfiles \
      "${srcdir}/install_temp/usr/lib/tmpfiles.d/ipa.conf"

    # bash completion configuration files
    install -dm755 "${srcdir}/install_temp/etc/bash_completion.d/"
    install -m644 contrib/completion/ipa.bash_completion \
      "${srcdir}/install_temp/etc/bash_completion.d/ipa"

    # cron files
    install -dm755 "${srcdir}/install_temp/etc/cron.d/"
    install -m644 ipa-compliance.cron "${srcdir}/etc/cron.d/ipa-compliance"
  fi

  install -dm755 "${srcdir}/install_temp/var/lib/ipa-client/sysrestore/"

  # /etc/ipa/ is needed for ipa-client-install
  install -dm755 "${srcdir}/install_temp/etc/ipa/"

  # Fix filenames
  pushd "${srcdir}/install_temp/usr/lib/python2.7/site-packages/"
  mv ipapython-${pkgver}*-py2.7.egg-info ipapython-${pkgver}-py2.7.egg-info
  popd
}

check() {
  cd "${srcdir}/${pkgbase}-${pkgver}"
  # No 'check' target yet
#  make check
}

install_file() {
  if [ -z "${1}" ]; then
    error "No path specified!"
    exit 1
  fi
  if [ ! -e "${srcdir}/install_temp/${1}" ]; then
    error "${1} does not exist!"
    exit 1
  fi
  if [ -d "${srcdir}/install_temp/${1}/" ]; then
    if [ -d "${pkgdir}/${1}/" ]; then
      error "Directory ${1} already exists!"
      exit 1
    fi
  fi
  if [ -f "${srcdir}/install_temp/${1}" ]; then
    if [ -f "${pkgdir}/${1}" ]; then
      error "File ${1} already exists!"
      exit 1
    fi
  fi
  if [ ! -d "${pkgdir}/$(dirname ${1})/" ]; then
    install -dm755 "${pkgdir}/$(dirname ${1})/"
  fi

  # Set permissions
  if echo "${1}" | grep -q ':'; then
    local FILE=${1#*:}
    local PERM=${1%:*}
    mv "${srcdir}/install_temp/${FILE}" "${pkgdir}/${FILE}"
    chmod ${PERM} "${pkgdir}/${FILE}"
  else
    mv "${srcdir}/install_temp/${1}" "${pkgdir}/${1}"
  fi
}

install_files() {
  if [ ! -f "${srcdir}/files.${1}" ]; then
    error "${srcdir}/files.${1} not found!"
    exit 1
  fi
  while read FILE; do
    if echo "${FILE}" | grep -q -e '#' -e '^[ \t]*$'; then
      continue
    fi
    msg "Installing file: ${FILE}"
    install_file ${FILE}
  done < "${srcdir}/files.${1}"
}

if [ "x${build_server}" == "xtrue" ]; then

package_freeipa-server() {
  : && pkgdesc="The IPA authentication server"
  depends=("freeipa-admintools=${pkgver}-${pkgrel}"
           "freeipa-client=${pkgver}-${pkgrel}"
           "python2-freeipa=${pkgver}-${pkgrel}"
           '389-ds-base'
           'acl'
           'apache'
           'cyrus-sasl-gssapi'
           'keyutils'
           'krb5'
           'memcached'
           'mod_auth_kerb'
           'mod_nss'
           'mod_wsgi'
           'nss'
           'ntp'
           'openldap'
           'python2-dnspython'
           'python2-krbv'
           'python2-ldap'
           'python2-memcached'
           'python2-pyasn1'
           'slapi-nis'
           'systemd'
           'tomcat7'
           'zip')
  optdepends=('python2-m2crypto: For Microsoft Active Directory trusts'
              'samba4: For Microsoft Active Directory trusts'
              'sssd: For Microsoft Active Directory trusts')
  backup=('etc/ipa/html/browserconfig.html'
          'etc/ipa/html/ffconfig.js'
          'etc/ipa/html/ffconfig_page.js'
          'etc/ipa/html/ipa_error.css'
          'etc/ipa/html/ssbrowser.html'
          'etc/ipa/html/unauthorized.html')
  # Backup files created by this package
  backup+=('etc/httpd/conf/extra/ipa-rewrite.conf'
           'etc/httpd/conf/extra/ipa.conf'
           'etc/httpd/conf/extra/ipa-pki-proxy.conf'
           'usr/share/ipa/html/ca.crt')
  install=install.freeipa-server

  # SELinux dependencies
  if [ "x${build_selinux}" == "xtrue" ]; then
    depends+=("freeipa-server-selinux=${pkgver}-${pkgrel}"
              'selinux-refpolicy-arch'
              'selinux-usr-policycoreutils')
  fi

  # Conflicts with mod_ssl, but that is a part of the apache package
  #conflicts=('mod_ssl')

  install_files freeipa-server
}

if [ "x${build_selinux}" == "xtrue" ]; then

package_freeipa-server-selinux() {
  : && pkgdesc="SELinux rules for freeipa-server daemons"
  depends=("freeipa-server=${pkgver}-${pkgrel}"
           'selinux-usr-policycoreutils')
  install=install.freeipa-server-selinux

  install_files freeipa-server-selinux
}


fi

package_freeipa-admintools() {
  : && pkgdesc="IPA administrative tools"
  depends=("freeipa-client=${pkgver}-${pkgrel}"
           "python2-freeipa=${pkgver}-${pkgrel}"
           'python2-krbv'
           'python2-ldap')

  install_files freeipa-admintools
}

fi

package_freeipa-client() {
  : && pkgdesc="IPA authentication for use on clients"
  depends=("python2-freeipa=${pkgver}-${pkgrel}"
           'autofs'
           'bind'
           'certmonger'
           'curl-gssapi'
           'cyrus-sasl-gssapi'
           'krb5'
           'nfs-utils'
           'nfsidmap'
           'nss'
           'ntp'
           'oddjob'
           'pam-krb5'
           'python2-dnspython'
           'python2-krbv'
           'python2-ldap'
           'sssd'
           'wget'
           'xmlrpc-c')

  # authconfig is Fedora specific
  #depends+=('authconfig')

  install_files freeipa-client

  install -dm755 "${pkgdir}/usr/sbin/"
  install -m755 "${srcdir}/sss-auth-setup.py" \
                "${pkgdir}/usr/sbin/sss-auth-setup"
}

package_python2-freeipa() {
  : && pkgdesc="Python 2 libraries used by IPA"
  depends=('gnupg'
           'python2-kerberos'
           'python2-lxml'
           'python2-netaddr'
           'python2-nss'
           'python2-pyopenssl'
           'sssd')
  # Backup files created by this package
  backup=('etc/ipa/default.conf'
          'etc/ipa/ca.crt')

  install_files python2-freeipa
}

# vim:set ts=2 sw=2 et:
