diff -urN myhdl/conversion/_analyze.py myhdl/conversion/_analyze.py
--- myhdl/conversion/_analyze.py	2008-12-21 18:19:52.000000000 +0100
+++ myhdl/conversion/_analyze.py	2008-12-26 02:03:04.000000000 +0100
@@ -274,6 +274,11 @@
         if node.else_:
             self.visit(node.else_)
         
+    def visitIfExp(self, node, *args):
+        self.visit(node.test)
+        self.visit(node.then)
+        self.visit(node.else_)
+        
     def visitPrintnl(self, node, *args):
         if node.dest is not None:
             self.raiseError(node, _error.NotSupported, "printing to a file with >> syntax")
@@ -700,6 +705,15 @@
         if (len(choices) == item1._nritems) or (node.else_ is not None):
             node.isFullCase = True
             
+    def visitIfExp(self, node, *args):
+            self.visit(node.test, *args)
+            self.refStack.push()
+            self.visit(node.then, *args)
+            self.refStack.pop()
+            self.refStack.push()
+            self.visit(node.else_, *args)
+            self.refStack.pop()
+            
     def visitListComp(self, node, *args):
         mem = node.obj = _Ram()
         self.visit(node.expr, _access.INPUT, _kind.DECLARATION)
diff -urN myhdl/conversion/_toVHDL.py myhdl/conversion/_toVHDL.py
--- myhdl/conversion/_toVHDL.py	2008-12-23 19:21:05.000000000 +0100
+++ myhdl/conversion/_toVHDL.py	2008-12-26 01:52:23.000000000 +0100
@@ -1105,6 +1105,15 @@
         self.write("end if;")
 
 
+    def visitIfExp(self, node, *args):
+        self.write("(")
+        self.visit(node.then)
+        self.write(") when (")
+        self.visit(node.test)
+        self.write(") else (")
+        self.visit(node.else_)
+        self.write(")")
+
     def visitKeyword(self, node, *args):
         self.visit(node.expr)
 
diff -urN myhdl/conversion/_toVerilog.py myhdl/conversion/_toVerilog.py
--- myhdl/conversion/_toVerilog.py	2008-12-21 18:19:52.000000000 +0100
+++ myhdl/conversion/_toVerilog.py	2008-12-26 01:51:57.000000000 +0100
@@ -833,6 +833,15 @@
             self.writeline()
             self.write("end")
 
+    def visitIfExp(self, node, *args):
+        self.write("(")
+        self.visit(node.test)
+        self.write(") ? (")
+        self.visit(node.then)
+        self.write(") : (")
+        self.visit(node.else_)
+        self.write(")")
+
     def visitKeyword(self, node, *args):
         self.visit(node.expr)
 
