#!/bin/bash - 
#===============================================================================
#
#          FILE: nginx-site
# 
#   DESCRIPTION: Script for adding/disabling sites on nginx, based
#               on script from http://catap.ru/debian-catap/
# 
#        AUTHOR: Piotr RogoÅ¼a (piecia), rogoza dot piotr at gmail dot com
#  ORGANIZATION: dracoRP
#===============================================================================

CONFIGFILE='/etc/conf.d/nginx-site.conf'
#{{{ ENV
SYSCONFDIR='/etc/nginx'
EXTSITE='.conf'
SITESAVAILABLE="$SYSCONFDIR/sites-available"
SITESENABLED="$SYSCONFDIR/sites-enabled"
if [ -r "$CONFIGFILE" ]; then
    source $CONFIGFILE
fi
# else use default options
#}}}
### Don't modify below the line.
PROGRAMNAME=$(basename $0)
PROGENABLE=nginx-ensite
PROGDISABLE=nginx-dissite
OPTIONS='hv'
VERSION=0.1
#-------------------------------------------------------------------------------
# Functions
#-------------------------------------------------------------------------------
check_permission (){ #{{{
#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  check_permission
#   DESCRIPTION:  check permission for write to the $SITESENABLED directory
#    PARAMETERS:  -
#       RETURNS:  1 if don't have permission
#-------------------------------------------------------------------------------
    if [ ! -w "$SITESENABLED" ]; then
        echo "You don't have permission to write or delete files from the directory: $SITESENABLED"
        return 1
    fi
} # ----------  end of function check_permission  ----------}}}
enable_site (){ #{{{
#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  enable_site
#   DESCRIPTION:  enable site
#    PARAMETERS:  site priority
#       RETURNS:  -
#-------------------------------------------------------------------------------
    if [ -z "$1" ]; then
        echo "Which site would you like to enable?"
        echo -n "Your choices are: "
        ls $SITESAVAILABLE/*$EXTSITE 2>/dev/null | \
        sed -e "s,$SITESAVAILABLE/,,g" -e "s,$EXTSITE,,g" | xargs echo
        echo -n "Site name? "
        read SITENAME
    else
        SITENAME=$1
    fi

    if [ -z "$SITENAME" ]; then
        echo "No site has been selected."
        exit
    fi

#    if [ "$SITENAME" = "default" ]; then
#        PRIORITY="000"
#    fi
    
    if [ -z "$2" ]; then
        echo -n "Enter the priority for the site:"
        read PRIORITY
    elif [ -n "$2" ]; then
        PRIORITY="$2"
    fi

    if [ -e "$SITESENABLED/$SITENAME$EXTSITE" -o \
        -e "$SITESENABLED/$PRIORITY-$SITENAME" ]; then
        echo "This site is already enabled!"
        exit 0
    fi

    if ! [ -e "$SITESAVAILABLE/$SITENAME$EXTSITE" ]; then
        echo "This site does not exist!" >&2
        exit 1
    fi

    if [ "$SITENAME" = "default" ]; then
        ln -sf $SITESAVAILABLE/$SITENAME$EXTSITE \
            $SITESENABLED/${PRIORITY:+$PRIORITY-}$SITENAME$EXTSITE
    else
        ln -sf $SITESAVAILABLE/$SITENAME$EXTSITE \
            $SITESENABLED/$SITENAME$EXTSITE
    fi

    echo "Site '${PRIORITY:+$PRIORITY-}$SITENAME' installed; run 'systemctl reload nginx' to enable."
} # ----------  end of function enable_site  ----------}}}
disable_site (){ #{{{
#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  disable_site
#   DESCRIPTION:  disable site
#    PARAMETERS:  site
#       RETURNS:  -
#-------------------------------------------------------------------------------
    if [ -z "$1" ]; then
        echo "Which site would you like to disable?"
        echo -n "Your choices are: "
        ls $SITESENABLED/*$EXTSITE 2>/dev/null| \
        sed -e "s,$SITESENABLED/,,g" -e "s,$EXTSITE,,g" | xargs echo
        echo -n "Site name? "
        read SITENAME
    else
        SITENAME=$1
    fi

    if [ -z "$SITENAME" ]; then
        echo "No site has been selected."
        exit
    fi

#    if [ -z "$2" ]; then
#        echo -n "Enter the priority for the site:"
#        read PRIORITY
#    fi
    if [ -n "$2" ]; then
        PRIORITY="$2"
    fi

    if ! [ -e "$SITESENABLED/$SITENAME$EXTSITE" -o \
        -e "$SITESENABLED/$PRIORITY-$SITENAME$EXTSITE" ]; then
        if [ -e "$SITESAVAILABLE/$SITENAME$EXTSITE" ]; then
            echo "Site $SITENAME is already disabled"
            exit 0
        fi
        echo "Site $SITENAME does not exist!" >&2
        exit 1
    fi

    if ! rm "$SITESENABLED/$SITENAME$EXTSITE" 2>/dev/null; then
        rm -f "$SITESENABLED/${PRIORITY:+$PRIORITY-}$SITENAME$EXTSITE"
    fi
    echo "Site '$SITENAME' disabled; run 'systemctl reload nginx' to fully disable."
} # ----------  end of function disable_site  ----------}}}
long_help (){ #{{{
    echo "Run '$PROGDISABLE [site]' to disable a site"
    echo "Run '$PROGENABLE [site] [priority]' to enable a site"
    echo "If you do not specify the name of a site you will be asked to do so."
} # ----------  end of function long_help  ----------}}}
short_help (){ #{{{
    echo "Run '$PROGRAMNAME -h' to see help"
} # ----------  end of function short_help  ----------}}}
show_version (){ #{{{
#---  FUNCTION  ----------------------------------------------------------------
#          NAME:  show_version
#   DESCRIPTION:  show version of this script
#    PARAMETERS:  -
#       RETURNS:  -
#-------------------------------------------------------------------------------
    echo "$PROGRAMNAME version $VERSION"
} # ----------  end of function show_version  ----------}}}
### Main program
check_permission || exit 1
while getopts "$OPTIONS" OPT; do
    case $OPT in
        h)
            long_help
            exit 0
            ;;
        v)
            show_version
            exit 0
           ;;
        ?)
            short_help
            exit 1
            ;;
    esac
done
case $PROGRAMNAME in
    $PROGENABLE)
        enable_site $*
        ;;
    $PROGDISABLE)
        disable_site $*
        ;;
    *)
        short_help
        exit 1
        ;;
esac
