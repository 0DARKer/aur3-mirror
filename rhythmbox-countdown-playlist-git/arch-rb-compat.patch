
--- a/countdown_playlist.plugin	2013-10-08 14:41:48.243184703 +0100
+++ b/countdown_playlist.plugin	2013-10-08 11:41:19.499994000 +0100
@@ -1,5 +1,5 @@
 [Plugin]
-Loader=python
+Loader=python3
 Module=countdown_playlist
 IAge=2
 Depends=rb

--- a/countdown_playlist.py	2013-10-08 11:41:19.499994000 +0100
+++ b/countdown_playlist.py	2013-10-08 14:42:36.532836474 +0100
@@ -214,18 +214,18 @@
                 keyword.lstrip(' ')
                 for row in self.shell.props.library_source.props.base_query_model:
                     entry = row[0]
-                    keyword = string.lower(keyword)
-                    artist = string.lower(entry.get_string(RB.RhythmDBPropType.ARTIST))
-                    genre  = string.lower(entry.get_string(RB.RhythmDBPropType.GENRE))
-                    title  = string.lower(entry.get_string(RB.RhythmDBPropType.TITLE))
-                    album  = string.lower(entry.get_string(RB.RhythmDBPropType.ALBUM))
-                    album_artist  = string.lower(entry.get_string(RB.RhythmDBPropType.ALBUM_ARTIST))
-                    comment  = string.lower(entry.get_string(RB.RhythmDBPropType.COMMENT))
+                    keyword = str.lower(keyword)
+                    artist = str.lower(entry.get_string(RB.RhythmDBPropType.ARTIST))
+                    genre  = str.lower(entry.get_string(RB.RhythmDBPropType.GENRE))
+                    title  = str.lower(entry.get_string(RB.RhythmDBPropType.TITLE))
+                    album  = str.lower(entry.get_string(RB.RhythmDBPropType.ALBUM))
+                    album_artist  = str.lower(entry.get_string(RB.RhythmDBPropType.ALBUM_ARTIST))
+                    comment  = str.lower(entry.get_string(RB.RhythmDBPropType.COMMENT))
                     year  = entry.get_ulong(RB.RhythmDBPropType.YEAR)
-                    if string.find(artist, keyword) is not -1 or string.find(genre, keyword) is not -1 or \
-                            string.find(title, keyword) is not -1 or string.find(album, keyword) is not -1 or \
-                            string.find(album_artist, keyword) is not -1 or string.find(comment, keyword) is not -1 \
-                            or string.find(string.lower(str(year)), keyword) is not -1:
+                    if str.find(artist, keyword) is not -1 or str.find(genre, keyword) is not -1 or \
+                            str.find(title, keyword) is not -1 or str.find(album, keyword) is not -1 or \
+                            str.find(album_artist, keyword) is not -1 or str.find(comment, keyword) is not -1 \
+                            or str.find(str.lower(str(year)), keyword) is not -1:
                         songLocation = entry
                         songDuration = entry.get_ulong(RB.RhythmDBPropType.DURATION)
                         CountdownList.append([songLocation, songDuration])

--- a/countdown_rb3compat.py	2013-10-08 11:41:19.499994000 +0100
+++ b/countdown_rb3compat.py	2013-10-08 14:40:23.580461069 +0100
@@ -25,10 +25,23 @@
 from gi.repository import Gtk
 from gi.repository import Gio
 from gi.repository import GLib
+from gi.repository import GObject
+from gi.repository import RB
 import sys
 import rb
 import lxml.etree as ET
 
+def pygobject_version():
+    ''' 
+    returns float of the major and minor parts of a pygobject version 
+    e.g. version (3, 9, 5) return float(3.9)
+    '''
+    to_number = lambda t: ".".join(str(v) for v in t)
+    
+    str_version = to_number(GObject.pygobject_version)
+    
+    return float(str_version.rsplit('.',1)[0])
+
 PYVER = sys.version_info[0]
 
 if PYVER >= 3:
@@ -50,15 +63,21 @@
 
 def unicodestr(param, charset):
     if PYVER >=3:
-        return str(param, charset)
+        return param#str(param, charset)
     else:
         return unicode(param, charset)
         
 def unicodeencode(param, charset):
     if PYVER >=3:
-        return str(param).encode(charset)
+        return param#str(param).encode(charset)
     else:
         return unicode(param).encode(charset)
+        
+def unicodedecode(param, charset):
+    if PYVER >=3:
+        return param
+    else:
+        return param.decode(charset)
 
 def urlparse(uri):
     if PYVER >=3:
@@ -108,12 +127,11 @@
     else:
         return urllib.quote_plus(uri)
 
-        
-def is_rb3(shell):
-    if hasattr( shell.props.window, 'add_action' ):
-        return True
+def is_rb3(*args):
+    if hasattr(RB.Shell.props, 'ui_manager'):
+        return False
     else:
-        return False    
+        return True 
         
 class Menu(object):
     '''
@@ -164,8 +182,7 @@
             action.associate_menuitem(item)
             self._rbmenu_items[label] = item
             bar = self.get_menu_object(menubar)
-            print menubar
-            print self.ui_filename 
+            
             if position == -1:
                 bar.append(item)
             else:
@@ -376,6 +393,21 @@
         :param action_name: `str` is the Action unique name
         '''
         return self._actions[action_name]
+
+    def add_action_with_accel(self, func, action_name, accel, **args):
+        '''
+        Creates an Action with an accelerator and adds it to the ActionGroup
+        
+        :param func: function callback used when user activates the action
+        :param action_name: `str` unique name to associate with an action
+        :param accel: `str` accelerator
+        :param args: dict of arguments - this is passed to the function callback
+        
+        Notes: 
+        see notes for add_action
+        '''
+        args['accel'] = accel
+        return self.add_action(func, action_name, **args)
             
     def add_action(self, func, action_name, **args ):
         '''
@@ -395,7 +427,12 @@
             label = args['label']
         else:
             label=action_name
-        
+
+        if 'accel' in args:
+            accel = args['accel']
+        else:
+            accel = None
+            
         state = ActionGroup.STANDARD            
         if 'action_state' in args:
             state = args['action_state']
@@ -406,35 +443,47 @@
                                                GLib.Variant('b', False))
             else:
                 action = Gio.SimpleAction.new(action_name, None)
-            
-            action.connect('activate', func, args)
 
             action_type = 'win'
             if 'action_type' in args:
                 if args['action_type'] == 'app':
                     action_type = 'app'
 
+            app = Gio.Application.get_default()
+                
             if action_type == 'app':
-                app = Gio.Application.get_default()
                 app.add_action(action)
             else:
                 self.shell.props.window.add_action(action)
                 self.actiongroup.add_action(action)
+
+            if accel:
+                app.add_accelerator(accel, action_type+"."+action_name, None)
         else:
+            if 'stock_id' in args:
+                stock_id = args['stock_id']
+            else:
+                stock_id = Gtk.STOCK_CLEAR
+                
             if state == ActionGroup.TOGGLE:
                 action = Gtk.ToggleAction(label=label,
                     name=action_name,
-                   tooltip='', stock_id=Gtk.STOCK_CLEAR)
+                   tooltip='', stock_id=stock_id)
             else:
                 action = Gtk.Action(label=label,
                     name=action_name,
-                   tooltip='', stock_id=Gtk.STOCK_CLEAR)
-
-            action.connect('activate', func, None, args)
-            self.actiongroup.add_action(action)
+                   tooltip='', stock_id=stock_id)
+                   
+            if accel:
+                self.actiongroup.add_action_with_accel(action, accel)
+            else:
+                self.actiongroup.add_action(action)
             
         act = Action(self.shell, action)
+        act.connect('activate', func, args)
+
         act.label = label
+        act.accel = accel
             
         self._actions[action_name] = act
             
@@ -500,7 +549,7 @@
             else:
                 return None
 
-        def add_app_menuitems(self, ui_string, group_name):
+        def add_app_menuitems(self, ui_string, group_name, menu='tools'):
             '''
             utility function to add application menu items.
             
@@ -515,6 +564,8 @@
             this string is in XML format
         
             :param group_name: `str` unique name of the ActionGroup to add menu items to
+            :param menu: `str` RB2.99 menu section to add to - nominally either
+              'tools' or 'view'
             '''
             if is_rb3(self.shell):
                 root = ET.fromstring(ui_string)
@@ -528,11 +579,12 @@
                     item = Gio.MenuItem()
                     item.set_detailed_action('app.' + action_name)
                     item.set_label(act.label)
+                    item.set_attribute_value("accel", GLib.Variant("s", act.accel))
                     app = Gio.Application.get_default()
-                    index = 'tools'+action_name
-                    app.add_plugin_menu_item('tools', 
+                    index = menu+action_name
+                    app.add_plugin_menu_item(menu, 
                         index, item)
-                    self._uids[index] = 'tools'
+                    self._uids[index] = menu
             else:
                 uim = self.shell.props.ui_manager
                 self._uids.append(uim.add_ui_from_string(ui_string))
@@ -579,7 +631,7 @@
                     elif popup_name == 'PodcastViewPopup':
                         plugin_type = 'podcast-episode-popup'
                     else:
-                        print "unknown type %s" % plugin_type
+                        print ("unknown type %s" % plugin_type)
                         
                     index = plugin_type+action_name
                     app.add_plugin_menu_item(plugin_type, index, item)
@@ -626,6 +678,7 @@
     '''
     class that wraps around either a Gio.Action or a Gtk.Action
     '''
+    
     def __init__(self, shell, action):
         '''
         constructor.
@@ -637,7 +690,29 @@
         self.action = action
         
         self._label = ''
+        self._accel = ''
+        self._current_state = False
+        self._do_update_state = True
+        
+    def connect(self, address, func, args):
+        self._connect_func = func
+        self._connect_args = args
+        
+        if address == 'activate':
+            func = self._activate
+            
+        if is_rb3(self.shell):
+            self.action.connect(address, func, args)
+        else:
+            self.action.connect(address, func, None, args)
 
+    def _activate(self, action, *args):
+        if self._do_update_state:
+            self._current_state = not self._current_state
+            self.set_state(self._current_state)
+        
+        self._connect_func(action, None, self._connect_args)
+        
     @property
     def label(self):
         ''' 
@@ -657,6 +732,20 @@
             self.action.set_label(new_label)
             
         self._label = new_label
+        
+    @property
+    def accel(self):
+        ''' 
+        get the accelerator associated with the Action
+        '''
+        return self._accel
+            
+    @accel.setter
+    def accel(self, new_accelerator):
+        if new_accelerator:
+            self._accel = new_accelerator
+        else:
+            self._accel = ''
 
     def get_sensitive(self):
         ''' 
@@ -669,6 +758,14 @@
         else:
             return self.action.get_sensitive()
             
+    def set_state(self, value):
+        ''' 
+        set the state of a stateful action - this is applicable only
+        to RB2.99+
+        '''
+        if is_rb3(self.shell) and self.action.props.state_type:
+            self.action.change_state(GLib.Variant('b', value))
+
     def activate(self):
         ''' 
         invokes the activate signal for the action
@@ -677,6 +774,37 @@
             self.action.activate(None)
         else:
             self.action.activate()
+            
+    def set_active(self, value):
+        ''' 
+        activate or deactivate a stateful action signal
+        For consistency with earlier RB versions, this will fire the 
+        activate signal for the action
+        
+        :param value: `boolean` state value
+        '''
+        
+        if is_rb3(self.shell):
+            self.action.change_state(GLib.Variant('b', value))
+            self._current_state = value
+            self._do_update_state = False
+            self.activate()
+            self._do_update_state = True
+        else:
+            self.action.set_active(value)
+            
+    def get_active(self):
+        ''' 
+        get the state of the action
+        
+        returns `boolean` state value
+        '''
+        if is_rb3(self.shell):
+            returnval = self._current_state
+        else:
+            returnval = self.action.get_active()
+
+        return returnval
 
     def associate_menuitem(self, menuitem):
         ''' 
@@ -684,7 +812,6 @@
         
         '''
         if is_rb3(self.shell):
-            print self.action.get_name()
             menuitem.set_detailed_action('win.'+self.action.get_name())
         else:
             menuitem.set_related_action(self.action)
