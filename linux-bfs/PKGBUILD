# Maintainter: Piotr Gorski <sir_lucjan@openlinux.pl>
# Contributor: JokerBoy <jokerboy at punctweb dot ro>
# Contributor: <fsckdaemon at gmail dot com>
# Contributor: graysky <graysky AT archlinux dot us>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>
# Contributor: Kamil Kolosowski <samael@openlinux.pl>

### BUILD OPTIONS
# Set these variables to ANYTHING that is not null to enable them

# Running with a 1000 HZ tick rate (vs the ARCH 300) is reported to solve the
# issues with the bfs/linux 3.1x and suspend. For more see:
# http://ck-hack.blogspot.com/2013/09/bfs-0441-311-ck1.html?showComment=1378756529345#c5266548105449573343
_1k_HZ_ticks=y

# NUMA is optimized for multi-socket motherboards.
# A single multi-core CPU actually runs slower with NUMA enabled.
# See, https://bugs.archlinux.org/task/31187
_NUMAdisable=y

# Compile ONLY probed modules
# As of mainline 2.6.32, running with this option will only build the modules
# that you currently have probed in your system VASTLY reducing the number of
# modules built and the build time to do it.
#
# WARNING - ALL modules must be probed BEFORE you begin making the pkg!
#
# To keep track of which modules are needed for your specific system/hardware,
# give module_db script a try: https://aur.archlinux.org/packages/modprobed-db
# This PKGBUILD will call it directly to probe all the modules you have logged!
#
# More at this wiki page ---> https://wiki.archlinux.org/index.php/Modprobed_db
_localmodcfg=

# Use the current kernel's .config file
# Enabling this option will use the .config of the RUNNING kernel rather than
# the ARCH defaults. Useful when the package gets updated and you already went
# through the trouble of customizing your config options.  NOT recommended when
# a new kernel is released, but again, convenient for package bumps.
_use_current=

# Alternative I/O scheduler by Paolo.
# Set this if you want it enabled globally i.e. for all devices in your system
# If you want it enabled on a device-by-device basis, leave this unset and see:
# https://wiki.archlinux.org/index.php/Linux-ck#How_to_Enable_the_BFQ_I.2FO_Scheduler
_BFQ_enable_=

### Do no edit below this line unless you know what you're doing

pkgbase=linux-bfs
pkgname=('linux-bfs' 'linux-bfs-headers')
_kernelname=-bfs
_srcname=linux-3.14
pkgver=3.14.6
pkgrel=4
arch=('i686' 'x86_64')
url="http://kerneldedup.org/"
license=('GPL2')
options=('!strip')
makedepends=('kmod' 'inetutils' 'bc')
_gcc_patch="enable_additional_cpu_optimizations_for_gcc_v4.9+.patch"
_bfspatch="3.14-sched-bfs-447.patch"
_bfsrel=447
_bfqpath="http://algo.ing.unimo.it/people/paolo/disk_sched/patches/3.14.0-v7r4"
source=("http://www.kernel.org/pub/linux/kernel/v3.x/${_srcname}.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v3.x/patch-${pkgver}.xz"
        "http://repo-ck.com/source/gcc_patch/${_gcc_patch}.gz"
        "http://ck.kolivas.org/patches/bfs/3.0/3.14/${_bfspatch}"
        "${_bfqpath}/0001-block-cgroups-kconfig-build-bits-for-BFQ-v7r4-3.14.patch"
        "${_bfqpath}/0002-block-introduce-the-BFQ-v7r4-I-O-sched-for-3.14.patch"
        "${_bfqpath}/0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-v7r4-for-3.14.0.patch"
        'linux-bfs.preset'
        'change-default-console-loglevel.patch'
        '0001-Bluetooth-allocate-static-minor-for-vhci.patch'
        '0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch'
        '0003-module-remove-MODULE_GENERIC_TABLE.patch'
        '0006-genksyms-fix-typeof-handling.patch'
        '0012-fix-saa7134.patch'
        'config' 'config.x86_64')
        
prepare() {
    cd ${_srcname}

    ### add upstream patch
    patch -Np1 -i "${srcdir}/patch-${pkgver}"
    

    ### set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
    # remove this when a Kconfig knob is made available by upstream
    # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
    msg "Patching set DEFAULT_CONSOLE_LOGLEVEL to 4"
    patch -p1 -i "${srcdir}/change-default-console-loglevel.patch"

    # Fix vhci warning in kmod (to restore every kernel maintainer's sanity)
    patch -p1 -i "${srcdir}/0001-Bluetooth-allocate-static-minor-for-vhci.patch"

    # Fix atkbd aliases
    patch -p1 -i "${srcdir}/0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch"
    patch -p1 -i "${srcdir}/0003-module-remove-MODULE_GENERIC_TABLE.patch"

   

    # Fix generation of symbol CRCs
    # http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=dc53324060f324e8af6867f57bf4891c13c6ef18
    patch -p1 -i "${srcdir}/0006-genksyms-fix-typeof-handling.patch"

  # fix saa7134 video
    # https://bugs.archlinux.org/task/39904
    # https://bugzilla.kernel.org/show_bug.cgi?id=73361
    patch -Np1 -i "${srcdir}/0012-fix-saa7134.patch"


   # Patch source to enable more gcc CPU optimizatons via the make nconfig
    patch -Np1 -i "${srcdir}/${_gcc_patch}"

  # Patch source with BFS patches
  msg "Patching source with BFS patches"
  patch -Np1 -i "${srcdir}/${_bfspatch}"
   
   
   
   msg "Patching source with BFQ patches"
    for p in "${srcdir}"/000{1,2,3}-block*.patch; do
        patch -Np1 -i "$p"
    done

   
    ### Clean tree and copy ARCH config over
    msg "Running make mrproper to clean source tree"
    make mrproper

    if [ "${CARCH}" = "x86_64" ]; then
        cat "${srcdir}/config.x86_64" > ./.config
    else
        cat "${srcdir}/config" > ./.config
    fi

    ### Optionally use running kernel's config
    # code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
    if [ -n "$_use_current" ]; then
	if [[ -s /proc/config.gz ]]; then
	    msg "Extracting config from /proc/config.gz..."
	    # modprobe configs
	    zcat /proc/config.gz > ./.config
	else
	    warning "You kernel was not compiled with IKCONFIG_PROC!"
	    warning "You cannot read the current config!"
	    warning "Aborting!"
	    exit
	fi
    fi

    if [ "${_kernelname}" != "" ]; then
	sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
	sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
    fi

    

    ### BFQ to be compiled in but not enabled
    sed -i -e s'/CONFIG_CFQ_GROUP_IOSCHED=y/CONFIG_CFQ_GROUP_IOSCHED=y\nCONFIG_IOSCHED_BFQ=y\nCONFIG_CGROUP_BFQIO=y/' \
        -i -e s'/CONFIG_DEFAULT_CFQ=y/CONFIG_DEFAULT_CFQ=y\n# CONFIG_DEFAULT_BFQ is not set/' ./.config

    ### Optionally enable BFQ as the default io scheduler
    if [ -n "$_BFQ_enable_" ]; 	then
        sed -i -e '/CONFIG_DEFAULT_IOSCHED/ s,cfq,bfq,' \
        -i -e s'/CONFIG_DEFAULT_CFQ=y/# CONFIG_DEFAULT_CFQ is not set\nCONFIG_DEFAULT_BFQ=y/' ./.config
    fi

    # disable NUMA since 99.9% of users do not have multiple CPUs but do have multiple cores in one CPU
    # see, https://bugs.archlinux.org/task/31187
    if [ -n "$_NUMA_off" ]; then
	if [ "${CARCH}" = "x86_64" ]; then
	    sed -i -e 's/CONFIG_NUMA=y/# CONFIG_NUMA is not set/' \
		    -i -e '/CONFIG_AMD_NUMA=y/d' \
		    -i -e '/CONFIG_X86_64_ACPI_NUMA=y/d' \
		    -i -e '/CONFIG_NODES_SPAN_OTHER_NODES=y/d' \
		    -i -e '/# CONFIG_NUMA_EMU is not set/d' \
		    -i -e '/CONFIG_NODES_SHIFT=6/d' \
		    -i -e '/CONFIG_NEED_MULTIPLE_NODES=y/d' \
		    -i -e '/CONFIG_USE_PERCPU_NUMA_NODE_ID=y/d' \
		    -i -e '/CONFIG_ACPI_NUMA=y/d' ./.config
	fi
    fi

    # set extraversion to pkgrel
    sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

    # don't run depmod on 'make install'. We'll do this ourselves in packaging
    sed -i '2iexit 0' scripts/depmod.sh

    # get kernel version
    msg "Running make prepare for you to enable patched options of your choosing"
    make prepare

    ### Optionally load needed modules for the make localmodconfig
    # See http://aur.archlinux.org/packages.php?ID=41689
    if [ -n "$_localmodcfg" ]; then
	msg "If you have modprobe_db installed, running it in recall mode now"
	if [ -e /usr/bin/modprobed_db ]; then
	    [[ ! -x /usr/bin/sudo ]] && echo "Cannot call modprobe with sudo. Install via pacman -S sudo and configure to work with this user." && exit 1
	    sudo /usr/bin/modprobed_db recall
	fi
	msg "Running Steven Rostedt's make localmodconfig now"
	make localmodconfig
    fi

    if [ -n "$_makenconfig" ]; then
	msg "Running make nconfig"
	make nconfig
    fi
}

build() {
    cd ${_srcname}
    # Tweak kernel options prior to a build via gconfig
    #make gconfig
    # Tweak kernel options prior to a build via xconfig
    #make xconfig
    # Tweak kernel options prior to a build via nconfig
    # make nconfig
    msg "Running make bzImage and modules"
    make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package_linux-bfs() {
    pkgdesc="Linux Kernel and modules with BFS and BFQ schedulers"
    depends=('coreutils' 'linux-firmware' 'mkinitcpio>=0.7')
    optdepends=('crda' 'nvidia-bfs' 'modprobed_db')
    provides=("linux-bfs=${pkgver}")
    conflicts=('kernel26-bfs')
    replaces=('kernel26-bfs')
    backup=("etc/mkinitcpio.d/linux-bfs.preset")
    install=linux-bfs.install

    cd ${_srcname}

    KARCH=x86

    # get kernel version
    _kernver="$(make LOCALVERSION= kernelrelease)"
    _basekernel=${_kernver%%-*}
    _basekernel=${_basekernel%.*}

    mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
    make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
    cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-linux-bfs"

    # set correct depmod command for install
    cp -f "${startdir}/${install}" "${startdir}/${install}.pkg"
    true && install=${install}.pkg
    sed \
    -e "s/KERNEL_NAME=.*/KERNEL_NAME=-bfs/g" \
    -e "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -i "${startdir}/${install}"

    # install mkinitcpio preset file for kernel
    install -D -m644 "${srcdir}/linux-bfs.preset" "${pkgdir}/etc/mkinitcpio.d/linux-bfs.preset"
    sed \
    -e "1s|'linux.*'|'linux-bfs'|" \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-linux-bfs\"|" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-linux-bfs.img\"|" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-linux-bfs-fallback.img\"|" \
    -i "${pkgdir}/etc/mkinitcpio.d/linux-bfs.preset"

    # remove build and source links
    rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
    # remove the firmware
    rm -rf "${pkgdir}/lib/firmware"
    # gzip -9 all modules to save 100MB of space
    find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
    # make room for external modules
    ln -s "../extramodules-${_basekernel}${_kernelname:bfs}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
    # add real version for building modules and running depmod from post_install/upgrade
    mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:bfs}"
    echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:bfs}/version"

    # Now we call depmod...
    depmod -b "${pkgdir}" -F System.map "${_kernver}"

    # move module tree /lib -> /usr/lib
    mkdir -p "${pkgdir}/usr"
    mv "${pkgdir}/lib" "${pkgdir}/usr/"

    # add vmlinux
    install -D -m644 vmlinux "${pkgdir}/usr/lib/modules/${_kernver}/build/vmlinux"
}

package_linux-bfs-headers() {
    pkgdesc='Header files and scripts to build modules for linux-bfs.'
    provides=("linux-bfs-headers=${pkgver}" "linux-headers=${pkgver}")
    conflicts=('kernel26-bfs-headers')
    replaces=('kernel26-bfs-headers')

    install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

    cd ${_srcname}
    install -D -m644 Makefile \
	    "${pkgdir}/usr/lib/modules/${_kernver}/build/Makefile"
    install -D -m644 kernel/Makefile \
	    "${pkgdir}/usr/lib/modules/${_kernver}/build/kernel/Makefile"
    install -D -m644 .config \
	    "${pkgdir}/usr/lib/modules/${_kernver}/build/.config"

    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include"

    for i in acpi asm-generic config crypto drm generated keys linux math-emu \
	    media net pcmcia scsi sound trace uapi video xen; do
	cp -a include/${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/include/"
    done

    # copy arch includes for external modules
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/x86"
    cp -a arch/x86/include "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/x86/"

    # copy files necessary for later builds, like nvidia and vmware
    cp Module.symvers "${pkgdir}/usr/lib/modules/${_kernver}/build"
    cp -a scripts "${pkgdir}/usr/lib/modules/${_kernver}/build"

    # fix permissions on scripts dir
    chmod og-w -R "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts"
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/.tmp_versions"

    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/kernel"

    cp arch/${KARCH}/Makefile "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/"

    if [ "${CARCH}" = "i686" ]; then
	    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/"
    fi

    cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/lib/modules/${_kernver}/build/arch/${KARCH}/kernel/"

    # add docbook makefile
    install -D -m644 Documentation/DocBook/Makefile \
	    "${pkgdir}/usr/lib/modules/${_kernver}/build/Documentation/DocBook/Makefile"

    # add dm headers
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/md"
    cp drivers/md/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/md"

    # add inotify.h
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include/linux"
    cp include/linux/inotify.h "${pkgdir}/usr/lib/modules/${_kernver}/build/include/linux/"

    # add wireless headers
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/net/mac80211/"
    cp net/mac80211/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/net/mac80211/"

    # add dvb headers for external modules
    # in reference to:
    # http://bugs.archlinux.org/task/9912
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-core"
    cp drivers/media/dvb-core/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-core/"
    # and...
    # http://bugs.archlinux.org/task/11194
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/include/config/dvb/"
    [[ -e include/config/dvb/ ]] && cp include/config/dvb/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/include/config/dvb/" 

    # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
    # in reference to:
    # http://bugs.archlinux.org/task/13146
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
    cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"
    cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"

    # add dvb headers
    # in reference to:
    # http://bugs.archlinux.org/task/20402
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/dvb-usb"
    cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/usb/dvb-usb/"
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends"
    cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/dvb-frontends/"
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/tuners"
    cp drivers/media/tuners/*.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/tuners/"

    # add xfs and shmem for aufs building
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/fs/xfs"
    mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/mm"
    cp fs/xfs/xfs_sb.h "${pkgdir}/usr/lib/modules/${_kernver}/build/fs/xfs/xfs_sb.h"

    # copy in Kconfig files
    for i in `find . -name "Kconfig*"`; do
	    mkdir -p "${pkgdir}"/usr/lib/modules/${_kernver}/build/`echo ${i} | sed 's|/Kconfig.*||'`
	    cp ${i} "${pkgdir}/usr/lib/modules/${_kernver}/build/${i}"
    done

    chown -R root.root "${pkgdir}/usr/lib/modules/${_kernver}/build"
    find "${pkgdir}/usr/lib/modules/${_kernver}/build" -type d -exec chmod 755 {} \;

    # strip scripts directory
    find "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
	    *application/x-sharedlib*) # Libraries (.so)
		    /usr/bin/strip ${STRIP_SHARED} "${binary}";;
	    *application/x-archive*) # Libraries (.a)
		    /usr/bin/strip ${STRIP_STATIC} "${binary}";;
	    *application/x-executable*) # Binaries
		    /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
    done

    # remove unneeded architectures
    rm -rf "${pkgdir}"/usr/lib/modules/${_kernver}/build/arch/{alpha,arm,arm26,arm64,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}


sha512sums=('5730d83a7a81134c1e77c0bf89e42dee4f8251ad56c1ac2be20c59e26fdfaa7bea55f277e7af156b637f22e1584914a46089af85039177cb43485089c74ac26e'
            'ba8784eb4968b639704e225cbd0455768a3d381ade19d37e0cc06cc00606cc9706163b27441f32b1de4a6f71d44b14004e931ea3f9a2d86c20e35dc881e6d451'
            '1b8ac77604b891aac57257bc3d9578596f38f2f75a625310a7d36e7f59612a616da6ef12d028622cb855a065e4fadc739cb67d12370c49bb52708744ad312957'
            'b8ee8d42eeab19c4229a7cd391af6b732c2e8a179f5ed969f1cc8863dfed68d09a6c6e61860df103a5c9535768d8852f7ce2acdc0618b529acc98e2e33be9b0e'
            'e89fd2d2b1f902c22d174a3c5d7b7b7056cc9d00facca57de1d045cad81d8a02ce6b581c2adb1d3df9c7614fddb58a0a941782b1e4958667a9185a2fbef1b0bf'
            '3e8be83133b4bc4399d1f065f3d8f7a9978016c9ed9945d10acae264fd6b301246f7bfbc93e46e4bd72fef4386614202e1bba10ecb66ad2e6451ee1bba0ce302'
            'b62f1c765766d77c050cc471abaf6ba25617866f71e6b1c4581d0712bde3eb4c74f4552e7a6045a27f921b76a738a2be76d3bcefd65db39d77e965e3997f6378'
            '84a7c3b96959cb2dd7687b968ba4522b62919529e2c0e166c0369e6cf77ff0e7ee387ca22a0980fc37dd100812205ab2c17b6c4d5dda51958ac1e66693f22925'
            '502192b5ce94c8254205f5ddb85bf50c5f1e78c768817b10dca3a7716a8c59d5e093842631acb51e3805cbf85522e0a9200942656f11bbb4ea1b7d61e24ddd78'
            'f26306c173e3fc35ae6df4c43e9ddbac33845dcc1fb0def612fe370c2d7b8f904b4c70d267eb52717ade879d1e289695b9e971dfcb1c963dac4c6e2fb5230453'
            'da69065f317212c7937f5c3110afdef6006da7756b0a2a98c4bff94db12eb503dc89040aa3cd7a1655ba1b0641f47dda4e60933309e231eaecbe9bd79cb06ebd'
            '4b9fa6afdd1f4f4f6a3a439380cff3376ef33e782aac0ae92421f4b7c40140d57a04d7bc57dfd9fb59fdefb3a0a55fe7e7d6022314b11ef454a1cae4b75cf264'
            'fdb67e9956d9af1518d0198b86b13150b28f43dd28eb52222a9c43699f7304cd1a56d7f421a0690fa4c0d2c266fd5504da9d6217f83a42d05f35b713fd85e2dd'
            '6e59caeff81a9d1370918c1fa55a85ac6f0ba2b4600ce0b74638c0b9d90242e0185af399b7d153c22c772c8be04518c006331e5b2cfaa0ea6ea09978978a1ed1'
            '40575999f37d0897600a5dc63340e6fc5718c5ef005036c229040d99c1b22c091e1b68a01b7538b3b4002db3c8caaf325cc28f0270eff5ce076b6632784d31b1'
            '11044c591273bd781ec63981be0031e7cd43a687ecdf8b66eedf24e79b9011c781146fa321377a880e31f266550ca93cd0cc092988591df813d841d4e5df3e71')
