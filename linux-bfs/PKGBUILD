# Contributor: JokerBoy <jokerboy at punctweb dot ro>
# Contributor: <fsckdaemon at gmail dot com>
# Contributor: graysky <graysky AT archlinux dot us>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>
# Contributor: Kamil Kolosowski <samael@openlinux.pl>
# Contributor: Piotr Gorski <sir_lucjan@openlinux.pl>

### Patch and Build Options ###
_USE_MAKENCONFIG="n"    # tweak kernel options prior to a build via nconfig
_USE_LOCALMODCFG="n"    # compile ONLY probed modules
_USE_CURRENT_CFG="n"    # use the current kernel's .config file
_USE_BFQ_IOSCHED="n"    # enable BFQ I/O scheduler

### More Details and References ###
## MAKENCONFIG OPTION
 # Allow you to select additional kernel options prior to a build via a nconfig.

## LOCALMODCONFIG OPTION
 # As of mainline 2.6.32, running with this option will only build the modules that you currently have
 # probed in your system VASTLY reducing the number of modules build.
 #
 # WARNING - make CERTAIN that all modules are modprobed BEFORE you begin making the pkg!
 # Read, https://bbs.archlinux.org/viewtopic.php?pid=830221#p830221
 # To keep track of which modules are needed for your specific system/hardware, give graysky's module_db script.
 # a try: http://aur.archlinux.org/packages.php?ID=41689
 #
 # Note that if you use module_db script, this PKGBUILD will auto run the modprobed_db for you to probe
 # all the modules you have logged!

## CURRENT KERNEL'S .CONFIG
 # Enabling this option will use the .config of the RUNNING kernel rather than the ARCH defaults.
 # Useful when the package gets updated and you already went through the trouble of customizing your
 # config options.  NOT recommended when a new kernel is released, but again, convenient for package bumps.

## BFQ IOSCHED
 # Alternative I/O scheduler by Paolo. For more, see: http://algo.ing.unimo.it/people/paolo/disk_sched/

pkgname=linux-bfs
true && pkgbase=linux-bfs
true && pkgname=('linux-bfs' 'linux-bfs-headers')
_srcname=linux-3.14
_bfsrel=447
pkgver=3.14.3
pkgrel=2
arch=('i686' 'x86_64')
url="http://ck-hack.blogspot.com/"
license=('GPL2')
makedepends=('kmod' 'inetutils' 'bc')
options=('!strip')
_gcc_patch="enable_additional_cpu_optimizations_for_gcc.patch"
_bfspatch="3.14-sched-bfs-${_bfsrel}.patch"
_bfqpath="http://algo.ing.unimo.it/people/paolo/disk_sched/patches/3.14.0-v7r3"
source=("http://www.kernel.org/pub/linux/kernel/v3.x/${_srcname}.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v3.x/patch-${pkgver}.xz"
        # the main kernel config files
        'config' 'config.x86_64'
        # standard config files for mkinitcpio ramdisk
        "${pkgname}.preset"
        'change-default-console-loglevel.patch'
        # BFS patch & others
        "http://repo-ck.com/source/gcc_patch/${_gcc_patch}.gz"
        "http://ck.kolivas.org/patches/bfs/3.0/3.14/${_bfspatch}"
        "${_bfqpath}/0001-block-cgroups-kconfig-build-bits-for-BFQ-v7r3-3.14.patch"
        "${_bfqpath}/0002-block-introduce-the-BFQ-v7r3-I-O-sched-for-3.14.patch"
        "${_bfqpath}/0003-block-bfq-add-Early-Queue-Merge-EQM-to-BFQ-v7r3-for-3.14.0.patch"
        '0001-Bluetooth-allocate-static-minor-for-vhci.patch'
        '0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch'
        '0003-module-remove-MODULE_GENERIC_TABLE.patch'
        '0004-fs-Don-t-return-0-from-get_anon_bdev.patch'
        '0005-Revert-Bluetooth-Enable-autosuspend-for-Intel-Blueto.patch'
        '0006-genksyms-fix-typeof-handling.patch'
        '0010-iwlwifi-mvm-delay-enabling-smart-FIFO-until-after-be.patch'
        '0011-kernfs-fix-removed-error-check.patch'
        '0012-fix-saa7134.patch'
        '0013-net-Start-with-correct-mac_len-in-skb_network_protocol.patch'
        '0014-fix-rtl8192se.patch'
        '0015-fix-xsdt-validation.patch' )
        


sha256sums=('61558aa490855f42b6340d1a1596be47454909629327c49a5e4e10268065dffa'
            'a26a25739c50d639174698ae498530205b55e5a2b11f8c33ab92a8581bc83fbd'
            'da87fc75b30e0cae78b5b9784bbaed3820a1f53544c9f7f831d04d9c257e97e0'
            'b4cf63c8655a44aa9f1849abc10bb0479059213002a380e5a84582eccc99ad84'
            '19101aa32eaaa59f9767a87ce32be4073fdf495d8a009afc8687588677683408'
            'faced4eb4c47c4eb1a9ee8a5bf8a7c4b49d6b4d78efbe426e410730e6267d182'
            '70717f6c64bed9da2450b3a824b25df0a916cdf43ee1e0f537057db3f9a33b8d'
            'cf71ec72daeaa1ae757e8aaea10a53f972b62548774e3c9bae95d388c7c158bb'
            '91cb67acc7ba45e1bf3b4472bcbba4ed6d639afd25a7e67fe57d6b7a1a25a8d5'
            '91f7515de652f118f2ec50794f566394c21c984f940b05fb0f9972feceb85bed'
            '1bd24c85f88dcbf4aab03827cf42cfcf42fe1eb2d0e8c759cbf4e5616f56f7ae'
            '6d72e14552df59e6310f16c176806c408355951724cd5b48a47bf01591b8be02'
            '52dec83a8805a8642d74d764494acda863e0aa23e3d249e80d4b457e20a3fd29'
            '65d58f63215ee3c5f9c4fc6bce36fc5311a6c7dbdbe1ad29de40647b47ff9c0d'
            '1e1ae0f31f722e80da083ecada1f1be57f9ddad133941820c4483b0240e494c1'
            '3fffb01cf97a5a7ab9601cb277d2468c0fb1e1cceba4225915f3ffae3a5694ec'
            'cf2e7a2d00787f754028e7459688c2755a406e632ce48b60952fa4ff7ed6f4b7'
            'c0af4622f75c89fef62183e18b7d49998228d4eaa906c6accaf4aa4ff0134f85'
            '04f44bf5c181d6dc31905937c1bdccb0f5aecaad3a579e99b302502b9cbe0f7a'
            '79359454c9d8446eb55add2b1cdbf8332bd67dafb01fefb5b1ca090225f64d18'
            'f2a5e22c1ba6e9b8a32a7bd4a5327ee95538aa10edcee3cd12578f8ff49bf6be'
            'ff9df6746d7cbfe858d5b4bce932951c26414a7635cb5c26cd8d5c97df36a2a1'
            '384dd13fd4248fd6809da8c6ae29ced55d4a5cacc33ac2ae7522093ec0fb26d4')






_kernelname=${pkgbase#linux}

prepare() {
  cd "${srcdir}/${_srcname}"

  # add upstream patch
  patch -p1 -i "${srcdir}/patch-${pkgver}"

    ### set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
    # remove this when a Kconfig knob is made available by upstream
    msg "Patching set DEFAULT_CONSOLE_LOGLEVEL to 4"
    patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"




# Fix vhci warning in kmod (to restore every kernel maintainer's sanity)
    patch -p1 -i "${srcdir}/0001-Bluetooth-allocate-static-minor-for-vhci.patch"

    # Fix atkbd aliases
    patch -p1 -i "${srcdir}/0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch"
    patch -p1 -i "${srcdir}/0003-module-remove-MODULE_GENERIC_TABLE.patch"

    # Fix various bugs caused by rootfs having FSID 0
    # See http://www.spinics.net/lists/kernel/msg1716924.html
    patch -p1 -i "${srcdir}/0004-fs-Don-t-return-0-from-get_anon_bdev.patch"

    # Disable usb autosuspend for intel btusb
    # See http://www.spinics.net/lists/kernel/msg1716461.html
    # Until a solution is found, make sure the driver leaves autosuspend alone
    patch -p1 -i "${srcdir}/0005-Revert-Bluetooth-Enable-autosuspend-for-Intel-Blueto.patch"

    # Fix generation of symbol CRCs
    # http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=dc53324060f324e8af6867f57bf4891c13c6ef18
    patch -p1 -i "${srcdir}/0006-genksyms-fix-typeof-handling.patch"

    # Fix the use of code32_start in the EFI boot stub
    # http://permalink.gmane.org/gmane.linux.kernel/1679881
    
    

    # https://git.kernel.org/cgit/linux/kernel/git/iwlwifi/iwlwifi-fixes.git/commit/?id=12f853a89e29f50b17698e17e73c328a35f1498d
    # FS#39815
    patch -p1 -i "${srcdir}/0010-iwlwifi-mvm-delay-enabling-smart-FIFO-until-after-be.patch"

    # fix Xorg crash with i810 chipset due to wrong removed error check
    # References: http://lkml.kernel.org/g/533D01BD.1010200@googlemail.com
    patch -Np1 -i "${srcdir}/0011-kernfs-fix-removed-error-check.patch"

    # fix saa7134 video
    # https://bugs.archlinux.org/task/39904
    # https://bugzilla.kernel.org/show_bug.cgi?id=73361
    patch -Np1 -i "${srcdir}/0012-fix-saa7134.patch"

    
  # fix tun/openvpn performance
	# https://bugs.archlinux.org/task/40089
	# https://bugzilla.kernel.org/show_bug.cgi?id=74051
	patch -Np1 -i "${srcdir}/0013-net-Start-with-correct-mac_len-in-skb_network_protocol.patch"
    
    
    # fix rtl8192se authentification
    # https://bugs.archlinux.org/task/39858
    # https://bugzilla.kernel.org/show_bug.cgi?id=74541
    patch -Np1 -i "${srcdir}/0014-fix-rtl8192se.patch"

    # fix xsdt validation bug
    # https://bugs.archlinux.org/task/39811
    # https://bugzilla.kernel.org/show_bug.cgi?id=73911
    patch -Np1 -i "${srcdir}/0015-fix-xsdt-validation.patch"

    
    
   

# Patch source to enable more gcc CPU optimizatons via the make nconfig
	patch -Np1 -i "${srcdir}/${_gcc_patch}"

  # Patch source with BFS patches
  msg "Patching source with BFS patches"
  patch -Np1 -i "${srcdir}/${_bfspatch}"
  
  
  

 msg "Patching source with BFQ patches"
	for p in $(ls ${srcdir}/000{1,2,3}-block*.patch); do
		patch -Np1 -i "$p"
	done


  msg "Running make mrproper to clean source tree"
  make mrproper

  if [ "${CARCH}" = "x86_64" ]; then
    cat "${srcdir}/config.x86_64" > ./.config
  else
    cat "${srcdir}/config" > ./.config
  fi

  # Use current kernel's config
  # Code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
  if [ "${_USE_CURRENT_CFG}" = "y" ]; then
    [[ ! -x /usr/bin/sudo ]] && echo "Cannot call modprobe without sudo. Install via pacman -S sudo and configure to work with this user." && return 1
    msg "Running sudo modprobe configs"
    sudo modprobe configs
    if [[ -s /proc/config.gz ]]; then
      msg "Extracting config from /proc/config.gz"
      zcat /proc/config.gz > ./.config
    else
      warning "You kernel was not compiled with IKCONFIG_PROC!"
      warning "You cannot read the current config!"
      warning "Aborting!"
      return 1
    fi
  fi

  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
    sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
  fi

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

}

build() {
  cd "${srcdir}/${_srcname}"
  msg "Running make prepare for you to enable patched options of your choosing"
  make prepare

  if [ "${_USE_LOCALMODCFG}" = "y" ]; then
    msg "If you have modprobe_db installed, running modprobed_db now"
    # Optionally load needed modules for the make localmodconfig
    # See http://aur.archlinux.org/packages.php?ID=41689
    if [ -e /usr/bin/modprobed_db ]; then
      [[ ! -x /usr/bin/sudo ]] && echo "Cannot call modprobe without sudo. Install via pacman -S sudo and configure to work with this user." && return 1
      sudo /usr/bin/modprobed_db recall
    fi
    msg "Running Steven Rostedt's make localmodconfig now"
    make localmodconfig
  fi

  if [ "${_USE_MAKENCONFIG}" = "y" ]; then
    msg "Running make nconfig"
    make nconfig
  fi

  # rewrite configuration
  yes "" | make config >/dev/null

  # save configuration for later reuse
  if [ "${CARCH}" = "x86_64" ]; then
    cat .config > "${startdir}/config.x86_64.last"
  else
    cat .config > "${startdir}/config.last"
  fi

  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"; return 1

  msg "Running make bzImage and modules"
  make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package_linux-bfs() {
  pkgdesc="The Linux Kernel and modules with BFS scheduler"
  depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
  optdepends=('crda: to set the correct wireless channels of your country')
  provides=("kernel26${_kernelname}=${pkgver}")
  conflicts=("kernel26${_kernelname}")
  replaces=("kernel26${_kernelname}")
  backup=("etc/mkinitcpio.d/${pkgbase}.preset")
  install=${pkgbase}.install

  cd "${srcdir}/${_srcname}"

  KARCH=x86

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"
  _basekernel=${_kernver%%-*}
  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
  make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgbase}"

  # add vmlinux
  install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

  # install fallback mkinitcpio.conf file and preset file for kernel
  install -D -m644 "${srcdir}/${pkgbase}.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # set correct depmod command for install
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/" \
    -i "${startdir}/${pkgbase}.install"
  sed \
    -e "1s|'linux.*'|'${pkgbase}'|" \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${pkgbase}\"|" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-${pkgbase}.img\"|" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${pkgbase}-fallback.img\"|" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgbase}.preset"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname:--ARCH}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}/version"

  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "$_kernver"

  # move module tree /lib -> /usr/lib
  mv "$pkgdir/lib" "$pkgdir/usr"
}

package_linux-bfs-headers() {
  true && pkgdesc="Header files and scripts for building modules for linux-bfs kernel"
  true && provides=("kernel26${_kernelname}-headers=${pkgver}")
  true && conflicts=("kernel26${_kernelname}-headers")
  true && replaces=("kernel26${_kernelname}-headers")

  install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

  cd "${pkgdir}/usr/lib/modules/${_kernver}"
  ln -sf ../../../src/linux-${_kernver} build

  cd "${srcdir}/${_srcname}"
  install -D -m644 Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Makefile"
  install -D -m644 kernel/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile"
  install -D -m644 .config \
    "${pkgdir}/usr/src/linux-${_kernver}/.config"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include"

  for i in acpi asm-generic config crypto drm generated keys linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    cp -a include/${i} "${pkgdir}/usr/src/linux-${_kernver}/include/"
  done

  # copy arch includes for external modules
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/x86"
  cp -a arch/x86/include "${pkgdir}/usr/src/linux-${_kernver}/arch/x86/"

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers "${pkgdir}/usr/src/linux-${_kernver}"
  cp -a scripts "${pkgdir}/usr/src/linux-${_kernver}"

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/scripts"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel"

  cp arch/${KARCH}/Makefile "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"

  if [ "${CARCH}" = "i686" ]; then
    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"
  fi

  cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel/"

  # add headers for lirc package
  # pci
  for i in bt8xx cx88 saa7134; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
    cp -a drivers/media/pci/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/pci/${i}"
  done
  # usb
  for i in cpia2 em28xx pwc sn9c102; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
    cp -a drivers/media/usb/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/${i}"
  done
  # i2c
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c"
  cp drivers/media/i2c/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"
  for i in cx25840; do
    mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
    cp -a drivers/media/i2c/${i}/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/${i}"
  done

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/src/linux-${_kernver}/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core"
  cp drivers/media/dvb-core/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"
  [[ -e include/config/dvb/ ]] && cp include/config/dvb/*.h "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb"
  cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends"
  cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners"
  cp drivers/media/tuners/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/mm"
  cp fs/xfs/xfs_sb.h "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h"

  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do
    mkdir -p "${pkgdir}"/usr/src/linux-${_kernver}/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/src/linux-${_kernver}/${i}"
  done

  chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}"
  find "${pkgdir}/usr/src/linux-${_kernver}" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/src/linux-${_kernver}/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/arch/{alpha,arc,arm,arm26,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}

# vim:set ts=2 sts=2 sw=2 et:
