# Maintainer: gruppenpest <drgruppenpest@softhome.net>
# Previous maintainer: OK <ok100.ok100.ok100@gmail.com>
# Based on kernel-eee PKGBUILD by Dan McGee <dan@archlinux.org>

# AUR workaround
pkgname=linux-eee-ck

true && pkgname=(linux-eee-ck linux-eee-ck-headers)
_ckpatchversion=1
_majorver=3.14
_ckpatchname="patch-${_majorver}-ck${_ckpatchversion}"
_srcname=linux-${_majorver}
pkgver=3.14.4
pkgrel=1
_bfsver=0.447
arch=('i686')
license=('GPL2')
makedepends=('kmod' 'inetutils' 'bc')
options=('!strip')
url="http://www.kernel.org"
source=("http://www.kernel.org/pub/linux/kernel/v3.x/${_srcname}.tar.xz"
        "http://www.kernel.org/pub/linux/kernel/v3.x/patch-${pkgver}.xz"
        "http://ck.kolivas.org/patches/3.0/${_majorver}/${_majorver}-ck${_ckpatchversion}/${_ckpatchname}.bz2"
        'change-default-console-loglevel.patch'
        '61-eee-ssd.rules'
        'kernelconfig'
        '0001-Bluetooth-allocate-static-minor-for-vhci.patch'
        '0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch'
        '0003-module-remove-MODULE_GENERIC_TABLE.patch'
        '0004-fs-Don-t-return-0-from-get_anon_bdev.patch'
        '0005-Revert-Bluetooth-Enable-autosuspend-for-Intel-Blueto.patch'
        '0006-genksyms-fix-typeof-handling.patch'
        '0010-iwlwifi-mvm-delay-enabling-smart-FIFO-until-after-be.patch'
        '0011-kernfs-fix-removed-error-check.patch'
        '0012-fix-saa7134.patch'
        '0013-net-Start-with-correct-mac_len-in-skb_network_protocol.patch'
        '0015-fix-xsdt-validation.patch')

md5sums=('b621207b3f6ecbb67db18b13258f8ea8'
         '116f27cf17c3522716b6678b17516067'
         '8748d19d8bfb8ca3c9fc6055c4c5cee0'
         '98beb36f9b8cf16e58de2483ea9985e3'
         '6100b3e13c4c24ce3c887a1ae36ab7f1'
         'c6de579a2b2f021d5bff660e3000bc5d'
         '6839ddec74a5300beff1709a81b0e4f3'
         '706549e8a05f33f7fc697f28c0ca71d2'
         'd23fc66be93ebce698bd7da844789de1'
         'b240cc8ebb4b5d74e94b4c72d033f726'
         'a89d593774ccb955eb8368d3bc87ce26'
         '16a161979f846b049e90daea907c35dd'
         '353b553d69da810ef954618aca60e1e2'
         'b3f98eba6322463ed6644784c56893be'
         '4f547d79fa1b2bb855dc2996be2a515e'
         '21d25aef69f9da33c6087b7ffd97783e'
         '278417ab07b6f5fe8e3e0ed656f35f3e')

prepare() {
  # get into the linux source directory and start some magic
  cd "${_srcname}"

  # add upstream patch
  patch -p1 -i "${srcdir}/patch-${pkgver}"

  # set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
  # remove this when a Kconfig knob is made available by upstream
  # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
  patch -Np1 -i ${srcdir}/change-default-console-loglevel.patch

  # Fix vhci warning in kmod (to restore every kernel maintainer's sanity)
  patch -p1 -i "${srcdir}/0001-Bluetooth-allocate-static-minor-for-vhci.patch"

	# Fix atkbd aliases
	patch -p1 -i "${srcdir}/0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch"
	patch -p1 -i "${srcdir}/0003-module-remove-MODULE_GENERIC_TABLE.patch"

	# Fix various bugs caused by rootfs having FSID 0
	# See http://www.spinics.net/lists/kernel/msg1716924.html
	patch -p1 -i "${srcdir}/0004-fs-Don-t-return-0-from-get_anon_bdev.patch"

	# Disable usb autosuspend for intel btusb
	# See http://www.spinics.net/lists/kernel/msg1716461.html
	# Until a solution is found, make sure the driver leaves autosuspend alone
	patch -p1 -i "${srcdir}/0005-Revert-Bluetooth-Enable-autosuspend-for-Intel-Blueto.patch"

	# Fix generation of symbol CRCs
	# http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=dc53324060f324e8af6867f57bf4891c13c6ef18
	patch -p1 -i "${srcdir}/0006-genksyms-fix-typeof-handling.patch"

	# https://git.kernel.org/cgit/linux/kernel/git/iwlwifi/iwlwifi-fixes.git/commit/?id=12f853a89e29f50b17698e17e73c328a35f1498d
	# FS#39815
	patch -p1 -i "${srcdir}/0010-iwlwifi-mvm-delay-enabling-smart-FIFO-until-after-be.patch"

	# fix Xorg crash with i810 chipset due to wrong removed error check
	# References: http://lkml.kernel.org/g/533D01BD.1010200@googlemail.com
	patch -Np1 -i "${srcdir}/0011-kernfs-fix-removed-error-check.patch"

	# fix saa7134 video
	# https://bugs.archlinux.org/task/39904
	# https://bugzilla.kernel.org/show_bug.cgi?id=73361
	patch -Np1 -i "${srcdir}/0012-fix-saa7134.patch"

	# fix tun/openvpn performance
	# https://bugs.archlinux.org/task/40089
	# https://bugzilla.kernel.org/show_bug.cgi?id=74051
	patch -Np1 -i "${srcdir}/0013-net-Start-with-correct-mac_len-in-skb_network_protocol.patch"

	# fix xsdt validation bug
	# https://bugs.archlinux.org/task/39811
	# https://bugzilla.kernel.org/show_bug.cgi?id=73911
	patch -Np1 -i "${srcdir}/0015-fix-xsdt-validation.patch"


  #patch source with ck patchset with BFS
  # Fix double name in EXTRAVERSION
  sed -i -re "s/^(.EXTRAVERSION).*$/\1 = /" "${srcdir}/${_ckpatchname}"
  msg "Patching source with ck1 including BFS v0.${_bfsver}"
  patch -Np1 -i "${srcdir}/${_ckpatchname}"

  ### Clean tree and copy ARCH config over
  msg "Running make mrproper to clean source tree"
  make mrproper
  cp ../kernelconfig ./.config

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh
}

build() {
  cd "${_srcname}"
  msg "Running make prepare for you to enable patched options of your choosing"
  make prepare

  # to modify kernel settings, uncomment the following line
  # make menuconfig

  # build!
  make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package_linux-eee-ck() {
  _Kpkgdesc='Linux Kernel and modules for the Asus Eee PC 701, with Brain Fuck Scheduler v${_bfsver} and all the goodies in the ck${_ckpatchversion} patchset.'
  pkgdesc="${_Kpkgdesc}"

  provides=("linux-eee-ck=${pkgver}")
  depends=('coreutils' 'module-init-tools')
  optdepends=('crda: for wireless regulatory domain support'
            'iw: for wireless configuration support')
  replaces=('linux-uvc-eee-svn' 'madwifi-eee-svn')
  install='linux-eee-ck.install'

  KARCH=x86

  # install our modules
  cd ${srcdir}/${_srcname}

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"

  mkdir -p ${pkgdir}/{usr,lib/modules,boot}
  make LOCALVERSION= INSTALL_MOD_PATH=${pkgdir} modules_install

  # remove the junk symlinks
  cd ${srcdir}/${_srcname}
  rm ${pkgdir}/lib/modules/${_kernver}/{build,source}

  # set correct depmod command for install

	cp -f "${startdir}/${install}" "${startdir}/${install}.pkg"
	true && install=${install}.pkg

  sed \
	-e  "s/KERNEL_NAME=.*/KERNEL_NAME=-ck/g" \
	-e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
	-i "${startdir}/linux-eee-ck.install"



  # install the kernel
  cp arch/x86/boot/bzImage ${pkgdir}/boot/vmlinuz-eee-ck

  # udev rules for SSD drives/SD Cards, they is not rotational
  mkdir -p ${pkgdir}/lib/udev/rules.d/
  install -m644 ${srcdir}/61-eee-ssd.rules ${pkgdir}/lib/udev/rules.d/

  # gzip -9 all modules
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # Now we call depmod...
  depmod -b "${pkgdir}" -F System.map "${_kernver}"

  # move module tree /lib -> /usr/lib
  mv "${pkgdir}/lib" "${pkgdir}/usr"
}

package_linux-eee-ck-headers() {
  _Hpkgdesc='Header files and scripts to build modules for linux-ck.'
  pkgdesc="${_Hpkgdesc}"
  depends=('linux-eee-ck') # added to keep kernel and headers packages matched
  replaces=('kernel26-ck-headers')

  install -dm755 "${pkgdir}/lib/modules/${_kernver}"

  cd ${srcdir}/$_srcname
  install -D -m644 Makefile \
    ${pkgdir}/usr/src/linux-${_kernver}/build/Makefile
  install -D -m644 kernel/Makefile \
    ${pkgdir}/usr/src/linux-${_kernver}/build/kernel/Makefile
  install -D -m644 .config \
    ${pkgdir}/usr/src/linux-${_kernver}/build/.config
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/build/include

  for i in acpi asm-generic config crypto drm generated keys linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    cp -a include/$i ${pkgdir}/usr/src/linux-${_kernver}/build/include/
  done

  # copy arch includes for external modules
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/build/arch/x86
  cp -a arch/x86/include ${pkgdir}/usr/src/linux-${_kernver}/build/arch/x86/

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers ${pkgdir}/usr/src/linux-${_kernver}/build
  cp -a scripts ${pkgdir}/usr/src/linux-${_kernver}/build

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/build/scripts"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/.tmp_versions"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/arch/$KARCH/kernel"

  cp arch/$KARCH/Makefile "${pkgdir}/usr/src/linux-${_kernver}/build/arch/$KARCH/"

  if [ "$CARCH" = "i686" ]; then
    cp arch/$KARCH/Makefile_32.cpu "${pkgdir}/usr/src/linux-${_kernver}/build/arch/$KARCH/"
  fi
  cp arch/$KARCH/kernel/asm-offsets.s "${pkgdir}/usr/src/linux-${_kernver}/build/arch/$KARCH/kernel/"

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
  "${pkgdir}/usr/src/linux-${_kernver}/build/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/src/linux-${_kernver}/build/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/src/linux-${_kernver}/build/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/media/dvb/dvb-core"
  cp drivers/media/dvb-core/*.h "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/media/dvb/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/include/config/dvb/"
  cp include/config/dvb/*.h "${pkgdir}/usr/src/linux-${_kernver}/build/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/media/dvb-frontends/"
  cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"
  cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/lib/modules/${_kernver}/build/drivers/media/i2c/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/media/usb/dvb-usb"
  cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/media/usb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/media/dvb-frontends"
  cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/media/tuners"
  cp drivers/media/tuners/*.h "${pkgdir}/usr/src/linux-${_kernver}/build/drivers/media/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/fs/xfs"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/build/mm"
  cp fs/xfs/xfs_sb.h "${pkgdir}/usr/src/linux-${_kernver}/build/fs/xfs/xfs_sb.h"

  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do 
    mkdir -p "${pkgdir}"/usr/src/linux-${_kernver}/build/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/src/linux-${_kernver}/build/${i}"
  done

  chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}/build"
  find "${pkgdir}/usr/src/linux-${_kernver}/build" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/lib/modules/${_kernver}/build/scripts"  -type f -perm -u+w 2>/dev/null | while read binary ; do
  case "$(file -bi "${binary}")" in
    *application/x-sharedlib*) # Libraries (.so)
      /usr/bin/strip ${STRIP_SHARED} "${binary}";;
    *application/x-archive*) # Libraries (.a)
      /usr/bin/strip ${STRIP_STATIC} "${binary}";;
    *application/x-executable*) # Binaries
      /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac 
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/build/arch/{alpha,arc,arm,arm26,arm64,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,um,unicore32,v850,xtensa}

# Global pkgdesc and depends are here so that they will be picked up by AUR 
pkgdesc='Linux Kernel and modules for the Asus Eee PC 701 with the ck1 patchset featuring the Brain Fuck Scheduler v0.447.'
}
