# Maintainer: gruppenpest <gruppenpest@softhome.net>
# Previous maintainer: OK <ok100.ok100.ok100@gmail.com>
# Based on kernel-eee PKGBUILD by Dan McGee <dan@archlinux.org>

# AUR workaround
pkgname="linux-eee-ck"

true && pkgname=("linux-eee-ck" "linux-eee-ck-headers")
_kernver=3.5
_ckver=ck1
pkgver=${_kernver}.4
pkgrel=1
bfsver=0.424
pkgdesc="The Linux Kernel and modules for the Asus Eee PC 701, with Brain Fuck Scheduler v$bfsver and all the goodies in the $_ckver patchset."
arch=('i686')
license=('GPL2')
url="http://www.kernel.org"
depends=('coreutils' 'module-init-tools')
optdepends=('crda: for wireless regulatory domain support'
            'iw: for wireless configuration support')
replaces=('linux-uvc-eee-svn' 'madwifi-eee-svn')
install=linux-eee-ck.install
source=(http://www.kernel.org/pub/linux/kernel/v3.x/linux-$_kernver.tar.xz
	http://www.kernel.org/pub/linux/kernel/v3.x/patch-$pkgver.xz
        http://ck.kolivas.org/patches/3.0/$_kernver/$_kernver-$_ckver/patch-$_kernver-$_ckver.bz2
        change-default-console-loglevel.patch
        i915-i2c-crash-3.5.x.patch
        watchdog-3.5.x.patch
        61-eee-ssd.rules
        kernelconfig)

md5sums=('24153eaaa81dedc9481ada8cd9c3b83d'
	 '4d34e5098b490670261b1aea71d26023'
	 '509b8842747a9a341e106e7189843cdb'
         '9d3c56a4b999c8bfbd4018089a62f662'
         'c4903f355690cd730a70456d5e13fb74'
         '2beb402371b954b3d4a63dc091cc558d'
         '73a20e8bf2bb29ba342f43460c6291cb'
	 '5d5b76fe78b975304670600986b29503')

build() {
  # get into the linux source directory and start some magic
  cd $srcdir/linux-$_kernver

  # add upstream patch
  patch -p1 -i "$srcdir/patch-$pkgver"
  
  # apply ck patch
  echo "=> Applying $_ckver patchset..."
  patch -Np1 -i ../patch-$_kernver-$_ckver

  # set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
  # remove this when a Kconfig knob is made available by upstream
  # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
  echo "=> Applying default console loglevel patch..." 
  patch -Np1 -i ../change-default-console-loglevel.patch

  # i915 crash patch
  echo "=> Applying i915 i2c crash patch"
  patch -Np1 -i ../i915-i2c-crash-3.5.x.patch

  # watchdog patch
  echo "=> Applying watchdog patch"
  patch -Np1 -i ../watchdog-3.5.x.patch

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # load configuration
  cp ../kernelconfig ./.config
  make silentoldconfig

  # to modify kernel settings, uncomment the following line
   make menuconfig

  # build!
  make ${MAKEFLAGS} bzImage modules || return 1
}

package_linux-eee-ck() {
  # install our modules
  cd $srcdir/linux-$_kernver
  mkdir -p $pkgdir/{lib/modules,boot}
  make INSTALL_MOD_PATH=$pkgdir modules_install || return 1

  # remove the junk symlinks
  cd $srcdir/linux-$_kernver
  rm $pkgdir/lib/modules/$pkgver-${_ckver}eee/{build,source}
  # install the kernel
  cp arch/x86/boot/bzImage $pkgdir/boot/vmlinuz-eee-ck
  # install a helper file for all install scripts
  mkdir -p $pkgdir/usr/share/linux-eee-ck/
  echo "KERNEL_VERSION='${pkgver}-${_ckver}eee'" > $pkgdir/usr/share/linux-eee-ck/currver

  # udev rules for SSD drives :: not required/helpful for 700
  mkdir -p $pkgdir/lib/udev/rules.d/
  install -m644 $srcdir/61-eee-ssd.rules $pkgdir/lib/udev/rules.d/

  # gzip -9 all modules
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "${pkgver}-${_ckver}eee"

  # move module tree /lib -> /usr/lib
  mv "$pkgdir/lib" "$pkgdir/usr"
}

package_linux-eee-ck-headers() {
  KARCH=x86

  # AUR workaround
  true && pkgdesc='Header files and scripts for building modules for linux-eee-ck'

  mkdir -p ${pkgdir}/lib/modules/${pkgver}-${_ckver}eee
  cd ${pkgdir}/lib/modules/${pkgver}-${_ckver}eee
  ln -sf ../../../usr/src/linux-${_kernver} build
  cd ${srcdir}/linux-$_kernver
  install -D -m644 Makefile \
    ${pkgdir}/usr/src/linux-${_kernver}/Makefile
  install -D -m644 kernel/Makefile \
    ${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile
  install -D -m644 .config \
    ${pkgdir}/usr/src/linux-${_kernver}/.config
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include

  for i in acpi asm-generic config crypto drm generated linux math-emu \
    media net pcmcia scsi sound trace video xen; do
    cp -a include/$i ${pkgdir}/usr/src/linux-${_kernver}/include/
  done

  # copy arch includes for external modules
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/x86
  cp -a arch/x86/include ${pkgdir}/usr/src/linux-${_kernver}/arch/x86/

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers ${pkgdir}/usr/src/linux-${_kernver}
  cp -a scripts ${pkgdir}/usr/src/linux-${_kernver}
  # fix permissions on scripts dir
  chmod og-w -R ${pkgdir}/usr/src/linux-${_kernver}/scripts
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions

  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/kernel

  cp arch/$KARCH/Makefile ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/
  if [ "$CARCH" = "i686" ]; then
    cp arch/$KARCH/Makefile_32.cpu ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/
  fi
  cp arch/$KARCH/kernel/asm-offsets.s ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/kernel/

  # add headers for lirc package
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video
  cp drivers/media/video/*.h  ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/
  for i in bt8xx cpia2 cx25840 cx88 em28xx pwc saa7134 sn9c102; do
   mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/$i
   cp -a drivers/media/video/$i/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/$i
  done
  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    ${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile
  # add dm headers
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/md
  cp drivers/md/*.h  ${pkgdir}/usr/src/linux-${_kernver}/drivers/md
  # add inotify.h
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include/linux
  cp include/linux/inotify.h ${pkgdir}/usr/src/linux-${_kernver}/include/linux/
  # add wireless headers
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/
  cp net/mac80211/*.h ${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/
  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core
  cp drivers/media/dvb/dvb-core/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core/
  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
  cp drivers/media/dvb/frontends/lgdt330x.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
  cp drivers/media/video/msp3400-driver.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
  # add dvb headers  
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-usb
  cp drivers/media/dvb/dvb-usb/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-usb/
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends
  cp drivers/media/dvb/frontends/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/common/tuners
  cp drivers/media/common/tuners/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/common/tuners/
  # add xfs and shmem for aufs building
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/fs/xfs
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/mm
  cp fs/xfs/xfs_sb.h ${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h
  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do 
    mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/`echo $i | sed 's|/Kconfig.*||'`
    cp $i ${pkgdir}/usr/src/linux-${_kernver}/$i
  done

  chown -R root.root ${pkgdir}/usr/src/linux-${_kernver}
  find ${pkgdir}/usr/src/linux-${_kernver} -type d -exec chmod 755 {} \;
  # strip scripts directory
  find ${pkgdir}/usr/src/linux-${_kernver}/scripts  -type f -perm -u+w 2>/dev/null | while read binary ; do
  case "$(file -bi "$binary")" in
    *application/x-sharedlib*) # Libraries (.so)
    /usr/bin/strip $STRIP_SHARED "$binary";;
    *application/x-archive*) # Libraries (.a)
    /usr/bin/strip $STRIP_STATIC "$binary";;
    *application/x-executable*) # Binaries
    /usr/bin/strip $STRIP_BINARIES "$binary";;
    esac 
  done 
  # remove unneeded architectures
  rm -rf ${pkgdir}/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,cris,frv,h8300,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,parisc,powerpc,ppc,s390,sh,sh64,sparc,sparc64,um,v850,xtensa}
}
