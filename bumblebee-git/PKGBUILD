# Maintaine:r onny <onny@project-insanity.org>
# Contributor: onny <onny@project-insanity.org>

# ==== TODO: backup=(array of files to be backuped)

pkgname=bumblebee-git
pkgver=20110512 #1.3.3
pkgrel=1
pkgdesc="Optimus Support for Linux Through VirtualGL."
arch=('i686' 'x86_64')
depends=('virtualgl-bin' 'nvidia')
conflicts=('libgl')
url="https://github.com/MrMEEE/bumblebee/"
license="GPL3"
backup=()
install=('bumblebee.install')

case "$CARCH" in
	i686)
		_bldarch="x86"
		_bldarch2=""
		md5sums=('702868c77b13bba46f0fce26ed7a1fb7');;
	x86_64)
		_bldarch="x86_64"
		_bldarch2="64"
		md5sums=('76d94f513731c75bdc4b763a3501cd4e');
esac

source=("http://us.download.nvidia.com/XFree86/Linux-$_bldarch/270.41.06/NVIDIA-Linux-$_bldarch-270.41.06.run") 

noextract=("NVIDIA-Linux-$_bldarch-270.41.06.run")

_gitroot="https://github.com/MrMEEE/bumblebee.git"
_gitname="bumblebee"

build() {
  cd $srcdir/
  msg "Connecting to GIT server...."

  if [ -d $_gitname ] ; then
    cd $_gitname && git pull origin
    msg "The local files are updated."
  else
    git clone $_gitroot $_gitname
  fi

  msg "GIT checkout done or server timeout"
} 
package() {
  chmod a+x NVIDIA-Linux-$_bldarch-270.41.06.run
  ./NVIDIA-Linux-$_bldarch-270.41.06.run -x
  mv $srcdir/NVIDIA-Linux-$_bldarch-270.41.06/* $pkgdir/usr/lib$_bldarch2/nvidia-current
  mkdir -p /usr/lib$_bldarch2/nvidia-current/xorg
	case "$CARCH" in
		x86_64)
		  ln -s $pkgdir/usr/lib64/nvidia-current/32 $pkgdir/usr/lib/nvidia-current
		  ln -s $pkgdir/usr/lib64/nvidia-current/xorg $pkgdir/usr/lib/nvidia-current/xorg
		  ln -s $pkgdir/usr/lib64/xorg/ $pkgdir/usr/lib/xorg
	esac
  ln -s $pkgdir/usr/lib$_bldarch2/nvidia-current/libglx.so.270.41.06 $pkgdir/usr/lib$_bldarch2/nvidia-current/xorg/libglx.so
  ln -s $pkgdir/usr/lib$_bldarch2/nvidia-current/nvidia_drv.so $pkgdir/usr/lib$_bldarch2/nvidia-current/xorg/nvidia_drv.so
  cp install-files/xorg.conf.intel $pkgdir/etc/X11/xorg.conf
  cp install-files/xorg.conf.nvidia $pkgdir/etc/X11/
  cp install-files/xdm-optimus.script.fedora $pkgdir/etc/rc.d/xdm-optimus
  cp install-files/virtualgl.conf $pkgdir/etc/modprobe.d/
  cp install-files/optimusXserver $pkgdir/usr/local/bin/
  cp install-files/bumblebee-bugreport $pkgdir/usr/local/bin/
  cp install-files/bumblebee-uninstall $pkgdir/usr/local/bin/ # post deinstall script
  chmod +x $pkgdir/usr/local/bin/optimusXserver
  chmod +x $pkgdir/usr/local/bin/bumblebee-bugreport
  INTELBUSID=`echo "PCI:"\`lspci |grep VGA |grep Intel |cut -f1 -d:\`":"\`lspci |grep VGA |grep Intel |cut -f2 -d: |cut -f1 -d.\`":"\`lspci |grep VGA |grep Intel |cut -f2 -d. |cut -f1 -d" "\``
  NVIDIABUSID=`echo "PCI:"\`lspci |grep VGA |grep nVidia |cut -f1 -d:\`":"\`lspci |grep VGA |grep nVidia |cut -f2 -d: |cut -f1 -d.\`":"\`lspci |grep VGA |grep nVidia |cut -f2 -d. |cut -f1 -d" "\``
  echo
  msg "Changing Configuration to match your Machine"
  echo 
  sed -i 's/REPLACEWITHBUSID/'$INTELBUSID'/g' $pkgdir/etc/X11/xorg.conf
  if [ `lspci |grep VGA |wc -l` -eq 2 ]; then
    NVIDIABUSID=`echo "PCI:"\`lspci |grep VGA |grep nVidia |cut -f1 -d:\`":"\`lspci |grep VGA |grep nVidia |cut -f2 -d: |cut -f1 -d.\`":"\`lspci |grep VGA |grep nVidia |cut -f2 -d. |cut -f1 -d" "\``
  elif [ `lspci |grep 3D |wc -l` -eq 1 ]; then
    NVIDIABUSID=`echo "PCI:"\`lspci |grep 3D |grep nVidia |cut -f1 -d:\`":"\`lspci |grep 3D |grep nVidia |cut -f2 -d: |cut -f1 -d.\`":"\`lspci |grep 3D |grep nVidia |cut -f2 -d. |cut -f1 -d" "\``
  else
    echo
    echo "The BusID of the nVidia card can't be determined"
    echo "You must correct this manually in /etc/X11/xorg.conf.nvidia"
    echo "Please report this problem.."
    echo
    echo "Press Any Key to continue"
    echo
  fi
  read 
  CONNECTEDMONITOR="UNDEFINED"
  while [ "$CONNECTEDMONITOR" = "UNDEFINED" ]; do
    echo
    echo "Select your Laptop:"
    echo "1) Alienware M11X"
    echo "2) Dell XPS 15"
    echo "3) Asus N61Jv (X64Jv)"
    echo "4) Asus EeePC 1215N"
    echo "5) Acer Aspire 5745PG"
    echo "6) Dell Vostro 3300"
    echo "7) Dell XPS 15 (L502x)"
    echo "8) Dell Vostro 3400"
    echo "9) Toshiba Satellite M645-SP4132L"
    echo "10) Asus U43JC"
    echo "11) Samsung RF511"
    echo "12) CLEVO W150HNQ"
    echo "13) Dell XPS 17 (L701x)"
    echo "14) Asus U53JC/K52JC"
    echo
    echo "97) Manually Set Output to CRT-0"
    echo "98) Manually Set Output to DFP-0"
    echo "99) Manually Enter Output"
    echo
    read machine
    echo
    case "$machine" in
    1)
    CONNECTEDMONITOR="CRT-0"
    ;;
    2)
    CONNECTEDMONITOR="CRT-0"
    ;;
    3)
    CONNECTEDMONITOR="CRT-0"
    ;;
    4)
    CONNECTEDMONITOR="DFP-0"
    ;;
    5)
    CONNECTEDMONITOR="DFP-0"
    ;;
    6)
    CONNECTEDMONITOR="DFP-0"
    ;;
    7)
    CONNECTEDMONITOR="CRT-0"
    ;;
    8)
    CONNECTEDMONITOR="CRT-0"
    ;;
    9)
    CONNECTEDMONITOR="CRT-0"
    ;;
    10)
    CONNECTEDMONITOR="CRT-0"
    ;;
    11)
    CONNECTEDMONITOR="CRT-0"
    ;;
    12)
    CONNECTEDMONITOR="DFP-0"
    ;;
    13)
    CONNECTEDMONITOR="CRT-0"
    ;;
    14)
    CONNECTEDMONITOR="CRT-0"
    ;;
    97)
    CONNECTEDMONITOR="CRT-0"
    ;;
    98)
    CONNECTEDMONITOR="DFP-0"
    ;;
    99)
    echo
    echo "Enter output device for nVidia Card"
    echo
    read manualinput
    CONNECTEDMONITOR=`echo $manualinput`
    ;;
    *)
    echo
    echo "Please choose a valid option, Press any key to try again"
    read
    clear
    ;;
    esac
  done
  echo
  echo "Setting output device to: $CONNECTEDMONITOR"
  echo
  sed -i 's/REPLACEWITHCONNECTEDMONITOR/'$CONNECTEDMONITOR'/g' $pkgdir/etc/X11/xorg.conf.nvidia
  echo
  echo
  echo
  echo "Ok... Installation complete..."
  echo
  echo "Now you need to make sure that the command \"vglclient -gl\" is run after your Desktop Enviroment is started"
  echo
  echo "In KDE this is done by this script.. Thanks to Peter Liedler.."
  echo
  echo "In GNOME this is done by this script.. Thanks to Peter Liedler.."
  echo
  if [ "$ARCH" = "x86_64" ]; then
    echo "After that you should be able to start applications with \"optirun32 <application>\" or \"optirun64 <application>\""
    echo "optirun32 can be used for legacy 32-bit applications and Wine Games.. Everything else should work on optirun64"
    echo "But... if one doesn't work... try the other"
  elif [ "$ARCH" = "i686" ]; then
    echo "After that you should be able to start applications with \"optirun <application>\"."
  fi
  echo
  echo "If you have any problems in or after the installation, please try to run the bumblebee-uninstall script and then"
  echo "rerun this script... if that doesn't work: please run the bumblebee-bugreport tool and send me a bugreport."
  echo
  echo "Or even better.. create an issue on github... this really makes bugfixing much easier for me and faster for you"
  echo
  echo "Good luck... MrMEEE / Martin Juhl"
  echo
  echo "http://www.martin-juhl.dk, http://twitter.com/martinjuhl, https://github.com/MrMEEE/bumblebee"
}
