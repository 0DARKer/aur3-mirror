--- a/RabbitVCS.py
+++ b/RabbitVCS.py
@@ -1,5 +1,5 @@
 #
-# This is an extension to the Nautilus file manager to allow better
+# This is an extension to the Nemo file manager to allow better
 # integration with the Subversion source control system.
 #
 # Copyright (C) 2006-2008 by Jason Field <jason@jasonfield.com>
@@ -22,7 +22,7 @@
 
 """
 
-Our module for everything related to the Nautilus extension.
+Our module for everything related to the Nemo extension.
 
 """
 from __future__ import with_statement
@@ -30,7 +30,7 @@
 def log_all_exceptions(type, value, tb):
     import sys, traceback
     from rabbitvcs.util.log import Log
-    log = Log("rabbitvcs.util.extensions.Nautilus.RabbitVCS")
+    log = Log("rabbitvcs.util.extensions.Nemo.RabbitVCS")
     log.exception_info("Error caught by master exception hook!",
                        (type, value, tb))
 
@@ -60,7 +60,7 @@
 from os.path import isdir, isfile, realpath, basename
 import datetime
 
-from gi.repository import Nautilus, GObject, Gtk, GdkPixbuf
+from gi.repository import Nemo, GObject, Gtk, GdkPixbuf
 
 import pysvn
 
@@ -79,7 +79,7 @@
 import rabbitvcs.ui.property_page
 
 from rabbitvcs.util.log import Log, reload_log_settings
-log = Log("rabbitvcs.util.extensions.Nautilus.RabbitVCS")
+log = Log("rabbitvcs.util.extensions.Nemo.RabbitVCS")
 
 from rabbitvcs import gettext, get_icon_path
 _ = gettext.gettext
@@ -92,8 +92,8 @@
 import rabbitvcs.services.service
 from rabbitvcs.services.checkerservice import StatusCheckerStub as StatusChecker
 
-class RabbitVCS(Nautilus.InfoProvider, Nautilus.MenuProvider,
-                 Nautilus.ColumnProvider, Nautilus.PropertyPageProvider, GObject.GObject):
+class RabbitVCS(Nemo.InfoProvider, Nemo.MenuProvider,
+                 Nemo.ColumnProvider, Nemo.PropertyPageProvider, GObject.GObject):
     """
     This is the main class that implements all of our awesome features.
 
@@ -205,25 +205,25 @@
         """
 
         return (
-            Nautilus.Column(
+            Nemo.Column(
                 name="RabbitVCS::status_column",
                 attribute="status",
                 label=_("RVCS Status"),
                 description=""
             ),
-            Nautilus.Column(
+            Nemo.Column(
                 name="RabbitVCS::revision_column",
                 attribute="revision",
                 label=_("RVCS Revision"),
                 description=""
             ),
-            Nautilus.Column(
+            Nemo.Column(
                 name="RabbitVCS::author_column",
                 attribute="author",
                 label=_("RVCS Author"),
                 description=""
             ),
-            Nautilus.Column(
+            Nemo.Column(
                 name="RabbitVCS::age_column",
                 attribute="age",
                 label=_("RVCS Age"),
@@ -253,9 +253,9 @@
         enable_emblems = bool(int(settings.get("general", "enable_emblems")))
         enable_attrs = bool(int(settings.get("general", "enable_attributes")))
         
-        if not (enable_emblems or enable_attrs): return Nautilus.OperationResult.COMPLETE
+        if not (enable_emblems or enable_attrs): return Nemo.OperationResult.COMPLETE
                 
-        if not self.valid_uri(item.get_uri()): return Nautilus.OperationResult.FAILED
+        if not self.valid_uri(item.get_uri()): return Nemo.OperationResult.FAILED
 
         path = rabbitvcs.util.helper.unquote_url(self.get_local_path(item.get_uri()))
 
@@ -275,7 +275,7 @@
         # when we remove this line (detected as working copies, even though
         # they are not)? That shouldn't happen.
         is_in_a_or_a_working_copy = self.vcs_client.is_in_a_or_a_working_copy(path)
-        if not is_in_a_or_a_working_copy: return Nautilus.OperationResult.COMPLETE
+        if not is_in_a_or_a_working_copy: return Nemo.OperationResult.COMPLETE
 
         # Do our magic...
 
@@ -308,7 +308,7 @@
         if enable_attrs: self.update_columns(item, path, status)
         if enable_emblems: self.update_status(item, path, status)
         
-        return Nautilus.OperationResult.COMPLETE
+        return Nemo.OperationResult.COMPLETE
 
     def update_columns(self, item, path, status):
         """
@@ -415,7 +415,7 @@
     def update_file_items(self, provider, base_dir, paths, conditions_dict):
         paths_str = "-".join(paths)
         self.items_cache[paths_str] =  conditions_dict
-        Nautilus.MenuProvider.emit_items_updated_signal(provider)
+        Nemo.MenuProvider.emit_items_updated_signal(provider)
 
     #~ @disable
     # This is useful for profiling. Rename it to "get_background_items" and then
@@ -490,7 +490,7 @@
         paths_str = "-".join(paths)
         conditions = NautilusMenuConditions(conditions_dict)
         self.items_cache[paths_str] =  conditions_dict
-        Nautilus.MenuProvider.emit_items_updated_signal(provider)
+        Nemo.MenuProvider.emit_items_updated_signal(provider)
 
     #
     # Helper functions
@@ -624,7 +624,7 @@
         label = rabbitvcs.ui.property_page.PropertyPageLabel(claim_domain=False).get_widget()
         page = rabbitvcs.ui.property_page.PropertyPage(paths, claim_domain=False).get_widget()
 
-        ppage = Nautilus.PropertyPage(name='RabbitVCS::PropertyPage',
+        ppage = Nemo.PropertyPage(name='RabbitVCS::PropertyPage',
             label=label,
             page=page)
 
@@ -635,16 +635,27 @@
 class NautilusContextMenu(MenuBuilder):
     """
     Provides a standard Nautilus context menu (ie. a list of
-    "Nautilus.MenuItem"s).
+    "Nemo.MenuItem"s).
     """
 
     signal = "activate"
 
     def make_menu_item(self, item, id_magic):
-        return item.make_nautilus_menu_item(id_magic)
+#        return item.make_nautilus_menu_item(id_magic)
+
+        identifier = item.make_magic_id(id_magic)
+
+        menuitem = Nemo.MenuItem(
+        name=identifier,
+        label=item.make_label(),
+        tip=item.tooltip,
+        icon=item.icon
+        )
+                    
+        return menuitem
 
     def attach_submenu(self, menu_node, submenu_list):
-        submenu = Nautilus.Menu()
+        submenu = Nemo.Menu()
         menu_node.set_submenu(submenu)
         [submenu.append_item(item) for item in submenu_list]
 
