--- SConstruct	2010-02-09 18:19:13.000000000 -0300
+++ SConstructB	2010-05-13 23:30:54.501025538 -0300
@@ -1,16 +1,17 @@
 #!/usr/bin/python
 import os
 import glob
 import sys
 
 options = Variables('options.cache', ARGUMENTS)
 options.Add(PathVariable('prefix', 'The prefix where the application will be installed', '/usr/local'))
 options.Add(PathVariable('clam_prefix', 'The prefix where CLAM was installed', '/usr/local'))
+options.Add(PathVariable('prefix_for_packaging', 'Install location when packaging. Use "." for same as prefix.', '.'))
 options.Add(BoolVariable('release', 'Enabling compiler optimizations', 'no') )
 options.Add(('qt_plugins_install_path', 'Path component (without the install prefix) where to install designer plugins (tipically /lib/qt4/plugins/designer)','/bin/designer'))
 options.Add(BoolVariable('verbose', 'Display the full command line instead a short command description', 'no') )
 options.Add(PathVariable('external_dll_path', '(Windows only) The place where the NSIS packager takes the installed DLL from', '.'))
 if sys.platform=="linux2" :
 	options.Add(BoolVariable('crossmingw', 'Using MinGW crosscompiler mode', 'no') )
 
 def scanFiles(pattern, paths) :
@@ -33,16 +34,20 @@
 
 env.SConsignFile() # Single signature file
 
 crosscompiling = env.has_key("crossmingw") and env["crossmingw"]
 isWindowsPlatform = sys.platform=='win32' or crosscompiling
 isLinuxPlatform = sys.platform=='linux2' and not crosscompiling
 isDarwinPlatform = sys.platform=='darwin'
 
+# if prefix_for_packaging not set, set it to prefix.
+# TODO: David, I add this (revert) again because if not NE doesn't install!
+if env['prefix_for_packaging'] == '.':
+	env['prefix_for_packaging'] = env['prefix']
 CLAMInstallDir = env['clam_prefix']
 clam_sconstoolspath = os.path.join(CLAMInstallDir,'share','clam','sconstools')
 
 env.Tool('qt4', toolpath=[clam_sconstoolspath])
 env.Tool('clam', toolpath=[clam_sconstoolspath])
 env.Tool('nsis', toolpath=[clam_sconstoolspath])
 if sys.platform=='darwin' : env.Tool('bundle', toolpath=[clam_sconstoolspath])
 env.Tool('dmg', toolpath=[clam_sconstoolspath])
@@ -64,16 +69,18 @@
 if not env['verbose']: env.ClamQuietCompilation()
 
 env.EnableClamModules([
 	'clam_core',
 	'clam_audioio',
 	'clam_processing',
 	], CLAMInstallDir)
 
+env.AppendUnique(CPPPATH=["/usr/include"])
+
 env.EnableQt4Modules([
 	'QtCore',
 	'QtGui',
 	'QtOpenGL',
 	'QtXml',
 	'QtSvg',
 	'QtUiTools',
 	'QtDesigner',
@@ -121,17 +128,16 @@
 	env.Append(LIBS=['glu32'])
 	sources += env.RES(source=["resources/NetworkEditor.rc"])
 
 if isLinuxPlatform :
 	try:
 		env.ParseConfig("pkg-config --cflags --libs glu") #works on karmic and lucid
 	except:
 		env.AppendUnique(LIBS=['GLU']) #works on janunty (libglu1-mesa-dev doesnt have the pkg-config)
-	# TODO: This should not be hardcoded neither prefix (because package install)
 	env.Append(CPPFLAGS='-DDATA_EXAMPLES_PATH="\\"${prefix}/share/networkeditor/example-data\\""')
 
 env.Append( CCFLAGS=['-g','-O3','-Wall','-pipe'] )
 if env['release'] :
 	env.Append( CCFLAGS=['-fomit-frame-pointer'] )
 
 qtmonitorDirs = env.recursiveDirs(os.path.join('src','widgets')) + env.recursiveDirs(os.path.join('src','monitors'))
 qtmonitorSources = env.scanFiles('*.cxx', qtmonitorDirs,
@@ -232,17 +238,17 @@
 	'/share/mimelnk/application': kdeMimeEntries,
 	'/share/man/man1' : manpages,
 	'/share/networkeditor': ['resources/NetworkEditor-icon.svg'],
 	'/share/networkeditor/i18n': translations,
 	'/share/networkeditor/example-data': examples,
 }
 
 installTargets = [
-	env.Install( env['prefix']+path, files ) for path, files in installation.items() 
+	env.Install( env['prefix_for_packaging']+path, files ) for path, files in installation.items() 
 	] + qtmonitorInstall
 
 if isWindowsPlatform : 
 	def absolutePosixPathToWine(dir) :
 		return 'z:'+'\\\\'.join(dir.split('/'))
 
 	winqtdir=env['QTDIR']
 	if crosscompiling : env['NSIS_MAKENSIS'] = 'wine ~/.wine/dosdevices/c:/Program\ Files/NSIS/makensis'
@@ -250,17 +256,17 @@
 	externalDllPath = env['external_dll_path']
 	if crosscompiling : externalDllPath = absolutePosixPathToWine(externalDllPath)
 	winclampath = CLAMInstallDir
 	if crosscompiling : winclampath = absolutePosixPathToWine(winclampath)
 	if crosscompiling :
 		env.AddPostAction(programs, env.Action(["i586-mingw32msvc-strip $TARGET"], "== Stripping $SOURCE"))
 	installTargets += [
 		env.Install(
-			env['prefix']+"/bin",
+			env['prefix_for_packaging']+"/bin",
 			os.path.join(env['QTDIR'],'bin',"Qt"+dll+"4.dll")
 			) for dll in 'Core', 'Gui', 'OpenGL','Svg']
 	env.Append(NSIS_OPTIONS=['/DVERSION=%s' % fullVersion ])
 	env.Append(NSIS_OPTIONS=['/DQTDIR=%s'%winqtdir ])
 	env.Append(NSIS_OPTIONS=['/DEXTERNALDLLDIR=%s' % externalDllPath ])
 	env.Append(NSIS_OPTIONS=['/DCLAMINSTALLDIR=%s' % winclampath ])
 	# Get the visual studio runtimes path
 	for vcRuntimeDir in os.environ['PATH'].split(";") :
