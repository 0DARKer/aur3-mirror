diff -Naur MED_SRC_5.1.4.orig//src/MEDLoader/MEDLoader.cxx MED_SRC_5.1.4//src/MEDLoader/MEDLoader.cxx
--- MED_SRC_5.1.4.orig//src/MEDLoader/MEDLoader.cxx	2010-07-07 20:06:41.319275884 +0200
+++ MED_SRC_5.1.4//src/MEDLoader/MEDLoader.cxx	2010-07-09 16:36:07.678049186 +0200
@@ -253,12 +253,13 @@
   for(int i=0;i<nfam;i++)
     {
       int ngro=MEDnGroupe(fid,(char *)meshName,i+1);
+      med_int ngroMI=ngro;
       med_int natt=MEDnAttribut(fid,(char *)meshName,i+1);
-      med_int *attide=new int[natt];
-      med_int *attval=new int[natt];
+      med_int *attide=new med_int[natt];
+      med_int *attval=new med_int[natt];
       char *attdes=new char[MED_TAILLE_DESC*natt+1];
       char *gro=new char[MED_TAILLE_LNOM*ngro+1];
-      MEDfamInfo(fid,(char *)meshName,i+1,nomfam,&numfam,attide,attval,attdes,&natt,gro,&ngro);
+      MEDfamInfo(fid,(char *)meshName,i+1,nomfam,&numfam,attide,attval,attdes,&natt,gro,&ngroMI);
       std::string cur=MEDLoaderNS::buildStringFromFortran(nomfam,sizeof(nomfam));
       ret[i]=cur;
       delete [] attdes;
@@ -280,12 +281,13 @@
   for(int i=0;i<nfam;i++)
     {
       int ngro=MEDnGroupe(fid,(char *)meshName,i+1);
+      med_int ngroMI = ngro;
       med_int natt=MEDnAttribut(fid,(char *)meshName,i+1);
-      med_int *attide=new int[natt];
-      med_int *attval=new int[natt];
+      med_int *attide=new med_int[natt];
+      med_int *attval=new med_int[natt];
       char *attdes=new char[MED_TAILLE_DESC*natt+1];
       char *gro=new char[MED_TAILLE_LNOM*ngro+1];
-      MEDfamInfo(fid,(char *)meshName,i+1,nomfam,&numfam,attide,attval,attdes,&natt,gro,&ngro);
+      MEDfamInfo(fid,(char *)meshName,i+1,nomfam,&numfam,attide,attval,attdes,&natt,gro,&ngroMI);
       for(int j=0;j<ngro;j++)
         {
           std::string cur=MEDLoaderNS::buildStringFromFortran(gro+j*MED_TAILLE_LNOM,MED_TAILLE_LNOM);
@@ -547,12 +549,13 @@
   for(int i=0;i<nfam;i++)
     {
       int ngro=MEDnGroupe(fid,(char *)meshName,i+1);
+      med_int ngroMI=ngro;
       med_int natt=MEDnAttribut(fid,(char *)meshName,i+1);
-      med_int *attide=new int[natt];
-      med_int *attval=new int[natt];
+      med_int *attide=new med_int[natt];
+      med_int *attval=new med_int[natt];
       char *attdes=new char[MED_TAILLE_DESC*natt+1];
       char *gro=new char[MED_TAILLE_LNOM*ngro+1];
-      MEDfamInfo(fid,(char *)meshName,i+1,nomfam,&numfam,attide,attval,attdes,&natt,gro,&ngro);
+      MEDfamInfo(fid,(char *)meshName,i+1,nomfam,&numfam,attide,attval,attdes,&natt,gro,&ngroMI);
       std::string cur=buildStringFromFortran(nomfam,sizeof(nomfam));
       if(std::find(fams.begin(),fams.end(),cur)!=fams.end())
         ret.push_back(numfam);
@@ -575,12 +578,13 @@
   for(int i=0;i<nfam;i++)
     {
       int ngro=MEDnGroupe(fid,(char *)meshName,i+1);
+      med_int ngroMI = ngro;
       med_int natt=MEDnAttribut(fid,(char *)meshName,i+1);
-      med_int *attide=new int[natt];
-      med_int *attval=new int[natt];
+      med_int *attide=new med_int[natt];
+      med_int *attval=new med_int[natt];
       char *attdes=new char[MED_TAILLE_DESC*natt+1];
       char *gro=new char[MED_TAILLE_LNOM*ngro+1];
-      MEDfamInfo(fid,(char *)meshName,i+1,nomfam,&numfam,attide,attval,attdes,&natt,gro,&ngro);
+      MEDfamInfo(fid,(char *)meshName,i+1,nomfam,&numfam,attide,attval,attdes,&natt,gro,&ngroMI);
       std::string cur=buildStringFromFortran(nomfam,sizeof(nomfam));
       for(int j=0;j<ngro;j++)
         {
@@ -669,19 +673,34 @@
       if(curNbOfElem>0)
         {
           int *connTab=new int[(curMedType%100)*curNbOfElem];
+	  med_int *connTabMI = new med_int[(curMedType%100)*curNbOfElem];
           int *fam=new int[curNbOfElem];
+	  med_int *famMI = new med_int[curNbOfElem];
           MEDLoader::MEDConnOfOneElemType elem(typmai2[i],connTab,0,fam,curNbOfElem,-1);
-          int *tmp=new int[curNbOfElem];
+	  for(int i=0; i<((curMedType%100)*curNbOfElem);i++){
+	    connTabMI[i]=connTab[i];
+	  }
+	  for(int i=0; i<curNbOfElem;i++){
+	    famMI[i]=fam[i];
+	  }
+          med_int *tmp=new med_int[curNbOfElem];
           char *noms=new char[MED_TAILLE_PNOM*curNbOfElem+1];
-          MEDelementsLire(fid,nommaa,Mdim,connTab,MED_FULL_INTERLACE,noms,&inoele,tmp,&inuele,fam,curNbOfElem,whichEntity,curMedType,MED_NOD);
+          MEDelementsLire(fid,nommaa,Mdim,connTabMI,MED_FULL_INTERLACE,noms,&inoele,tmp,&inuele,famMI,curNbOfElem,whichEntity,curMedType,MED_NOD);
           delete [] tmp;
           delete [] noms;
           //trying to read global numbering
           int *globArr=new int[curNbOfElem];
-          if(MEDglobalNumLire(fid,nommaa,globArr,curNbOfElem,whichEntity,curMedType)==0)
+	  med_int *globArrMI=new med_int[curNbOfElem];
+          if(MEDglobalNumLire(fid,nommaa,globArrMI,curNbOfElem,whichEntity,curMedType)==0){
+	    for(int i=0; i< curNbOfElem;i++){
+	      globArr[i]=globArrMI[i];
+	    }
+	    delete [] globArrMI;
             elem.setGlobal(globArr);
-          else
+	  } else{
             delete [] globArr;
+            delete [] globArrMI;
+	  }
           conn.push_back(elem);
         }
     }
@@ -695,11 +714,23 @@
       med_int arraySize;
       MEDpolygoneInfo(fid,nommaa,whichPolyEntity,MED_NOD,&arraySize);
       int *index=new int[curNbOfPolyElem+1];
+      med_int *indexMI=new med_int[curNbOfPolyElem+1];
       int *locConn=new int[arraySize];
+      med_int *locConnMI=new med_int[arraySize];
       int *fam=new int[curNbOfPolyElem];
-      MEDLoader::MEDConnOfOneElemType elem(INTERP_KERNEL::NORM_POLYGON,locConn,index,fam,curNbOfPolyElem,arraySize);
-      MEDpolygoneConnLire(fid,nommaa,index,curNbOfPolyElem+1,locConn,whichPolyEntity,MED_NOD);
-      MEDfamLire(fid,nommaa,fam,curNbOfPolyElem,MED_MAILLE,MED_POLYGONE);
+      med_int *famMI=new med_int[curNbOfPolyElem];
+      MEDLoader::MEDConnOfOneElemType elem(INTERP_KERNEL::NORM_POLYGON,locConn,index,fam,curNbOfPolyElem,(int)arraySize);
+      for(int i=0; i<(curNbOfPolyElem+1); i++){
+	indexMI[i]=index[i];
+      }
+      for(int i=0; i<arraySize;i++){
+	locConnMI[i]=locConn[i];
+      }
+      for(int i=0; i<curNbOfPolyElem;i++){
+	famMI[i]=fam[i];
+      }
+      MEDpolygoneConnLire(fid,nommaa,indexMI,curNbOfPolyElem+1,locConnMI,whichPolyEntity,MED_NOD);
+      MEDfamLire(fid,nommaa,famMI,curNbOfPolyElem,MED_MAILLE,MED_POLYGONE);
       conn.push_back(elem);
     }
   curNbOfPolyElem=MEDnEntMaa(fid,nommaa,MED_CONN,MED_MAILLE,MED_POLYEDRE,MED_NOD);
@@ -708,11 +739,27 @@
       med_int indexFaceLgth,connFaceLgth;
       MEDpolyedreInfo(fid,nommaa,MED_NOD,&indexFaceLgth,&connFaceLgth);
       int *index=new int[curNbOfPolyElem+1];
+      med_int *indexMI=new med_int[curNbOfPolyElem+1];
       int *indexFace=new int[indexFaceLgth];
+      med_int *indexFaceMI=new med_int[indexFaceLgth];
       int *locConn=new int[connFaceLgth];
+      med_int *locConnMI=new med_int[connFaceLgth];
       int *fam=new int[curNbOfPolyElem];
-      MEDpolyedreConnLire(fid,nommaa,index,curNbOfPolyElem+1,indexFace,indexFaceLgth,locConn,MED_NOD);
-      MEDfamLire(fid,nommaa,fam,curNbOfPolyElem,MED_MAILLE,MED_POLYEDRE);
+      med_int *famMI=new med_int[curNbOfPolyElem];
+      MEDpolyedreConnLire(fid,nommaa,indexMI,curNbOfPolyElem+1,indexFaceMI,indexFaceLgth,locConnMI,MED_NOD);
+      for(int i=0; i<(curNbOfPolyElem+1); i++){
+	index[i]=indexMI[i];
+      }
+      for(int i=0; i<indexFaceLgth; i++ ){
+	indexFace[i]=indexFaceMI[i];
+      }
+      for(int i=0;i<connFaceLgth;i++){
+	locConn[i]=locConnMI[i];
+      }
+      MEDfamLire(fid,nommaa,famMI,curNbOfPolyElem,MED_MAILLE,MED_POLYEDRE);
+      for(int i=0; i<curNbOfPolyElem; i++){
+	fam[i] = famMI[i];
+      }
       int arraySize=connFaceLgth;
       for(int i=0;i<curNbOfPolyElem;i++)
         arraySize+=index[i+1]-index[i]-1;
@@ -731,8 +778,10 @@
             }
         }
       delete [] index;
+      delete [] indexMI;
       delete [] locConn;
       delete [] indexFace;
+      delete [] indexFaceMI;
       MEDLoader::MEDConnOfOneElemType elem(INTERP_KERNEL::NORM_POLYHED,finalConn,finalIndex,fam,curNbOfPolyElem,arraySize);
       conn.push_back(elem);
     }
@@ -1145,15 +1194,25 @@
       if(allTypes.find(curType)!=allTypes.end())
         {
           std::vector<int> medConn;
+          std::vector<med_int> medConnMI;
           std::vector<int> medConnIndex;
+          std::vector<med_int> medConnIndexMI;
           std::vector<int> medConnIndex2;
           int nbOfElt=MEDLoaderNS::buildMEDSubConnectivityOfOneType(conn,connIndex,curType,medConn,medConnIndex,medConnIndex2);
-          if(curMedType!=MED_POLYGONE && curMedType!=MED_POLYEDRE)
-            MEDconnEcr(fid,maa,mesh->getMeshDimension(),&medConn[0],MED_FULL_INTERLACE,nbOfElt,MED_MAILLE,curMedType,MED_NOD);
+	  for( int i=0; i<medConn.size(); i++ ){
+	    med_int val = medConn[i];
+	    medConnMI.push_back( val );
+	  }
+          for( int i=0; i<medConnIndex.size(); i++ ){
+	    med_int val = medConnIndex[i];
+	    medConnIndexMI.push_back( val );
+	  }
+	  if(curMedType!=MED_POLYGONE && curMedType!=MED_POLYEDRE)
+            MEDconnEcr(fid,maa,mesh->getMeshDimension(),&medConnMI[0],MED_FULL_INTERLACE,nbOfElt,MED_MAILLE,curMedType,MED_NOD);
           else
             {
               if(curMedType==MED_POLYGONE)
-                MEDpolygoneConnEcr(fid,maa,&medConnIndex[0],medConnIndex.size(),&medConn[0],MED_MAILLE,MED_NOD);
+                MEDpolygoneConnEcr(fid,maa,&medConnIndexMI[0],medConnIndexMI.size(),&medConnMI[0],MED_MAILLE,MED_NOD);
             }
         }
     }
diff -Naur MED_SRC_5.1.4.orig//src/MEDSPLITTER/MEDSPLITTER_MESHCollectionDriver.cxx MED_SRC_5.1.4//src/MEDSPLITTER/MEDSPLITTER_MESHCollectionDriver.cxx
--- MED_SRC_5.1.4.orig//src/MEDSPLITTER/MEDSPLITTER_MESHCollectionDriver.cxx	2010-07-07 20:06:41.172646373 +0200
+++ MED_SRC_5.1.4//src/MEDSPLITTER/MEDSPLITTER_MESHCollectionDriver.cxx	2010-07-09 17:45:10.497628460 +0200
@@ -195,10 +195,14 @@
       char joint_description[MED_TAILLE_DESC];
       char name[MED_TAILLE_NOM];
       char name_distant[MED_TAILLE_NOM];
+
+      med_int distantMI;
         
       int ncorr = med_2_3::MEDjointInfo(fid,meshname, ijoint+1, name, 
                 joint_description,
-                &distant, name_distant);
+                &distantMI, name_distant);
+
+      distant = distantMI;
   
       for (int ic=0; ic<ncorr; ic++)
         {
@@ -216,12 +220,16 @@
     int* node_corresp=new int[ncouples];
     if (cor_typent_local == med_2_3::MED_NOEUD && cor_typent_dist == med_2_3::MED_NOEUD)
       {
-      
+        med_int* node_correspMI=new med_int[ncouples];
         med_2_3::MEDjointLire(fid, meshname, name,
-            node_corresp,ncouples,
+            node_correspMI,ncouples,
             cor_typent_local,  cor_typgeo_local,
             cor_typent_dist, cor_typgeo_dist
             );
+	for( int i = 0; i < ncouples; i++){
+	    node_corresp[i] = node_correspMI[i];
+	}
+	delete [] node_correspMI;
       }
     //constructing the connect zone and adding it to the connect zone list
     MEDMEM::CONNECTZONE* cz = new MEDMEM::CONNECTZONE();
@@ -243,7 +251,8 @@
   if (ncell>0)
   {
     int * array=new int[ncell];
-    int offset=0;
+    med_int * arrayMI = new med_int[ncell];
+    med_int offset=0;
     MESSAGE_MED("Reading cell global numbering for mesh "<< idomain);
     list<MED_EN::medGeometryElement>::const_iterator iter;
     char meshchar[MED_TAILLE_NOM];
@@ -256,10 +265,14 @@
         if (!m_collection->isDimensionOK(type,m_collection->getMeshDimension())) continue;
         int ntype = (m_collection->getMesh())[idomain]->getNumberOfElementsWithPoly(MED_EN::MED_CELL,type);
         if (ntype==0) continue;
-        med_2_3::MEDglobalNumLire(fid,meshname, array+offset, ntype,
+        med_2_3::MEDglobalNumLire(fid,meshname, arrayMI+offset, ntype,
                 med_2_3::MED_MAILLE, (med_2_3::med_geometrie_element)type);
         offset+=ntype;
       }
+    for( int i = 0; i < ncell; i++) {
+      array[i] = arrayMI[i];
+    }
+    delete [] arrayMI;
     cellglobal[idomain]=array;
     delete[] types;
   } 
@@ -268,8 +281,13 @@
   int nnode= (m_collection->getMesh())[idomain]->getNumberOfNodes();
   {
   int* array=new int[nnode];
-  med_2_3::MEDglobalNumLire(fid,meshname, array, nnode,
+  med_int * arrayMI = new med_int[nnode];
+  med_2_3::MEDglobalNumLire(fid,meshname, arrayMI, nnode,
           med_2_3::MED_NOEUD, med_2_3::MED_POINT1); 
+  for( int i = 0; i < nnode; i++) {
+      array[i] = arrayMI[i];
+  }
+  delete [] arrayMI;
   nodeglobal[idomain]=array;
   } 
         
@@ -278,7 +296,8 @@
   if (nbface!=0)
     {
       int* array=new int[nbface];
-      int offset=0;
+      med_int * arrayMI = new med_int[nbface];
+      med_int offset=0;
       int nbtypes = (m_collection->getMesh())[idomain]->getNumberOfTypesWithPoly(MED_EN::MED_FACE);
       MED_EN::medGeometryElement* types =(m_collection->getMesh())[idomain]->getTypesWithPoly(MED_EN::MED_FACE);
   
@@ -289,10 +308,14 @@
     
     int ntype = (m_collection->getMesh())[idomain]->getNumberOfElementsWithPoly(MED_EN::MED_FACE,type);
     if (ntype==0) continue;
-    med_2_3::MEDglobalNumLire(fid,meshname, array+offset, ntype,
+    med_2_3::MEDglobalNumLire(fid,meshname, arrayMI+offset, ntype,
             med_2_3::MED_MAILLE, (med_2_3::med_geometrie_element)type);
     offset+=ntype;
         }
+      for( int i = 0; i < nbface; i++) {
+	array[i] = arrayMI[i];
+      }
+      delete [] arrayMI;
       faceglobal[idomain]=array;
        delete[] types;
     }
@@ -356,11 +379,20 @@
            else
              jointSort(node_corresp, nbnodes, false);
           
+	 med_int * node_correspMI = new med_int[nbnodes];
+	 for( int i=0; i < nbnodes; i++){
+	   node_correspMI[i] = node_corresp[i];
+	 }
         error=
-    med_2_3::MEDjointEcr(fid, mesh_name, joint_name, node_corresp, nbnodes,
+    med_2_3::MEDjointEcr(fid, mesh_name, joint_name, node_correspMI, nbnodes,
              med_2_3::MED_NOEUD, med_2_3::MED_POINT1,med_2_3::MED_NOEUD, med_2_3::MED_POINT1);
         if (error==-1) cout << "erreur creation de joint "<<endl;
-        
+	
+	 for( int i=0; i < nbnodes; i++){
+	   node_corresp[i] = node_correspMI[i];
+	 }
+	delete [] node_correspMI;
+
         //writing cell/cell joint      
                                 writeElementJoint(MED_EN::MED_CELL, icz, idomain, idistant, mesh_name,joint_name,fid);
         //writing face/face joint
@@ -382,8 +414,9 @@
                         {
       int ncell=m_collection->getTopology()->getCellNumber(idomain);
       int* array=new int[ncell];
+      med_int * arrayMI = new med_int[ncell];
       m_collection->getTopology()->getCellList(idomain,array);
-      int offset=0;
+      med_int offset=0;
                         
       MED_EN::MESH_ENTITIES::const_iterator currentEntity;
       list<MED_EN::medGeometryElement>::const_iterator iter;
@@ -397,13 +430,14 @@
                                         if (!m_collection->isDimensionOK(type,m_collection->getMeshDimension())) continue;
                                         int ntype = (m_collection->getMesh())[idomain]->getNumberOfElementsWithPoly(MED_EN::MED_CELL,type);
                                         if (ntype==0) continue;
-                                        med_2_3::MEDglobalNumEcr(fid,meshchar, array+offset, ntype,
+                                        med_2_3::MEDglobalNumEcr(fid,meshchar, arrayMI+offset, ntype,
                                                                                                                                          med_2_3::MED_MAILLE, (med_2_3::med_geometrie_element)type);
                                         offset+=ntype;
           
                                 }
       delete[] types;
       delete[] array;
+      delete [] arrayMI;
                         }
         
       MED_EN::medEntityMesh constituent_entity;
@@ -417,11 +451,17 @@
       //writing face global numbering
                         {
                         int * array;
-      int offset=0;
+			med_int * arrayMI;
+      med_int offset=0;
       int nface= m_collection->getTopology()->getFaceNumber(idomain);
-      if (nface >0)
+      if (nface >0){
         array=new int[nface];
+	arrayMI = new med_int[nface];
+      }
       m_collection->getTopology()->getFaceList(idomain,array);
+      for(int i = 0; i < nface; i++){
+	arrayMI[i] = array[i];
+      }
       strcpy(meshchar,(m_collection->getMesh())[idomain]->getName().c_str());
       int nbfacetypes = (m_collection->getMesh())[idomain]->getNumberOfTypesWithPoly(constituent_entity);
       MED_EN::medGeometryElement* facetypes;
@@ -435,12 +475,15 @@
                                         
                                         int ntype = (m_collection->getMesh())[idomain]->getNumberOfElementsWithPoly(constituent_entity,type);
                                         if (ntype==0) continue;
-                                        med_2_3::MEDglobalNumEcr(fid,meshchar, array+offset, ntype,
+                                        med_2_3::MEDglobalNumEcr(fid,meshchar, arrayMI+offset, ntype,
                                                                                                                                          med_2_3::MED_MAILLE, (med_2_3::med_geometrie_element)type);
                                         
                                         offset+=ntype;
                                 }
-                        if (nface>0) delete[] array;
+      if (nface>0) {
+	delete[] array;
+	delete[] arrayMI;
+      }
                         if (nbfacetypes>0) delete[] facetypes;
                         }
 
@@ -449,13 +492,18 @@
                         {
                         int nnode= m_collection->getTopology()->getNodeNumber(idomain);
                         int* array=new int[nnode];
+			med_int * arrayMI = new med_int[nnode];
       
                         m_collection->getTopology()->getNodeList(idomain,array);
+			for( int i=0; i < nnode; i++){
+			  arrayMI[i] = array[i];
+			}
                         
-                        med_2_3::MEDglobalNumEcr(fid,meshchar, array, nnode,
+                        med_2_3::MEDglobalNumEcr(fid,meshchar, arrayMI, nnode,
                                                                                                                          med_2_3::MED_NOEUD, med_2_3::MED_POINT1);
                         
                         delete[] array;
+			delete [] arrayMI;
                         }
 
                         med_2_3::MEDfermer(fid);
@@ -508,12 +556,12 @@
                 {
                                 MED_EN::medGeometryElement local_type =  (m_collection->getMesh())[idomain]->getElementType(entity,1);
                                 MED_EN::medGeometryElement distant_type = (m_collection->getMesh())[idistant]->getElementType(entity,1);
-                                vector<int> corresp;
+                                vector<med_int> corresp;
                                 for (int i=0; i<nbcells; i++)
                                         for (int icol = index[i]-1; icol<index[i+1]-1; icol++)
                                                 {
-                                                        corresp.push_back(i+1);
-                                                        corresp.push_back(value[icol]);
+						  corresp.push_back((med_int)(i+1));
+						  corresp.push_back((med_int)(value[icol]));
                                                 }
                                 int size_joint = corresp.size()/2;
                                 med_2_3::MEDjointEcr(fid, mesh_name, joint_name, &corresp[0], 
@@ -543,9 +591,9 @@
                         for (iter= cellmap.begin(); iter != cellmap.end(); iter++)
                                 {
                                         int size= iter->second.size();
-                                        int *corresp = new int[size];
+                                        med_int *corresp = new med_int[size];
                                         for (int ind=0; ind < size; ind++)
-                                                corresp[ind]=(iter->second)[ind];
+					  corresp[ind]=(med_int) (iter->second)[ind];
                                         med_2_3::med_geometrie_element local_geo_elem=(med_2_3::med_geometrie_element)iter->first.first;
                                         med_2_3::med_geometrie_element distant_geo_elem=(med_2_3::med_geometrie_element)iter->first.second;
                                         int size_joint=size/2;
diff -Naur MED_SRC_5.1.4.orig//src/MEDSPLITTER/Test/MEDSPLITTERTest_MESHCollection.cxx MED_SRC_5.1.4//src/MEDSPLITTER/Test/MEDSPLITTERTest_MESHCollection.cxx
--- MED_SRC_5.1.4.orig//src/MEDSPLITTER/Test/MEDSPLITTERTest_MESHCollection.cxx	2010-07-07 20:06:41.165948208 +0200
+++ MED_SRC_5.1.4//src/MEDSPLITTER/Test/MEDSPLITTERTest_MESHCollection.cxx	2010-07-09 15:23:45.334920907 +0200
@@ -300,13 +300,13 @@
   char desc1[MED_TAILLE_DESC];
   char maa_dist1[MED_TAILLE_NOM], jn1[MED_TAILLE_NOM];
   char desc2[MED_TAILLE_DESC], maa_dist2[MED_TAILLE_NOM], jn2[MED_TAILLE_NOM];
-  int dom1, dom2;
+  med_2_3::med_int dom1, dom2;
   med_2_3::MEDjointInfo(fid1, meshname1, 1, jn1, desc1, &dom1, maa_dist1);
   med_2_3::MEDjointInfo(fid2, meshname2, 1, jn2, desc2, &dom2, maa_dist2);
         CPPUNIT_ASSERT(strcmp(jn1,"joint_2")==0);
         CPPUNIT_ASSERT(strcmp(jn2,"joint_1")==0);
-  CPPUNIT_ASSERT_EQUAL(dom1,1);
-  CPPUNIT_ASSERT_EQUAL(dom2,0);
+	CPPUNIT_ASSERT_EQUAL(dom1,(med_2_3::med_int)1);
+	CPPUNIT_ASSERT_EQUAL(dom2,(med_2_3::med_int)0);
   
   // testing node-node correspondency
   med_2_3::med_entite_maillage typ_ent_loc=med_2_3::MED_NOEUD;
@@ -467,11 +467,11 @@
   char desc1[MED_TAILLE_DESC];
   char maa_dist1[MED_TAILLE_NOM], jn1[MED_TAILLE_NOM];
   char desc2[MED_TAILLE_DESC], maa_dist2[MED_TAILLE_NOM], jn2[MED_TAILLE_NOM];
-  int dom1, dom2;
+  med_2_3::med_int dom1, dom2;
   med_2_3::MEDjointInfo(fid1, meshname1, 1, jn1, desc1, &dom1, maa_dist1);
   med_2_3::MEDjointInfo(fid2, meshname2, 1, jn2, desc2, &dom2, maa_dist2);
-  CPPUNIT_ASSERT_EQUAL(dom1,1);
-  CPPUNIT_ASSERT_EQUAL(dom2,0);
+  CPPUNIT_ASSERT_EQUAL(dom1,(med_2_3::med_int)1);
+  CPPUNIT_ASSERT_EQUAL(dom2,(med_2_3::med_int)0);
   
   // testing node-node correspondency
   med_2_3::med_entite_maillage typ_ent_loc=med_2_3::MED_NOEUD;
@@ -549,7 +549,7 @@
   //testing cells global numbering
   num = new med_2_3::med_int[2];
   MEDglobalNumLire(fid1, meshname1, num, 2, typ_ent_loc, typ_geo_loc);
-  med_2_3::med_int* globcellref = new int[2];
+  med_2_3::med_int* globcellref = new med_2_3::med_int[2];
   globcellref[0]=1;
   globcellref[1]=3;
   
@@ -778,8 +778,8 @@
   med_2_3::med_int dom1, dom2;
   med_2_3::MEDjointInfo(fid1, meshname1, 1, jn1, desc1, &dom1, maa_dist1);
   med_2_3::MEDjointInfo(fid2, meshname2, 1, jn2, desc2, &dom2, maa_dist2);
-  CPPUNIT_ASSERT_EQUAL(dom1,1);
-  CPPUNIT_ASSERT_EQUAL(dom2,0);
+  CPPUNIT_ASSERT_EQUAL(dom1,(med_2_3::med_int)1);
+  CPPUNIT_ASSERT_EQUAL(dom2,(med_2_3::med_int)0);
 
   // testing node-node correspondency
   med_2_3::med_entite_maillage typ_ent_loc=med_2_3::MED_NOEUD;
@@ -1143,11 +1143,11 @@
   char desc1[MED_TAILLE_DESC+1];
   char maa_dist1[MED_TAILLE_NOM+1], jn1[MED_TAILLE_NOM+1];
   char desc2[MED_TAILLE_DESC+1], maa_dist2[MED_TAILLE_NOM+1], jn2[MED_TAILLE_NOM+1];
-  int dom1, dom2;
+  med_2_3::med_int dom1, dom2;
   med_2_3::MEDjointInfo(fid1, meshname1, 1, jn1, desc1, &dom1, maa_dist1);
   med_2_3::MEDjointInfo(fid2, meshname2, 1, jn2, desc2, &dom2, maa_dist2);
-  CPPUNIT_ASSERT_EQUAL(dom1,1);
-  CPPUNIT_ASSERT_EQUAL(dom2,0);
+  CPPUNIT_ASSERT_EQUAL(dom1,(med_2_3::med_int)1);
+  CPPUNIT_ASSERT_EQUAL(dom2,(med_2_3::med_int)0);
   
 
         int nbEdgesFamilies1= med_2_3::MEDnFam(fid1, meshname1);
diff -Naur MED_SRC_5.1.4.orig//src/MULTIPR/MULTIPR_Globals.hxx MED_SRC_5.1.4//src/MULTIPR/MULTIPR_Globals.hxx
--- MED_SRC_5.1.4.orig//src/MULTIPR/MULTIPR_Globals.hxx	2010-07-07 20:06:41.002664464 +0200
+++ MED_SRC_5.1.4//src/MULTIPR/MULTIPR_Globals.hxx	2010-07-09 15:24:26.441001881 +0200
@@ -35,6 +35,7 @@
 
 #include <vector>
 #include <set>
+#include <med.h>
 
 //*****************************************************************************
 // Some useful macros
@@ -47,7 +48,7 @@
  * Pair of index.
  * See definition of GaussIndexList.
  */
-typedef std::pair < std::set<int>*, std::set<int> > IndexPair;
+typedef std::pair < std::set<med_int>*, std::set<med_int> > IndexPair;
 
 /**
  * List of gauss index for optimized domain split.
