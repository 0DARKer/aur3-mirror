diff -Naur MED_SRC_5.1.4.orig//adm_local/unix/config_files/check_metis.m4 MED_SRC_5.1.4/adm_local/unix/config_files/check_metis.m4
--- MED_SRC_5.1.4.orig//adm_local/unix/config_files/check_metis.m4	2010-07-07 20:06:41.475927186 +0200
+++ MED_SRC_5.1.4/adm_local/unix/config_files/check_metis.m4	2010-07-09 18:23:55.707461051 +0200
@@ -44,8 +44,8 @@
 LIBS_old=$LIBS
 
 if test "x${METISDIR}" != "x" ; then
-  METIS_CPPFLAGS="-DENABLE_METIS -I${METISDIR}/Lib"
-  METIS_LIBS="-L${METISDIR} -lmetis"
+  METIS_CPPFLAGS="-DENABLE_METIS -I${METISDIR}/include/metis"
+  METIS_LIBS="-L${METISDIR}/lib -lmetis"
 fi
 
 metis_ok=no
@@ -58,7 +58,7 @@
 
 metis_include_dir_ok=yes
 if test "x${METISDIR}" != "x" ; then
-  AC_CHECK_FILE(${METISDIR}/Lib/metis.h,
+  AC_CHECK_FILE(${METISDIR}/include/metis/metis.h,
                 metis_include_dir_ok=yes,
                 metis_include_dir_ok=no)
 fi
@@ -82,12 +82,12 @@
   AC_CHECKING(for METIS binaries)
   metis_lib_dir_ok=yes
   if test "x${METISDIR}" != "x" ; then
-    AC_CHECK_FILE(${METISDIR}/libmetis.a,
+    AC_CHECK_FILE(${METISDIR}/lib/libmetis.a,
                   metis_lib_dir_ok=yes,
                   metis_lib_dir_ok=no)
     if test "x${metis_lib_dir_ok}" = "xno" ; then
       METIS_LIBSUFFIX=""
-      AC_CHECK_FILE(${METISDIR}/libmetis.a,
+      AC_CHECK_FILE(${METISDIR}/lib/libmetis.a,
                     metis_lib_dir_ok=yes,
                     metis_lib_dir_ok=no)
     fi
diff -Naur MED_SRC_5.1.4.orig//adm_local/unix/config_files/check_metis.m4.orig MED_SRC_5.1.4/adm_local/unix/config_files/check_metis.m4.orig
--- MED_SRC_5.1.4.orig//adm_local/unix/config_files/check_metis.m4.orig	1970-01-01 01:00:00.000000000 +0100
+++ MED_SRC_5.1.4/adm_local/unix/config_files/check_metis.m4.orig	2010-07-09 18:23:36.627813052 +0200
@@ -0,0 +1,140 @@
+dnl  Copyright (C) 2007-2010  CEA/DEN, EDF R&D, OPEN CASCADE
+dnl
+dnl  Copyright (C) 2003-2007  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
+dnl  CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS
+dnl
+dnl  This library is free software; you can redistribute it and/or
+dnl  modify it under the terms of the GNU Lesser General Public
+dnl  License as published by the Free Software Foundation; either
+dnl  version 2.1 of the License.
+dnl
+dnl  This library is distributed in the hope that it will be useful,
+dnl  but WITHOUT ANY WARRANTY; without even the implied warranty of
+dnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+dnl  Lesser General Public License for more details.
+dnl
+dnl  You should have received a copy of the GNU Lesser General Public
+dnl  License along with this library; if not, write to the Free Software
+dnl  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+dnl
+dnl  See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
+dnl
+
+AC_DEFUN([CHECK_METIS],[
+
+AC_CHECKING(for METIS Library)
+
+AC_LANG_SAVE
+AC_LANG_C
+
+METIS_CPPFLAGS=""
+METIS_LIBSUFFIX=""
+METIS_LIBS=""
+ENABLE_METIS="no"
+
+AC_CHECKING(for METIS location)
+AC_ARG_WITH(metis,
+            [  --with-metis=DIR      root directory path to METIS library installation ],
+            [METISDIR="$withval"
+             AC_MSG_RESULT("select $withval as path to METIS library")])
+
+AC_MSG_RESULT(\$METISDIR = ${METISDIR})
+
+CPPFLAGS_old="${CPPFLAGS}"
+LIBS_old=$LIBS
+
+if test "x${METISDIR}" != "x" ; then
+  METIS_CPPFLAGS="-DENABLE_METIS -I${METISDIR}/Lib"
+  METIS_LIBS="-L${METISDIR} -lmetis"
+fi
+
+metis_ok=no
+metis_headers_ok=no
+metis_binaries_ok=no
+
+dnl METIS headers
+AC_CHECKING(for METIS headers)
+CPPFLAGS="${CPPFLAGS_old} ${METIS_CPPFLAGS}"
+
+metis_include_dir_ok=yes
+if test "x${METISDIR}" != "x" ; then
+  AC_CHECK_FILE(${METISDIR}/Lib/metis.h,
+                metis_include_dir_ok=yes,
+                metis_include_dir_ok=no)
+fi
+
+if test "x${metis_include_dir_ok}" = "xyes" ; then
+  AC_TRY_COMPILE([#include <metis.h>],
+                 [Change2CNumbering(0,0,0)],
+                 metis_headers_ok=yes,
+                 metis_headers_ok=no)
+fi
+
+if test "x${metis_headers_ok}" = "xno" ; then
+  METIS_CPPFLAGS="METIS_CPPFLAGS_NOT_DEFINED"
+else
+  AC_MSG_RESULT(\$METIS_CPPFLAGS = ${METIS_CPPFLAGS})
+fi
+AC_MSG_RESULT(for metis headers: $metis_headers_ok)
+
+if test "x${metis_headers_ok}" = "xyes" ; then
+  dnl METIS binaries
+  AC_CHECKING(for METIS binaries)
+  metis_lib_dir_ok=yes
+  if test "x${METISDIR}" != "x" ; then
+    AC_CHECK_FILE(${METISDIR}/libmetis.a,
+                  metis_lib_dir_ok=yes,
+                  metis_lib_dir_ok=no)
+    if test "x${metis_lib_dir_ok}" = "xno" ; then
+      METIS_LIBSUFFIX=""
+      AC_CHECK_FILE(${METISDIR}/libmetis.a,
+                    metis_lib_dir_ok=yes,
+                    metis_lib_dir_ok=no)
+    fi
+  fi
+  if test "x${metis_lib_dir_ok}" = "xyes" ; then
+    LIBS="${LIBS_old} ${METIS_LIBS}"
+    AC_TRY_LINK([#include <metis.h>],
+                [Change2CNumbering(0,0,0)],
+                metis_binaries_ok=yes,
+                metis_binaries_ok=no)
+    if test "x${metis_binaries_ok}" = "xno" ; then
+      METIS_LIBSUFFIX=""
+      LIBS="${LIBS_old} ${METIS_LIBS} "
+      AC_TRY_LINK([#include <metis.h>],
+                  [Change2CNumbering(0,0,0)],
+                  metis_binaries_ok=yes,
+                  metis_binaries_ok=no)
+    fi
+  fi
+fi
+
+if test "x${metis_binaries_ok}" = "xno" ; then
+  METIS_LIBS="METIS_LIBS_NOT_FOUND"
+  METIS_LIBSUFFIX="-not-defined"
+else
+  AC_MSG_RESULT(\$METIS_LIBSUFFIX = ${METIS_LIBSUFFIX})
+  AC_MSG_RESULT(\$METIS_LIBS = ${METIS_LIBS})
+fi
+AC_MSG_RESULT(for metis binaries: $metis_binaries_ok)
+
+CPPFLAGS="${CPPFLAGS_old}"
+LIBS="${LIBS_old}"
+
+if test "x${metis_headers_ok}" = "xyes" ; then
+  if test "x${metis_binaries_ok}" = "xyes" ; then
+    metis_ok=yes
+    ENABLE_METIS="yes"
+  fi
+fi
+
+AC_MSG_RESULT(for metis: $metis_ok)
+
+AC_SUBST(METIS_CPPFLAGS)
+AC_SUBST(METIS_LIBSUFFIX)
+AC_SUBST(METIS_LIBS)
+AC_SUBST(ENABLE_METIS)
+
+AC_LANG_RESTORE
+
+])dnl
diff -Naur MED_SRC_5.1.4.orig//adm_local/unix/config_files/check_scotch.m4 MED_SRC_5.1.4/adm_local/unix/config_files/check_scotch.m4
--- MED_SRC_5.1.4.orig//adm_local/unix/config_files/check_scotch.m4	2010-07-07 20:06:41.475927186 +0200
+++ MED_SRC_5.1.4/adm_local/unix/config_files/check_scotch.m4	2010-07-09 18:23:55.707461051 +0200
@@ -45,7 +45,7 @@
 
 if test "x${SCOTCHDIR}" != "x" ; then
   SCOTCH_CPPFLAGS="-DENABLE_SCOTCH -I${SCOTCHDIR}"
-  SCOTCH_LIBS="-L${SCOTCHDIR}/bin -lscotch -lscotcherr"
+  SCOTCH_LIBS="-L${SCOTCHDIR}/lib -lscotch -lscotcherr"
 fi
 
 scotch_ok=no
@@ -58,14 +58,14 @@
 
 scotch_include_dir_ok=yes
 if test "x${SCOTCHDIR}" != "x" ; then
-  AC_CHECK_FILE(${SCOTCHDIR}/bin/scotch.h,
+  AC_CHECK_FILE(${SCOTCHDIR}/include/scotch/scotch.h,
                 scotch_include_dir_ok=yes,
                 scotch_include_dir_ok=no)
 fi
 
 if test "x${scotch_include_dir_ok}" = "xyes" ; then
   AC_TRY_COMPILE([#include <stdio.h>
-		  #include <bin/scotch.h>],
+		  #include <scotch/scotch.h>],
                  [SCOTCH_Graph* graph;
 		  SCOTCH_graphInit(graph)],
                  scotch_headers_ok=yes,
@@ -84,12 +84,12 @@
   AC_CHECKING(for SCOTCH binaries)
   scotch_lib_dir_ok=yes
   if test "x${SCOTCHDIR}" != "x" ; then
-    AC_CHECK_FILE(${SCOTCHDIR}/bin/libscotch.a,
+    AC_CHECK_FILE(${SCOTCHDIR}/lib/libscotch.a,
                   scotch_lib_dir_ok=yes,
                   scotch_lib_dir_ok=no)
     if test "x${scotch_lib_dir_ok}" = "xno" ; then
       SCOTCH_LIBSUFFIX=""
-      AC_CHECK_FILE(${SCOTCHDIR}/bin/libscotch.a,
+      AC_CHECK_FILE(${SCOTCHDIR}/lib/libscotch.a,
                     scotch_lib_dir_ok=yes,
                     scotch_lib_dir_ok=no)
     fi
@@ -97,7 +97,7 @@
   if test "x${scotch_lib_dir_ok}" = "xyes" ; then
     LIBS="${LIBS_old} ${SCOTCH_LIBS}"
     AC_TRY_LINK([#include <stdio.h>
-		#include <bin/scotch.h>],
+		#include <scotch/scotch.h>],
                   [SCOTCH_Graph* graph;
 		  SCOTCH_graphInit(graph)],
                 scotch_binaries_ok=yes,
@@ -106,7 +106,7 @@
       SCOTCH_LIBSUFFIX=""
       LIBS="${LIBS_old} ${SCOTCH_LIBS} "
       AC_TRY_LINK([#include <stdio.h>
-		   #include <bin/scotch.h>],
+		   #include <scotch/scotch.h>],
                   [SCOTCH_Graph* graph;
 		  SCOTCH_graphInit(graph)],
                   scotch_binaries_ok=yes,
diff -Naur MED_SRC_5.1.4.orig//adm_local/unix/config_files/check_scotch.m4.orig MED_SRC_5.1.4/adm_local/unix/config_files/check_scotch.m4.orig
--- MED_SRC_5.1.4.orig//adm_local/unix/config_files/check_scotch.m4.orig	1970-01-01 01:00:00.000000000 +0100
+++ MED_SRC_5.1.4/adm_local/unix/config_files/check_scotch.m4.orig	2010-07-09 18:23:36.627813052 +0200
@@ -0,0 +1,148 @@
+dnl  Copyright (C) 2007-2010  CEA/DEN, EDF R&D, OPEN CASCADE
+dnl
+dnl  Copyright (C) 2003-2007  OPEN CASCADE, EADS/CCR, LIP6, CEA/DEN,
+dnl  CEDRAT, EDF R&D, LEG, PRINCIPIA R&D, BUREAU VERITAS
+dnl
+dnl  This library is free software; you can redistribute it and/or
+dnl  modify it under the terms of the GNU Lesser General Public
+dnl  License as published by the Free Software Foundation; either
+dnl  version 2.1 of the License.
+dnl
+dnl  This library is distributed in the hope that it will be useful,
+dnl  but WITHOUT ANY WARRANTY; without even the implied warranty of
+dnl  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+dnl  Lesser General Public License for more details.
+dnl
+dnl  You should have received a copy of the GNU Lesser General Public
+dnl  License along with this library; if not, write to the Free Software
+dnl  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+dnl
+dnl  See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
+dnl
+
+AC_DEFUN([CHECK_SCOTCH],[
+
+AC_CHECKING(for SCOTCH Library)
+
+AC_LANG_SAVE
+AC_LANG_C
+
+SCOTCH_CPPFLAGS=""
+SCOTCH_LIBSUFFIX=""
+SCOTCH_LIBS=""
+ENABLE_SCOTCH="no"
+
+AC_CHECKING(for SCOTCH location)
+AC_ARG_WITH(scotch,
+            [  --with-scotch=DIR      root directory path to SCOTCH library installation ],
+            [SCOTCHDIR="$withval"
+             AC_MSG_RESULT("select $withval as path to SCOTCH library")])
+
+AC_MSG_RESULT(\$SCOTCHDIR = ${SCOTCHDIR})
+
+CPPFLAGS_old="${CPPFLAGS}"
+LIBS_old=$LIBS
+
+if test "x${SCOTCHDIR}" != "x" ; then
+  SCOTCH_CPPFLAGS="-DENABLE_SCOTCH -I${SCOTCHDIR}"
+  SCOTCH_LIBS="-L${SCOTCHDIR}/bin -lscotch -lscotcherr"
+fi
+
+scotch_ok=no
+scotch_headers_ok=no
+scotch_binaries_ok=no
+
+dnl SCOTCH headers
+AC_CHECKING(for SCOTCH headers)
+CPPFLAGS="${CPPFLAGS_old} ${SCOTCH_CPPFLAGS} -std=c99"
+
+scotch_include_dir_ok=yes
+if test "x${SCOTCHDIR}" != "x" ; then
+  AC_CHECK_FILE(${SCOTCHDIR}/bin/scotch.h,
+                scotch_include_dir_ok=yes,
+                scotch_include_dir_ok=no)
+fi
+
+if test "x${scotch_include_dir_ok}" = "xyes" ; then
+  AC_TRY_COMPILE([#include <stdio.h>
+		  #include <bin/scotch.h>],
+                 [SCOTCH_Graph* graph;
+		  SCOTCH_graphInit(graph)],
+                 scotch_headers_ok=yes,
+                 scotch_headers_ok=no)
+fi
+
+if test "x${scotch_headers_ok}" = "xno" ; then
+  SCOTCH_CPPFLAGS="SCOTCH_CPPFLAGS_NOT_DEFINED"
+else
+  AC_MSG_RESULT(\$SCOTCH_CPPFLAGS = ${SCOTCH_CPPFLAGS})
+fi
+AC_MSG_RESULT(for scotch headers: $scotch_headers_ok)
+
+if test "x${scotch_headers_ok}" = "xyes" ; then
+  dnl SCOTCH binaries
+  AC_CHECKING(for SCOTCH binaries)
+  scotch_lib_dir_ok=yes
+  if test "x${SCOTCHDIR}" != "x" ; then
+    AC_CHECK_FILE(${SCOTCHDIR}/bin/libscotch.a,
+                  scotch_lib_dir_ok=yes,
+                  scotch_lib_dir_ok=no)
+    if test "x${scotch_lib_dir_ok}" = "xno" ; then
+      SCOTCH_LIBSUFFIX=""
+      AC_CHECK_FILE(${SCOTCHDIR}/bin/libscotch.a,
+                    scotch_lib_dir_ok=yes,
+                    scotch_lib_dir_ok=no)
+    fi
+  fi
+  if test "x${scotch_lib_dir_ok}" = "xyes" ; then
+    LIBS="${LIBS_old} ${SCOTCH_LIBS}"
+    AC_TRY_LINK([#include <stdio.h>
+		#include <bin/scotch.h>],
+                  [SCOTCH_Graph* graph;
+		  SCOTCH_graphInit(graph)],
+                scotch_binaries_ok=yes,
+                scotch_binaries_ok=no)
+    if test "x${scotch_binaries_ok}" = "xno" ; then
+      SCOTCH_LIBSUFFIX=""
+      LIBS="${LIBS_old} ${SCOTCH_LIBS} "
+      AC_TRY_LINK([#include <stdio.h>
+		   #include <bin/scotch.h>],
+                  [SCOTCH_Graph* graph;
+		  SCOTCH_graphInit(graph)],
+                  scotch_binaries_ok=yes,
+                  scotch_binaries_ok=no)
+    fi
+  fi
+fi
+
+if test "x${scotch_binaries_ok}" = "xno" ; then
+  SCOTCH_LIBS="SCOTCH_LIBS_NOT_FOUND"
+  SCOTCH_LIBSUFFIX="-not-defined"
+else
+  AC_MSG_RESULT(\$SCOTCH_LIBSUFFIX = ${SCOTCH_LIBSUFFIX})
+  AC_MSG_RESULT(\$SCOTCH_LIBS = ${SCOTCH_LIBS})
+fi
+AC_MSG_RESULT(for scotch binaries: $scotch_binaries_ok)
+
+CPPFLAGS="${CPPFLAGS_old}"
+LIBS="${LIBS_old}"
+
+if test "x${scotch_headers_ok}" = "xyes" ; then
+  if test "x${scotch_binaries_ok}" = "xyes" ; then
+    scotch_ok=yes
+    ENABLE_SCOTCH="yes"
+  fi
+fi
+
+AC_MSG_RESULT(for scotch: $scotch_ok)
+
+AC_SUBST(SCOTCH_CPPFLAGS)
+AC_SUBST(SCOTCH_LIBSUFFIX)
+AC_SUBST(SCOTCH_LIBS)
+AC_SUBST(ENABLE_SCOTCH)
+
+AC_LANG_RESTORE
+
+])dnl
+
+
diff -Naur MED_SRC_5.1.4.orig//src/MEDSPLITTER/MEDSPLITTER_SCOTCHGraph.cxx MED_SRC_5.1.4/src/MEDSPLITTER/MEDSPLITTER_SCOTCHGraph.cxx
--- MED_SRC_5.1.4.orig//src/MEDSPLITTER/MEDSPLITTER_SCOTCHGraph.cxx	2010-07-07 20:06:41.189275675 +0200
+++ MED_SRC_5.1.4/src/MEDSPLITTER/MEDSPLITTER_SCOTCHGraph.cxx	2010-07-09 18:23:55.745264460 +0200
@@ -20,7 +20,7 @@
 #include <cstdio>
 extern "C" {
 #define restrict
-#include "bin/scotch.h"
+#include "scotch/scotch.h"
 }
 #include "MEDSPLITTER_Graph.hxx"
 #include "MEDSPLITTER_SCOTCHGraph.hxx"
diff -Naur MED_SRC_5.1.4.orig//src/MEDSPLITTER/MEDSPLITTER_SCOTCHGraph.cxx.orig MED_SRC_5.1.4/src/MEDSPLITTER/MEDSPLITTER_SCOTCHGraph.cxx.orig
--- MED_SRC_5.1.4.orig//src/MEDSPLITTER/MEDSPLITTER_SCOTCHGraph.cxx.orig	1970-01-01 01:00:00.000000000 +0100
+++ MED_SRC_5.1.4/src/MEDSPLITTER/MEDSPLITTER_SCOTCHGraph.cxx.orig	2010-07-09 18:23:36.584480696 +0200
@@ -0,0 +1,104 @@
+//  Copyright (C) 2007-2010  CEA/DEN, EDF R&D
+//
+//  This library is free software; you can redistribute it and/or
+//  modify it under the terms of the GNU Lesser General Public
+//  License as published by the Free Software Foundation; either
+//  version 2.1 of the License.
+//
+//  This library is distributed in the hope that it will be useful,
+//  but WITHOUT ANY WARRANTY; without even the implied warranty of
+//  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
+//  Lesser General Public License for more details.
+//
+//  You should have received a copy of the GNU Lesser General Public
+//  License along with this library; if not, write to the Free Software
+//  Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307 USA
+//
+//  See http://www.salome-platform.org/ or email : webmaster.salome@opencascade.com
+//
+
+#include <cstdio>
+extern "C" {
+#define restrict
+#include "bin/scotch.h"
+}
+#include "MEDSPLITTER_Graph.hxx"
+#include "MEDSPLITTER_SCOTCHGraph.hxx"
+
+using namespace MEDSPLITTER;
+        
+SCOTCHGraph::SCOTCHGraph():Graph()
+{
+}
+
+SCOTCHGraph::SCOTCHGraph(const MEDMEM::MEDSKYLINEARRAY* graph, int* edgeweight):Graph(graph,edgeweight)
+{
+}
+
+SCOTCHGraph::~SCOTCHGraph()
+{
+        if (m_partition!=0) {delete m_partition; m_partition=0;}
+        if (m_graph!=0) {delete m_graph; m_graph=0;}
+}
+
+void SCOTCHGraph::partGraph(int ndomain, const string& options_string)
+{
+        // number of graph vertices
+        int n = m_graph->getNumberOf();
+        
+        //graph
+        int * xadj=const_cast<int*>(m_graph->getIndex());
+        int * adjncy = const_cast<int*>(m_graph->getValue());
+        
+        //ndomain
+        int nparts = ndomain;
+        
+        // output parameters
+        int* partition = new int[n+1];
+        
+        SCOTCH_Graph scotch_graph;
+        
+        SCOTCH_graphInit(&scotch_graph);
+        
+        
+        SCOTCH_graphBuild(&scotch_graph,
+                          1, //premier indice 1
+                          n, // nb of graph nodes
+                          xadj,
+                          0,
+                          m_cellweight, //graph vertices loads
+                          0,
+                          xadj[n], // number of edges
+                          adjncy,
+                          m_edgeweight);
+
+        SCOTCH_Strat scotch_strategy;                                     
+        SCOTCH_stratInit(&scotch_strategy);
+
+        //!user-defined options for the strategy
+        if (options_string!="")
+          SCOTCH_stratGraphMap(&scotch_strategy,options_string.c_str());
+                                                  
+
+        if (nparts>1)                                     
+                SCOTCH_graphPart(&scotch_graph,nparts,&scotch_strategy,partition);
+        else
+          // partition for 1 subdomain
+                for (int i=0; i<n+1; i++)
+                        partition[i]=0;
+                        
+        SCOTCH_stratExit(&scotch_strategy);
+        SCOTCH_graphExit(&scotch_graph);
+                                                                                 
+        int* index=new int [n+1];
+        index[0]=1;
+        for (int i=0; i<n; i++)
+        {
+                index[i+1]=index[i]+1;
+        }
+        
+        //creating a skylinearray with no copy of the index and partition array
+        // the fifth argument true specifies that only the pointers are passed 
+        //to the object
+        m_partition = new MEDMEM::MEDSKYLINEARRAY(n,n, index, partition, true);
+}
