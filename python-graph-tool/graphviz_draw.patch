--- graphviz_draw.py	2013-11-17 14:11:04.000000000 +0100
+++ graphviz_draw2.py	2013-12-11 23:56:32.822812378 +0100
@@ -71,6 +71,16 @@
     # create a context to use the whole time (if we keep freeing and recreating
     # it, we will hit a memory leak in graphviz)
     gvc = libgv.gvContext()
+
+    try:
+        gv_new_api = True
+        libgv_directed = libgv.Agdirected
+        libgv_undirected = libgv.Agundirected
+    except AttributeError:
+        gv_new_api = False
+        libgv_directed = 1
+        libgv_undirected = 0
+
 except OSError:
     msg = "Error importing graphviz C library (libgvc)... graphviz_draw() will not work."
     warnings.filterwarnings("always", msg, ImportWarning)
@@ -302,7 +312,13 @@
 
     has_layout = False
     try:
-        gvg = libgv.agopen("G".encode("utf8"), 1 if g.is_directed() else 0)
+        if gv_new_api:
+            gvg = libgv.agopen("G".encode("utf8"),
+                               libgv_directed if g.is_directed() else libgv_undirected,
+                               None)
+        else:
+            gvg = libgv.agopen("G".encode("utf8"),
+                               libgv_directed if g.is_directed() else libgv_undirected)
 
         if layout is None:
             if pin == False:
@@ -404,7 +420,10 @@
         else:
             vertices = g.vertices()
         for v in vertices:
-            n = libgv.agnode(gvg, str(int(v)).encode("utf8"))
+            if gv_new_api:
+                n = libgv.agnode(gvg, str(int(v)).encode("utf8"))
+            else:
+                n = libgv.agnode(gvg, str(int(v)).encode("utf8"), True)
 
             if type(vsize) == PropertyMap:
                 vw = vh = vsize[v]
@@ -451,9 +470,15 @@
         else:
             edges = g.edges()
         for e in edges:
-            ge = libgv.agedge(gvg,
-                              libgv.agnode(gvg, str(int(e.source())).encode("utf8")),
-                              libgv.agnode(gvg, str(int(e.target())).encode("utf8")))
+            if gv_new_api:
+                ge = libgv.agedge(gvg,
+                                  libgv.agnode(gvg, str(int(e.source())).encode("utf8"), False),
+                                  libgv.agnode(gvg, str(int(e.target())).encode("utf8"), False),
+                                  str(g.edge_index[e]).encode("utf8"), True)
+            else:
+                ge = libgv.agedge(gvg,
+                                  libgv.agnode(gvg, str(int(e.source())).encode("utf8")),
+                                  libgv.agnode(gvg, str(int(e.target())).encode("utf8")))
             aset(ge, "arrowsize", "0.3")
             if g.is_directed():
                 aset(ge, "arrowhead", "vee")
