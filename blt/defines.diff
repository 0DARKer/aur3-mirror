diff -Naur blt2.4z.orig/src/bltNsUtil.h blt2.4z/src/bltNsUtil.h
--- blt2.4z.orig/src/bltNsUtil.h	2002-07-18 08:35:32.000000000 +0200
+++ blt2.4z/src/bltNsUtil.h	2008-09-06 00:05:08.000000000 +0200
@@ -46,9 +46,11 @@
 #define TCL_NAMESPACE_ONLY TCL_GLOBAL_ONLY
 #endif
 
-
+#ifndef Tcl_FindCommand_TCL_DECLARED
+#define Tcl_FindCommand_TCL_DECLARED
 EXTERN Tcl_Command Tcl_FindCommand _ANSI_ARGS_((Tcl_Interp *interp,
 	char *name, Tcl_Namespace *nsPtr, int flags));
+#endif
 
 #define NS_SEARCH_NONE		(0)
 #define NS_SEARCH_CURRENT	(1<<0)
@@ -64,16 +66,25 @@
 EXTERN Tcl_Namespace *Tcl_GetGlobalNamespace _ANSI_ARGS_((Tcl_Interp *interp));
 
 #if (TCL_MAJOR_VERSION >= 8)
+#ifndef Tcl_CreateNamespace_TCL_DECLARED
+#define Tcl_CreateNamespace_TCL_DECLARED
 EXTERN Tcl_Namespace *Tcl_CreateNamespace _ANSI_ARGS_((Tcl_Interp *interp,
 	char *name, ClientData clientData, Tcl_NamespaceDeleteProc *nsDelProc));
+#endif
 
 EXTERN void Tcl_DeleteNamespace _ANSI_ARGS_((Tcl_Namespace *nsPtr));
 
+#ifndef Tcl_FindNamespace_TCL_DECLARED
+#define Tcl_FindNamespace_TCL_DECLARED
 EXTERN Tcl_Namespace *Tcl_FindNamespace _ANSI_ARGS_((Tcl_Interp *interp,
 	char *name, Tcl_Namespace *context, int flags));
+#endif
 
+#ifndef Tcl_Export_TCL_DECLARED
+#define Tcl_Export_TCL_DECLARED
 EXTERN int Tcl_Export _ANSI_ARGS_((Tcl_Interp *interp, Tcl_Namespace *nsPtr,
 	char *name, int resetFlag));
+#endif
 
 EXTERN Tcl_Var Tcl_FindNamespaceVar _ANSI_ARGS_((Tcl_Interp *interp, char *name,
 	Tcl_Namespace *contextNsPtr, int flags));
diff -Naur blt2.4z.orig/src/bltTree.c blt2.4z/src/bltTree.c
--- blt2.4z.orig/src/bltTree.c	2002-09-29 07:44:12.000000000 +0200
+++ blt2.4z/src/bltTree.c	2008-09-06 00:02:53.000000000 +0200
@@ -96,16 +96,15 @@
 
 #define REBUILD_MULTIPLIER	3
 
-#if (SIZEOF_VOID_P == 8)
-#define RANDOM_INDEX(i)		HashOneWord(mask, downshift, i)
-#define BITSPERWORD		64
-#else 
-
 #define START_LOGSIZE		5 /* Initial hash table size is 32. */
 #define MAX_LIST_VALUES		20 /* Convert to hash table when node
 				    * value list gets bigger than this
 				    * many values. */
 
+#if (SIZEOF_VOID_P == 8)
+#define RANDOM_INDEX(i)		HashOneWord(mask, downshift, i)
+#define BITSPERWORD		64
+#else 
 /*
  * The following macro takes a preliminary integer hash value and
  * produces an index into a hash tables bucket list.  The idea is
