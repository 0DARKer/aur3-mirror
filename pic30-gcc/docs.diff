--- ./gcc/doc/invoke.texi.~1~	2009-01-31 15:47:38.000000000 +0100
+++ ./gcc/doc/invoke.texi	2009-01-31 16:23:13.000000000 +0100
@@ -599,6 +599,17 @@
 -mbranch-expensive  -mbranch-cheap @gol
 -msplit  -mno-split  -munix-asm  -mdec-asm}
 
+@emph{PIC30 Options}
+@gccoptlist{-msmall-data -mlarge-data@gol
+-msmall-scalar -msmall-aggregate@gol
+-mlarge-aggregate -msmall-code -mlarge-code@gol
+-mconst-in-data -mconst-in-code@gol
+-mpa -mno-pa -msmart-io -mno-isr-warn@gol
+-mno-file@gol
+-mcpu=CPU  -merrata=ERRATA -mfillupper=VALUE@gol
+-mit=OPTION -mpa=LIMIT -mresource=PATH@gol
+-msmart-io=LEVEL -mtext=TEXT-SECTION}
+
 @emph{PowerPC Options}
 See RS/6000 and PowerPC Options.
 
@@ -6714,6 +6725,7 @@
 * MN10300 Options::
 * NS32K Options::
 * PDP-11 Options::
+* PIC30 Options::
 * PowerPC Options::
 * RS/6000 and PowerPC Options::
 * S/390 and zSeries Options::
@@ -10386,6 +10398,142 @@
 PDP-11 target other than @samp{pdp11-*-bsd}.
 @end table
 
+@node PIC30 Options
+@subsection PIC30 Options
+@cindex PIC30 Options
+
+These options are defined for the PDP-11:
+
+@table @gcctabopt
+@item -msmall-data
+@opindex msmall-data
+Compile using the small data model. All static and external variables
+will be assumed to be located in the lower 8 kB of data memory space.
+(This is the default)
+
+@item -mlarge-data
+@opindex mlarge-data
+Compile using the large data model. No assumptions are made about
+the location of static and exernal variables.
+
+@item -msmall-scalar
+@opindex msmall-scalar
+Like -msmall-data, execpt that only satic and exernal scalars are
+assumed to be in the lower 8 kB of data memory space. (This is the
+default.)
+
+@item -mlarge-scalar
+@opindex mlarge-scalar
+Use large scalar data model.
+
+@item -msmall-aggregate
+@opindex msmall-aggregate
+Use small aggregate data model.
+
+@item -mlarge-aggregate
+@opindex mlarge-aggregate
+Use large aggregate data model.
+
+@item -msmall-code
+@opindex msmall-code
+Compile using the small code mode. Called functions are assumed to
+be proximae (within 32 Kwords of the caller). (This is the default).
+
+@item -mlarge-code
+@opindex mlarge-code
+Compile using the large code model. No assumptions are made about
+the locality of called functions.
+When this option is chosen, single functions that are larger than 32k
+are not supported and may cause assembly-time errors since all
+branches inside of a function are of the short form.
+
+@item -mconst-in-data
+@opindex mconst-in-data
+Put constants in data memory space.
+
+@item -mconst-in-code
+@opindex mconst-in-code
+Put constants in the auto_psv space. Those constants will be accessed
+using the PSV window (default).
+
+@item -mpa
+@opindex mpa
+Enable the procedure abstraction optimization. 
+This optimization is normally not available on Linux.
+
+@item -mno-pa
+@opindex mno-pa
+Do not run procedural abstraction stage. (this is the default)
+
+@item -msmart-io
+@opindex msmart-io
+This option attempts to statically analyze format strings passed to
+@emph{prinf}, @emph{scanf} and the @emph{f} and @emph{v} variations of these functions. Uses of
+nonfloating point format argumens will be converted to use an 
+integer-only variation of the library functions.
+
+@item -mno-isr-warn
+@opindex mno-isr-warn
+By default the compiler will procedure a warning if the __interrupt__
+is not attached to a recognized interrupt vector name. This option will
+disable that feature.
+
+@item -mno-file
+@opindex mno-file
+Disable placing file directive in assembly output.
+
+@item -mcpu=TARGET
+@opindex mcpu=TARGET
+This option selects the target processor ID (and communicates it to the
+assembler and linker if those tools are invoked). This option affects how
+some predefined constants are set.
+The allowed cpu types is defined by Microchip in the file @file{/usr/pic30/c30_device.info}. 
+The default if @emph{-mcpu} is not specified, or if the @file{/usr/pic30/c30_device.info} file is unavailable is @emph{-mcpu=generic-16bit}.
+
+@item -merrata=ID[,ID]*
+@opindex merrata=ID[,ID]*
+This option enables specific errata work arounds identified by ID.
+Valid values for ID change from time to time and may not be required
+for a particular version. An ID of @emph{list} will display the currently
+supported errate identifiers along with a brief description of the errata.
+An ID of @emph{all} will enable all currently supported errata work arounds.
+
+@item -mfillupper=VALUE
+@opindex mfillupper=VALUE
+Select global fillupper value for data stored in FLASH.
+
+@item -mit=ENABLE
+@opindex mit=ENABLE
+Enable instrumented trace.
+
+@item -mpa=N
+@opindex mpa=N
+Enable the procedure abstraction optimization up to level N. 
+This option is not available on Linux
+
+@item -mresource=PATH
+@opindex mresource=PATH
+Identify MPLABC30 resource file.
+
+@item -msmart-io=LEVEL
+@opindex msmart-io=LEVEL
+This option attempts to statically analyze format strings passed to
+@emph{prinf}, @emph{scanf} and the @emph{f} and @emph{v} variations of these functions. Uses of
+nonfloating point format argumens will be converted to use an 
+integer-only variation of the library functions.
+@emph{-msmart-io=0} disables this option, while @emph{-msmart-io=2} causes the
+compiler to be optimistic and convert cuntion calls with variable or
+unknown format arguments. @emph{-msmart-io=1} is the default and will
+only convert the literal values it can prove.
+
+@item -mtext=TEXT-SECTION
+@opindex mtext=TEXT-SECTION
+Specifying -mtext=name will cause test (program code) to be placed
+in a section named @emph{name} rather than the default @emph{.text} section. No
+white spaces should appear around the =.
+@end table
+
+
 @node PowerPC Options
 @subsection PowerPC Options
 @cindex PowerPC options
--- ./gcc/doc/cpp.texi.~1~	2009-02-01 09:14:19.000000000 +0100
+++ ./gcc/doc/cpp.texi	2009-02-01 09:23:56.000000000 +0100
@@ -850,13 +850,13 @@
 requested with @code{@w{#include <@var{file}>}} in:
 
 @smallexample
-/usr/local/include
+/usr/local/pic30/include
 @var{libdir}/gcc/@var{target}/@var{version}/include
 /usr/@var{target}/include
-/usr/include
+/usr/pic30/include
 @end smallexample
 
-For C++ programs, it will also look in @file{/usr/include/g++-v3},
+For C++ programs, it will also look in @file{/usr/pic30/include/g++-v3},
 first.  In the above, @var{target} is the canonical name of the system
 GCC was configured to compile code for; often but not always the same as
 the canonical name of the system it runs on.  @var{version} is the
@@ -885,9 +885,9 @@
 first in the directory containing the current file, then in the
 directories as specified by @option{-iquote} options, then in the same
 places it would have looked for a header requested with angle
-brackets.  For example, if @file{/usr/include/sys/stat.h} contains
+brackets.  For example, if @file{/usr/pic30/include/sys/stat.h} contains
 @code{@w{#include "types.h"}}, GCC looks for @file{types.h} first in
-@file{/usr/include/sys}, then in its usual search path.
+@file{/usr/pic30/include/sys}, then in its usual search path.
 
 @samp{#line} (@pxref{Line Control}) does not change GCC's idea of the
 directory containing the current file.
@@ -1065,7 +1065,7 @@
 
 You could include the old header with an absolute pathname:
 @smallexample
-#include "/usr/include/old-header.h"
+#include "/usr/pic30/include/old-header.h"
 @end smallexample
 @noindent
 This works, but is not clean; should the system headers ever move, you
@@ -1078,12 +1078,12 @@
 searching the list of header file directories @emph{ph{after} the directory
 in which the current file was found.
 
-Suppose you specify @option{-I /usr/local/include}, and the list of
-directories to search also includes @file{/usr/include}; and suppose
+Suppose you specify @option{-I /usr/local/pic30/include}, and the list of
+directories to search also includes @file{/usr/pic30/include}; and suppose
 both directories contain @file{signal.h}.  Ordinary @code{@w{#include
-<signal.h>}} finds the file under @file{/usr/local/include}.  If that
+<signal.h>}} finds the file under @file{/usr/local/pic30/include}.  If that
 file contains @code{@w{#include_next <signal.h>}}, it starts searching
-after that directory, and finds the file in @file{/usr/include}.
+after that directory, and finds the file in @file{/usr/pic30/include}.
 
 @samp{#include_next} does not distinguish between @code{<@var{file}>}
 and @code{"@var{file}"} inclusion, nor does it check that the file you
@@ -1789,7 +1789,7 @@
 a C string constant.  This is the path by which the preprocessor opened
 the file, not the short name specified in @samp{#include} or as the
 input file name argument.  For example,
-@code{"/usr/local/include/myheader.h"} is a possible expansion of this
+@code{"/usr/local/pic30/include/myheader.h"} is a possible expansion of this
 macro.
 
 @item __LINE__
@@ -3306,7 +3306,7 @@
 
 @smallexample
 #pragma GCC dependency "parse.y"
-#pragma GCC dependency "/usr/include/time.h" rerun fixincludes
+#pragma GCC dependency "/usr/pic30/include/time.h" rerun fixincludes
 @end smallexample
 
 @item #pragma GCC poison
