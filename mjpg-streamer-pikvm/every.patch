diff -rupN mjpg-streamer-r63/plugins/input_uvc/input_uvc.c mjpg-streamer-r63-patch/plugins/input_uvc/input_uvc.c
--- mjpg-streamer-r63/plugins/input_uvc/input_uvc.c	2015-04-18 21:09:47.283228318 +0300
+++ mjpg-streamer-r63-patch/plugins/input_uvc/input_uvc.c	2015-04-18 21:32:57.876083975 +0300
@@ -76,6 +76,7 @@ static globals *pglobal;
 static int gquality = 80;
 static unsigned int minimum_size = 0;
 static int dynctrls = 1;
+static unsigned int every = 1;
 
 void *cam_thread( void *);
 void cam_cleanup(void *);
@@ -155,6 +156,8 @@ int input_init(input_parameter *param) {
       {"no_dynctrl", no_argument, 0, 0},
       {"l", required_argument, 0, 0},
       {"led", required_argument, 0, 0},
+      {"e", required_argument, 0, 0},
+      {"every_frame", required_argument, 0, 0},
       {0, 0, 0, 0}
     };
 
@@ -260,6 +263,13 @@ int input_init(input_parameter *param) {
         }
         break;
 
+      /* m, minimum_size */
+      case 18:
+      case 19:
+        DBG("case 18,19\n");
+        every = MAX(atoi(optarg), 1);
+        break;
+
       default:
         DBG("default case\n");
         help();
@@ -657,6 +667,7 @@ void help(void) {
                   " [-n | --no_dynctrl ]...: do not initalize dynctrls of Linux-UVC driver\n" \
                   " [-l | --led ]..........: switch the LED \"on\", \"off\", let it \"blink\" or leave\n" \
                   "                          it up to the driver using the value \"auto\"\n" \
+                  " [-e | --every_frame ]..: drop all frames except numbered\n" \
                   " ---------------------------------------------------------------\n\n");
 }
 
@@ -669,6 +680,7 @@ void *cam_thread( void *arg ) {
   /* set cleanup handler to cleanup allocated ressources */
   pthread_cleanup_push(cam_cleanup, NULL);
 
+  unsigned int every_count = 0;
   while( !pglobal->stop ) {
 
     /* grab a frame */
@@ -691,6 +703,15 @@ void *cam_thread( void *arg ) {
       continue;
     }
 
+    if ( every_count < every - 1 ) {
+      DBG("dropping %d frame for every=%d\n", every_count + 1, every);
+      ++every_count;
+      continue;
+    }
+    else {
+      every_count = 0;
+    }
+
     /* copy JPG picture to global buffer */
     pthread_mutex_lock( &pglobal->db );
 
