# custom variables
_hkgname=photoname

# PKGBUILD options/directives
pkgname=photoname
pkgver=3.0.1
pkgrel=1
pkgdesc="Rename JPEG photo files based on shoot date"
url="http://ui3.info/d/proj/photoname.html"
license=("BSD3")
arch=('i686' 'x86_64')
makedepends=("ghc")
depends=()
options=('strip')
source=("http://hackage.haskell.org/packages/archive/${_hkgname}/${pkgver}/${_hkgname}-${pkgver}.tar.gz")

sha256sums=("691918ea43866b247f3a1d9e33cae61afed0ca9b7c5adc23595ff2ff65ed3b9c")

# PKGBUILD functions
build() {
   checkCabalDev

   cd ${srcdir}/${_hkgname}-${pkgver}
   cabal-dev install-deps
   cabal-dev configure -O --prefix=/usr --docdir=/usr/share/doc/${pkgname}
   cabal-dev build
}

package() {
    cd ${srcdir}/${_hkgname}-${pkgver}
    runhaskell Setup copy --destdir=${pkgdir}
}

checkCabalDev() {
   [ $(which cabal-dev 2>/dev/null) ] || {
      cat <<ERRORMSG
No cabal-dev binary found. ABORTING BUILD NOW!

The easy fix is: install cabal-dev-git from the AUR first

What does this really mean? Read on..

You're installing this package because you're after the package's
binaries. The conventional way Haskell software is built from the
AUR pulls in the Haskell library dependencies and installs them
on the system, potentially leaving libraries installed that were
only needed to build this particular package. I feel that this is
an unfortunate side-effect that should be avoided.

Even using the makepkg --rmdeps switch isn't good enough as
installing these deps may break existing versions of some of them,
changing the user's system. I believe it to be an unnecessary risk.

This PKGBUILD uses a utility called cabal-dev to build the
package. This utility is able to build the package's dependencies
in isolation so they will be discarded later when we clean up. And
leaving the system in cleaner state.

"So," you're thinking, "fine. Install cabal-dev if you need it,
what's the problem?"

The problem lately is that the existing Hackage version of
cabal-dev will not build against the latest versions of the GHC (>=
7.6.1). There is a patched cabal-dev on github that does work. But if
I add cabal-dev-git to the deps, I've done it again and potentially
dorked your system with libs.

I don't want to make that decision for you as to how you get
cabal-dev.

Bottom line, you need to get cabal-dev installed in some manner. Be
it from the AUR system-wide, or using cabal-install --user. Doesn't
matter as long as cabal-dev is in your path.
ERRORMSG
      false
   }
}
