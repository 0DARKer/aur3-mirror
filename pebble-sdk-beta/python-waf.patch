--- waflib/extras/process_resources.py	2015-03-07 00:28:39.065728605 +0300
+++ waflib/extras/process_resources.py.new	2015-03-07 00:28:39.302399726 +0300
@@ -24,7 +24,7 @@
 	character_regex='--filter "%s"'%entry['characterRegex'].encode('utf8')if has_regex else''
 	character_list='--list "%s"'%entry['characterList']if'characterList'in entry else''
 	legacy='--legacy'if entry.get('compatibility')=="2.7"else''
-	cmd="python '{}' pfo {} {} {} {} {} {} '{}' '{}'".format(script,extended,height,tracking_adjust,character_regex,character_list,legacy,ttf,pfo)
+	cmd="'{}' '{}' pfo {} {} {} {} {} {} '{}' '{}'".format(sys.executable, script,extended,height,tracking_adjust,character_regex,character_list,legacy,ttf,pfo)
 	return cmd
 def find_most_specific_filename(bld,root_node,general_filename):
 	suffixes=[BLACK_WHITE_FILENAME_SUFFIX,COLOR_FILENAME_SUFFIX]
@@ -91,16 +91,16 @@
 			output_node=output_base_node.make_node(components[0]+'.'+str(output_type))
 			append_entry((output_node,def_name))
 			if output_type=="png":
-				bld(rule="python '{}' '{}' '{}'".format(png_script.abspath(),input_node.abspath(),output_node.abspath()),source=input_node,target=output_node)
+				bld(rule="'{}' '{}' '{}' '{}'".format(sys.executable, png_script.abspath(),input_node.abspath(),output_node.abspath()),source=input_node,target=output_node)
 			else:
-				bld(rule="python '{}' pbi '{}' '{}' '{}'".format(bitmap_script.abspath(),format,input_node.abspath(),output_node.abspath()),source=[input_node,bitmap_script],target=output_node)
+				bld(rule="'{}' '{}' pbi '{}' '{}' '{}'".format(sys.executable, bitmap_script.abspath(),format,input_node.abspath(),output_node.abspath()),source=[input_node,bitmap_script],target=output_node)
 		elif res_type=="png-trans":
 			output_white_pbi=output_base_node.make_node(input_file+'.white.pbi')
 			output_black_pbi=output_base_node.make_node(input_file+'.black.pbi')
 			append_entry((output_white_pbi,def_name+"_WHITE"))
 			append_entry((output_black_pbi,def_name+"_BLACK"))
-			bld(rule="python '{}' white_trans_pbi '{}' '{}'".format(bitmap_script.abspath(),input_node.abspath(),output_white_pbi.abspath()),source=[input_node,bitmap_script],target=output_white_pbi)
-			bld(rule="python '{}' black_trans_pbi '{}' '{}'".format(bitmap_script.abspath(),input_node.abspath(),output_black_pbi.abspath()),source=[input_node,bitmap_script],target=output_black_pbi)
+			bld(rule="'{}' '{}' white_trans_pbi '{}' '{}'".format(sys.executable, bitmap_script.abspath(),input_node.abspath(),output_white_pbi.abspath()),source=[input_node,bitmap_script],target=output_white_pbi)
+			bld(rule="'{}' '{}' black_trans_pbi '{}' '{}'".format(sys.executable, bitmap_script.abspath(),input_node.abspath(),output_black_pbi.abspath()),source=[input_node,bitmap_script],target=output_black_pbi)
 		elif res_type=="font":
 			output_pfo=output_base_node.make_node(input_file+'.'+str(def_name)+'.pfo')
 			fontgen_cmd=process_font_cmd(font_script.abspath(),input_node.abspath(),output_pfo.abspath(),entry)
@@ -133,10 +133,10 @@
 	md_script=tools_path.find_node('pbpack_meta_data.py')
 	resource_code_script=tools_path.find_node('generate_resource_code.py')
 	data_sources=[]
-	table_string="python '{}' table '{}'".format(md_script.abspath(),table_node.abspath())
-	manifest_string="python '{}' manifest {} '{}'".format(md_script.abspath(),manifest_node.abspath(),timestamp)
-	content_string="python '{}' content '{}'".format(md_script.abspath(),data_node.abspath())
-	resource_ids_header_string="python '{script}' resource_id_header ""'{output_header}'  '{resource_include}' ".format(script=resource_code_script.abspath(),output_header=output_id_header_node.abspath(),resource_include=resource_header_path)
+	table_string="'{}' '{}' table '{}'".format(sys.executable, md_script.abspath(),table_node.abspath())
+	manifest_string="'{}' '{}' manifest {} '{}'".format(sys.executable, md_script.abspath(),manifest_node.abspath(),timestamp)
+	content_string="'{}' '{}' content '{}'".format(sys.executable, md_script.abspath(),data_node.abspath())
+	resource_ids_header_string="'{}' '{script}' resource_id_header ""'{output_header}'  '{resource_include}' ".format(sys.executable, script=resource_code_script.abspath(),output_header=output_id_header_node.abspath(),resource_include=resource_header_path)
 	for entry in pack_entries:
 		data_sources.append(entry[0])
 		table_string+=' "%s" '%entry[0].abspath()
@@ -165,12 +165,12 @@
 	bld(rule="cat '{}' '{}' '{}' > '{}'".format(manifest_node.abspath(),table_node.abspath(),data_node.abspath(),output_pack_node.abspath()),source=[manifest_node,table_node,data_node],target=output_pack_node)
 	bld(rule=resource_ids_header_string,source=resource_code_script,target=output_id_header_node,before=['c'])
 	if is_system:
-		resource_version_header_string="python '{script}' resource_version_header ""{version_def_name} '{output_header}' {timestamp} ""'{resource_include}' '{data_file}'".format(script=resource_code_script.abspath(),output_header=output_version_header_node.abspath(),version_def_name='SYSTEM_RESOURCE_VERSION',timestamp=timestamp,resource_include=resource_header_path,data_file=data_node.abspath())
+		resource_version_header_string="'{}' '{script}' resource_version_header ""{version_def_name} '{output_header}' {timestamp} ""'{resource_include}' '{data_file}'".format(sys.executable, script=resource_code_script.abspath(),output_header=output_version_header_node.abspath(),version_def_name='SYSTEM_RESOURCE_VERSION',timestamp=timestamp,resource_include=resource_header_path,data_file=data_node.abspath())
 		bld(rule=resource_version_header_string,source=[resource_code_script,data_node],target=output_version_header_node)
 	if font_key_header_node and font_key_table_node and font_key_include_path:
 		key_list_string=" ".join(font_keys)
-		bld(rule="python '{script}' font_key_header '{font_key_header}' ""{key_list}".format(script=resource_code_script.abspath(),font_key_header=font_key_header_node.abspath(),key_list=key_list_string),source=resource_code_script,target=font_key_header_node)
-		bld(rule="python '{script}' font_key_table '{font_key_table}' "" '{resource_id_header}' '{font_key_header}' {key_list}".format(script=resource_code_script.abspath(),font_key_table=font_key_table_node.abspath(),resource_id_header=output_id_header_node.abspath(),font_key_header=font_key_include_path,key_list=key_list_string),source=resource_code_script,target=font_key_table_node)
+		bld(rule="'{}' '{script}' font_key_header '{font_key_header}' ""{key_list}".format(sys.executable, script=resource_code_script.abspath(),font_key_header=font_key_header_node.abspath(),key_list=key_list_string),source=resource_code_script,target=font_key_header_node)
+		bld(rule="'{}' '{script}' font_key_table '{font_key_table}' "" '{resource_id_header}' '{font_key_header}' {key_list}".format(sys.executable, script=resource_code_script.abspath(),font_key_table=font_key_table_node.abspath(),resource_id_header=output_id_header_node.abspath(),font_key_header=font_key_include_path,key_list=key_list_string),source=resource_code_script,target=font_key_table_node)
 	if pfs_resources_header_node:
 		pfs_resources_string=''
 		for(first_name,last_name,filename,id_offset)in pfs_files:
