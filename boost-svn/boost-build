#!/usr/bin/env python3
'''
This tool is used to generate user-config.jam and site-config.jam
for boost library automatically. 
'''

__author__    = "Tianjiao Yin (ytj000@gamil.com)"
__date__      = "Wed, 18 May 2011 15:01:12 +0800"
__copyright__ = "Copyright 2011 Tianjiao Yin"
__license__   = "AGPLv3"
__version__   = "0.1"

SITE_DATA = r'''# Copyright 2003, 2005 Douglas Gregor
# Copyright 2004 John Maddock
# Copyright 2002, 2003, 2004, 2007 Vladimir Prus
# Distributed under the Boost Software License, Version 1.0.
# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt)

#   This file is used to configure your Boost.Build installation. You can modify
# this file in place, or you can place it in a permanent location so that it
# does not get overwritten should you get a new version of Boost.Build. See:
#
#   http://www.boost.org/boost-build2/doc/html/bbv2/overview/configuration.html
#
# for documentation about possible permanent locations.

#   This file specifies which toolsets (C++ compilers), libraries, and other
# tools are available. Often, you should be able to just uncomment existing
# example lines and adjust them to taste. The complete list of supported tools,
# and configuration instructions can be found at:
#
#   http://boost.org/boost-build2/doc/html/bbv2/reference/tools.html
#

#   This file uses Jam language syntax to describe available tools. Mostly,
# there are 'using' lines, that contain the name of the used tools, and
# parameters to pass to those tools -- where paremeters are separated by
# semicolons. Important syntax notes:
#
#   - Both ':' and ';' must be separated from other tokens by whitespace
#   - The '\' symbol is a quote character, so when specifying Windows paths you
#     should use '/' or '\\' instead.
#
# More details about the syntax can be found at:
#
#   http://boost.org/boost-build2/doc/html/bbv2/advanced.html#bbv2.advanced.jam_language
#

# ------------------
# GCC configuration.
# ------------------

# Configure gcc (default version).
{gcc}

# Configure specific gcc version, giving alternative name to use.
# using gcc : 3.2 : g++-3.2 ;
{gccs}


# -------------------
# MSVC configuration.
# -------------------

# Configure msvc (default version, searched for in standard locations and PATH).
# using msvc ;

# Configure specific msvc version (searched for in standard locations and PATH).
# using msvc : 8.0 ;


# ----------------------
# Borland configuration.
# ----------------------
# using borland ;


# ----------------------
# STLPort configuration.
# ----------------------

#   Configure specifying location of STLPort headers. Libraries must be either
# not needed or available to the compiler by default.
# using stlport : : /usr/include/stlport ;

# Configure specifying location of both headers and libraries explicitly.
# using stlport : : /usr/include/stlport /usr/lib ;


# -----------------
# QT configuration.
# -----------------

# Configure assuming QTDIR gives the installation prefix.
# using qt ;

# Configure with an explicit installation prefix.
# using qt : /usr/opt/qt ;

# ---------------------
# Python configuration.
# ---------------------

# Configure specific Python version.

{pys}

# ---------------------
# Mpi configuration.
# ---------------------

# Configure mpi (default version).
{mpi}
'''

USER_DATA = r'''# Copyright 2002, 2003 Vladimir Prus 
# Distributed under the Boost Software License, Version 1.0. 
# (See accompanying file LICENSE_1_0.txt or http://www.boost.org/LICENSE_1_0.txt) 
using boostbook : {DOCBOOK_XSL_DIR} : {DOCBOOK_DTD_DIR} : {BOOSTBOOK_DIR} ;
using doxygen ;
using quickbook ;
'''

def getpyver(cmd):
    '''
    Get python version
    '''
    import subprocess
    p = subprocess.Popen((cmd, "--version"), stderr=subprocess.PIPE)
    p.wait();
    p = p.stderr.read().decode('ascii')
    p = p.split()[1].split('.')
    return p[0] + '.' + p[1]

def allexec():
    '''
    Get all executable file in PATH.
    '''
    import os
    def is_exe(fpath):
        return os.path.exists(fpath) and os.access(fpath, os.X_OK)
    rec = set()
    ans = []
    for path in os.environ["PATH"].split(os.pathsep):
        if os.path.exists(path):
            for name in os.listdir(path):
                exe_file = os.path.join(path, name)
                if name not in rec and is_exe(exe_file):
                    ans.append(exe_file)
                    rec.add(name)
    return rec, ans

def get_cpy(cmd, lst):
    import os.path
    pyv = getpyver(cmd)
    pyinc = "/usr/include/python{}mu".format(pyv)
    if not os.path.isdir(pyinc):
        pyinc = "/usr/include/python{}".format(pyv)
    for i in lst:
        fpath, fname = os.path.split(i)
        if "python{}".format(pyv[0]) == fname:
            loca = i;
    py = "using python : {} : {} : {} : /usr/lib ;\n"
    return py.format(pyv, loca, pyinc)

def site_config(file):
    gccs=""
    a, lst = allexec()

    gcc="using gcc ;"
    if "gcc" not in a:
        gcc = '#'+gcc

    mpi="using mpi ;"
    if "mpicc" not in a:
        mpi = '#'+mpi

    pys=""
    if "python2" in a:
        pys+=get_cpy("python2", lst)

    if "python3" in a:
        pys+=get_cpy("python3", lst)

    #assert "doxygen" in a
    for i in a:
        if i[:4] == "g++-":
            gccs += "using gcc : {} : {} ;\n".format(i[4:], i)

    file.write(SITE_DATA.format(**locals()))

def version_key(version):
    import re
    return re.split('\D*', version)

def user_config(file, BOOSTBOOK_DIR):
    import os
    spath = "/usr/share/xml/docbook/"
    l = os.listdir(spath)
    xsl, xml = [], []
    for i in l:
        if "xsl" in i:
            xsl.append(i)
        if "xml" in i:
            xml.append(i)
    DOCBOOK_XSL_DIR = os.path.join(spath, max(xsl, key = version_key))
    DOCBOOK_DTD_DIR = os.path.join(spath, max(xml, key = version_key))
    file.write(USER_DATA.format(**locals())) 

def main():
    import optparse
    usage = "usage: %prog {setup} [Options]"
    parser = optparse.OptionParser(usage=usage)
    site_path = "/etc/site-config.jam"
    user_path = "/usr/share/boost-build/user-config.jam"
    book_path = "/usr/share/boostbook"

    parser.add_option("-s", "--site-config", dest="site_path",  type="str", 
            help="Path of site-config.jam [%default]")

    parser.add_option("-u", "--user-config", dest="user_path",  type="str", 
            help="Path of user-config.jam [%default]")

    parser.add_option("-b", "--boost-book", dest="book_path",  type="str", 
            help="Path of Boost Book [%default]")

    parser.set_defaults(
            site_path = site_path, 
            user_path = user_path, 
            book_path = book_path)

    opts, args = parser.parse_args()
    import sys
    if len(args) != 1 or args[0].lower() != "setup":
        parser.print_help()
        sys.exit()
    file = open(opts.site_path, 'w');
    site_config(file)
    if opts.user_path != opts.site_path:
        file = open(opts.user_path, 'w');
    import os.path
    user_config(file, os.path.abspath(opts.book_path))

if __name__ == "__main__":
    main()
