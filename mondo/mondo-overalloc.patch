--- mondo-2.2.9.6/src/mondorestore/mondo-prep.c	2009-11-12 00:09:40.000000000 +0000
+++ mondo-2.2.9.6/src/mondorestore/mondo-prep-new.c	2011-04-19 12:02:53.000000000 +0100
@@ -2463,15 +2463,15 @@
 			   /** remove driveno, noof_drives stan benoit apr 2002**/
 
 	/** float ***********************************************************/
-	float factor;
+	double percentage;
 	float new_size;
 //  float newcylinderno;
 
 	/** long *************************************************************/
 	long newsizL = 0L;
-	long current_size_of_drive = 0L;
-	long original_size_of_drive = 0L;
-	long final_size = 0L;			/* all in Megabytes */
+	long totalsizL = 0L;
+	long current_size_of_drive = 0L;  /* use KB interally for precision */
+	long original_size_of_drive = 0L; /* use KB interally for precision */
 	struct mountlist_reference *drivemntlist;
 
 	/** structures *******************************************************/
@@ -2490,7 +2490,7 @@
 		}
 	}
 
-	current_size_of_drive = get_phys_size_of_drive(drive_name);
+	current_size_of_drive = get_phys_size_of_drive(drive_name) * 1024;
 
 	if (current_size_of_drive <= 0) {
 		log_it("Not resizing to match %s - can't find drive", drive_name);
@@ -2498,7 +2498,7 @@
 		return;
 	}
 	sprintf(tmp, "Expanding entries to suit drive %s (%ld MB)", drive_name,
-			current_size_of_drive);
+			current_size_of_drive / 1024);
 	log_to_screen(tmp);
 
 	drivemntlist = malloc(sizeof(struct mountlist_reference));
@@ -2512,7 +2512,7 @@
 
 	for (partno = 0; partno < drivemntlist->entries; partno++) {
 		if (drivemntlist->el[partno]->size > 0) {
-			original_size_of_drive += (drivemntlist->el[partno]->size / 1024L);
+			original_size_of_drive += drivemntlist->el[partno]->size;
 		}
 	}
 
@@ -2523,18 +2523,17 @@
 		paranoid_free(tmp);
 		return;
 	}
-	factor =
-		(float) (current_size_of_drive) / (float) (original_size_of_drive);
-	sprintf(tmp, "Disk %s was %ld MB; is now %ld MB; factor = %f",
-			drive_name, original_size_of_drive, current_size_of_drive,
-			factor);
+
+	sprintf(tmp, "Disk %s was %ld MB; is now %ld MB; Proportionally resizing partitions...",
+		     drive_name, original_size_of_drive/1024, current_size_of_drive/1024);
 	log_to_screen(tmp);
 
 	lastpart = drivemntlist->entries - 1;
-	for (partno = 0; partno < drivemntlist->entries; partno++) {
+	for (totalsizL = 0, partno = 0; partno < drivemntlist->entries; partno++) {
 		/* the 'atoi' thing is to make sure we don't try to resize _images_, whose formats will be numeric */
 		if (!atoi(drivemntlist->el[partno]->format)) {
-			new_size = (float) (drivemntlist->el[partno]->size) * factor;
+		        percentage = (double)(drivemntlist->el[partno]->size) / (double)(original_size_of_drive);
+			new_size = percentage * (double)(current_size_of_drive);
 		} else {
 			new_size = drivemntlist->el[partno]->size;
 		}
@@ -2543,24 +2542,35 @@
 			log_msg(1, "Skipping %s (%s) because it's an image",
 					drivemntlist->el[partno]->device,
 					drivemntlist->el[partno]->mountpoint);
-			newsizL = (long) new_size;	// It looks wrong but it's not
-		} else {
-			newsizL = (long) new_size;
 		}
+		newsizL = (long) new_size;
 
 		/* Do not apply the factor if partition was of negative size */
 		if (newsizL < 0) {
 			newsizL = drivemntlist->el[partno]->size;
 		}
-
+		totalsizL += newsizL;
 		sprintf(tmp, "Changing %s from %lld KB to %ld KB",
-				drivemntlist->el[partno]->device,
-				drivemntlist->el[partno]->size, newsizL);
+			     drivemntlist->el[partno]->device,
+			     drivemntlist->el[partno]->size, newsizL);
 		log_to_screen(tmp);
 		drivemntlist->el[partno]->size = newsizL;
 	}
-	final_size = get_phys_size_of_drive(drive_name);
-	sprintf(tmp, "final_size = %ld MB", final_size);
+
+	// Ensures over-allocation alert and prompt for interactive mode does not happen
+	if (totalsizL > current_size_of_drive) { 
+	        sprintf(tmp, "Last partition size calculated would be over-allocated, reducing %s from %ld KB to %ld KB.",
+			     drivemntlist->el[lastpart]->device, drivemntlist->el[lastpart]->size,
+			     drivemntlist->el[lastpart]->size - (totalsizL - current_size_of_drive));
+		drivemntlist->el[drivemntlist->entries-1]->size -= (totalsizL - current_size_of_drive);
+	} else if (totalsizL < current_size_of_drive) {
+	        sprintf(tmp, "Last partition size calculated would be under-allocated, increasing %s from %ld KB to %ld KB.",
+			     drivemntlist->el[lastpart]->device, drivemntlist->el[lastpart]->size,
+			     drivemntlist->el[lastpart]->size + (current_size_of_drive - totalsizL));
+		drivemntlist->el[drivemntlist->entries-1]->size += (current_size_of_drive - totalsizL);
+	}
+	log_to_screen(tmp);
+	sprintf(tmp, "final_size = %ld MB", current_size_of_drive / 1024);
 	log_to_screen(tmp);
 	paranoid_free(tmp);
 }
