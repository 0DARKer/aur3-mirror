diff --git a/ffmpeg.cc b/ffmpeg.cc
index f474e6e..966a53e 100644
--- a/ffmpeg.cc
+++ b/ffmpeg.cc
@@ -12,6 +12,7 @@
 extern "C" {
 #include AVCODEC_INCLUDE
 #include AVFORMAT_INCLUDE
+#include "libavutil/samplefmt.h"
 }
 
 /// A custom allocator that uses av_malloc for aligned buffers
@@ -67,7 +68,7 @@ void FFmpeg::open() {
 	QMutexLocker l(&s_avcodec_mutex);
 	av_register_all();
 	av_log_set_level(AV_LOG_ERROR);
-	if (av_open_input_file(&pFormatCtx, m_filename.c_str(), NULL, 0, NULL)) throw std::runtime_error("Cannot open input file");
+	if (avformat_open_input(&pFormatCtx, m_filename.c_str(), NULL, NULL)) throw std::runtime_error("Cannot open input file");
 	if (av_find_stream_info(pFormatCtx) < 0) throw std::runtime_error("Cannot find stream information");
 	pFormatCtx->flags |= AVFMT_FLAG_GENPTS;
 	audioStream = -1;
@@ -182,10 +183,10 @@ void FFmpeg::decodeNextFrame() {
 		audioQueue.input(samples, samples + outsize, 1.0 / MAX_VALUE);\
 	}
 				switch (pAudioCodecCtx->sample_fmt) {
-					case SAMPLE_FMT_S16: OUTPUT_SAMPLES(short, 32767.0); break;
-					case SAMPLE_FMT_S32: OUTPUT_SAMPLES(int, 8388607.0); break; // 24 bit samples padded to 32 bits
-					case SAMPLE_FMT_FLT: OUTPUT_SAMPLES(float, 1.0); break;
-					case SAMPLE_FMT_DBL: OUTPUT_SAMPLES(double, 1.0); break;
+					case AV_SAMPLE_FMT_S16: OUTPUT_SAMPLES(short, 32767.0); break;
+					case AV_SAMPLE_FMT_S32: OUTPUT_SAMPLES(int, 8388607.0); break; // 24 bit samples padded to 32 bits
+					case AV_SAMPLE_FMT_FLT: OUTPUT_SAMPLES(float, 1.0); break;
+					case AV_SAMPLE_FMT_DBL: OUTPUT_SAMPLES(double, 1.0); break;
 					default: throw std::runtime_error("Unsupported sample format");
 				}
 #undef OUTPUT_SAMPLES
