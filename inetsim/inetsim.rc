#! /bin/sh
### BEGIN INIT INFO
# Provides:          inetsim Internet Simulation
# Required-Start:    $local_fs $remote_fs $syslog $network $time
# Required-Stop:     $local_fs $remote_fs $syslog $network
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: start and stop the internet simulation
# Description:       inetsim is a software suite for simulating common internet services
### END INIT INFO

# Author inetsim: Matthias Eckert <me@inetsim.org>
# Author rc-file: Markus Blasl <markus.blasl (gmail)>

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH=/sbin:/usr/sbin:/bin:/usr/bin
DESC="internet service simulation suite"
NAME=inetsim
DAEMON=/usr/bin/inetsim
DAEMON_ARGS=""
PIDFILE=/var/run/$NAME.pid
SCRIPTNAME=/etc/rc.d/$NAME

# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

. /etc/rc.conf
. /etc/rc.d/functions

if [ ! x"$ENABLED" = x"1" -a ! "$1" = "stop" ]; then
    printhl "Edit /etc/default/inetsim to start inetsim"
    exit 0
fi

if [ `echo "$DAEMON_ARGS" | grep -c '\-\-pidfile'` -ne 0 ] && [ ! -f $PIDFILE ]; then
    PIDFILE=`echo "$DAEMON_ARGS" | sed s/=/\ /g | awk -F'--pidfile ' '{print $2}' | cut -d' ' -f1 | cut -f1`
fi

#
# Function that starts the daemon/service
#
do_start()
{
	# Return
	#   0 if daemon has been started
	#   1 if daemon was already running
	#   2 if daemon could not be started
	[ ! -f $PIDFILE ] || return 1
	if [ x"$AUTO_CONF" = x"1" -a -x "/usr/share/inetsim/contrib/gen_config.pl" ]; then
	    /usr/share/inetsim/contrib/gen_config.pl
	fi	
	perl $DAEMON & 
	# Add code here, if necessary, that waits for the process to be ready
	# to handle requests from services started subsequently which depend
	# on this one.  As a last resort, sleep for some time.
	sleep 3
}

#
# Function that stops the daemon/service
#
#
case "$1" in
  start)
	[ "$VERBOSE" != no ] && stat_busy "Starting $DESC: $NAME"
	do_start
		if [ $? -gt 0 ]; then
			stat_fail
		else
			add_daemon $NAME
			stat_done
		fi
	;;
  stop)
	[ "$VERBOSE" != no ] && stat_busy "Stopping $DESC: $NAME"
	if [ -a $PIDFILE ]
	then
		PID=`cat $PIDFILE`
		kill $PID > /dev/null

		if [ $? -gt 0 ]; then
			stat_fail
		else
			rm $PIDFILE
			rm_daemon $NAME
			stat_done
		fi
	else
		stat_done
	fi
	;;
  restart|force-reload)
	#
	# If the "reload" option is implemented then remove the
	# 'force-reload' alias
	#
	$0 stop
	sleep 1
	$0 start
	;;
  *)
	#echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
	echo "Usage: $SCRIPTNAME {start|stop|restart|force-reload}" >&2
	exit 3
	;;
esac

:
