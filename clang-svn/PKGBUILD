# Maintainer: Jan "heftig" Steffens <jan.steffens@gmail.com>
pkgname=clang-svn
pkgver=126538
pkgrel=1
pkgdesc="Low Level Virtual Machine with Clang from SVN"
arch=(i686 x86_64)
url="http://clang.llvm.org/"
license=('custom':'University of Illinois/NCSA Open Source License')
depends=('binutils>=2.21-2' 'gcc=4.5.2' libffi perl python2)
conflicts=(llvm llvm-svn llvm-ocaml clang clang-analyzer)
makedepends=(svn pkgconfig)
source=(clang-plugin-loader-registry.patch gcc_paths.patch clang_pure64.patch
        enable_lto.patch default_libcxx.patch)
md5sums=('02c23b4aaca3445b8bf39fddb2f9906e'
         'a92ee186695e11e9bdf7d161139bc69d'
         '225ee6b531f8327f34f344a18cb4ec81'
         '8f7582d7440e4a8342c3aea9ec714fb4'
         '9d153103dda0c088562f1feb1129b67e')

_svntrunk="http://llvm.org/svn/llvm-project"
_svnmod="llvm"
_cfemod="cfe"
_cxxmod="libcxx"

build() {
  cd "$srcdir"

msg2 "Connecting to LLVM.org SVN server...."

  if [ -d $_svnmod/.svn ]; then
    (cd $_svnmod && svn update -r $pkgver) || warning "Update failed!"
  else
    svn co $_svntrunk/$_svnmod/trunk $_svnmod --config-dir ./ -r $pkgver
  fi

  if [ -d $_cfemod/.svn ]; then
    (cd $_cfemod && svn update -r $pkgver) || warning "Update failed!"
  else
    svn co $_svntrunk/$_cfemod/trunk $_cfemod --config-dir ./ -r $pkgver
  fi

  if [ -d $_cxxmod/.svn ]; then
    (cd $_cxxmod && svn update -r $pkgver) || warning "Update failed!"
  else
    svn co $_svntrunk/$_cxxmod/trunk $_cxxmod --config-dir ./ -r $pkgver
  fi

msg2 "SVN checkout done or server timeout"

  rm -rf $_svnmod-build
  svn export $_svnmod $_svnmod-build
  svn export $_cfemod $_svnmod-build/tools/clang
  svn export $_cxxmod $_svnmod-build/projects/libcxx
  cd $_svnmod-build

msg2 "Patching..."

  # Fix symbolic links from OCaml bindings to LLVM libraries
  sed -i 's:\$(PROJ_libdir):/usr/lib/llvm:' bindings/ocaml/Makefile.ocaml

  # Fix installation directories, ./configure doesn't seem to set them right
  sed -i -e 's:\$(PROJ_prefix)/etc/llvm:/etc/llvm:' \
         -e 's:\$(PROJ_prefix)/lib:$(PROJ_prefix)/lib/llvm:' \
         -e 's:\$(PROJ_prefix)/docs/llvm:$(PROJ_prefix)/share/doc/llvm:' \
    Makefile.config.in

  # Fix insecure rpath (http://bugs.archlinux.org/task/14017)
  sed -i 's:$(RPATH) -Wl,$(\(ToolDir\|LibDir\|ExmplDir\))::g' Makefile.rules

  # Adjust hardcoded paths
  patch -d tools/clang -Np0 -i "$srcdir/gcc_paths.patch"

  if [[ $CARCH == x86_64 ]]; then
    patch -d tools/clang -Np0 -i "$srcdir/clang_pure64.patch"
  fi

  # Use gold instead of default linker, and always use the plugin.
  patch -d tools/clang -Np0 -i "$srcdir/enable_lto.patch"

  # Use libc++ by default, as the gcc 4.5 libstdc++ includes use C++0x
  # features not supported by clang
  #patch -d tools/clang -Np0 -i "$srcdir/default_libcxx.patch"
  # On the other hand, libc++ is pretty broken at the moment

  # Get the correct list of symbols to export
  # See http://lists.cs.uiuc.edu/pipermail/cfe-dev/2010-April/008559.html
  patch -Np1 -i "$srcdir/clang-plugin-loader-registry.patch"

msg2 "Starting build..."

  # Apply strip option to configure
  _optimize_flag="--enable-optimized"
  [ "$(check_option strip)" = "n" ] && _optimize_flag="--disable-optimized"

  # Include location of libffi headers in CPPFLAGS
  CPPFLAGS+=" $(pkg-config --cflags libffi)"

  ./configure \
    --prefix=/usr \
    --libdir=/usr/lib/llvm \
    --sysconfdir=/etc \
    --enable-shared \
    --enable-libffi \
    --enable-targets=all \
    --disable-expensive-checks \
    --disable-debug-runtime \
    --disable-assertions \
    --with-binutils-include=/usr/include \
    $_optimize_flag

  make

  # Build libc++
  _build_mode="Release"
  [ "$(check_option strip)" = "n" ] && _build_mode="Debug"

  cd projects/libcxx/lib
  CXX=../../../$_build_mode/bin/clang ./buildit
}

package() {
  cd "$srcdir/$_svnmod-build"

  # Provide the right version
  _providesver=$(grep '^PACKAGE_VERSION=' configure | awk -F\' '{print $2}')
  provides=("llvm=$_providesver" "llvm-svn=$_providesver"
            "clang=$_providesver" "clang-analyzer=$_providesver")

  # -j1 is due to race conditions during the installation of the OCaml bindings
  make -j1 DESTDIR="$pkgdir" install

  # Remove duplicate files installed by the OCaml bindings
  rm -f "$pkgdir"/usr/{lib/llvm/libllvm*,share/doc/llvm/ocamldoc.tar.gz}

  # Fix permissions of static libs
  chmod -x "$pkgdir"/usr/lib/llvm/*.a
  chmod -x "$pkgdir"/usr/lib/ocaml/libllvm*.a || true

  # Fix libdir in llvm-config (http://bugs.archlinux.org/task/14487)
  sed -i 's:\(ABS_RUN_DIR/lib\):\1/llvm:' "$pkgdir/usr/bin/llvm-config"

  # Get rid of example Hello transformation
  rm "$pkgdir"/usr/lib/llvm/*LLVMHello.*

  # Symlink the gold plugin where clang expects it
  ln -s llvm/LLVMgold.so "$pkgdir/usr/lib/LLVMgold.so"

  # Add ld.so.conf.d entry
  install -d "$pkgdir/etc/ld.so.conf.d"
  echo /usr/lib/llvm >"$pkgdir/etc/ld.so.conf.d/llvm.conf"

  # install libc++
  (
    cd projects/libcxx/lib
    install -D libc++.so.1.0 "$pkgdir/usr/lib/libc++.so.1.0"
    ln -s libc++.so.1.0 "$pkgdir/usr/lib/libc++.so.1"
    ln -s libc++.so.1.0 "$pkgdir/usr/lib/libc++.so"

    cd ../include
    install -d "$pkgdir/usr/include/c++/v1/ext"
    install -m644 * "$pkgdir/usr/include/c++/v1" || true
    install -m644 ext/* "$pkgdir/usr/include/c++/v1/ext"
  )

  # install static analyzer
  (
    cd tools/clang
    install -d "$pkgdir/usr/lib/clang-analyzer"
    for _tool in scan-{build,view}; do
      cp -r tools/$_tool "$pkgdir/usr/lib/clang-analyzer"
      ln -s /usr/lib/clang-analyzer/$_tool/$_tool "$pkgdir/usr/bin"
    done

    # Use Python 2
    sed -i '1s/env python$/env python2/' \
      "$pkgdir/usr/lib/clang-analyzer/scan-view/scan-view" \
      "$pkgdir/usr/lib/clang-analyzer/scan-build/set-xcode-analyzer"

    # Compile Python scripts
    python2 -m compileall "$pkgdir/usr/lib/clang-analyzer"
    python2 -O -m compileall "$pkgdir/usr/lib/clang-analyzer"
  )

  install -Dm644 LICENSE.TXT "$pkgdir/usr/share/licenses/$pkgname/LICENSE"
}

# vim:set ts=2 sw=2 et:
