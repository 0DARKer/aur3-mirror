diff -rupN cellprofiler-git/CellProfiler.py cellprofiler-fixed/CellProfiler.py
--- cellprofiler-git/CellProfiler.py	2013-06-24 15:16:45.305062600 +0100
+++ cellprofiler-fixed/CellProfiler.py	2013-06-24 15:17:25.592218898 +0100
@@ -559,14 +559,14 @@ def build_extensions():
         if not needs_build:
             continue
         if use_mingw:
-            p = subprocess.Popen(["python",
+            p = subprocess.Popen(["python2",
                                   script_file,
                                   "build_ext", "-i",
                                   "--compiler=mingw32"],
                                  cwd=script_path,
                                  env=env)
         else:
-            p = subprocess.Popen(["python",
+            p = subprocess.Popen(["python2",
                                   script_file,
                                   "build_ext", "-i"],
                                  cwd=script_path,
diff -rupN cellprofiler-git/cellprofiler/utilities/jutil.py cellprofiler-fixed/cellprofiler/utilities/jutil.py
--- cellprofiler-git/cellprofiler/utilities/jutil.py	2013-06-24 15:16:45.271728862 +0100
+++ cellprofiler-fixed/cellprofiler/utilities/jutil.py	2013-06-24 15:17:32.675638319 +0100
@@ -93,7 +93,7 @@ elif sys.platform.startswith('linux'):
         path = os.path.join(path, 'cellprofiler','utilities')
     else:
         path = os.path.split(__file__)[0]
-    p = subprocess.Popen(["java","-cp", path, "findlibjvm"],
+    p = subprocess.Popen("dirname `find $JAVA_HOME -name libjvm.so -print -quit`", shell=True,
                          stdout=subprocess.PIPE)
     stdout, stderr = p.communicate()
     jvm_dir = stdout.strip()
diff -rupN cellprofiler-git/tutorial/example3a_measurements.py cellprofiler-fixed/tutorial/example3a_measurements.py
--- cellprofiler-git/tutorial/example3a_measurements.py	2013-06-24 15:16:45.258395367 +0100
+++ cellprofiler-fixed/tutorial/example3a_measurements.py	2013-06-24 15:23:14.136454938 +0100
@@ -18,13 +18,13 @@ class Example3a(cpm.CPModule):
     variable_revision_number = 1
     module_name = "Example3a"
     category = "Measurement"
-    
+
     def create_settings(self):
         self.input_image_name = cps.ImageNameSubscriber("Input image")
-        
+
     def settings(self):
         return [self.input_image_name]
-    
+
     def run(self, workspace):
         image_set = workspace.image_set
         m = workspace.measurements
@@ -49,7 +49,7 @@ class Example3a(cpm.CPModule):
             # to only take the variance of the masked region. The variance
             # will be "not a number" or np.NaN if all or all but one pixel
             # is masked out. That's OK.
-            # 
+            #
         ##    variance = np.var(pixel_data[image.mask])
         ##else:
         ##    variance = np.var(pixel_data)
@@ -68,10 +68,10 @@ class Example3a(cpm.CPModule):
         #
         if workspace.show_frame:
             workspace.display_data.variance = variance
-            
+
     def is_interactive(self):
         return True
-    
+
     def display(self, workspace, frame=None):
         if frame is not None:
             #
@@ -89,17 +89,17 @@ class Example3a(cpm.CPModule):
             frame = workspace.create_or_find_figure(subplots=(1,1))
         frame.subplot_table(
             0, 0, [[ "Value = %f" % workspace.display_data.variance]])
-        
+
     def get_feature_name(self):
         '''Return the name to be used to store the feature
-        
+
         Returns CATEGORY_FEATURE_IMAGENAME
         where CATEGORY is Example3
               FEATURE is Variance
               IMAGENAME is the name of the input image.
         '''
         return "_".join([C_EXAMPLE3, FTR_VARIANCE, self.input_image_name.value])
-        
+
     def get_measurement_columns(self, pipeline):
         #
         # Return a list of one tuple - that tuple should have
@@ -108,5 +108,6 @@ class Example3a(cpm.CPModule):
         # it's third.
         #
         ##return [(cpmeas.IMAGE, self.get_feature_name(), cpmeas.COLTYPE_FLOAT)]
-        
-        
\ No newline at end of file
+        pass
+
+
diff -rupN cellprofiler-git/tutorial/example4a_skeletonizeobjects.py cellprofiler-fixed/tutorial/example4a_skeletonizeobjects.py
--- cellprofiler-git/tutorial/example4a_skeletonizeobjects.py	2013-06-24 15:16:45.258395367 +0100
+++ cellprofiler-fixed/tutorial/example4a_skeletonizeobjects.py	2013-06-24 15:23:37.543406081 +0100
@@ -8,7 +8,7 @@ import cellprofiler.settings as cps
 
 #
 # cellprofiler.cpmath.cpmorphology has many useful image processing algorithms.
-# 
+#
 # skeletonize_labels performs the skeletonization (medial axis transform) for
 # each labeled object in a labels matrix. It can skeletonize thousands of
 # objects in an image almost as rapidly as skeletonizing a single object
@@ -20,7 +20,7 @@ class Example4a(cpm.CPModule):
     module_name = "Example4a"
     variable_revision_number = 1
     category = "Object Processing"
-    
+
     def create_settings(self):
         #
         # The ObjectNameSubscriber is aware of all objects published by
@@ -35,10 +35,12 @@ class Example4a(cpm.CPModule):
         #
         ##self.output_objects_name = cps.ObjectNameProvider(
         ##    "Output objects", "Skeletons")
-        
+        pass
+
     def settings(self):
         ## return [self.input_objects_name, self.output_objects_name]
-    
+        pass
+
     def run(self, workspace):
         #
         # The object_set keeps track of the objects produced during a cycle
@@ -58,7 +60,7 @@ class Example4a(cpm.CPModule):
         #
         # You can be "nicer" by giving more information, but this is not
         # absolutely necessary. See subsequent exercises for how to be nice.
-        #     
+        #
         ##object_set = workspace.object_set
         ##input_objects = object_set.get_objects(self.input_objects_name.value)
         ##labels = skeletonize_labels(input_objects.segmented)
@@ -68,10 +70,10 @@ class Example4a(cpm.CPModule):
         if workspace.show_frame:
             workspace.display_data.input_labels = input_objects.segmented
             workspace.display_data.output_labels = labels
-            
+
     def display(self, workspace, frame):
         frame.set_subplots((2, 1))
         frame.subplot_imshow_labels(0, 0, workspace.display_data.input_labels,
                                     title = self.input_objects_name.value)
         frame.subplot_imshow_labels(1, 0, workspace.display_data.output_labels,
-                                    title = self.output_objects_name.value)
\ No newline at end of file
+                                    title = self.output_objects_name.value)
