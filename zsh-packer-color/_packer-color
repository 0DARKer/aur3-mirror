#compdef packer-color

# Copy this file to /usr/share/zsh/site-functions/_packer-color

typeset -A opt_args
setopt extendedglob

# options for passing to _arguments: main packer-color commands
_packer_color_opts_commands=(
    {-D,--database}'[Modify database]'
    {-G,-G}'[Download and extract AUR tarball]'
    '(-h --help)'{-h,--help}'[Display usage]'
    {-Q,--query}'[Query the package database]'
    {-R,--remove}'[Remove a package from the system]'
    {-S,--sync}'[Synchronize packages]'
    {-T,--deptest}'[Check if dependencies are installed]'
    {-U,--upgrade}'[Upgrade a package]'
    {-V,--version}'[Display version and exit]'
)

# options for passing to _arguments: options common to all commands
_packer_color_opts_common=(
    '--auronly[Only perform commands for the AUR.]'
    {-b,--dbpath}'[Alternate database location]:database_location:_files -/'
    '--cachedir[Alternate package cache location]:cache_location:_files -/'
    '--color[colorize the output]:color options:(always never auto)'
    '--config[An alternate configuration file]:config file:_files'
    '--devel[Update development packages. (cvs, git, ...)]'
    {-h,--help}'[Display syntax for the given operation]'
    '--logfile[An alternate log file]:config file:_files'
    '--noconfirm[Do not ask for confirmation]'
    '--noedit[Do not ask the user to edit files]'
    '--noprogressbar[Do not show a progress bar when downloading files]'
    '--noscriptlet[Do not execute the install scriptlet if one exists]'
    '--print[Only print the targets instead of performing the operation]'
    {-r,--root}'[Set alternate installation root]:installation root:_files -/'
    {-v,--verbose}'[Be more verbose]'
)

# options for passing to _arguments: options for --upgrade commands
_packer_color_opts_pkgfile=(
    '*-d[Skip dependency checks]'
    '*--nodeps[Skip dependency checks]'
    '--dbonly[Only remove database entry, do not remove files]'
    '--force[Overwrite conflicting files]'
    '--needed[Do not reinstall up to date packages]'
    '*:package file:_files -g "*.pkg.tar*~*.sig(.,@)"'
)

# options for passing to _arguments: subactions for --query command
_packer_color_opts_query_actions=(
    '(-Q --query)'{-Q,--query}
    {-g,--groups}'[View all members of a package group]:*:package groups:->query_group'
    {-o,--owns}'[Query the package that owns a file]:file:_files'
    {-p,--file}'[Package file to query]:*:package file:->query_file'
    {-s,--search}'[Search package names and descriptions]:*:search text:->query_search'
)

# options for passing to _arguments: options for --query and subcommands
_packer_color_opts_query_modifiers=(
    {-c,--changelog}'[List package changelog]'
    {-d,--deps}'[List packages installed as dependencies]'
    {-e,--explicit}'[List packages explicitly installed]'
    {\*-i,\*--info}'[View package information]'
    {\*-k,\*--check}'[Check package files]'
    {-l,--list}'[List package contents]'
    {-m,--foreign}'[List installed packages not found in sync db(s)]'
    {-n,--native}'[List installed packages found in sync db(s)]'
    {-t,--unrequired}'[List packages not required by any package]'
    {-u,--upgrades}'[List packages that can be upgraded]'
)

# options for passing to _arguments: options for --remove command
_packer_color_opts_remove=(
    {-c,--cascade}'[Remove all dependent packages]'
    {*-d,*--nodeps}'[Skip dependency checks]'
    {-n,--nosave}'[Remove protected configuration files]'
    {\*-s,\*--recursive}'[Remove dependencies not required by other packages]'
    '--dbonly[Only remove database entry, do not remove files]'
    '*:installed package:_packer_color_completions_installed_packages'
)

_packer_color_opts_database=(
    '--asdeps[mark packages as non-explicitly installed]'
    '--asexplicit[mark packages as explicitly installed]'
    '*:installed package:_packer_color_completions_installed_packages'
)

# options for passing to _arguments: options for --sync command
_packer_color_opts_sync_actions=(
    '(-S --sync)'{-S,--sync}
    {\*-c,\*--clean}'[Remove old packages from cache]:\*:clean:->sync_clean'
    {-g,--groups}'[View all members of a package group]:*:package groups:->sync_group'
    {-s,--search}'[Search package names and descriptions]:*:search text:->sync_search'
    '--dbonly[Only remove database entry, do not remove files]'
    '--needed[Do not reinstall up to date packages]'
    '--recursive[Reinstall all dependencies of target packages]'
)

# options for passing to _arguments: options for --sync command
_packer_color_opts_sync_modifiers=(
    {\*-d,\*--nodeps}'[Skip dependency checks]'
    {\*-i,\*--info}'[View package information]'
    {-l,--list}'[List all packages in a repository]'
    {-p,--print}'[Print download URIs for each package to be installed]'
    {\*-u,\*--sysupgrade}'[Upgrade all out-of-date packages]'
    {-w,--downloadonly}'[Download packages only]'
    {\*-y,\*--refresh}'[Download fresh package databases]'
    '*--ignore[Ignore a package upgrade]:package: _packer-color_completions_all_packages'
    '*--ignoregroup[Ignore a group upgrade]:package group:_packer-color_completions_all_groups'
    '--asdeps[Install packages as non-explicitly installed]'
    '--asexplicit[Install packages as explicitly installed]'
    '--force[Overwrite conflicting files]'
)

# handles --help subcommand
_packer_color_action_help() {
    _arguments -s : \
        "$_packer_color_opts_commands[@]"
}

# handles cases where no subcommand has yet been given
_packer_color_action_none() {
    _arguments -s : \
        "$_packer_color_opts_commands[@]"
}

# handles --query subcommand
_packer_color_action_query() {
    local context state line
    typeset -A opt_args

    case $state in
        query_file)
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_query_modifiers[@]" \
                '*:package file:_files -g "*.pkg.tar*~*.sig(.,@)"'
            ;;
        query_group)
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_query_modifiers[@]" \
                '*:groups:_packer_color_completions_installed_groups'
            ;;
        query_owner)
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_query_modifiers[@]" \
                '*:file:_files'
            ;;
        query_search)
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_query_modifiers[@]" \
                '*:search text: '
            ;;
        *)
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_query_actions[@]" \
                "$_packer_color_opts_query_modifiers[@]" \
                '*:package:_packer_color_completions_installed_packages'
            ;;
    esac
}

# handles --remove subcommand
_packer_color_action_remove() {
    _arguments -s : \
        '(--remove -R)'{-R,--remove} \
        "$_packer_color_opts_common[@]" \
        "$_packer_color_opts_remove[@]"
}

# handles --database subcommand
_packer_color_action_database() {
    _arguments -s : \
        '(--database -D)'{-D,--database} \
        "$_packer_color_opts_common[@]" \
        "$_packer_color_opts_database[@]"
}

_packer_color_action_deptest () {
    _arguments -s : \
        '(--deptest)-T' \
        "$_packer_color_opts_common[@]" \
        ":packages:_packer_color_all_packages"
}

# handles --sync subcommand
_packer_color_action_sync() {
    local context state line
    typeset -A opt_args
    if (( $+words[(r)--clean] )); then
        state=sync_clean
    elif (( $+words[(r)--groups] )); then
        state=sync_group
    elif (( $+words[(r)--search] )); then
        state=sync_search
    fi

    case $state in
        sync_clean)
            _arguments -s : \
                {\*-c,\*--clean}'[Remove old packages from cache]' \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_sync_modifiers[@]"
                ;;
        sync_group)
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_sync_modifiers[@]"\
                '(-g --group)'{-g,--groups} \
                '*:package group:_packer_color_completions_all_groups'
            ;;
        sync_search)
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_sync_modifiers[@]" \
                '*:search text: '
            ;;
        *)
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_sync_actions[@]" \
                "$_packer_color_opts_sync_modifiers[@]" \
                '*:package:_packer_color_completions_all_packages' \
            ;;
    esac
}

# handles --upgrade subcommand
_packer_color_action_upgrade() {
    _arguments -s : \
        '(-U --upgrade)'{-U,--upgrade} \
        "$_packer_color_opts_common[@]" \
        "$_packer_color_opts_pkgfile[@]"
}

# handles --version subcommand
_packer_color_action_version() {
    # no further arguments
    return 0
}

# provides completions for package groups
_packer_color_completions_all_groups() {
    local -a cmd groups
    _packer_color_get_command
    groups=( $(_call_program groups $cmd[@] -Sg) )
    typeset -U groups
    compadd "$@" -a groups
}

# provides completions for packages available from repositories
# these can be specified as either 'package' or 'repository/package'
_packer_color_completions_all_packages() {
    local -a cmd packages repositories packages_long
    _packer_color_get_command

    if compset -P1 '*/*'; then
        packages=( $(_call_program packages $cmd[@] -Sql ${words[CURRENT]%/*}) )
        typeset -U packages
        _wanted repo_packages expl "repository/package" compadd ${(@)packages}
    else
        packages=( $(_call_program packages $cmd[@] -Sql) )
        typeset -U packages
        _wanted packages expl "packages" compadd - "${(@)packages}"

        repositories=(${(o)${${${(M)${(f)"$(</etc/pacman.conf)"}:#\[*}/\[/}/\]/}:#options})
        typeset -U repositories
        _wanted repo_packages expl "repository/package" compadd -S "/" $repositories
    fi
}

# provides completions for package groups
_packer_color_completions_installed_groups() {
    local -a cmd groups
    _packer_color_get_command
    groups=(${(o)${(f)"$(_call_program groups $cmd[@] -Qg)"}% *})
    typeset -U groups
    compadd "$@" -a groups
}

# provides completions for installed packages
_packer_color_completions_installed_packages() {
    local -a cmd packages packages_long
    packages_long=(/var/lib/pacman/local/*(/))
    packages=( ${${packages_long#/var/lib/pacman/local/}%-*-*} )
    compadd "$@" -a packages
}

# provides completions for repository names
_packer_color_completions_repositories() {
    local -a cmd repositories
    repositories=(${(o)${${${(M)${(f)"$(</etc/pacman.conf)"}:#\[*}/\[/}/\]/}:#options})
    # Uniq the array
    typeset -U repositories
    compadd "$@" -a repositories
}

# builds command for invoking packer-color in a _call_program command - extracts
# relevant options already specified (config file, etc)
# $cmd must be declared by calling function
_packer_color_get_command() {
    # this is mostly nicked from _perforce
    cmd=( "packer-color" "2>/dev/null")
    integer i
    for (( i = 2; i < CURRENT - 1; i++ )); do
        if [[ ${words[i]} = "--config" || ${words[i]} = "--root" ]]; then
            cmd+=( ${words[i,i+1]} )
        fi
    done
}

# main dispatcher
_packer_color_zsh_comp() {
    local -a args cmds;
    local tmp
    args=( ${${${(M)words:#-*}#-}:#-*} )
    for tmp in $words; do
        cmds+=("${${_packer_color_opts_commands[(r)*$tmp\[*]%%\[*}#*\)}")
    done
    case $args in #$words[2] in
        h*)
            if (( ${(c)#args} <= 1 && ${(w)#cmds} <= 1 )); then
                _packer_color_action_help
            else
                _message "no more arguments"
            fi
            ;;
        *h*)
            _message "no more arguments"
            ;;
        D*)
            _packer_color_action_database
            ;;
        Q*g*) # ipkg groups
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_query_modifiers[@]" \
                '*:groups:_packer_color_completions_installed_groups'
            ;;
        Q*o*) # file
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_query_modifiers[@]" \
                '*:package file:_files'
            ;;
        Q*p*) # file *.pkg.tar*
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_query_modifiers[@]" \
                '*:package file:_files -g "*.pkg.tar*~*.sig(.,@)"'
            ;;
        T*)
            _packer_color_action_deptest
            ;;
        Q*)
            _packer_color_action_query
            ;;
        R*)
            _packer_color_action_remove
            ;;
        S*c*) # no completion
            _arguments -s : \
                '(-c --clean)'{\*-c,\*--clean}'[Remove all files from the cache]' \
                "$_packer_color_opts_common[@]"
            ;;
        S*l*) # repos
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_sync_modifiers[@]" \
                '*:package repo:_packer_color_completions_repositories' \
            ;;
        S*g*) # pkg groups
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_sync_modifiers[@]" \
                '*:package group:_packer_color_completions_all_groups'
            ;;
        S*s*)
            _arguments -s : \
                "$_packer_color_opts_common[@]" \
                "$_packer_color_opts_sync_modifiers[@]" \
                '*:search text: '
                ;;
        S*)
            _packer_color_action_sync
            ;;
        T*)
             _arguments -s : \
                '-T' \
                "$_packer_color_opts_common[@]" \
                ":packages:_packer_color_all_packages"
            ;;
        U*)
            _packer_color_action_upgrade
            ;;
        V*)
            _packer_color_action_version
            ;;
        *)

            case ${(M)words:#--*} in
                *--help*)
                    if (( ${(w)#cmds} == 1 )); then
                        _packer_color_action_help
                    else
                        return 0;
                    fi
                    ;;
                *--sync*)
                    _packer_color_action_sync
                    ;;
                *--query*)
                    _packer_color_action_query
                    ;;
                *--remove*)
                    _packer_color_action_remove
                    ;;
                *--deptest*)
                    _packer_color_action_deptest
                    ;;
                *--database*)
                    _packer_color_action_database
                    ;;
                *--version*)
                    _packer_color_action_version
                    ;;
                *--upgrade*)
                    _packer_color_action_upgrade
                    ;;
                *)
                    _packer_color_action_none
                    ;;
            esac
            ;;
    esac
}

# run the main dispatcher
_packer_color_zsh_comp "$@"