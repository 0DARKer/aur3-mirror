# Original contributor: Mathias Bur√©n <mathias.buren@gmail.com>
# Based on work by kernel26-git maintainer xduugu
# Contributor: Tavian Barnes <tavianator@gmail.com>

pkgname=kernel26-nouveau-git
pkgver=20100707
pkgrel=1
pkgdesc="The Linux Kernel and modules from the nouveau project's git tree"
url="http://www.kernel.org/"
arch=(i686 x86_64)
license=('GPL2')
depends=('coreutils' 'kernel26-firmware-git' 'module-init-tools' 'mkinitcpio>=0.5.20')
makedepends=('git')
backup=(etc/mkinitcpio.d/$pkgname.preset)
install=$pkgname.install
changelog=$pkgname.changelog
provides=(nouveau-drm="0.0.16_${pkgver}")
source=($pkgname.preset
        config.{i686,x86_64}
        logo_linux_{clut224.ppm,mono.pbm,vga16.ppm})
md5sums=('22fb7a2ad1b982f6a3899cd5ace3d4d4'
         '2ed5d259126c8f51a94ebbbcc9aac5ac'
         '1a2c1eabfa47483b031a62b983554f0b'
         '6a5a1925501fe20fafd04fdb3cb4f6ed'
         'e8c333eaeac43f5c6a1d7b2f47af12e2'
         'c120adbd9c0daa0136237a83adeabd1e')
sha256sums=('e034c1cc4771bfe9b2263748e9e8c40ce10ac411ec363b772a6aa6068f702e24'
            'cc3bc622a28f7e13a31a78e7b0948142f2cf7f35e186e839c3dc4fa0ef239f34'
            'f641532715bfe3ea78c80ed3d14f478115a4721e819a0fc48c682aae82cd2aa6'
            '4274579ccf42a9acc03283edffea2dda2c4a48e3fd734bbaeada4c16dff9d156'
            '1e5bea8de1c2cc24498fb9a4fdbb313f36f38f671f2bfc46ccf7acbd7958a4b9'
            'f9c7c1275313890fc12f6bab92e2c0794b5041e223d868eb0e34cd99baee3d7a')

_gitroot="git://anongit.freedesktop.org/git/nouveau/linux-2.6"
_gitname="linux-2.6"

_linus_gitroot="git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux-2.6.git"

####################################################################
# KERNEL CONFIG FILES
#
# This PKGBUILD searches for config files in the current directory
# and will use the first one it finds from the following
# list as base configuration:
# 	config.local
# 	config.saved.$CARCH
# 	config.$CARCH
#
####################################################################


#############################################################
# PATCHES
#
# This package builds the vanilla git kernel by default,
# but it is possible to patch the source without modifying
# this PKGBUILD.
#
# Simply create a directory 'patches' in your PKGBUILD
# directory and _any_ file (dotfiles excluded) in this
# folder will be applied to the kernel source.
#
# Prefixing the patch file names with dots will obviously
# excluded them from the patching process.
#
#############################################################


#############################
# CONFIGURATION
#
# Uncomment desired options
#############################


#######
# Skip the merge of Linus's kernel tree
#
# _skip_merge=1


#######
# Set to e.g. menuconfig, xconfig or gconfig
#
# For a full list of supported commands, please have a look
# at "Configuration targets" section of `make help`'s output.
#
# If unset or set to an empty string, the (manual) kernel
# configuration step will be skipped.
#
_config_cmd="menuconfig"


#######
# The directory where the kernel should be built
#
# Can be useful, for example, if you want to compile on a
# tmpfs mount, which can speed up the compilation process
#
_build_dir="$srcdir"


#######
# Stop build process after kernel configuration
#
# This option enables _save_config implicitly.
#
# _configure_only=1


#######
# Append the date to the localversion
#
#	e.g. -ARCH -> -ARCH-20090422
#
# _date_localversion=1


#######
# Set the pkgver to the kernel version
# rather than the build date
#
# _kernel_pkgver=1


#######
# Save the .config file to package directory
# as config.saved.$CARCH
#
# _save_config=1


#######
# Make the kernel build process verbose
#
# _verbose=1



##############################
# where the magic happens...
##############################
build() {
	#################################
	# Get the latest kernel sources
	#################################
	msg "Fetching sources..."

	cd "$startdir"
	if [[ -d $_gitname ]]; then
		msg2 "Updating sources..."
		cd "$_gitname"                 &&
		git fetch origin master:master &&
		git fetch linus master:linus   &&
		cd "$OLDPWD"                   || return 1
	else
		msg2 "Cloning the project..."
		warning "The initial clone will download approximately 300 mb"
		mkdir -p "$_gitname"                    &&
		cd "$_gitname"                          &&
		git init --bare                         &&
		git remote add origin "$_gitroot"       &&
		git remote add linus "$_linus_gitroot"  &&
		git remote update                       &&
		git branch --track master origin/master &&
		git branch --track linus linus/master   &&
		cd "$OLDPWD"                            || return 1
	fi

	msg "Creating build branch..."
	rm -rf "$_build_dir/$_gitname-build"
	git clone "$_gitname" "$_build_dir/$_gitname-build" || return 1

	cd "$_build_dir/$_gitname-build" || return 1


	################################################################
	# Check out nouveau's tree, merging it onto Linus's if desired
	################################################################
	if [ -n "$_skip_merge" ]; then
		git checkout -q origin/master || return 1
	else
		git checkout -q origin/linus || return 1
		msg "Merging nouveau onto Linus's kernel tree"
		git merge --no-commit origin/master
		# Attempt to resolve conflicts with --theirs
		msg2 "Checking out drivers/gpu/drm/nouveau from the nouveau project"
		git checkout origin/master -- drivers/gpu/drm/nouveau &&
		git add drivers/gpu/drm/nouveau                       &&
		git commit -qm "Merge remote branch 'origin/master' into HEAD" || return 1
	fi


	####################################
	# Add Arch Linux logo to the source
	####################################
	msg "Adding Arch Linux logo..."
	cp "$srcdir/logo_linux_clut224.ppm"  drivers/video/logo/ &&
	cp "$srcdir/logo_linux_mono.pbm"     drivers/video/logo/ &&
	cp "$srcdir/logo_linux_vga16.ppm"    drivers/video/logo/ || return 1


	#################
	# Apply patches
	#################
	shopt -s nullglob
	if [[ -d $startdir/patches && -n $(echo "$startdir/patches/"*) ]]; then
		msg "Applying patches..."
		local i
		for i in "$startdir/patches/"*; do
			msg2 "Applying ${i##*/}..."
			patch -Np1 -i "$i" || (error "Applying ${i##*/} failed" && return 1)
		done
	fi
	shopt -u nullglob


	#################
	# CONFIGURATION
	#################

	#########################
	# Loading configuration
	#########################
	msg "Loading configuration..."
	for i in local "saved.$CARCH" "$CARCH"; do
		if [[ -e $startdir/config.$i ]]; then
			msg2 "Using kernel config file config.$i..."
			cp -f "$startdir/config.$i" .config || return 1
			break
		fi
	done

	[[ ! -e .config ]] &&
		warning "No suitable kernel config file was found. You'll have to configure the kernel from scratch."


	###########################
	# Start the configuration
	###########################
	msg "Updating configuration..."
	yes "" | make config > /dev/null

	# fix lsmod path
	sed -ri "s@s(bin/lsmod)@\1@" scripts/kconfig/streamline_config.pl
	
	if [[ -n $_config_cmd ]]; then
		msg2 "Running make $_config_cmd..."
		make $_config_cmd || return 1
	else
		warning "Unknown config command: $_config_cmd"
	fi


	##############################################
	# Save the config file the package directory
	##############################################
	if [[ -n $_save_config || -n $_configure_only ]]; then
		msg "Saving configuration..."
		msg2 "Saving $_build_dir/$_gitname-build/.config as $startdir/config.saved.$CARCH"
		cp .config "$startdir/config.saved.$CARCH" || return 1
	fi


	#######################################
	# Stop after configuration if desired
	#######################################
	if [[ -n $_configure_only ]]; then
		rm -rf "$_build_dir/$_gitname-build"
		return 1
	fi


	###############################
	# Append date to localversion
	###############################
	if [[ -n $_date_localversion ]]; then
		local _localversion="$(sed -rn 's/^CONFIG_LOCALVERSION="([^"]*)"$/\1/p' .config)"
		[[ -n $_localversion ]] && msg2 "CONFIG_LOCALVERSION is set to: $_localversion"

		# since this is a git package, the $pkgver is equal to $(date +%Y%m%d)
		msg2 "Appending $pkgver to CONFIG_LOCALVERSION..."
		sed -i "s/^CONFIG_LOCALVERSION=.*$/CONFIG_LOCALVERSION=\"$_localversion-$pkgver\"/" \
			.config
	fi


	#################
	# BUILD PROCESS
	#################

	################################
	# Build the kernel and modules
	################################
	msg "Building kernel and modules..."
	make V="$_verbose" bzImage modules || return 1
}

package() {
	local _karch="x86"
	cd "$_build_dir/$_gitname-build" || return 1

	######################
	# Get kernel version
	######################
	local _kernver=$(make kernelrelease)
	local _basekernel=${_kernver%%-*}


	############################################################
	# Use kernel version instead of the current date as pkgver
	############################################################
	if [[ -n $_kernel_pkgver ]]; then
		msg "Updating pkgver..."
		# work around AUR parser bug
		(( 1 )) && pkgver=${_kernver//-/_}

		# do not silently overwrite existing packages
		if (( ! FORCE )) && [[ -e $PKGDEST/$pkgname-$pkgver-$pkgrel-${CARCH}${PKGEXT} ]]; then
			error "A package has already been built. (use -f to overwrite)"
			return 1
		fi
	fi


	#############################################################
	# Provide kernel26
	# (probably someone wants to use this kernel exclusively?)
	#############################################################
	provides=("${provides[@]}" kernel26{,-headers}"=${_kernver//-/_}")


	################
	# INSTALLATION
	################

	#####################
	# Install the image
	#####################
	msg "Installing kernel image..."
	install -D -m644 System.map                "$pkgdir/boot/System.map26-nouveau-git" &&
	install -D -m644 arch/$_karch/boot/bzImage "$pkgdir/boot/vmlinuz26-nouveau-git"    &&
	install -D -m644 .config                   "$pkgdir/boot/kconfig26-nouveau-git"    || return 1


	##########################
	# Install kernel modules
	##########################
	msg "Installing kernel modules..."
	make INSTALL_MOD_PATH="$pkgdir" modules_install


	##############################
	# Install fake kernel source
	##############################
	install -D -m644 Module.symvers  "$pkgdir/usr/src/linux-$_kernver/Module.symvers"  &&
	install -D -m644 Makefile        "$pkgdir/usr/src/linux-$_kernver/Makefile"        &&
	install -D -m644 kernel/Makefile "$pkgdir/usr/src/linux-$_kernver/kernel/Makefile" &&
	install -D -m644 .config         "$pkgdir/usr/src/linux-$_kernver/.config"         &&
	install -D -m644 .config         "$pkgdir/lib/modules/$_kernver/.config"           || return 1


	#######################################################
	# Install scripts directory and fix permissions on it
	#######################################################
	cp -a scripts "$pkgdir/usr/src/linux-$_kernver" &&
	chmod og-w -R "$pkgdir/usr/src/linux-$_kernver" || return 1


	##########################
	# Install header files
	##########################
	msg "Installing header files..."

	# kernel headers
	msg2 "kernel"
	for i in acpi asm-generic config generated linux math-emu media net pcmcia scsi sound trace video; do
		mkdir -p "$pkgdir/usr/src/linux-$_kernver/include/$i" &&
		cp -a include/$i "$pkgdir/usr/src/linux-$_kernver/include" || return 1
	done
	# required by virtualbox and probably others
	ln -s "../generated/autoconf.h" "$pkgdir/usr/src/linux-$_kernver/include/linux/" || return 1

	# lirc headers
	msg2 "lirc"
	mkdir -p "$pkgdir/usr/src/linux-$_kernver/drivers/media/video" &&
	cp drivers/media/video/*.h "$pkgdir/usr/src/linux-$_kernver/drivers/media/video/" || return 1

	for i in bt8xx cpia2 cx25840 cx88 em28xx et61x251 pwc saa7134 sn9c102 usbvideo zc0301; do
		mkdir -p "$pkgdir/usr/src/linux-$_kernver/drivers/media/video/$i" &&
		cp -a drivers/media/video/$i/*.h "$pkgdir/usr/src/linux-$_kernver/drivers/media/video/$i" || return 1
	done

	# md headers
	msg2 "md"
	mkdir -p "$pkgdir/usr/src/linux-$_kernver/drivers/md" &&
	cp -a drivers/md/*.h "$pkgdir/usr/src/linux-$_kernver/drivers/md" || return 1

	# inotify.h
	msg2 "inotify.h"
	mkdir -p "$pkgdir/usr/src/linux-$_kernver/include/linux" &&
	cp -a include/linux/inotify.h "$pkgdir/usr/src/linux-$_kernver/include/linux/" || return 1

	# CLUSTERIP file for iptables
	msg2 "CLUSTERIP file for iptables"
	mkdir -p "$pkgdir/usr/src/linux-$_kernver/net/ipv4/netfilter/" &&
	cp -a net/ipv4/netfilter/ipt_CLUSTERIP.c "$pkgdir/usr/src/linux-$_kernver/net/ipv4/netfilter/" || return 1

	# wireless headers
	msg2 "wireless"
	mkdir -p "$pkgdir/usr/src/linux-$_kernver/net/mac80211/" &&
	cp net/mac80211/*.h "$pkgdir/usr/src/linux-$_kernver/net/mac80211/" || return 1

	# Kconfig files
	msg2 "Kconfig files"
	for i in $(find . -name "Kconfig*"); do
		mkdir -p "$pkgdir/usr/src/linux-$_kernver/${i%/*}" &&
		cp -a "$i" "$pkgdir/usr/src/linux-$_kernver/$i" || return 1
	done


	########################################
	# Install architecture dependent files
	########################################
	msg "Installing architecture files..."
	mkdir -p "$pkgdir/usr/src/linux-$_kernver/arch/$_karch/kernel" &&
	cp -a arch/$_karch/kernel/asm-offsets.s "$pkgdir/usr/src/linux-$_kernver/arch/$_karch/kernel" || return 1

	cp -a arch/$_karch/Makefile* "$pkgdir/usr/src/linux-$_kernver/arch/$_karch" &&
	cp -a arch/$_karch/configs "$pkgdir/usr/src/linux-$_kernver/arch/$_karch" || return 1

	# copy arch includes for external modules and fix the nVidia issue
	mkdir -p "$pkgdir/usr/src/linux-$_kernver/arch/$_karch" &&
	cp -a "arch/$_karch/include" "$pkgdir/usr/src/linux-$_kernver/arch/$_karch/" || return 1

	# create a necessary symlink to the arch folder
	cd "$pkgdir/usr/src/linux-$_kernver/arch" || return 1

	if [[ $CARCH = "x86_64" ]]; then
		ln -s $_karch x86_64 || return 1
	else
		ln -s $_karch i386 || return 1
	fi

	cd "$OLDPWD" || return 1


	################################
	# Remove unneeded architecures
	################################
	msg "Removing unneeded architectures..."
	for i in "$pkgdir/usr/src/linux-$_kernver/arch/"*; do
		[[ ${i##*/} != $_karch ]] && rm -rf "$i"
	done


	############################
	# Remove .gitignore files
	############################
	msg "Removing .gitignore files from kernel source..."
	find "$pkgdir/usr/src/linux-$_kernver/" -name ".gitignore" -delete


	##################################
	# Create some important symlinks
	##################################
	msg "Creating important symlinks..."

	# the build symlink needs to be relative
	cd "$pkgdir/lib/modules/$_kernver" &&
		rm -rf source build &&
		ln -s "/usr/src/linux-$_kernver" build &&
		cd "$OLDPWD" || return 1

	cd "$pkgdir/usr/src" &&
		ln -s "linux-$_kernver" "linux-$_basekernel-nouveau-git" &&
		cd "$OLDPWD" || return 1

	cd "$pkgdir/lib/modules" &&
		ln -s "$_kernver" "$_basekernel-nouveau-git" &&
		cd "$OLDPWD" || return 1


	###################
	# Fix permissions
	###################
	msg "Fixing permissions..."
	chown -R root:root "$pkgdir/usr/src/linux-$_kernver" &&
	find "$pkgdir/usr/src/linux-$_kernver" -type d -exec chmod 755 {} \; || return 1


	############################
	# Install mkinitcpio files
	############################
	msg "Installing preset file..."
	install -D -m644 "$srcdir/kernel26-nouveau-git.preset" \
		"$pkgdir/etc/mkinitcpio.d/kernel26-nouveau-git.preset" || return 1

	msg "Generating kernel26-nouveau-git.kver..."
	echo -e "# DO NOT EDIT THIS FILE\nALL_kver='$_kernver'" \
		> "$pkgdir/etc/mkinitcpio.d/kernel26-nouveau-git.kver" || return 1


	#######################
	# Remove the firmware
	#######################
	rm -rf "$pkgdir/lib/firmware"


	##########################
	# Remove build directory
	##########################
	if (( ! CLEANUP )) && [[ $_build_dir != $srcdir ]]; then
		msg "Saving $_build_dir/$_gitname-build to $srcdir/$_gitname-build..."
		mv "$_build_dir/$_gitname-build" "$srcdir"
	fi
	rm -rf "$_build_dir/$_gitname-build"
}

# vim: set fenc=utf-8 ts=2 sw=2 noet:
