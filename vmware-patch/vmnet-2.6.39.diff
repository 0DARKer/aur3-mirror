diff -u -r vmnet-only/driver.c vmnet-only/driver.c
--- vmnet-only/driver.c	2011-03-26 06:37:29.000000000 +0100
+++ vmnet-only/driver.c	2011-04-02 14:14:57.000000000 +0200
@@ -28,7 +28,6 @@
 #include <linux/poll.h>
 
 #include <linux/smp.h>
-#include <linux/smp_lock.h>
 
 #include <linux/netdevice.h>
 #include <linux/etherdevice.h>
@@ -105,7 +104,7 @@
  * not have vnetStructureMutex already acquired,
  * it is most certainly a bug.
  */
-static rwlock_t vnetPeerLock = RW_LOCK_UNLOCKED;
+static DEFINE_RWLOCK(vnetPeerLock);
 
 /*
  * All concurrent changes to the network structure are
@@ -115,6 +114,7 @@
  * vnetStructureMutex and vnetPeerLock for write.
  */
 compat_define_mutex(vnetStructureMutex);
+compat_define_mutex(vnetMutex);
 
 #if defined(VM_X86_64) && !defined(HAVE_COMPAT_IOCTL)
 /*
@@ -264,11 +264,11 @@
 			    struct file * filp)  // IN:
 {
    int ret = -ENOTTY;
-   lock_kernel();
+   compat_mutex_lock(&vnetMutex);
    if (filp && filp->f_op && filp->f_op->ioctl == VNetFileOpIoctl) {
       ret = VNetFileOpIoctl(filp->f_dentry->d_inode, filp, iocmd, ioarg);
    }
-   unlock_kernel();
+   compat_mutex_unlock(&vnetMutex);
    return ret;
 }
 
@@ -1134,9 +1134,9 @@
    if (filp && filp->f_dentry) {
       inode = filp->f_dentry->d_inode;
    }
-   lock_kernel();
+   compat_mutex_lock(&vnetMutex);
    err = VNetFileOpIoctl(inode, filp, iocmd, ioarg);
-   unlock_kernel();
+   compat_mutex_unlock(&vnetMutex);
    return err;
 }
 #endif
diff -u -r vmnet-only/filter.c vmnet-only/filter.c
--- vmnet-only/filter.c	2011-03-26 06:37:29.000000000 +0100
+++ vmnet-only/filter.c	2011-04-02 14:16:50.000000000 +0200
@@ -85,7 +85,7 @@
  * callbacks can be concurrently executing on multiple threads on multiple
  * CPUs, so we should revisit locking for allowing for that in the future.
  */
-spinlock_t activeRuleLock = SPIN_LOCK_UNLOCKED;
+DEFINE_SPINLOCK(activeRuleLock);
 
 /*
  * Logging.
diff -u -r vmnet-only/hub.c vmnet-only/hub.c
--- vmnet-only/hub.c	2011-03-26 06:37:29.000000000 +0100
+++ vmnet-only/hub.c	2011-04-02 14:15:56.000000000 +0200
@@ -81,7 +81,7 @@
  * so we use __attribute__((unused)) to quiet the compiler.
  */
 
-static spinlock_t vnetHubLock __attribute__((unused)) = SPIN_LOCK_UNLOCKED;
+static DEFINE_SPINLOCK(vnetHubLock);
 
 
 /*
