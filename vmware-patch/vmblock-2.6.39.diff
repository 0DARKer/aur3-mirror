diff -u -r vmblock-only/linux/dentry.c vmblock-only/linux/dentry.c
--- vmblock-only/linux/dentry.c	2011-03-26 04:03:06.000000000 +0100
+++ vmblock-only/linux/dentry.c	2011-05-14 19:05:49.000000000 +0200
@@ -103,8 +103,11 @@
        actualDentry->d_op->d_revalidate) {
       return actualDentry->d_op->d_revalidate(actualDentry, nd);
    }
-
-   if (path_lookup(iinfo->name, 0, &actualNd)) {
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 38)
+   if (kern_path(iinfo->name, 0, &actualNd)) {
+#else
+   if (compat_path_lookup(iinfo->name, 0, &actualNd)) {
+#endif
       LOG(4, "DentryOpRevalidate: [%s] no longer exists\n", iinfo->name);
       return 0;
    }
diff -u -r vmblock-only/linux/filesystem.c vmblock-only/linux/filesystem.c
--- vmblock-only/linux/filesystem.c	2011-03-26 04:03:06.000000000 +0100
+++ vmblock-only/linux/filesystem.c	2011-05-14 19:05:57.000000000 +0200
@@ -44,8 +44,13 @@
 /* File system operations */
 
 #if defined(VMW_GETSB_2618)
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 38)
+static struct dentry *FsOpMount(struct file_system_type *fsType, int flags,
+                     const char *devName, void *rawData);
+#else
 static int FsOpGetSb(struct file_system_type *fsType, int flags,
                      const char *devName, void *rawData, struct vfsmount *mnt);
+#endif
 #else
 static struct super_block *FsOpGetSb(struct file_system_type *fsType, int flags,
                                      const char *devName, void *rawData);
@@ -66,7 +71,11 @@
 static struct file_system_type fsType = {
    .owner = THIS_MODULE,
    .name = VMBLOCK_FS_NAME,
+   #if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 38)
+   .mount = FsOpMount,
+   #else
    .get_sb = FsOpGetSb,
+   #endif
    .kill_sb = kill_anon_super,
 };
 
@@ -335,8 +344,11 @@
       Warning("Iget: could not make full name\n");
       goto error_inode;
    }
-
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 38)
+   if (kern_path(iinfo->name, 0, &actualNd)) {
+#else
    if (compat_path_lookup(iinfo->name, 0, &actualNd)) {
+#endif
       /*
        * This file does not exist, so we create an inode that doesn't know
        * about its underlying file.  Operations that create files and
@@ -533,18 +545,17 @@
    return 0;
 }
 
-
 #if defined(VMW_GETSB_2618)
 /*
  *-----------------------------------------------------------------------------
  *
- * FsOpGetSb --
+ * FsOpGetSb/FsOpMount --
  *
  *    Invokes generic kernel code to prepare superblock for
  *    deviceless filesystem.
  *
  * Results:
- *    0 on success
+ *    0/dentry on success
  *    negative error code on failure
  *
  * Side effects:
@@ -552,7 +563,17 @@
  *
  *-----------------------------------------------------------------------------
  */
+#if LINUX_VERSION_CODE > KERNEL_VERSION(2, 6, 38)
+struct dentry *
+FsOpMount(struct file_system_type *fs_type, // IN: file system type of mount
+          int flags,                        // IN: mount flags
+          const char *dev_name,             // IN: device mounting on
+          void *rawData)                    // IN: mount arguments
+{
+   return mount_nodev(fs_type, flags, rawData, FsOpReadSuper);
+}
 
+#else
 static int
 FsOpGetSb(struct file_system_type *fs_type, // IN: file system type of mount
           int flags,                        // IN: mount flags
@@ -562,6 +583,7 @@
 {
    return get_sb_nodev(fs_type, flags, rawData, FsOpReadSuper, mnt);
 }
+#endif
 #else
 /*
  *-----------------------------------------------------------------------------
diff -u -r vmblock-only/linux/module.c vmblock-only/linux/module.c
--- vmblock-only/linux/module.c	2011-03-26 04:03:06.000000000 +0100
+++ vmblock-only/linux/module.c	2011-05-14 20:01:54.000000000 +0200
@@ -78,7 +78,6 @@
 VMBlockInit(void)
 {
    int ret;
-
    ret = VMBlockInitControlOps();
    if (ret < 0) {
       goto error;
