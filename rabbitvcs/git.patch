--- rabbitvcs/vcs/git/gittyup/client.py.orig	2013-04-25 12:42:15.681328457 +0200
+++ rabbitvcs/vcs/git/gittyup/client.py	2013-04-25 12:42:52.714949203 +0200
@@ -1195,9 +1195,10 @@
         untracked_directories = []
         for line in stdout:
             components = re.match("^(Would remove)\s(.*?)$", line)
-            untracked_path = components.group(2)
-            if untracked_path[-1]=='/':
-                untracked_directories.append(untracked_path[:-1])
+            if components:
+                untracked_path = components.group(2)
+                if untracked_path[-1]=='/':
+                    untracked_directories.append(untracked_path[:-1])
 
         #Determine the ignored files and directories in Repo
         cmd = ["git", "clean", "-ndX", self.repo.path]
@@ -1208,15 +1209,16 @@
         ignored_directories=[]
         for line in stdout:
             components = re.match("^(Would remove)\s(.*?)$", line)
-            ignored_path=components.group(2)
-            if ignored_path[-1]=='/':
-                ignored_directories.append(ignored_path[:-1])
-                next
-            statuses.append(IgnoredStatus(ignored_path))
-            try:
-                del files_hash[ignored_path]
-            except Exception, e:
-                pass
+            if components:
+                ignored_path=components.group(2)
+                if ignored_path[-1]=='/':
+                    ignored_directories.append(ignored_path[:-1])
+                    next
+                statuses.append(IgnoredStatus(ignored_path))
+                try:
+                    del files_hash[ignored_path]
+                except Exception, e:
+                    pass
         for file,data in files_hash.items():
             ignore_file=False
             untracked_file=False
--- rabbitvcs/vcs/git/gittyup/command.py.orig	2013-04-25 16:43:11.929075168 +0200
+++ rabbitvcs/vcs/git/gittyup/command.py	2013-04-25 16:45:25.000058415 +0200
@@ -40,11 +40,14 @@
         return returner 
 
     def execute(self):
+        env = os.environ.copy()
+        env["LANG"] = "C";
         proc = subprocess.Popen(self.command,
                                 cwd=self.cwd,
                                 stdin=None,
                                 stderr=subprocess.STDOUT,
                                 stdout=subprocess.PIPE,
+                                env=env,
                                 close_fds=True,
                                 preexec_fn=os.setsid,
                                 universal_newlines=True)
