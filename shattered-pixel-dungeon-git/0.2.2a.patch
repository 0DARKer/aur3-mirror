diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/Badges.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/Badges.java
index ba71292..f94c898 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/Badges.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/Badges.java
@@ -711,7 +711,7 @@ public class Badges {
 		}
 	}
 
-    //TODO: Replace this badge, Delayed to 0.2.1
+    //TODO: Replace this badge, Delayed to 0.2.3, for real this time
 	public static void validateRingOfHaggler() {
 		if (!local.contains( Badge.RING_OF_HAGGLER )/* && new RingOfThorns().isKnown()*/) {
 			Badge badge = Badge.RING_OF_HAGGLER;
@@ -720,7 +720,7 @@ public class Badges {
 		}
 	}
 
-    //TODO: Replace this badge, Delayed to 0.2.1
+    //TODO: Replace this badge, Delayed to 0.2.3, for real this time
 	public static void validateRingOfThorns() {
 		if (!local.contains( Badge.RING_OF_THORNS )/* && new RingOfThorns().isKnown()*/) {
 			Badge badge = Badge.RING_OF_THORNS;
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
index 5cda109..0c334b2 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
@@ -93,7 +93,7 @@ public enum Rankings {
 	}
 	
 	private int score( boolean win ) {
-		return (Statistics.goldCollected + Dungeon.hero.lvl * Dungeon.depth * 100) * (win ? 2 : 1);
+		return (Statistics.goldCollected + Dungeon.hero.lvl * (win ? 26 : Dungeon.depth ) * 100) * (win ? 2 : 1);
 	}
 	
 	private static final String RECORDS	= "records";
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
index 1be0f7c..5909081 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/actors/hero/HeroClass.java
@@ -19,6 +19,7 @@ package com.shatteredpixel.shatteredpixeldungeon.actors.hero;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Badges;
+import com.shatteredpixel.shatteredpixeldungeon.Challenges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.items.TomeOfMastery;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.ClothArmor;
@@ -110,8 +111,11 @@ public enum HeroClass {
     }
 
     private static void initCommon( Hero hero ) {
-        (hero.belongings.armor = new ClothArmor()).identify();
-        new Food().identify().collect();
+        if (!Dungeon.isChallenged(Challenges.NO_ARMOR))
+            (hero.belongings.armor = new ClothArmor()).identify();
+
+        if (!Dungeon.isChallenged(Challenges.NO_FOOD))
+            new Food().identify().collect();
     }
 
     public Badges.Badge masteryBadge() {
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
index 859bd6b..bd38b43 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/Artifact.java
@@ -1,6 +1,5 @@
 package com.shatteredpixel.shatteredpixeldungeon.items.artifacts;
 
-import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
@@ -15,7 +14,7 @@ import java.util.ArrayList;
  * Created by Evan on 24/08/2014.
  */
 public class Artifact extends KindofMisc {
-//TODO: add artifact transform method and tie it into well of transformation, scheduled for 0.2.2
+//TODO: add artifact transform method and tie it into well of transformation, scheduled for 0.2.3
     {
         levelKnown = true;
     }
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
index 5b20e2b..a6fbf17 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
@@ -17,20 +17,6 @@
  */
 package com.shatteredpixel.shatteredpixeldungeon.levels;
 
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.HashSet;
-
-import com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit;
-import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
-import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfMight;
-import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth;
-import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfWeaponUpgrade;
-import com.shatteredpixel.shatteredpixeldungeon.plants.BlandfruitBush;
-import com.watabou.noosa.Scene;
-import com.watabou.noosa.audio.Sample;
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Challenges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
@@ -51,30 +37,44 @@ import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Bestiary;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.FlowParticle;
 import com.shatteredpixel.shatteredpixeldungeon.effects.particles.WindParticle;
+import com.shatteredpixel.shatteredpixeldungeon.items.Dewdrop;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
-import com.shatteredpixel.shatteredpixeldungeon.items.Gold;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.Stylus;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
+import com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.Food;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfHealing;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfMight;
 import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfStrength;
+import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfWealth;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfUpgrade;
+import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfWeaponUpgrade;
 import com.shatteredpixel.shatteredpixeldungeon.levels.features.Chasm;
 import com.shatteredpixel.shatteredpixeldungeon.levels.features.Door;
 import com.shatteredpixel.shatteredpixeldungeon.levels.features.HighGrass;
 import com.shatteredpixel.shatteredpixeldungeon.levels.painters.Painter;
 import com.shatteredpixel.shatteredpixeldungeon.levels.traps.*;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.ShadowCaster;
+import com.shatteredpixel.shatteredpixeldungeon.plants.BlandfruitBush;
 import com.shatteredpixel.shatteredpixeldungeon.plants.Plant;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
+import com.watabou.noosa.Scene;
+import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundlable;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.Random;
 import com.watabou.utils.SparseArray;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.HashSet;
+
 public abstract class Level implements Bundlable {
 	
 	public static enum Feeling {
@@ -446,16 +446,28 @@ public abstract class Level implements Bundlable {
 			itemsToSpawn.add( item );
 		}
 	}
-	
-	public Item itemToSpanAsPrize() {
-		if (Random.Int( itemsToSpawn.size() + 1 ) > 0) {
-			Item item = Random.element( itemsToSpawn );
-			itemsToSpawn.remove( item );
-			return item;
-		} else {
-			return null;
-		}
-	}
+
+    public Item findPrizeItem(){ return findPrizeItem(null); }
+
+    public Item findPrizeItem(Class<?extends Item> match){
+        if (itemsToSpawn.size() == 0)
+            return null;
+
+        if (match == null){
+            Item item = Random.element(itemsToSpawn);
+            itemsToSpawn.remove(item);
+            return item;
+        }
+
+        for (Item item : itemsToSpawn){
+            if (match.isInstance(item)){
+                itemsToSpawn.remove( item );
+                return item;
+            }
+        }
+
+        return null;
+    }
 	
 	private void buildFlagMaps() {
 		
@@ -555,14 +567,13 @@ public abstract class Level implements Bundlable {
 	
 	public Heap drop( Item item, int cell ) {
 
-        if (Dungeon.isChallenged( Challenges.NO_FOOD ) && item instanceof Food) {
-            item = new Gold( item.price() );
-        } else
-        if (Dungeon.isChallenged( Challenges.NO_ARMOR ) && item instanceof Armor) {
-            item = new Gold( item.price() );
-        } else
-        if (Dungeon.isChallenged( Challenges.NO_HEALING ) && item instanceof PotionOfHealing) {
-            item = new Gold( item.price() );
+        if ((Dungeon.isChallenged( Challenges.NO_FOOD ) && (item instanceof Food || item instanceof BlandfruitBush.Seed)) ||
+            (Dungeon.isChallenged( Challenges.NO_ARMOR ) && item instanceof Armor) ||
+            (Dungeon.isChallenged( Challenges.NO_HEALING ) && item instanceof PotionOfHealing) ||
+            (Dungeon.isChallenged( Challenges.NO_HERBALISM ) && (item instanceof Plant.Seed || item instanceof Dewdrop))) {
+
+            return new Heap();
+
         }
 
 		if ((map[cell] == Terrain.ALCHEMY) && (item instanceof BlandfruitBush.Seed || !(item instanceof Plant.Seed ||
@@ -611,6 +622,14 @@ public abstract class Level implements Bundlable {
 		if (plant != null) {
 			plant.wither();
 		}
+
+        if (map[pos] == Terrain.HIGH_GRASS ||
+                map[pos] == Terrain.EMPTY ||
+                map[pos] == Terrain.EMBERS ||
+                map[pos] == Terrain.EMPTY_DECO) {
+            set(pos, Terrain.GRASS);
+            GameScene.updateMap( pos );
+        }
 		
 		plant = seed.couch( pos );
 		plants.put( pos, plant );
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
index 234593d..7d2e4f2 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/RegularLevel.java
@@ -22,6 +22,7 @@ import java.util.HashSet;
 import java.util.List;
 
 import com.shatteredpixel.shatteredpixeldungeon.Bones;
+import com.shatteredpixel.shatteredpixeldungeon.Challenges;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
@@ -138,6 +139,14 @@ public abstract class RegularLevel extends Level {
 		if (Dungeon.bossLevel( Dungeon.depth + 1 )) {
 			specials.remove( Room.Type.WEAK_FLOOR );
 		}
+        if (Dungeon.isChallenged( Challenges.NO_ARMOR )){
+            //no sense in giving an armor reward room on a run with no armor.
+            specials.remove( Room.Type.CRYPT );
+        }
+        if (Dungeon.isChallenged( Challenges.NO_HERBALISM )){
+            //sorry warden, no lucky sungrass or blandfruit seeds for you!
+            specials.remove( Room.Type.GARDEN );
+        }
 		assignRoomType();
 		
 		paint();
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/GardenPainter.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/GardenPainter.java
index 47445f2..239188b 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/GardenPainter.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/GardenPainter.java
@@ -17,12 +17,14 @@
  */
 package com.shatteredpixel.shatteredpixeldungeon.levels.painters;
 
+import com.shatteredpixel.shatteredpixeldungeon.Challenges;
+import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Foliage;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Room;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
-import com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass;
 import com.shatteredpixel.shatteredpixeldungeon.plants.BlandfruitBush;
+import com.shatteredpixel.shatteredpixeldungeon.plants.Sungrass;
 import com.watabou.utils.Random;
 
 public class GardenPainter extends Painter {
@@ -34,17 +36,20 @@ public class GardenPainter extends Painter {
 		fill( level, room, 2, Terrain.GRASS );
 		
 		room.entrance().set( Room.Door.Type.REGULAR );
-		
-		int bushes = Random.Int( 3 );
-	    if (bushes == 0) {
-            level.plant(new Sungrass.Seed(), room.random());
-        } else if (bushes == 1) {
-            level.plant(new BlandfruitBush.Seed(), room.random() );
-		} else {
-            bushes = Random.Int( 5 );
-            if (bushes == 0){
+
+        if (Dungeon.isChallenged(Challenges.NO_FOOD)) {
+            if (Random.Int(2) == 0){
+                level.plant(new Sungrass.Seed(), room.random());
+            }
+        } else {
+            int bushes = Random.Int(3);
+            if (bushes == 0) {
+                level.plant(new Sungrass.Seed(), room.random());
+            } else if (bushes == 1) {
+                level.plant(new BlandfruitBush.Seed(), room.random());
+            } else if (Random.Int(5) == 0) {
                 level.plant(new Sungrass.Seed(), room.random());
-                level.plant(new BlandfruitBush.Seed(), room.random() );
+                level.plant(new BlandfruitBush.Seed(), room.random());
             }
         }
 		
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/LaboratoryPainter.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/LaboratoryPainter.java
index 51d1f19..e9d5c9e 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/LaboratoryPainter.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/LaboratoryPainter.java
@@ -70,14 +70,11 @@ public class LaboratoryPainter extends Painter {
 	}
 	
 	private static Item prize( Level level ) {
-		
-		Item prize = level.itemToSpanAsPrize();
-		if (prize instanceof Potion) {
-			return prize;
-		} else if (prize != null) {
-			level.addItemToSpawn( prize );
-		}
-		
-		return Generator.random( Generator.Category.POTION );
+
+        Item prize = level.findPrizeItem( Potion.class );
+        if (prize == null)
+            prize = Generator.random( Generator.Category.POTION );
+
+        return prize;
 	}
 }
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/LibraryPainter.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/LibraryPainter.java
index 5ccedba..6df5ebc 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/LibraryPainter.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/LibraryPainter.java
@@ -78,13 +78,10 @@ public class LibraryPainter extends Painter {
 	
 	private static Item prize( Level level ) {
 		
-		Item prize = level.itemToSpanAsPrize();
-		if (prize instanceof Scroll) {
-			return prize;
-		} else if (prize != null) {
-			level.addItemToSpawn( prize );
-		}
+		Item prize = level.findPrizeItem( Scroll.class );
+		if (prize == null)
+            prize = Generator.random( Generator.Category.SCROLL );
 		
-		return Generator.random( Generator.Category.SCROLL );
+		return prize;
 	}
 }
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/PitPainter.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/PitPainter.java
index 86cf268..1224432 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/PitPainter.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/PitPainter.java
@@ -76,10 +76,11 @@ public class PitPainter extends Painter {
 	
 	private static Item prize( Level level ) {
 		
-		Item prize = level.itemToSpanAsPrize();
-		if (prize != null) {
-			return prize;
-		}
+		if (Random.Int(2) != 0){
+            Item prize = level.findPrizeItem();
+            if (prize != null)
+                return prize;
+        }
 		
 		return Generator.random( Random.oneOf( 
 			Generator.Category.POTION, 
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/PoolPainter.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/PoolPainter.java
index 00f7929..b54c4c9 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/PoolPainter.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/PoolPainter.java
@@ -82,27 +82,30 @@ public class PoolPainter extends Painter {
 	}
 	
 	private static Item prize( Level level ) {
-		
-		Item prize = level.itemToSpanAsPrize();
-		if (prize != null) {
-			return prize;
-		}
-		
-		prize = Generator.random( Random.oneOf(  
-			Generator.Category.WEAPON, 
-			Generator.Category.ARMOR 
-		) );
 
-		for (int i=0; i < 4; i++) {
-			Item another = Generator.random( Random.oneOf(  
-				Generator.Category.WEAPON, 
-				Generator.Category.ARMOR 
-			) );
-			if (another.level > prize.level) {
-				prize = another;
-			}
-		}
-		
-		return prize;
+        Item prize;
+
+        if (Random.Int(3) != 0){
+            prize = level.findPrizeItem();
+            if (prize != null)
+                return prize;
+        }
+
+        prize = Generator.random( Random.oneOf(
+                Generator.Category.WEAPON,
+                Generator.Category.ARMOR
+        ) );
+
+        for (int i=0; i < 4; i++) {
+            Item another = Generator.random( Random.oneOf(
+                    Generator.Category.WEAPON,
+                    Generator.Category.ARMOR
+            ) );
+            if (another.level > prize.level) {
+                prize = another;
+            }
+        }
+
+        return prize;
 	}
 }
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/StandardPainter.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/StandardPainter.java
index 709578d..271c17d 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/StandardPainter.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/StandardPainter.java
@@ -21,6 +21,8 @@ import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Gold;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
+import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.PotionOfLiquidFlame;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Room;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Terrain;
@@ -143,25 +145,42 @@ public class StandardPainter extends Painter {
 			}
 		}
 	}
-	
+
+    //TODO: this is almost a special room type now, consider moving this into its own painter if/when you address room gen significantly.
 	private static void paintStudy( Level level, Room room ) {
 		fill( level, room.left + 1, room.top + 1, room.width() - 1, room.height() - 1 , Terrain.BOOKSHELF );
 		fill( level, room.left + 2, room.top + 2, room.width() - 3, room.height() - 3 , Terrain.EMPTY_SP );
 		
-		for (Point door : room.connected.values()) {
-			if (door.x == room.left) {
-				set( level, door.x + 1, door.y, Terrain.EMPTY );
-			} else if (door.x == room.right) {
-				set( level, door.x - 1, door.y, Terrain.EMPTY );
-			} else if (door.y == room.top) {
-				set( level, door.x, door.y + 1, Terrain.EMPTY );
-			} else if (door.y == room.bottom) {
-				set( level, door.x , door.y - 1, Terrain.EMPTY );
-			}	
+		for (Room.Door door : room.connected.values()) {
+            if (door.type == Room.Door.Type.LOCKED){
+                //sneaky sneaky...
+                level.addItemToSpawn(new PotionOfLiquidFlame());
+            } else {
+                if (door.x == room.left) {
+                    set(level, door.x + 1, door.y, Terrain.EMPTY);
+                } else if (door.x == room.right) {
+                    set(level, door.x - 1, door.y, Terrain.EMPTY);
+                } else if (door.y == room.top) {
+                    set(level, door.x, door.y + 1, Terrain.EMPTY);
+                } else if (door.y == room.bottom) {
+                    set(level, door.x, door.y - 1, Terrain.EMPTY);
+                }
+            }
 		}
 		
 		set( level, room.center(), Terrain.PEDESTAL );
-	}
+        if (Random.Int(2) != 0){
+            Item prize = level.findPrizeItem();
+            if (prize != null) {
+                level.drop(prize, (room.center().x + room.center().y * level.WIDTH));
+                return;
+            }
+        }
+
+        level.drop(Generator.random( Random.oneOf(
+                Generator.Category.POTION,
+                Generator.Category.SCROLL)), (room.center().x + room.center().y * level.WIDTH));
+    }
 	
 	private static void paintBridge( Level level, Room room ) {
 		
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/StoragePainter.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/StoragePainter.java
index 034c08c..00edbb3 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/StoragePainter.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/StoragePainter.java
@@ -48,11 +48,12 @@ public class StoragePainter extends Painter {
 	}
 	
 	private static Item prize( Level level ) {
-		
-		Item prize = level.itemToSpanAsPrize();
-		if (prize != null) {
-			return prize;
-		}
+
+        if (Random.Int(2) != 0){
+            Item prize = level.findPrizeItem();
+            if (prize != null)
+                return prize;
+        }
 		
 		return Generator.random( Random.oneOf( 
 			Generator.Category.POTION, 
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/TrapsPainter.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/TrapsPainter.java
index 2d013dd..54da5fd 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/TrapsPainter.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/levels/painters/TrapsPainter.java
@@ -78,11 +78,14 @@ public class TrapsPainter extends Painter {
 	}
 	
 	private static Item prize( Level level ) {
-		
-		Item prize = level.itemToSpanAsPrize();
-		if (prize != null) {
-			return prize;
-		}
+
+        Item prize;
+
+        if (Random.Int(4) != 0){
+            prize = level.findPrizeItem();
+            if (prize != null)
+                return prize;
+        }
 		
 		prize = Generator.random( Random.oneOf(  
 			Generator.Category.WEAPON, 
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
index d347857..5a89c40 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/scenes/InterlevelScene.java
@@ -17,24 +17,24 @@
  */
 package com.shatteredpixel.shatteredpixeldungeon.scenes;
 
-import java.io.FileNotFoundException;
-import java.util.ArrayList;
-
-import com.shatteredpixel.shatteredpixeldungeon.items.Item;
-import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
-import com.watabou.noosa.BitmapText;
-import com.watabou.noosa.Camera;
-import com.watabou.noosa.Game;
-import com.watabou.noosa.audio.Music;
-import com.watabou.noosa.audio.Sample;
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.Statistics;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
+import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.items.potions.Potion;
 import com.shatteredpixel.shatteredpixeldungeon.levels.Level;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndError;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndStory;
+import com.watabou.noosa.BitmapText;
+import com.watabou.noosa.Camera;
+import com.watabou.noosa.Game;
+import com.watabou.noosa.audio.Music;
+import com.watabou.noosa.audio.Sample;
+
+import java.io.FileNotFoundException;
+import java.util.ArrayList;
 
 public class InterlevelScene extends PixelScene {
 
@@ -252,13 +252,6 @@ public class InterlevelScene extends PixelScene {
         Level level;
         ArrayList<Item> fallingItems = new ArrayList<Item>();
 
-        if (Dungeon.depth > 0) {
-            level = Dungeon.level;
-
-            fallingItems = level.fallingItems;
-            level.fallingItems = new ArrayList<Item>();
-        }
-
         Actor.fixTime();
 		if (Dungeon.hero == null) {
 			Dungeon.init();
@@ -267,6 +260,11 @@ public class InterlevelScene extends PixelScene {
 				noStory = false;
 			}
 		} else {
+            level = Dungeon.level;
+
+            fallingItems = level.fallingItems;
+            level.fallingItems = new ArrayList<Item>();
+
 			Dungeon.saveLevel();
 		}
 
diff --git a/core/src/com/shatteredpixel/shatteredpixeldungeon/windows/WndChanges.java b/core/src/com/shatteredpixel/shatteredpixeldungeon/windows/WndChanges.java
index 6fc37e0..59b5552 100644
--- a/core/src/com/shatteredpixel/shatteredpixeldungeon/windows/WndChanges.java
+++ b/core/src/com/shatteredpixel/shatteredpixeldungeon/windows/WndChanges.java
@@ -10,7 +10,7 @@ import com.watabou.noosa.ui.Component;
 /**
  * Created by debenhame on 14/10/2014.
  */
-//TODO: this is completely broken at the moment. Better to get the patch out now, get this done for next update!
+//TODO: this is completely broken at the moment. Implement soon if it's needed!
 public class WndChanges extends Window {
 
     private static final int WIDTH	= 112;
