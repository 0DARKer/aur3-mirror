# Maintainer:  Jordan Johnston <triplesquarednine@gmail.com>
# Contributor: Joakim Hernberg <jbh@alchemy.lu>
# Contributor: Ray Rashif <schiv@archlinux.org>
# Contributor: timbosa <tinny_tim@dodo.com.au>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>

pkgbase=linux-l-pa
pkgname=('linux-l-pa' 'linux-l-pa-headers' 'linux-l-pa-docs') # Build realtime patched -l-pa kernel
#pkgname=linux-custom       # Build kernel with a different name
_kernelname=${pkgname#linux}
_basekernel=3.14
_releasever=4
_rtpatchver=rt5
pkgrel=3
_pkgver=${_basekernel}.${_releasever}
pkgver=${_basekernel}.${_releasever}_${_rtpatchver}
arch=('i686' 'x86_64')
url="http://rt.wiki.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl' 'kmod' 'inetutils' 'bc')
_bfqver="BFQ-v7r4"
_bfqpath="https://pf.natalenko.name/mirrors/bfq/3.14.0-v7r4/"
options=('!strip')
source=("https://www.kernel.org/pub/linux/kernel/v3.x/linux-${_basekernel}.tar.xz"
        "https://www.kernel.org/pub/linux/kernel/v3.x/patch-${_pkgver}.xz"
        # <[--Downstream Archlinux bugfix / Patches--]>
        '0001-Bluetooth-allocate-static-minor-for-vhci.patch'
        '0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch'
        '0003-module-remove-MODULE_GENERIC_TABLE.patch'
        '0004-fs-Don-t-return-0-from-get_anon_bdev.patch'
        '0005-Revert-Bluetooth-Enable-autosuspend-for-Intel-Blueto.patch'
        '0006-genksyms-fix-typeof-handling.patch'
        '0007-Fix-the-use-of-code32_start-in-the-EFI-boot-stub.patch'
        '0008-futex-avoid-race-between-requeue-and-wake.patch'
        '0009-iwlwifi-mvm-rs-fix-search-cycle-rules.patch'
        '0010-iwlwifi-mvm-delay-enabling-smart-FIFO-until-after-be.patch'
        '0011-kernfs-fix-removed-error-check.patch'
        '0012-fix-saa7134.patch'
        '0013-net-Start-with-correct-mac_len-in-skb_network_protocol.patch'
        '0015-fix-xsdt-validation.patch'
        'change-default-console-loglevel.patch'
        # <[--Linux-l-pa kernel config files--]>
        'config' 'config.x86_64'
        # <[--standard config files for mkinitcpio ramdisk--]>
        "${pkgname}.preset"
        # <[--Make criu not require expert in kconfig--]>
        'criu-no-expert.patch'
        # <[UKSM support--]>
        'uksm-0.1.2.2-for-v3.14.test.patch'
        # <[--Compiler Optimization patches--]>
        'http://repo-ck.com/source/gcc_patch/enable_additional_cpu_optimizations_for_gcc_v4.9+.patch.gz'
        'custom-flags-kernel.patch'
        # <[--Increase mm vmMax_readahed--]>
        'mm_vmMax_readahead.patch'
        # <[--BFQ - I/O scheduler--] >
        "${_bfqpath}/0001-block-cgroups-kconfig-build-bits-for-${_bfqver}-3.14.patch"
        "${_bfqpath}/0002-block-introduce-the-${_bfqver}-I-O-sched-for-3.14.patch"
        "${_bfqpath}/0003-block-bfq-add-Early-Queue-Merge-EQM-to-${_bfqver}-for-3.14.0.patch"
        # <[--Realtime Linux Patches--]>
        #"https://www.kernel.org/pub/linux/kernel/projects/rt/${_basekernel}/patch-3.14.3-rt5.patch.xz"
        'patch-3.14.4-rt5.patch.xz'
        # <[--Out-of-tree RT patches--]>
        'sched-further-limit-idle_balance.patch'
        'softirq-resurrect-threads.patch'
        'revert_timers-dont_raise_softirq_unconditionally_and_fixes.patch'
        'genirq-Sanitize_spurious_interrupt_detection_of_threaded_irqs.patch'
        'fix-race-in-PRT-wait-for-completion-simple-wait-code_Nvidia-RT.patch'
        'drivers-serial-call-flush_to_ldisc-when-the-irq-is-t.patch'
        # <[--Lower posix-cpu-timer kthreads to 98--]>
        'posix-cpu-timers_kthreads98.patch'
        # <[--Rtmutex: handle when top lock owner changes: puesdo-fix for deadlock code, until fixed upstream--]> 
        'rtmutex-Handle_when_top_lock_owner_changes.patch'
        # <[--ACPI/PM code from 3.15-rt6--]>
        'backport_pm_acpi_4_3.15-rc6.patch'
)
        
md5sums=('b621207b3f6ecbb67db18b13258f8ea8'
         '116f27cf17c3522716b6678b17516067'
         'f6de6aac4e2a6128bc17f9b5a5f906c1'
         '607d8cad5cd5e8b868f623c425b167ff'
         'e9781a275f8253b1ad0d4dc2bb5a8a9c'
         '3fc141a7f0698db490bab855fe34e7b6'
         '9878d06d81744f746a412c3a26469fe8'
         '35c6b27ec55f2e19c3a9caee81d72023'
         '8737fb336cee5269e010038aa7cf9710'
         '49f5127d836575ba1728c87252dc84b7'
         '756ce84d9dee100147cf01de7a28d227'
         'c3c7e0c35973ce2ab63ed3ba75a2090e'
         'b3f98eba6322463ed6644784c56893be'
         '4f547d79fa1b2bb855dc2996be2a515e'
         '21d25aef69f9da33c6087b7ffd97783e'
         '278417ab07b6f5fe8e3e0ed656f35f3e'
         '2636d8375a4417e6beedefcabed09186'
         'c0dafd05b5d3b335abcb5d6b87c37692'
         '002fa099cbe573cfa213723ae52bc6e7'
         'eb14dcfd80c00852ef81ded6e826826a'
         'd50c1ac47394e9aec637002ef3392bd1'
         '00140bc61f814a99f53b4e5e4029e23e'
         'fa3a815f1fc38bffbd4f3080bddbfa3f'
         '21e1d344b7762f53d829564f898e7d5e'
         'd4844fa69f652d79377a5cd32a9e6cd5'
         '8169a4332404c0c5ba791302876ae9e8'
         '27b1e12892ca47ab5a3486a34d72d151'
         '27ec38dccb3f59f99bf489dfdda19132'
         '55084e1e62178aeb3aebb24c33c1d28a'
         '6912549e438c077b00aa786794c94853'
         '06ca6126432d06a363b96a462bb4d11c'
         '0c27345e34e944d4bc1c512f14742209'
         '04609106f252ea57ca2d971d99cac0e8'
         '7ab8c2c50d9fbccc21b809ecec15ee9d'
         '3ea48e6549915889b01b844b4bbef583'
         '1318939c3c6de883c1983edde4e8a489'
         'bdc01c528128f0da61704aa09ecef768'
         'aa9b21c8bf95a763fcf1c74c012f129d')

prepare() {
  cd "${srcdir}/linux-${_basekernel}"

  # add upstream patch
  msg "apply patch-${_pkgver}" 
  patch -p1 -i "${srcdir}/patch-${_pkgver}"

  # allow criu without expert option set (patch from fedora)
  msg "applying criu-no-expert.patch"
  patch -Np1 -i "${srcdir}/criu-no-expert.patch"

  msg "  ..    SUCCESS :)"

  # add latest fixes from stable queue, if needed
  # http://git.kernel.org/?p=linux/kernel/git/stable/stable-queue.git

  # set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
  # remove this when a Kconfig knob is made available by upstream
  # (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
  msg "applying change-default-console-loglevel.patch"
  patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"

  msg "  ..    SUCCESS :)"

####### 3.14 fixes (Archlinux/upstream patches) 

  # Fix vhci warning in kmod (to restore every kernel maintainer's sanity)
  msg "applying 0001-Bluetooth-allocate-static-minor-for-vhci.patch"
  patch -p1 -i "${srcdir}/0001-Bluetooth-allocate-static-minor-for-vhci.patch"

  # Fix atkbd aliases
  msg "applying 0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch"
  patch -p1 -i "${srcdir}/0002-module-allow-multiple-calls-to-MODULE_DEVICE_TABLE-p.patch"
  msg "applying 0003-module-remove-MODULE_GENERIC_TABLE.patch"
  patch -p1 -i "${srcdir}/0003-module-remove-MODULE_GENERIC_TABLE.patch"

  # Fix various bugs caused by rootfs having FSID 0
  # See http://www.spinics.net/lists/kernel/msg1716924.html
  msg "applying 0004-fs-Don-t-return-0-from-get_anon_bdev.patch"
  patch -p1 -i "${srcdir}/0004-fs-Don-t-return-0-from-get_anon_bdev.patch"

  # Disable usb autosuspend for intel btusb
  # See http://www.spinics.net/lists/kernel/msg1716461.html
  # Until a solution is found, make sure the driver leaves autosuspend alone
  msg "applying 0005-Revert-Bluetooth-Enable-autosuspend-for-Intel-Blueto.patch"
  patch -p1 -i "${srcdir}/0005-Revert-Bluetooth-Enable-autosuspend-for-Intel-Blueto.patch"

  # Fix generation of symbol CRCs
  # http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/commit/?id=dc53324060f324e8af6867f57bf4891c13c6ef18
  msg "applying 0006-genksyms-fix-typeof-handling.patch"
  patch -p1 -i "${srcdir}/0006-genksyms-fix-typeof-handling.patch"

  # https://git.kernel.org/cgit/linux/kernel/git/iwlwifi/iwlwifi-fixes.git/commit/?id=12f853a89e29f50b17698e17e73c328a35f1498d
  # FS#39815
  msg "applying 0010-iwlwifi-mvm-delay-enabling-smart-FIFO-until-after-be.patch"
  patch -p1 -i "${srcdir}/0010-iwlwifi-mvm-delay-enabling-smart-FIFO-until-after-be.patch"
  
  # fix Xorg crash with i810 chipset due to wrong removed error check
  # References: http://lkml.kernel.org/g/533D01BD.1010200@googlemail.com
  msg "applying 0011-kernfs-fix-removed-error-check.patch"
  patch -Np1 -i "${srcdir}/0011-kernfs-fix-removed-error-check.patch"

  # fix saa7134 video
  # https://bugs.archlinux.org/task/39904
  # https://bugzilla.kernel.org/show_bug.cgi?id=73361
  msg "applying 0012-fix-saa7134.patch"
  patch -Np1 -i "${srcdir}/0012-fix-saa7134.patch"

  # fix tun/openvpn performance
  # https://bugs.archlinux.org/task/40089
  # https://bugzilla.kernel.org/show_bug.cgi?id=74051
  msg "applying 0013-net-Start-with-correct-mac_len-in-skb_network_protocol.patch"
  patch -Np1 -i "${srcdir}/0013-net-Start-with-correct-mac_len-in-skb_network_protocol.patch"

  # fix xsdt validation bug
  # https://bugs.archlinux.org/task/39811
  # https://bugzilla.kernel.org/show_bug.cgi?id=73911
  msg "applying 0015-fix-xsdt-validation.patch"
  patch -Np1 -i "${srcdir}/0015-fix-xsdt-validation.patch"

####### Backport PM & ACPI from 3.15-rc6 [to fix broken acpi on 3.14]

  # PM/ACPI is screwy with linux-3.14 and some hardware. On my one machine I could not even see /sys/devices/system/cpu*/[and sub-folders]
  # and only the 'default' selected at compile-time cpu-governor will work [big WTF?]. Up until 3.14.4, if AMD 1CE support was enabled,
  # then my cpufreq would be MAX [and unchangeable. it works now though]... So, I have backported PM/acpi changes from 3.15-rc6 to 3.14
  # Userspace cpu governor is also default, which allows you to adjust cpu frequencies with cpupower.
 
  msg "applying backport_pm_acpi_4_3.15-rc6.patch"
  patch -p1 -i "${srcdir}/backport_pm_acpi_4_3.15-rc6.patch"

  msg "  ..    SUCCESS :)"

####### PREEMPT_RT_FULL patchset [unified patch]

  # add realtime/full preemption patch

  msg "applying patch-${_pkgver}-${_rtpatchver}.patch"
  patch -p1 -i "${srcdir}/patch-3.14.4-rt5.patch"

  msg "  ..    SUCCESS :)"

  # revert timers-dont_raise_softirq_unconditionally and related fixes, as these commits
  # cause serious regressions; some AMD [and other platforms] wont' boot... Reverting these 
  # commits appears to stabilize the rt timer code.  

  msg "applying revert_timers-dont_raise_softirq_unconditionally_and_fixes.patch"
  patch -Np1 -i "${srcdir}/revert_timers-dont_raise_softirq_unconditionally_and_fixes.patch"

  msg "  ..    SUCCESS :)"

####### Drop posix-cpu-timers rtprio to 98

  # This patch lowers the posix-cpu-timers to rtprio 98, basically to allow more room 
  # for a hypothetical high priority thread[s]. I am enabling this patch, in part, for 
  # the 'threadsirq' patch/feature [below]..

  msg "applying posix-cpu-timers_kthreads98.patch"
  patch -p1 -i "${srcdir}/posix-cpu-timers_kthreads98.patch"

  msg "  ..    SUCCESS :)"

####### threadsirqs: resurrecting softirq threads on linux-rt 3.14

  # enable/disable splitting of sirqs using kernel commandline 'threadsirqs', which allows the user
  # to prioritize them individually, allowing granular control.  imo, It makes sense to make this 
  # functionality available to rt users [note: really intended for machines with more cores / and certain
  # workloads / applications.  

  msg "applying softirq-resurrect-threads.patch"
  patch -p1 -i "${srcdir}/softirq-resurrect-threads.patch"

  msg "  ..    SUCCESS :)"

####### sched: further limit idle_balance [optimization/hack]

  # limit/avoid playing load balancer, kthreads & rt tasks have better things to do
  # than banging on locks... to paraphrase Mike Galbraith. 

  msg "applying sched-further-limit-idle_balance.patch"
  patch -p1 -i "${srcdir}/sched-further-limit-idle_balance.patch"

  msg "  ..    SUCCESS :)"

########## Backport from tip: genirq-Sanitize_spurious_interrupt_detection_of_threaded_irqs.patch

  # this patch is already in linux-tip - I've backported it, since it fixes spurious interrupt
  # detection of threaded irqs. [ie: this affects shared interrupts / as devices sharing  an interrupt line
  # are all spurious interrupt sources with respect to one another. thus, the detection code really needs to work
  # properly. Especially on systems, where sharing an interrupt is unavoidable. [laptops, poor IRQ layouts, etc]

  msg "applying genirq-Sanitize_spurious_interrupt_detection_of_threaded_irqs.patch"
  patch -p1 -i "${srcdir}/genirq-Sanitize_spurious_interrupt_detection_of_threaded_irqs.patch"

  msg "  ..    SUCCESS :)"

########## Taken from rt list: fix-race-in-PRT-wait-for-completion-simple-wait-code_Nvidia-RT.patch

  # this patch is a fixup/hack to the simple wait completion code on PREEMPT_RT_FULL. This was discovered by using nvida on -rt;
  # nvidia uses the wait completion code with their idea of an internally used semaphore in the binary driver.
  # A wait_for_completion() waiter task can be awoken by a task calling complete(), but fail to consume the 'done' 
  # completion resource if it looses a race with another task calling wait_for_completion() just as it is waking up.
  # So this is avoided by doing a check and adding the task to the wait list, before waiting again in schedule_timeout().
  #
  # this patch _should_ fix the problems that my nvidia_rt-mutexes.patch works around [since i swap out the semasphore code path]
  #... we will see, in time, if this works for my nvidia [blob] systems or not ;)

  msg "applying fix-race-in-PRT-wait-for-completion-simple-wait-code_Nvidia-RT.patch"
  patch -p1 -i "${srcdir}/fix-race-in-PRT-wait-for-completion-simple-wait-code_Nvidia-RT.patch"

  msg "  ..    SUCCESS :)"

######## Pulled from Debian rt patchset: drivers-serial-call-flush_to_ldisc-when-the-irq-is-t.patch

  # Ensure that flush_to_ldisc is called when the irq is threaded.

  msg "applying drivers-serial-call-flush_to_ldisc-when-the-irq-is-t.patch"
  patch -p1 -i "${srcdir}/drivers-serial-call-flush_to_ldisc-when-the-irq-is-t.patch"

  msg "  ..    SUCCESS :)"

######## Taken from rt list: rtmutex-Handle_when_top_lock_owner_changes.patch

  # It looks like this should be fixed in linux-tip, at some point - as i have seen the [patch] series that was rfc, but i am
  # not sure whether or not they are being backported. So use this hack instead [for now], since it will workaround
  # the deadlock detection quirkyness. [actual fix looks much more substantial].

  msg "applying rtmutex-Handle_when_top_lock_owner_changes.patch"
  patch -p1 -i "${srcdir}/rtmutex-Handle_when_top_lock_owner_changes.patch"

  msg "  ..    SUCCESS :)"

######## Zen kernel optimization/flags patch

  # add Custom Flag patch (Zen)
  msg "applying Custom flags patch"
  patch -Np1 -i "${srcdir}/custom-flags-kernel.patch" 

  msg "  ..    SUCCESS :)"

######## enable cpu optimizations (Graysky @ github)

  msg "applying enable_additional_cpu_optimizations_for_gcc_v4.9+.patch"
  patch -Np1 -i "${srcdir}/enable_additional_cpu_optimizations_for_gcc_v4.9+.patch"

  msg "  ..    SUCCESS :)"

######## bfq io scheduler support

  msg "Patching source with BFQ patches"
  for p in $(ls ${srcdir}/000{1,2,3}-block*.patch); do
      patch -Np1 -i "$p"
  done

######## UKSM support [in-kernel memory deduplication]

  msg "Patching with UKSM"
  cp "${srcdir}/uksm-0.1.2.2-for-v3.14.test.patch" ./
  patch -Np1 -i ./uksm-0.1.2.2-for-v3.14.test.patch

  msg "  ..    SUCCESS :)"

######## add mm_vmMax_readahead.patch / change max_readahead of the linux kernel.

  msg "applying mm_vmMax_readahead.patch"
  patch -Np1 -i "${srcdir}/mm_vmMax_readahead.patch"

  msg "  ..    SUCCESS :)"

  msg "All patches have successfully been applied"

  if [ "${CARCH}" = "x86_64" ]; then
    cat "${srcdir}/config.x86_64" > ./.config
  else
    cat "${srcdir}/config" > ./.config
  fi

#  if [ "${_kernelname}" != "" ]; then
#    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
#    sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
#  fi

  ### UKSM to be enabled
  sed -i -e s'/CONFIG_KSM=y/CONFIG_KSM=y\nCONFIG_UKSM=y/' ./.config

  ### BFQ to be compiled in but not enabled
  sed -i -e s'/CONFIG_CFQ_GROUP_IOSCHED=y/CONFIG_CFQ_GROUP_IOSCHED=y\nCONFIG_IOSCHED_BFQ=y\nCONFIG_CGROUP_BFQIO=y/' \
      -i -e s'/CONFIG_DEFAULT_CFQ=y/CONFIG_DEFAULT_CFQ=y\n# CONFIG_DEFAULT_BFQ is not set/' ./.config

  ### Optionally enable BFQ as the default io scheduler
#  if [ -n "$_BFQ_enable_" ]; 	then
#      sed -i -e '/CONFIG_DEFAULT_IOSCHED/ s,cfq,bfq,' \
#      -i -e s'/CONFIG_DEFAULT_CFQ=y/# CONFIG_DEFAULT_CFQ is not set\nCONFIG_DEFAULT_BFQ=y/' ./.config
#  fi

  # set extraversion to pkgrel
  #sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

  # set localversion to pkgrel-l-pa
  sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"-${pkgrel}${_kernelname}\"|g" ./.config

  # don't run depmod on 'make install'. We'll do this ourselves in packaging
  sed -i '2iexit 0' scripts/depmod.sh

  # get kernel version
  make prepare

  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config

  # rewrite configuration
  yes "" | make config >/dev/null

  # save configuration for later reuse
  if [ "${CARCH}" = "x86_64" ]; then
    cat .config > "${startdir}/config.x86_64.last"
  else
    cat .config > "${startdir}/config.last"
  fi

  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"; return 1
  ####################
}

build() {
  cd "${srcdir}/linux-${_basekernel}"

  # build!
  make ${MAKEFLAGS} LOCALVERSION= bzImage modules
}

package_linux-l-pa() {
    pkgdesc="The Linux Kernel and modules (with realtime preemption) + L_Pa options"
    #groups=('base')
    depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
    optdepends=('crda: to set the correct wireless channels of your country')
    provides=('linux-l-pa')
    conflicts=('linux-l-pa')
    replaces=('linux-l-pa')
    backup=("etc/mkinitcpio.d/${pkgname}.preset")
    install=${pkgname}.install

  cd "${srcdir}/linux-${_basekernel}"

  KARCH=x86

  # get kernel version
  _kernver="$(make LOCALVERSION= kernelrelease)"
#  _basekernel=${_kernver%%-*}
#  _basekernel=${_basekernel%.*}

  mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot}
  make LOCALVERSION= INSTALL_MOD_PATH="${pkgdir}" modules_install
  cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgname}"

  # add vmlinux
  install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

  # set correct depmod command for install
  cp -f "${startdir}/${install}" "${startdir}/${install}.pkg"
  true && install=${install}.pkg
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/" \
    -i "${startdir}/${install}"

  # install mkinitcpio preset file for kernel
  install -D -m644 "${srcdir}/${pkgname}.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"
  sed \
    -e "1s|'linux.*'|'${pkgname}'|" \
    -e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${pkgname}\"|" \
    -e "s|default_image=.*|default_image=\"/boot/initramfs-${pkgname}.img\"|" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${pkgname}-fallback.img\"|" \
    -i "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

  # remove build and source links
  rm -f "${pkgdir}"/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf "${pkgdir}/lib/firmware"
  # gzip -9 all modules to save 100MB of space
  find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
  # make room for external modules
  ln -s "../extramodules-${_basekernel}${_kernelname:-l-pa}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
  # add real version for building modules and running depmod from post_install/upgrade
  mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:-l-pa}"
  echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:-l-pa}/version"

  # Now we call depmod...
  depmod -b "$pkgdir" -F System.map "$_kernver"

  # move module tree /lib -> /usr/lib
  mv "$pkgdir/lib" "$pkgdir/usr"
}

package_linux-l-pa-headers() {
    pkgdesc="Header files and scripts for building modules for linux kernel (with realtime preemption) + L_Pa options"
    #provides=('kernel26-headers')
    #conflicts=('kernel26-headers')
    #replaces=('kernel26-headers')

  install -dm755 "${pkgdir}/usr/lib/modules/${_kernver}"

  cd "${pkgdir}/usr/lib/modules/${_kernver}"
  ln -sf ../../../src/linux-${_kernver} build

  cd "${srcdir}/linux-${_basekernel}"
  install -D -m644 Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Makefile"
  install -D -m644 kernel/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile"
  install -D -m644 .config \
    "${pkgdir}/usr/src/linux-${_kernver}/.config"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include"

  for i in acpi asm-generic config crypto drm generated keys linux math-emu \
    media net pcmcia scsi sound trace uapi video xen; do
    cp -a include/${i} "${pkgdir}/usr/src/linux-${_kernver}/include/"
  done

  # copy arch includes for external modules
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/x86"
  cp -a arch/x86/include "${pkgdir}/usr/src/linux-${_kernver}/arch/x86/"

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers "${pkgdir}/usr/src/linux-${_kernver}"
  cp -a scripts "${pkgdir}/usr/src/linux-${_kernver}"

  # fix permissions on scripts dir
  chmod og-w -R "${pkgdir}/usr/src/linux-${_kernver}/scripts"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel"

  cp arch/${KARCH}/Makefile "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"

  if [ "${CARCH}" = "i686" ]; then
    cp arch/${KARCH}/Makefile_32.cpu "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/"
  fi

  cp arch/${KARCH}/kernel/asm-offsets.s "${pkgdir}/usr/src/linux-${_kernver}/arch/${KARCH}/kernel/"

  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"

  # add dm headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"
  cp drivers/md/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/md"

  # add inotify.h
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/linux"
  cp include/linux/inotify.h "${pkgdir}/usr/src/linux-${_kernver}/include/linux/"

  # add wireless headers
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"
  cp net/mac80211/*.h "${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/"

  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core"
  cp drivers/media/dvb-core/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-core/"
  # and...
  # http://bugs.archlinux.org/task/11194
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"
  cp include/config/dvb/*.h "${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/"

  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  cp drivers/media/dvb-frontends/lgdt330x.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"
  cp drivers/media/i2c/msp3400-driver.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/i2c/"

  # add dvb headers
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb"
  cp drivers/media/usb/dvb-usb/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/usb/dvb-usb/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends"
  cp drivers/media/dvb-frontends/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb-frontends/"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners"
  cp drivers/media/tuners/*.h "${pkgdir}/usr/src/linux-${_kernver}/drivers/media/tuners/"

  # add xfs and shmem for aufs building
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs"
  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}/mm"
  cp fs/xfs/xfs_sb.h "${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h"

  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do
    mkdir -p "${pkgdir}"/usr/src/linux-${_kernver}/`echo ${i} | sed 's|/Kconfig.*||'`
    cp ${i} "${pkgdir}/usr/src/linux-${_kernver}/${i}"
  done

  chown -R root.root "${pkgdir}/usr/src/linux-${_kernver}"
  find "${pkgdir}/usr/src/linux-${_kernver}" -type d -exec chmod 755 {} \;

  # strip scripts directory
  find "${pkgdir}/usr/src/linux-${_kernver}/scripts" -type f -perm -u+w 2>/dev/null | while read binary ; do
    case "$(file -bi "${binary}")" in
      *application/x-sharedlib*) # Libraries (.so)
        /usr/bin/strip ${STRIP_SHARED} "${binary}";;
      *application/x-archive*) # Libraries (.a)
        /usr/bin/strip ${STRIP_STATIC} "${binary}";;
      *application/x-executable*) # Binaries
        /usr/bin/strip ${STRIP_BINARIES} "${binary}";;
    esac
  done

  # remove unneeded architectures
  rm -rf "${pkgdir}"/usr/src/linux-${_kernver}/arch/{alpha,arc,arm,arm26,arm64,avr32,blackfin,c6x,cris,frv,h8300,hexagon,ia64,m32r,m68k,m68knommu,metag,mips,microblaze,mn10300,openrisc,parisc,powerpc,ppc,s390,score,sh,sh64,sparc,sparc64,tile,unicore32,um,v850,xtensa}
}

package_linux-l-pa-docs() {
    pkgdesc="Kernel hackers manual - HTML documentation that comes with the Linux kernel (with realtime preemption)."
    #provides=('kernel26-docs')
    #conflicts=('kernel26-docs')
    #replaces=('kernel26-docs')

  cd "${srcdir}/linux-${_basekernel}"

  mkdir -p "${pkgdir}/usr/src/linux-${_kernver}"
  cp -al Documentation "${pkgdir}/usr/src/linux-${_kernver}"
  find "${pkgdir}" -type f -exec chmod 444 {} \;
  find "${pkgdir}" -type d -exec chmod 755 {} \;

  # remove a file already in linux package
  rm -f "${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile"
}

# workaround for AUR not accepting split packages
pkgname=linux-l-pa
pkgdesc="The Linux Kernel and modules (with realtime preemption) + L_Pa options."

# vim:set ts=8 sts=2 sw=2 et:

