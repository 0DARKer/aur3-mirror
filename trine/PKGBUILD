# Maintainer & contributor: jimmy-6 <jakub.jarozek {at} gmail.com>
# Contributor: Babets http://aur.archlinux.org/account.php?Action=AccountInfo&ID=6996

# uncomment this line if you want uncompressed package
# PKGEXT=".pkg.tar"

pkgname=trine
pkgver=1.0.8_update4
pkgrel=1
pkgdesc="A physics-based fantasy action game with three playable characters and co-op mode (requires copy of the full game)"
url="http://trine-thegame.com"
license=('custom: "commercial"')
arch=('i686' 'x86_64')
depends=('libglade' 'nvidia-cg-toolkit' 'openal' 'sdl_image' 'sdl_ttf' 'libvorbis')
makedepends=('unzip')
source=('trine.sh' 'trine-launcher.sh' 'trine.desktop')
install=trine.install
md5sums=('8c89fe9d00179cfc87754b81e4727a1c'
         '48c87587ab205c3ebd893fdf219e3241'
         'c037b9c266c415f2d852eac760fb1e0e')

_gameinst32="TrineUpdate4.32.run"
_gameinst64="TrineUpdate4.64.run"

[ "${CARCH}" == "i686" ] && _libdir="lib32"
[ "${CARCH}" == "x86_64" ] && _libdir="lib64"

build() {
  cd ${srcdir}

  if [[ "${_trine_installer_path}" == "" ]]; then
    _trine_installer_path=$(readlink -f ".." )
  fi
  
  install -d ${pkgdir}/opt/${pkgname}
  
  msg "You need a full copy of this game in order to install it"

  # 32 and 64 bit installers contain files for both architectures
  # so it doesn't matter which one is used
  msg "Looking for ${_gameinst64} in: ${_trine_installer_path}"
  if [[ -f "${_trine_installer_path}/${_gameinst64}" ]]; then
    msg "Found game package, installing..."
    unzip -o "${_trine_installer_path}/${_gameinst64}" -d ${pkgdir}/opt/${pkgname} || true
    return 0
  fi
  msg "Looking for ${_gameinst32} in: ${_trine_installer_path}"
  if [[ -f "${_trine_installer_path}/${_gameinst32}" ]]; then
    msg "Found game package, installing..."
    unzip -o "${_trine_installer_path}/${_gameinst32}" -d ${pkgdir}/opt/${pkgname} || true
    return 0
  fi

  error "Game installer not found!"
  msg "Please place it in the '${_trine_installer_path}' directory"
  msg "Or set the '_trine_installer_path' variable to point to correct directory."
  
  return 1
}

package() {
  # install startup scripts
  install -Dm755 ${srcdir}/trine.sh ${pkgdir}/usr/bin/trine
  install -Dm755 ${srcdir}/trine-launcher.sh ${pkgdir}/usr/bin/trine-launcher

  # install desktop entry
  install -Dm644 ${srcdir}/trine.desktop ${pkgdir}/usr/share/applications/trine.desktop

  # binaries
  cd "${pkgdir}/opt/${pkgname}"
  if [[ "${CARCH}" == "x86_64" ]]; then
    rm -rf lib32 trine-bin32 trine-launcher32
    mv trine-bin{64,}
    mv trine-launcher{64,}
  elif [[ "${CARCH}" == "i686" ]]; then
    rm -rf lib64 trine-bin64 trine-launcher64
    mv trine-bin{32,}
    mv trine-launcher{32,}
  fi

  #fix file permissions
  chmod 644 "${pkgdir}/opt/${pkgname}/Trine_Manual_linux.pdf" \
    "${pkgdir}/opt/${pkgname}/data/video/cinematic/trineroom_thief.ogg"

  #remove unneeded files
  cd "${pkgdir}/opt/${pkgname}/"
  rm {remove,create}Shortcuts.sh

  #remove bundled libs
  cd "${pkgdir}/opt/${pkgname}/${_libdir}"
  rm -f libCgGL.so \
    libCg.so \
    libdirect-1.0.so.0 \
    libdirectfb-1.0.so.0 \
    libexpat.so.1 \
    libFLAC.so.8 \
    libfusion-1.0.so.0 \
    libgcc_s.so.1 \
    libgdbm.so.3 \
    libgmodule-2.0.so.0 \
    libgomp.so.1 \
    libICE.so.6 \
    libjpeg.so.62 \
    libmikmod.so.2 \
    libm.so.6 \
    libogg.so.0 \
    libopenal.so.1 \
    libpcre.so.3 \
    libpng12.so.0 \
    librt.so.1 \
    libSDL-1.2.so.0 \
    libSDL_image-1.2.so.0 \
    libSDL_sound-1.0.so.1 \
    libSDL_ttf-2.0.so.0 \
    libselinux.so.1 \
    libsmpeg-0.4.so.0 \
    libSM.so.6 \
    libspeex.so.1 \
    libstdc++.so.6 \
    libtiff.so.4 \
    libvga.so.1 \
    libvorbisfile.so.3 \
    libvorbis.so.0 \
    libX11.so.6 \
    libx86.so.1 \
    libXau.so.6 \
    libxcb-render.so.0 \
    libxcb-render-util.so.0 \
    libxcb.so.1 \
    libxcb-xlib.so.0 \
    libXcomposite.so.1 \
    libXcursor.so.1 \
    libXdamage.so.1 \
    libXdmcp.so.6 \
    libXext.so.6 \
    libXfixes.so.3 \
    libXinerama.so.1 \
    libXi.so.6 \
    libXmu.so.6 \
    libXrender.so.1 \
    libXt.so.6 \
    libz.so.1


#     libavformat.so.52 \
#     libboost_filesystem.so.1.35.0 \
#     libboost_regex.so.1.35.0 \
#     libboost_system.so.1.35.0 \
#     libboost_thread-mt.so.1.35.0 \
#     libcv.so.1 \
#     libcxcore.so.1 \
#     libGLEW.so.1.5 \
#     libNxCharacter.so \
#     libNxCooking.so \
#     libPhysXCore.so \
#     libPhysXLoader.so.1 \
#     libavcodec.so.5{2,1} \
#     libavutil.so.{50,49} \
#     libswscale.so.0 \
#     libicudata.so.38 \
#     libicui18n.so.38 \
#     libicuuc.so.38 \

}
