From cf86c5ad8799635ea0458c6d4fbfb90ef5c53651 Mon Sep 17 00:00:00 2001
From: Alistair Riddoch <alriddoch@googlemail.com>
Date: Mon, 2 May 2011 11:54:09 +0100
Subject: [PATCH] Add more correct handling of compression errors

---
 Atlas/Filters/Bzip2.cpp |   43 +++++++++++++++++++++++--------------------
 Atlas/Filters/Gzip.cpp  |   40 +++++++++++++++++++++-------------------
 2 files changed, 44 insertions(+), 39 deletions(-)

diff --git a/Atlas/Filters/Bzip2.cpp b/Atlas/Filters/Bzip2.cpp
index 4cbe987..780bb45 100644
--- a/Atlas/Filters/Bzip2.cpp
+++ b/Atlas/Filters/Bzip2.cpp
@@ -56,16 +56,17 @@ std::string Bzip2::encode(const std::string& data)
 
     do 
     {       
-	outgoing.next_out = buf;
-	outgoing.avail_out = sizeof(buf);
-	  
-	status = BZ2_bzCompress(&outgoing, BZ_FLUSH);
-	  
-	ASSERT(status == BZ_OK); // not sure about this - it may be
-                             // status != BZ_SEQUENCE_ERROR
-	  
-	out_string.append((char*)buf, sizeof(buf) - outgoing.avail_out);	
-	  
+        outgoing.next_out = buf;
+        outgoing.avail_out = sizeof(buf);
+  
+        status = BZ2_bzCompress(&outgoing, BZ_FLUSH);
+  
+        ASSERT(status != BZ_SEQUENCE_ERROR);
+
+        if (status != BZ_SEQUENCE_ERROR) {
+            out_string.append((char*)buf, sizeof(buf) - outgoing.avail_out);
+        }
+        // FIXME do something else in case of error?
     } while (outgoing.avail_out == 0);
     
     return out_string;
@@ -81,17 +82,19 @@ std::string Bzip2::decode(const std::string& data)
     incoming.next_in = (char*)data.data();
     incoming.avail_in = data.size();
 
-    do 
+    do
     {
-	incoming.next_out = buf;
-	incoming.avail_out = sizeof(buf);
-	  
-	status = BZ2_bzDecompress(&incoming);
-	  
-	ASSERT(status == BZ_OK);
-    
-	out_string.append((char*)buf, sizeof(buf) - incoming.avail_out);
-	  
+        incoming.next_out = buf;
+        incoming.avail_out = sizeof(buf);
+
+        status = BZ2_bzDecompress(&incoming);
+
+        ASSERT(status == BZ_OK);
+
+        if (status != BZ_SEQUENCE_ERROR) {
+            out_string.append((char*)buf, sizeof(buf) - incoming.avail_out);
+        }
+
     } while(incoming.avail_out == 0);
 
     return out_string;
diff --git a/Atlas/Filters/Gzip.cpp b/Atlas/Filters/Gzip.cpp
index f17db69..cbeee1f 100644
--- a/Atlas/Filters/Gzip.cpp
+++ b/Atlas/Filters/Gzip.cpp
@@ -51,17 +51,18 @@ std::string Gzip::encode(const std::string& data)
     outgoing.next_in = (unsigned char *)data.data();
     outgoing.avail_in = data.size();
 
-    do 
+    do
     {       
-	outgoing.next_out = buf;
-	outgoing.avail_out = sizeof(buf);
-	  
-	status = deflate(&outgoing, Z_SYNC_FLUSH);
-	  
-	ASSERT(status == Z_OK);
-	  
-	out_string.append((char*)buf, sizeof(buf) - outgoing.avail_out);	
-	  
+        outgoing.next_out = buf;
+        outgoing.avail_out = sizeof(buf);
+
+        status = deflate(&outgoing, Z_SYNC_FLUSH);
+
+        ASSERT(status == Z_OK);
+
+        if (status >= 0) {
+            out_string.append((char*)buf, sizeof(buf) - outgoing.avail_out);	
+        }
     } while (outgoing.avail_out == 0);
     
     return out_string;
@@ -79,15 +80,16 @@ std::string Gzip::decode(const std::string& data)
 
     do 
     {
-	incoming.next_out = buf;
-	incoming.avail_out = sizeof(buf);
-	  
-	status = inflate(&incoming, Z_SYNC_FLUSH);
-	  
-	ASSERT(status == Z_OK);
-	  
-	out_string.append((char*)buf, sizeof(buf) - incoming.avail_out);
-	  
+        incoming.next_out = buf;
+        incoming.avail_out = sizeof(buf);
+
+        status = inflate(&incoming, Z_SYNC_FLUSH);
+
+        ASSERT(status == Z_OK);
+
+        if (status >= 0) {
+            out_string.append((char*)buf, sizeof(buf) - incoming.avail_out);
+        }
     } while(incoming.avail_out == 0);
 
     return out_string;
-- 
1.7.4.1

