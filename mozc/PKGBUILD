# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

## If you will be using mozc.el on Emacs, uncomment below.
#_emacs_mozc="yes"

## Mozc compile option
_bldtype=Release
#_bldtype=Debug

_zipcoderel=201210
_protobuf_ver=2.4.1

pkgbase=mozc
pkgname=mozc
true && pkgname=('mozc' 'ibus-mozc')
pkgver=1.6.1187.102
pkgrel=2
arch=('i686' 'x86_64')
url="http://code.google.com/p/mozc/"
license=('BSD' 'custom')
makedepends=('pkg-config' 'python2' 'zinnia')
changelog=ChangeLog
source=(http://mozc.googlecode.com/files/mozc-${pkgver}.tar.bz2
        http://protobuf.googlecode.com/files/protobuf-${_protobuf_ver}.tar.bz2
        http://downloads.sourceforge.net/project/pnsft-aur/mozc/ken_all-${_zipcoderel}.zip
        http://downloads.sourceforge.net/project/pnsft-aur/mozc/jigyosyo-${_zipcoderel}.zip
)
sha1sums=('341e0edd1f5c8593b8936792975a4856e1c9c89e'
          'df5867e37a4b51fb69f53a8baf5b994938691d6d'
          '8a6b4a9b19c70ef04bcd65ca6a58b75189110c23'
          '7a42951cfb102053e9cb8de4faed92da809dbf51')

if [[ "$_emacs_mozc" == "yes" ]]; then
  true && pkgname+=('emacs-mozc')
  makedepends+=('emacs')
fi

# run qmake -v and check version
qmake_check_v4() {
  if [[ -x "$1" ]]; then
    if echo `$1 -v 2>&1` | grep "Qt version 4\." >/dev/null 2>&1; then
      return 0
    fi
  fi
  return 1
}

# Checking Qt4 environments
qt4_check() {
  _qt4dir=""
  _qmnames="qmake-qt4 qmake4 qmake"

  # qt4 check: $QTDIR
  if [[ -z "$_qt4dir" && "$QTDIR" ]]; then
    for n in $_qmnames; do
      _qstr=${QTDIR}/bin/${n}
      if qmake_check_v4 "$_qstr"; then
        _qt4dir=`dirname $_qstr`
        break;
      fi
    done
  fi

  # qt4 check: pkg-config
  if [[ -z "$_qt4dir" ]]; then
    _str=`pkg-config QtCore --variable=exec_prefix 2>/dev/null`
    if [[ ! -z "$_str" ]]; then
      for n in $_qmnames; do
        _qstr=${_str}/bin/${n}
        if qmake_check_v4 "$_qstr"; then
          _qt4dir=`dirname $_qstr`
          break;
        fi
      done
    fi
  fi

  # qt4 check: PATH
  if [[ -z "$_qt4dir" ]]; then
    for n in $_qtnames; do
      _qstr=`which $n 2>/dev/null`
      if qmake_check_v4 "$_qstr"; then
        _qt4dir=`dirname $_qstr`
        break;
      fi
    done
  fi

  if [[ -z "$_qt4dir" ]]; then
    msg "'qmake' for Qt4 not found."
    exit 1
  else
    _qt4dir=${_qt4dir%%/bin}
  fi
}

build() {
  msg '====================================================='
  msg '               *** Build Info ***'
  msg ' The following package files will be generated:'
  for _p in ${pkgname[@]}
  do
    msg "  * ${_p}-${pkgver}-${pkgrel}-${CARCH}${PKGEXT}"
  done
  msg '====================================================='

  # Check and find Qt4
  qt4_check

  cd "${srcdir}/${pkgbase}-${pkgver}"

  # Adjust to use python2
  find . -name  \*.py        -type f -exec sed -i -e "1s|python.*$|python2|"  {} +
  find . -regex '.*\.gypi?$' -type f -exec sed -i -e "s|'python'|'python2'|g" {} +

  # Generate zip code seed
  msg "Generating zip code seed..."
  python2 dictionary/gen_zip_code_seed.py \
    --zip_code="${srcdir}/KEN_ALL.CSV" --jigyosyo="${srcdir}/JIGYOSYO.CSV" \
    >> data/dictionary_oss/dictionary09.txt
  msg "Done."

  # Copy protobuf to be linked statically
  cp -rf "${srcdir}/protobuf-${_protobuf_ver}" protobuf/files

  msg "Starting make..."

  # Get make -j option from $MAKEFLAGS
  _jobs=`sed -n -e "s/.*--jobs=\([0-9]\+\).*/\1/p" -e "s/.*-j *\([0-9]\+\).*/\1/p" <<< "$MAKEFLAGS"`
  _jobs=${_jobs:-1}

  _targets="server/server.gyp:mozc_server gui/gui.gyp:mozc_tool unix/ibus/ibus.gyp:ibus_mozc renderer/renderer.gyp:mozc_renderer "
  [[ "$_emacs_mozc" == "yes" ]] && _targets+="unix/emacs/emacs.gyp:mozc_emacs_helper "

  QTDIR=$_qt4dir python2 build_mozc.py gyp
  python2 build_mozc.py build_tools -c $_bldtype -j $_jobs
  python2 build_mozc.py build -c $_bldtype -j $_jobs $_targets

  sed -i 's|/usr/libexec/|/usr/lib/ibus-mozc/|g' \
         out_linux/${_bldtype}/obj/gen/unix/ibus/mozc.xml

  if [[ "$_emacs_mozc" == "yes" ]]; then
    cd unix/emacs
    emacs -batch -f batch-byte-compile mozc.el
    cd ~-
  fi

  # Extract liccense part of mozc
  head -n 28 server/mozc_server.cc > LICENSE
}

package_mozc() {
  pkgdesc="A Japanese Input Method for Chromium OS, Windows, Mac and Linux (the Open Source Edition of Google Japanese Input)"
  arch=('i686' 'x86_64')
  groups=('mozc-im')
  depends=('qt')
  replaces=('mozc-server' 'mozc-utils-gui')
  conflicts=('mozc-server' 'mozc-utils-gui')
  optdepends=('zinnia: hand-writing recognition support'
              'tegaki-models-zinnia-japanese: hand-writing recognition support')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/mozc_server "${pkgdir}/usr/lib/mozc/mozc_server"
  install    -m 755 out_linux/${_bldtype}/mozc_tool   "${pkgdir}/usr/lib/mozc/mozc_tool"

  install -d "${pkgdir}/usr/lib/mozc/documents/"
  install    -m 644 data/installer/*.html "${pkgdir}/usr/lib/mozc/documents/"

  install -D -m 644 LICENSE "${pkgdir}/usr/share/licenses/${pkgbase}/LICENSE"
}

package_ibus-mozc() {
  pkgdesc="IBus engine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc-im')
  depends=("mozc=${pkgver}" 'ibus>=1.4.1')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/ibus_mozc       "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
  install -D -m 644 out_linux/${_bldtype}/obj/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"

  install -D -m 755 out_linux/${_bldtype}/mozc_renderer "${pkgdir}/usr/lib/mozc/mozc_renderer"
}

package_emacs-mozc() {
  pkgdesc="Mozc for Emacs"
  arch=('i686' 'x86_64')
  groups=('mozc-im')
  depends=("mozc=${pkgver}" 'emacs')
  replaces=('emacs-mozc-bin')
  conflicts=('emacs-mozc-bin')
  install=emacs-mozc.install

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_bldtype}/mozc_emacs_helper "${pkgdir}/usr/bin/mozc_emacs_helper"
  install -d "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc/"
  install -m 644 unix/emacs/mozc.el{,c} "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc"
}

# Global pkgdesc and depends are here so that they will be picked up by AUR
pkgdesc="A Japanese Input Method for Chromium OS, Windows, Mac and Linux (the Open Source Edition of Google Japanese Input)"
depends=('qt' 'ibus>=1.4.1')
