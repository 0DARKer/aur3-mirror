# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

## You can choose the input method framework to use either ibus, scim or both.
## If you will be not using ibus, comment out below.
_ibus_mozc="yes"
## If you will be using scim, uncomment below.
#_scim_mozc="yes"

pkgname=mozc
pkgver=1.0.558.102
pkgrel=1
pkgdesc="A Japanese input method originates from Google Japanese Input"
arch=('i686' 'x86_64')
url="http://code.google.com/p/mozc/"
license=('BSD')
depends=('curl' 'protobuf' 'qt')
makedepends=('python2' 'gtest')
conflicts=('mozc-svn' 'mozc-ut')
changelog=${pkgname}.ChangeLog
source=(http://mozc.googlecode.com/files/mozc-${pkgver}.tar.bz2
        mozc-el-pseudo-cursor.patch)
sha1sums=('24fbb0d39d6d81953114d39e546edd85361cef3a'
          'a412712a9068a912796e218940e8cde9a32c49da')
_copt=Release
#_copt=Debug

[[ "$_ibus_mozc" = "yes" ]] && depends=(${depends[@]} 'ibus')
[[ "$_scim_mozc" = "yes" ]] && depends=(${depends[@]} 'scim')

build() {

  if [[ "$_ibus_mozc" != "yes" && "$_scim_mozc" != "yes" ]]; then
      msg "***********************************************************"
      msg " Please choose either one of ibus or scim at least."
      msg " See PKGBUILD."
      msg "***********************************************************"
      return 1
  fi

  cd "${srcdir}/${pkgname}-${pkgver}"

  # Adjust to use python2
  sed -i '1s|python.*$|python2|' `find . -name \*.py -type f -print`
  sed -i "s|'python'|'python2'|" `grep -lR \'python\' * --include=*.gyp{,i}`

  # patch for issue 50
  patch -Np0 -i "${srcdir}/mozc-el-pseudo-cursor.patch"

  # build mozc server and tools
  python2 build_mozc.py gyp
  python2 build_mozc.py build_tools -c $_copt
  python2 build_mozc.py build -c $_copt \
      server/server.gyp:mozc_server \
      gui/gui.gyp:mozc_tool \
      unix/emacs/emacs.gyp:mozc_emacs_helper

  # build ibus-mozc
  if [[ "$_ibus_mozc" = "yes" ]]; then
      python2 build_mozc.py build -c $_copt unix/ibus/ibus.gyp:ibus_mozc
      sed -i 's|/usr/libexec/ibus-engine-mozc|/usr/lib/ibus-mozc/ibus-engine-mozc|' \
              out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml
  fi

  # build scim-mozc
  if [[ "$_scim_mozc" = "yes" ]]; then
      python2 build_mozc.py build -c $_copt unix/scim/scim.gyp:scim_mozc unix/scim/scim.gyp:scim_mozc_setup
  fi
}

package() {

  cd "${srcdir}/${pkgname}-${pkgver}"

  # install mozc server, tools, etc.
  install -D -m 755 out_linux/${_copt}/mozc_server       "${pkgdir}/usr/lib/mozc/mozc_server"
  install    -m 755 out_linux/${_copt}/mozc_tool         "${pkgdir}/usr/lib/mozc/mozc_tool"
  install -D -m 755 out_linux/${_copt}/mozc_emacs_helper "${pkgdir}/usr/bin/mozc_emacs_helper"
  install -D -m 644 unix/emacs/mozc.el    "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc/mozc.el"
  install -d "${pkgdir}/usr/lib/mozc/documents/"
  install    -m 644 data/installer/*.html "${pkgdir}/usr/lib/mozc/documents/"

  # install ibus-mozc
  if [[ "$_ibus_mozc" = "yes" ]]; then
    install -D -m 755 out_linux/${_copt}/ibus_mozc                  "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
    install -D -m 644 out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
    install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
    install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
    install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
    install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
    install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
    install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
    install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
    install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
    install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
    install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"
  fi

  # install scim-mozc
  if [[ "$_scim_mozc" = "yes" ]]; then
    _moduledir=`pkg-config scim --variable=moduledir`
    install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc.so       "${pkgdir}${_moduledir}/IMEngine/mozc.so"
    install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc_setup.so "${pkgdir}${_moduledir}/SetupUI/mozc-setup.so"
    _icondir=`pkg-config scim --variable=icondir`
    install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}${_icondir}/scim-mozc.png"
    install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}${_icondir}/scim-mozc-tool.png"
    install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}${_icondir}/scim-mozc-properties.png"
    install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}${_icondir}/scim-mozc-dictionary.png"
    install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}${_icondir}/scim-mozc-direct.png"
    install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}${_icondir}/scim-mozc-hiragana.png"
    install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}${_icondir}/scim-mozc-katakana_half.png"
    install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}${_icondir}/scim-mozc-katakana_full.png"
    install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}${_icondir}/scim-mozc-alpha_half.png"
    install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}${_icondir}/scim-mozc-alpha_full.png"
  fi
}
