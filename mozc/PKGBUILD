# Maintainer: ponsfoot <cabezon dot hashimoto at gmail dot com>

## You can choose the input method framework to use either ibus, scim or both.
## If you will not be using ibus, comment out below.
_ibus_mozc="yes"
## If you will be using scim, uncomment below.
#_scim_mozc="yes"

## If you will be using mozc.el on Emacs, uncomment below.
#_emacs_mozc="yes"

## You can add Japanese zip code provided by Japan Post.
## If you don't want to use it, comment out below.
#_zipcode="yes"
## zip code data is as of 2011-07-29.

pkgbase=mozc
pkgname=mozc
true && pkgname=('mozc-server' 'mozc-utils-gui')
pkgver=1.2.809.102
pkgrel=1
arch=('i686' 'x86_64')
url="http://code.google.com/p/mozc/"
license=('BSD' 'custom')
makedepends=('pkg-config' 'python2' 'gtest' 'zinnia')
changelog=ChangeLog
_copt=Release
#_copt=Debug
source=(http://mozc.googlecode.com/files/mozc-${pkgver}.tar.bz2
        mozc-1.1.690.102-ibus-lang_panel.patch
)
sha1sums=('303515507b8643a5e9e9409f053ccdbbfb24f4f6'
          'ac0c9bef87b3ca3efe16554c00713ad1b4dc4cf8')

if [[ "$_ibus_mozc" = "yes" ]]; then
    true && pkgname+=('ibus-mozc')
    makedepends+=('ibus')
fi
if [[ "$_scim_mozc" = "yes" ]]; then
    true && pkgname+=('scim-mozc')
    makedepends+=('scim')
fi
if [[ "$_emacs_mozc" = "yes" ]]; then
    true && pkgname+=('emacs-mozc' 'emacs-mozc-bin')
fi

if [[ "$_zipcode" = "yes" ]]; then
    source+=('http://www.post.japanpost.jp/zipcode/dl/kogaki/zip/ken_all.zip'
             'http://www.post.japanpost.jp/zipcode/dl/jigyosyo/zip/jigyosyo.zip')
    sha1sums+=(
              'fb50270dc8a5981ad9abf8035c070e5d477a0ed2'
              'be23fc7dc1dcbb70ccd6023f5434ab048504908e')
fi

build() {
  if [[ "$_ibus_mozc" != "yes" && "$_scim_mozc" != "yes" ]]; then
      msg "***********************************************************"
      msg " Please choose either one of ibus or scim at least."
      msg " See PKGBUILD."
      msg "***********************************************************"
      return 1
  fi

  cd "${srcdir}/${pkgbase}-${pkgver}"

  # Adjust to use python2
  find . -name  \*.py        -type f | xargs sed -i "1s|python.*$|python2|"
  find . -regex ".*\.gypi?$" -type f | xargs sed -i "s|'python'|'python2'|g"

  # patch to add some tool's menu items into lang panel of ibus by Vine Linux.
  patch -p1 -i "${srcdir}/mozc-1.1.690.102-ibus-lang_panel.patch"

  # Add zip code
  if [[ "$_zipcode" = "yes" ]]; then
      msg "Generating zip code seed..."
      cd data/dictionary
      python2 ../../dictionary/gen_zip_code_seed.py --zip_code="${srcdir}/KEN_ALL.CSV" --jigyosyo="${srcdir}/JIGYOSYO.CSV" >> dictionary09.txt
      cd ~-
  fi

  msg "Starting make..."

  _targets="server/server.gyp:mozc_server gui/gui.gyp:mozc_tool"
  [[ "$_emacs_mozc" = "yes" ]] && _targets+=" unix/emacs/emacs.gyp:mozc_emacs_helper"
  [[ "$_ibus_mozc"  = "yes" ]] && _targets+=" unix/ibus/ibus.gyp:ibus_mozc"
  [[ "$_scim_mozc"  = "yes" ]] && _targets+=" unix/scim/scim.gyp:scim_mozc unix/scim/scim.gyp:scim_mozc_setup"

  python2 build_mozc.py gyp --channel_dev=0
  python2 build_mozc.py build_tools -c $_copt
  python2 build_mozc.py build -c $_copt $_targets

  [[ "$_ibus_mozc" = "yes" ]] && sed -i 's|/usr/libexec/|/usr/lib/ibus-mozc/|g' out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml

  # Extract liccense part of mozc
  head -n 28 server/mozc_server.cc > LICENSE
}

package_mozc-server() {
  pkgdesc="Server part of the Mozc input method"
  arch=('i686' 'x86_64')
  groups=('mozc')
  depends=('curl' 'protobuf')
  provides=('mozc')
  replaces=('mozc')
  conflicts=('mozc')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_copt}/mozc_server "${pkgdir}/usr/lib/mozc/mozc_server"
  install -d "${pkgdir}/usr/lib/mozc/documents/"
  install    -m 644 data/installer/*.html "${pkgdir}/usr/lib/mozc/documents/"

  install -D -m 644 LICENSE "${pkgdir}/usr/share/licenses/${pkgbase}/LICENSE"
}

package_mozc-utils-gui() {
  pkgdesc="Mozc GUI uitilities, such as the configuration dialog, user dictionary tool and about dialog"
  arch=('i686' 'x86_64')
  groups=('mozc')
  depends=('mozc-server' 'qt')
  optdepends=('zinnia: hand-writing recognition support (Experimental)'
              'tegaki-models-zinnia-japanese: hand-writing recognition support (Experimental)')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_copt}/mozc_tool "${pkgdir}/usr/lib/mozc/mozc_tool"
}

package_emacs-mozc() {
  pkgdesc="Mozc for Emacs"
  arch=('any')
  groups=('mozc')
  depends=('emacs-mozc-bin' 'emacs')
  install=emacs-mozc.install

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 644 unix/emacs/mozc.el "${pkgdir}/usr/share/emacs/site-lisp/emacs-mozc/mozc.el"
}

package_emacs-mozc-bin() {
  pkgdesc="Helper module for emacs-mozc"
  arch=('i686' 'x86_64')
  groups=('mozc')
  depends=('mozc-server')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_copt}/mozc_emacs_helper "${pkgdir}/usr/bin/mozc_emacs_helper"
}

package_ibus-mozc() {
  pkgdesc="IBus engine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc')
  depends=('mozc-server' 'ibus')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  install -D -m 755 out_linux/${_copt}/ibus_mozc          "${pkgdir}/usr/lib/ibus-mozc/ibus-engine-mozc"
  install -D -m 644 out_linux/${_copt}/obj/gen/unix/ibus/mozc.xml "${pkgdir}/usr/share/ibus/component/mozc.xml"
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}/usr/share/ibus-mozc/product_icon.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}/usr/share/ibus-mozc/tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}/usr/share/ibus-mozc/properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}/usr/share/ibus-mozc/dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}/usr/share/ibus-mozc/direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}/usr/share/ibus-mozc/hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}/usr/share/ibus-mozc/katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}/usr/share/ibus-mozc/katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}/usr/share/ibus-mozc/alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}/usr/share/ibus-mozc/alpha_full.png"
}

package_scim-mozc() {
  pkgdesc="SCIM IMEngine module for Mozc"
  arch=('i686' 'x86_64')
  groups=('mozc')
  depends=('mozc-server' 'scim')

  cd "${srcdir}/${pkgbase}-${pkgver}"
  _moduledir=`pkg-config scim --variable=moduledir`
  install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc.so       "${pkgdir}${_moduledir}/IMEngine/mozc.so"
  install -D -m 755 out_linux/${_copt}/lib.target/libscim_mozc_setup.so "${pkgdir}${_moduledir}/SetupUI/mozc-setup.so"
  _icondir=`pkg-config scim --variable=icondir`
  install -D -m 644 data/images/unix/ime_product_icon_opensource-32.png "${pkgdir}${_icondir}/scim-mozc.png"
  install    -m 644 data/images/unix/ui-tool.png          "${pkgdir}${_icondir}/scim-mozc-tool.png"
  install    -m 644 data/images/unix/ui-properties.png    "${pkgdir}${_icondir}/scim-mozc-properties.png"
  install    -m 644 data/images/unix/ui-dictionary.png    "${pkgdir}${_icondir}/scim-mozc-dictionary.png"
  install    -m 644 data/images/unix/ui-direct.png        "${pkgdir}${_icondir}/scim-mozc-direct.png"
  install    -m 644 data/images/unix/ui-hiragana.png      "${pkgdir}${_icondir}/scim-mozc-hiragana.png"
  install    -m 644 data/images/unix/ui-katakana_half.png "${pkgdir}${_icondir}/scim-mozc-katakana_half.png"
  install    -m 644 data/images/unix/ui-katakana_full.png "${pkgdir}${_icondir}/scim-mozc-katakana_full.png"
  install    -m 644 data/images/unix/ui-alpha_half.png    "${pkgdir}${_icondir}/scim-mozc-alpha_half.png"
  install    -m 644 data/images/unix/ui-alpha_full.png    "${pkgdir}${_icondir}/scim-mozc-alpha_full.png"
}

# Global pkgdesc and depends are here so that they will be picked up by AUR
pkgdesc="A Japanese Input Method for Chromium OS, Mac and Linux (the Open Source Edition of Google Japanese Input)"
depends=('curl' 'protobuf' 'qt')
