/* header-gtk2.h generated by valac 0.12.0, the Vala compiler, do not modify */


#ifndef __HEADER_GTK2_H__
#define __HEADER_GTK2_H__

#include <glib.h>
#include <glib-object.h>
#include <stdlib.h>
#include <string.h>
#include <gtk/gtk.h>
#include <gio/gio.h>

G_BEGIN_DECLS


#define TYPE_MENU (menu_get_type ())
#define MENU(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MENU, Menu))
#define MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MENU, MenuClass))
#define IS_MENU(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MENU))
#define IS_MENU_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MENU))
#define MENU_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MENU, MenuClass))

typedef struct _Menu Menu;
typedef struct _MenuClass MenuClass;
typedef struct _MenuPrivate MenuPrivate;

#define TYPE_MANAGER (manager_get_type ())
#define MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MANAGER, Manager))
#define IS_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MANAGER))
#define MANAGER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), TYPE_MANAGER, ManagerIface))

typedef struct _Manager Manager;
typedef struct _ManagerIface ManagerIface;

#define TYPE_MANAGER_PROXY (manager_proxy_get_type ())

#define SUPERRIDER_TYPE_CLASS (superrider_class_get_type ())
#define SUPERRIDER_CLASS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SUPERRIDER_TYPE_CLASS, SuperriderClass))
#define SUPERRIDER_CLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SUPERRIDER_TYPE_CLASS, SuperriderClassClass))
#define SUPERRIDER_IS_CLASS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SUPERRIDER_TYPE_CLASS))
#define SUPERRIDER_IS_CLASS_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SUPERRIDER_TYPE_CLASS))
#define SUPERRIDER_CLASS_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SUPERRIDER_TYPE_CLASS, SuperriderClassClass))

typedef struct _SuperriderClass SuperriderClass;
typedef struct _SuperriderClassClass SuperriderClassClass;
typedef struct _SuperriderClassPrivate SuperriderClassPrivate;

#define SUPERRIDER_TYPE_MEMBER (superrider_member_get_type ())
#define SUPERRIDER_MEMBER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), SUPERRIDER_TYPE_MEMBER, SuperriderMember))
#define SUPERRIDER_MEMBER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), SUPERRIDER_TYPE_MEMBER, SuperriderMemberClass))
#define SUPERRIDER_IS_MEMBER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), SUPERRIDER_TYPE_MEMBER))
#define SUPERRIDER_IS_MEMBER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), SUPERRIDER_TYPE_MEMBER))
#define SUPERRIDER_MEMBER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), SUPERRIDER_TYPE_MEMBER, SuperriderMemberClass))

typedef struct _SuperriderMember SuperriderMember;
typedef struct _SuperriderMemberClass SuperriderMemberClass;
typedef struct _SuperriderMemberPrivate SuperriderMemberPrivate;

#define TYPE_MENUBAR_SUPERRIDER (menubar_superrider_get_type ())
#define MENUBAR_SUPERRIDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), TYPE_MENUBAR_SUPERRIDER, MenubarSuperrider))
#define MENUBAR_SUPERRIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_CAST ((klass), TYPE_MENUBAR_SUPERRIDER, MenubarSuperriderClass))
#define IS_MENUBAR_SUPERRIDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), TYPE_MENUBAR_SUPERRIDER))
#define IS_MENUBAR_SUPERRIDER_CLASS(klass) (G_TYPE_CHECK_CLASS_TYPE ((klass), TYPE_MENUBAR_SUPERRIDER))
#define MENUBAR_SUPERRIDER_GET_CLASS(obj) (G_TYPE_INSTANCE_GET_CLASS ((obj), TYPE_MENUBAR_SUPERRIDER, MenubarSuperriderClass))

typedef struct _MenubarSuperrider MenubarSuperrider;
typedef struct _MenubarSuperriderClass MenubarSuperriderClass;
typedef struct _MenubarSuperriderPrivate MenubarSuperriderPrivate;

struct _Menu {
	GObject parent_instance;
	MenuPrivate * priv;
};

struct _MenuClass {
	GObjectClass parent_class;
};

struct _ManagerIface {
	GTypeInterface parent_iface;
	void (*add) (Manager* self, const gchar* object_path, GError** error);
};

struct _SuperriderClass {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SuperriderClassPrivate * priv;
	GList* members;
	GType type;
	GTypeClass* klass;
};

struct _SuperriderClassClass {
	GTypeClass parent_class;
	void (*finalize) (SuperriderClass *self);
};

struct _SuperriderMember {
	GTypeInstance parent_instance;
	volatile int ref_count;
	SuperriderMemberPrivate * priv;
	GList* chain;
	gint offset;
	SuperriderClass* cl;
};

struct _SuperriderMemberClass {
	GTypeClass parent_class;
	void (*finalize) (SuperriderMember *self);
};

struct _MenubarSuperrider {
	GTypeInstance parent_instance;
	volatile int ref_count;
	MenubarSuperriderPrivate * priv;
};

struct _MenubarSuperriderClass {
	GTypeClass parent_class;
	void (*finalize) (MenubarSuperrider *self);
};


GType menu_get_type (void) G_GNUC_CONST;
guint menu_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
void menu_get_ui (Menu* self, const gchar* path, gchar** ui);
void menu_emit (Menu* self, const gchar* path);
Menu* menu_new (GtkMenuShell* shell);
Menu* menu_construct (GType object_type, GtkMenuShell* shell);
void menu_register (GtkMenuShell* shell);
gboolean menu_has_registered (GtkMenuShell* shell);
void menu_register_all (void);
guint64 menu_get_xwindow (Menu* self);
GType manager_proxy_get_type (void) G_GNUC_CONST;
guint manager_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType manager_get_type (void) G_GNUC_CONST;
void manager_add (Manager* self, const gchar* object_path, GError** error);
void callback (GtkAction* action);
void _vala_main (gchar** args, int args_length1);
gpointer superrider_class_ref (gpointer instance);
void superrider_class_unref (gpointer instance);
GParamSpec* superrider_param_spec_class (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void superrider_value_set_class (GValue* value, gpointer v_object);
void superrider_value_take_class (GValue* value, gpointer v_object);
gpointer superrider_value_get_class (const GValue* value);
GType superrider_class_get_type (void) G_GNUC_CONST;
extern GData* superrider_classes;
void superrider_unref_class (SuperriderClass* cl);
SuperriderClass* superrider_get_class (GType type);
void superrider_superride (GType type, gint offset, void* vfunc);
void* superrider_peek_super (GType type, gint offset);
void* superrider_peek_base (GType type, gint offset);
void superrider_release_all (void);
gpointer superrider_member_ref (gpointer instance);
void superrider_member_unref (gpointer instance);
GParamSpec* superrider_param_spec_member (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void superrider_value_set_member (GValue* value, gpointer v_object);
void superrider_value_take_member (GValue* value, gpointer v_object);
gpointer superrider_value_get_member (const GValue* value);
GType superrider_member_get_type (void) G_GNUC_CONST;
SuperriderClass* superrider_class_new (GType type);
SuperriderClass* superrider_class_construct (GType object_type, GType type);
SuperriderMember* superrider_class_get_member (SuperriderClass* self, gint offset);
GList* superrider_class_get_children (SuperriderClass* self);
SuperriderMember* superrider_member_new (SuperriderClass* cl, gint offset);
SuperriderMember* superrider_member_construct (GType object_type, SuperriderClass* cl, gint offset);
void superrider_member_push (SuperriderMember* self, void* vfunc);
void superrider_member_pop (SuperriderMember* self);
void* superrider_member_peek_current (SuperriderMember* self);
void* superrider_member_peek_super (SuperriderMember* self);
gpointer menubar_superrider_ref (gpointer instance);
void menubar_superrider_unref (gpointer instance);
GParamSpec* param_spec_menubar_superrider (const gchar* name, const gchar* nick, const gchar* blurb, GType object_type, GParamFlags flags);
void value_set_menubar_superrider (GValue* value, gpointer v_object);
void value_take_menubar_superrider (GValue* value, gpointer v_object);
gpointer value_get_menubar_superrider (const GValue* value);
GType menubar_superrider_get_type (void) G_GNUC_CONST;
MenubarSuperrider* menubar_superrider_new (void);
MenubarSuperrider* menubar_superrider_construct (GType object_type);
void menubar_superrider_map (GtkWidget* widget);
void menubar_superrider_size_request (GtkWidget* widget, GtkRequisition* req);
gboolean menubar_superrider_can_activate_accel (GtkWidget* widget);


G_END_DECLS

#endif
