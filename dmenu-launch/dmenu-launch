#!/bin/dash
### Dmenu Launcher ###############
# Version 0.4.1 by Scott Garrett #
# Wintervenom [(at)] gmail.com   #
##################################
# Depends on:  dmenu, exo        #
##################################
# Changelog                      #
# 0.4.1   + Read DMENU_OPTIONS   #
#           for colors           #
##################################

# Path to XDG shortcut (*.desktop) directories.
xdg_paths="/usr/share/applications
/usr/local/share/applications
$XDG_DATA_HOME/applications"

# Dmenu command.
dm="dmenu -i $DMENU_OPTIONS"

# Run in Terminal flag.
terminal='no'

# Returns the friendly names from XDG shortcuts and the names of
# executables (according to $PATH).
# Syntax:
#   get_app_names <path> [<path> ...]
get_app_names () {
  # Go through the list of XDG shortcut directories that we were fed.
  until [ -z "$1" ]; do
    # Return a the list of friendly names from the XDG shortcut files,
    # replacing the "Name=" part with a space, so we can later tell if
    # the user chose an XDG shortcut or an executable.
    [ -d "$1" ] && grep -h '^Name=' "$1/"*.desktop | sed -e 's:Name=: :'
    shift
  done
  # Now, tack on the list of regular executables.
  dmenu_path
}

# Look for an XDG shortcut by its friendly name and return the 'Exec'
# parameter inside it.  If we find more than one XDG shortcut with the
# same friendly name, we just return all of their 'Exec' parameters.
# Syntax:
#   get_xdg_app_cmd <path> [<path> ...] -n <XDG friendly name>
get_xdg_app_cmd () {
  # Grab the friendly name we're supposed to be looking for from the
  # parameters.
  name=`echo "$*" | sed 's:^.*-n ::'`
  # Loop through the XDG shortcut paths.
  until [ -z "$1" ]; do
    # Return the paths to the XDG shortcuts that contain the friendly
    # name we're seeking.
    [ -d "$1" ] && grep -l "^Name=$name$" "$1/"*.desktop
    shift
    # Get out of this loop if we hit the friendly name switch.
    [ "$1" = '-n' ] && break
  # Now, we go through our search results...
  done | while read file; do
    # ...and grab the 'Exec' parameter from each of them, getting rid
    # of the extra stuff we don't need.
    grep '^Exec=' "$file" | sed -e 's:^Exec=::' -e 's: %.::'
  done
}

# The reason this is a function is so that we can see only the first
# parameter -- the name of the executable.  We don't give a crap about
# the users arguments if he or she entered any.
program_exists () {
  which "$1"
}

# Ask the user to select a program to launch.
while :; do
  app=`(echo "[Run in Terminal: $terminal]"; get_app_names $xdg_paths) | $dm -p 'Execute:'`
  [ "$app" != "[Run in Terminal: $terminal]" ] && break
  terminal=`[ $terminal = no ] && echo yes || echo no`
done
# Quit if he or she selected nothing.
[ ! "$app" ] && exit
# Figure out whether or not the application selected was an executable
# or an XDG shortcut by seeing if it started with a space.
if [ ! "`echo "$app" | cut -d' ' -f1`" ]; then
  # If it did, it was an XDG shortcut, and we need to get a list of
  # the shortcuts by that name, just in case there's more than one.
  app=`get_xdg_app_cmd $xdg_paths -n $app`
  # If there's more than one, we ask the user which target executable
  # he or she would like to launch.
  [ "`echo "$app" | wc -l`" != '1' ] && app=`echo "$app" | $dm -p 'Which program?'`
  # Quit it they selected nothing.
  [ -z "$app" ] && exit
fi
# Check and see if the program (without params) exists, and launch it
# (with params), if so.
if program_exists $app; then
  [ $terminal = no ] && (exec $app &) || (exo-open --launch TerminalEmulator $app &)
fi

