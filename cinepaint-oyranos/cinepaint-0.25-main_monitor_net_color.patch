diff --git a/app/cms.c b/app/cms.c
index 6bd4e39..712e30a 100644
--- a/app/cms.c
+++ b/app/cms.c
@@ -467,7 +467,26 @@ void cms_init_oyranos()
     {
       const char *display_name = gdk_get_display ();
 
+#if OYRANOS_VERSION > 110
+      oyOptions_s * options = 0;
+      oyConfig_s * device = 0;
+      oyProfile_s * p = 0;
+
+      int error = oyDeviceGet( OY_TYPE_STD, "monitor", display_name,
+                               options, &device );
+
+      /* obtain the net-color spec ICC device profile */
+      error = oyOptions_SetFromText( &options,
+                               "//"OY_TYPE_STD"/config/net_color_region_target",
+                                     "yes", OY_CREATE_NEW );
+      error = oyDeviceGetProfile( device, options, &p );
+      oyOptions_Release( &options );
+      test = oyProfile_GetMem( p, &test_size, 0, my_alloc_func );
+      oyProfile_Release( &p );
+      oyConfig_Release( &device );
+#else
       test = oyGetMonitorProfile( display_name, &test_size, my_alloc_func );
+#endif
       printf("%s:%d %s() monitor profile size: %d\n",__FILE__,__LINE__,__func__,
               test_size );
 
@@ -958,7 +977,7 @@ cms_read_standard_profile_dirs(icColorSpaceSignature space)
       for( i = 0; i < size; ++i)
       {
         temp_prof = oyProfiles_Get( iccs, i );
-#  ifdef DEBUG
+#  ifdef DEBUG_
         printf("%s %d: \"%s\" %s\n", i == current ? "*":" ", i,
                oyProfile_GetText( temp_prof, oyNAME_DESCRIPTION ),
                oyProfile_GetFileName(temp_prof, 0));
diff --git a/app/disp_callbacks.c b/app/disp_callbacks.c
index 55fc366..9708a23 100644
--- a/app/disp_callbacks.c
+++ b/app/disp_callbacks.c
@@ -40,6 +40,11 @@
 #include "layers_dialog.h"      /* hsbo */
 #include "gtk_debug_helpers.h"  /* hsbo */
 
+#ifdef GDK_WINDOWING_X11
+#include "X11/Xcm/Xcm.h"
+#include <X11/Xlib.h>
+#include <X11/extensions/Xfixes.h>
+#endif
 
 #define HORIZONTAL  1
 #define VERTICAL    2
@@ -62,6 +67,7 @@ int middle_mouse_button;
 /* Function declarations */
 
 static void gdisplay_check_device_cursor (GDisplay *gdisp);
+static void gdisplay_set_colour_region( GDisplay * gdisp );
 
 static void
 redraw (GDisplay *gdisp,
@@ -217,6 +223,142 @@ gdisplay_check_device_cursor (GDisplay *gdisp)
     }
 }
 
+#define OY_DBG_FORMAT_ "%s:%d %s() "
+#define OY_DBG_ARGS_ __FILE__,__LINE__,strrchr(__func__,'/')?strrchr(__func__,'/')+1:__func__
+
+static void gdisplay_set_colour_region(GDisplay * gdisp)
+{
+#ifdef GDK_WINDOWING_X11
+  gint       i,j;
+
+  if( gdisp->old_disp_geometry[0] != gdisp->disp_xoffset ||
+      gdisp->old_disp_geometry[1] != gdisp->disp_yoffset ||
+      gdisp->old_disp_geometry[2] != gdisp->disp_width ||
+      gdisp->old_disp_geometry[3] != gdisp->disp_height )
+  {
+    GdkDisplay *display = gdk_display_get_default ();
+    GdkWindow * event_box = gtk_widget_get_window(gdisp->canvas);
+    GdkWindow * top_window = gdk_window_get_toplevel(event_box);
+    Window w = GDK_WINDOW_XID(top_window);
+    int offx = 0, offy = 0, offx2 = 0, offy2 = 0;
+    gdk_window_get_origin( event_box, &offx, &offy );
+    gdk_window_get_origin( top_window, &offx2, &offy2 );
+    Display    *xdisplay = gdk_x11_display_get_xdisplay (display);
+    GdkScreen  *screen  = gdk_screen_get_default ();
+    Window root = GDK_WINDOW_XID( gdk_screen_get_root_window (screen) );
+
+      XRectangle rec[2] = { { 0,0,0,0 }, { 0,0,0,0 } },
+               * rect = 0;
+      int nRect = 0;
+      XserverRegion reg = 0;
+      XcolorRegion region, *old_regions = 0;
+      unsigned long old_regions_n = 0;
+      int pos = -1;
+      const char * display_string = DisplayString(xdisplay);
+      int dim_corr_x, dim_corr_y,
+          inner_dis_x, inner_dist_y;
+
+      inner_dis_x = offx - offx2;
+      inner_dist_y = offy - offy2;
+      rec[0].x = gdisp->disp_xoffset + inner_dis_x;
+      rec[0].y = gdisp->disp_yoffset + inner_dist_y;
+      dim_corr_x = 2 * rec[0].x - 2 * inner_dis_x;
+      dim_corr_y = 2 * rec[0].y - 2 * inner_dist_y;
+      rec[0].width = gdisp->disp_width - dim_corr_x;
+      rec[0].height = gdisp->disp_height - dim_corr_y;
+
+      reg = XFixesCreateRegion( xdisplay, rec, 1);
+      rect = XFixesFetchRegion( xdisplay, reg, &nRect );
+      if(!nRect)
+      {
+        printf( OY_DBG_FORMAT_
+                 "Display: %s Window id: %d  Could not load Xregion:%d\n",
+                 OY_DBG_ARGS_,
+                 display_string, (int)w, (int)reg );
+
+      } else if(rect[0].x != rec[0].x ||
+                rect[0].y != rec[0].y )
+      {
+        printf( OY_DBG_FORMAT_
+                 "Display: %s Window id: %d  Xregion:%d has wrong position %d,%d\n",
+                 OY_DBG_ARGS_,
+                 display_string, (int)w, (int)reg, rect[0].x, rect[0].y );
+      } else
+        printf( OY_DBG_FORMAT_
+                 "Display: %s Window id: %d  Xregion:%d uploaded %dx%d+%d+%d"
+                 "  %d:%d %d:%d\n",
+                 OY_DBG_ARGS_,
+                 display_string, (int)w, (int)reg,
+                 rect[0].width, rect[0].height, rect[0].x, rect[0].y,
+                 offx, offx2, offy, offy2 );
+
+      region.region = htonl(reg);
+      memset( region.md5, 0, 16 );
+
+      /* look for old regions */
+      old_regions = XcolorRegionFetch( xdisplay, w, &old_regions_n );
+     /* remove our own old region */
+      for(i = 0; i < old_regions_n; ++i)
+      {
+
+        if(!old_regions[i].region || pos >= 0)
+          break;
+
+        rect = XFixesFetchRegion( xdisplay, ntohl(old_regions[i].region),
+                                  &nRect );
+
+        for(j = 0; j < nRect; ++j)
+        {
+          int * old_window_rectangle = gdisp->old_disp_geometry;
+
+          printf( OY_DBG_FORMAT_
+                 "reg[%d]: %dx%d+%d+%d %dx%d+%d+%d\n",
+                 OY_DBG_ARGS_, i,
+                 old_window_rectangle[2], old_window_rectangle[3],
+                 old_window_rectangle[0], old_window_rectangle[1],
+                 rect[j].width, rect[j].height, rect[j].x, rect[j].y
+                );
+          if(old_window_rectangle[0] == rect[j].x &&
+             old_window_rectangle[1] == rect[j].y &&
+             old_window_rectangle[2] == rect[j].width &&
+             old_window_rectangle[3] == rect[j].height )
+          {
+            pos = i;
+            break;
+          }
+        }
+      }
+      if(pos >= 0)
+      {
+        int undeleted_n = old_regions_n;
+        XcolorRegionDelete( xdisplay, w, pos, 1 );
+        old_regions = XcolorRegionFetch( xdisplay, w, &old_regions_n );
+        if(undeleted_n - old_regions_n != 1)
+          printf(  OY_DBG_FORMAT_"removed %d; have still %d\n", OY_DBG_ARGS_,
+                   pos, (int)old_regions_n );
+      }
+
+      /* upload the new or changed region to the X server */
+      int error = XcolorRegionInsert( xdisplay, w, 0, &region, 1 );
+      if(error)
+        printf( OY_DBG_FORMAT_
+                 "XcolorRegionInsert failed\n",
+                 OY_DBG_ARGS_ );
+      Atom netColorTarget = XInternAtom( xdisplay, "_NET_COLOR_TARGET", True );
+      XChangeProperty( xdisplay, w, netColorTarget, XA_STRING, 8,
+                       PropModeReplace,
+                       (unsigned char*) display_string, strlen(display_string));
+
+      XFlush(xdisplay);
+
+      /* remember the old rectangle */
+        gdisp->old_disp_geometry[0] = gdisp->disp_xoffset + offx - offx2;
+        gdisp->old_disp_geometry[1] = gdisp->disp_yoffset + offy - offy2;
+        gdisp->old_disp_geometry[2] = gdisp->disp_width - dim_corr_x;
+        gdisp->old_disp_geometry[3] = gdisp->disp_height - dim_corr_y;
+  }
+#endif
+}
 
 /**
 *   gdisplay_canvas_events()  -  handles the events concerning the 'canvas'
@@ -281,6 +423,7 @@ gdisplay_canvas_events (GtkWidget *canvas,
 
     /* set the zoom control's focus to this display since it is new */
     zoom_set_focus(gdisp);
+    gdisplay_set_colour_region(gdisp);
   }
 
   /*  Find out what device the event occurred upon  */
@@ -328,8 +471,8 @@ gdisplay_canvas_events (GtkWidget *canvas,
         gdisp->disp_width = gdisp->canvas->allocation.width;
         gdisp->disp_height = gdisp->canvas->allocation.height;
         resize_display (gdisp, 0, FALSE);
-      
       }
+      gdisplay_set_colour_region(gdisp);
       return_val = TRUE;
       break;
 
diff --git a/app/gdisplay.h b/app/gdisplay.h
index 7147db8..938b430 100644
--- a/app/gdisplay.h
+++ b/app/gdisplay.h
@@ -86,6 +86,8 @@ struct GDisplay
   int disp_xoffset;
   int disp_yoffset;
 
+  int old_disp_geometry[4];
+
   int offset_x, offset_y;         /**<@brief  offset of display image into raw image*/
   int scale;        	          /**<@brief  scale factor from original raw image  */
 
diff --git a/configure b/configure
index b4ce4f5..581007a 100755
--- a/configure
+++ b/configure
@@ -22702,7 +22702,7 @@ $as_echo "$ac_cv_header_X11_Xmu_WinUtil_h" >&6; }
 
 fi
 if test "x$ac_cv_header_X11_Xmu_WinUtil_h" = x""yes; then
-  CINEPAINT_REMOTE="cinepaint-remote"; XMU_LIB='-lXmu -lXt -lSM -lICE -lX11'
+  CINEPAINT_REMOTE="cinepaint-remote"; XMU_LIB='-lXmu -lXt -lSM -lICE -lX11 -lXfixes'
 else
   { $as_echo "$as_me:$LINENO: WARNING: *** cinepaint-remote will not be built (XMU header file not found) ***" >&5
 $as_echo "$as_me: WARNING: *** cinepaint-remote will not be built (XMU header file not found) ***" >&2;}
@@ -22904,7 +22904,7 @@ $as_echo "$ac_cv_header_X11_Xmu_WinUtil_h" >&6; }
 
 fi
 if test "x$ac_cv_header_X11_Xmu_WinUtil_h" = x""yes; then
-  CINEPAINT_REMOTE="cinepaint-remote"; XMU_LIB='-lXmu -lXt -lX11'
+  CINEPAINT_REMOTE="cinepaint-remote"; XMU_LIB='-lXmu -lXt -lX11 -lXfixes'
 else
   { $as_echo "$as_me:$LINENO: WARNING: *** cinepaint-remote will not be built (XMU header file not found) ***" >&5
 $as_echo "$as_me: WARNING: *** cinepaint-remote will not be built (XMU header file not found) ***" >&2;}
@@ -23068,9 +23068,9 @@ fi
         if test $? -eq 0; then
           OYRANOS_LIBS="-DHAVE_OY `$OY_CONFIG --ld_x_flags | sed  s/-O.\//`"
         else
-          OYRANOS_LIBS="-DHAVE_OY `$OY_CONFIG --ldflags | sed  s/-O.\//`"
+          OYRANOS_LIBS="-DHAVE_OY `$OY_CONFIG --ldflags | sed  s/-O.\//` `pkg-config --libs xcm xfixes`"
         fi
-        OYRANOS_CFLAGS="-DHAVE_OY -DOYRANOS_VERSION=$OYRANOS_NVERSION `$OY_CONFIG --cflags | sed  s/-O.\//`"
+        OYRANOS_CFLAGS="-DHAVE_OY -DOYRANOS_VERSION=$OYRANOS_NVERSION `$OY_CONFIG --cflags | sed  s/-O.\//` `pkg-config --cflags xcm xfixes`"
     else
       { $as_echo "$as_me:$LINENO: WARNING:
 *** Check for oyranos-config failed.
diff --git a/configure.in b/configure.in
index 7e173ec..2737538 100755
--- a/configure.in
+++ b/configure.in
@@ -425,11 +425,11 @@ dnl Test for Xmu
   if test -z "$XMU_LIB"; then
     AC_CHECK_LIB(Xmu, XmuClientWindow,
       [AC_CHECK_HEADER(X11/Xmu/WinUtil.h,
-    CINEPAINT_REMOTE="cinepaint-remote"; XMU_LIB='-lXmu -lXt -lSM -lICE -lX11',
+    CINEPAINT_REMOTE="cinepaint-remote"; XMU_LIB='-lXmu -lXt -lSM -lICE -lX11 -lXfixes',
     [AC_MSG_WARN(*** cinepaint-remote will not be built (XMU header file not found) ***)])],
     [AC_CHECK_LIB(Xmu, XmuUpdateMapHints,
       [AC_CHECK_HEADER(X11/Xmu/WinUtil.h,
-        CINEPAINT_REMOTE="cinepaint-remote"; XMU_LIB='-lXmu -lXt -lX11',
+        CINEPAINT_REMOTE="cinepaint-remote"; XMU_LIB='-lXmu -lXt -lX11 -lXfixes',
         [AC_MSG_WARN(*** cinepaint-remote will not be built (XMU header file not found) ***)])],
     [AC_MSG_WARN(*** cinepaint-remote will not be built (XMU library not found) ***)], -lXt)], -lXt -lSM -lICE -lX11)
   fi
@@ -486,9 +486,9 @@ dnl Test for Oyranos; beku
         if test $? -eq 0; then
           OYRANOS_LIBS="-DHAVE_OY `$OY_CONFIG --ld_x_flags | sed  s/-O.\//`"
         else
-          OYRANOS_LIBS="-DHAVE_OY `$OY_CONFIG --ldflags | sed  s/-O.\//`"
+          OYRANOS_LIBS="-DHAVE_OY `$OY_CONFIG --ldflags | sed  s/-O.\//` `pkg-config --libs xcm xfixes`"
         fi
-        OYRANOS_CFLAGS="-DHAVE_OY -DOYRANOS_VERSION=$OYRANOS_NVERSION `$OY_CONFIG --cflags | sed  s/-O.\//`"
+        OYRANOS_CFLAGS="-DHAVE_OY -DOYRANOS_VERSION=$OYRANOS_NVERSION `$OY_CONFIG --cflags | sed  s/-O.\//` `pkg-config --cflags xcm xfixes`"
     else
       AC_MSG_WARN([
 *** Check for oyranos-config failed.
