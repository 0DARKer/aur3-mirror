diff --git a/app/disp_callbacks.c b/app/disp_callbacks.c
index f48afc6..b16c904 100644
--- a/app/disp_callbacks.c
+++ b/app/disp_callbacks.c
@@ -40,12 +40,6 @@
 #include "layers_dialog.h"      /* hsbo */
 #include "gtk_debug_helpers.h"  /* hsbo */
 
-#ifdef GDK_WINDOWING_X11
-#include "X11/Xcm/Xcm.h"
-#include <X11/Xlib.h>
-#include <X11/extensions/Xfixes.h>
-#endif
-
 #define HORIZONTAL  1
 #define VERTICAL    2
 
@@ -67,7 +61,6 @@ int middle_mouse_button;
 /* Function declarations */
 
 static void gdisplay_check_device_cursor (GDisplay *gdisp);
-static void gdisplay_set_colour_region( GDisplay * gdisp );
 
 static void
 redraw (GDisplay *gdisp,
@@ -223,159 +216,6 @@ gdisplay_check_device_cursor (GDisplay *gdisp)
     }
 }
 
-#define OY_DBG_FORMAT_ "%s:%d %s() "
-#define OY_DBG_ARGS_ __FILE__,__LINE__,strrchr(__func__,'/')?strrchr(__func__,'/')+1:__func__
-
-static void gdisplay_set_colour_region(GDisplay * gdisp)
-{
-#ifdef GDK_WINDOWING_X11
-  gint       i,j;
-
-  if(!gdk_window_is_visible(gdisp->canvas->window))
-    return;
-
-  if( gdisp->old_disp_geometry[0] != gdisp->disp_xoffset ||
-      gdisp->old_disp_geometry[1] != gdisp->disp_yoffset ||
-      gdisp->old_disp_geometry[2] != gdisp->disp_width ||
-      gdisp->old_disp_geometry[3] != gdisp->disp_height )
-  {
-    GdkDisplay *display = gdk_display_get_default ();
-    GdkWindow * event_box = gtk_widget_get_window(gdisp->canvas);
-    GdkWindow * top_window = gdk_window_get_toplevel(event_box);
-    Window w = GDK_WINDOW_XID(top_window);
-    Display    *xdisplay;
-    GdkScreen  *screen;
-    int offx = 0, offy = 0, offx2 = 0, offy2 = 0;
-    gdk_window_get_origin( event_box, &offx, &offy );
-    gdk_window_get_origin( top_window, &offx2, &offy2 );
-    xdisplay = gdk_x11_display_get_xdisplay (display);
-    screen  = gdk_screen_get_default ();
-
-    {
-      XRectangle rec[2] = { { 0,0,0,0 }, { 0,0,0,0 } },
-               * rect = 0;
-      int nRect = 0;
-      XserverRegion reg = 0;
-      XcolorRegion region, *old_regions = 0;
-      unsigned long old_regions_n = 0;
-      int pos = -1;
-      const char * display_string = DisplayString(xdisplay);
-      int dim_corr_x, dim_corr_y,
-          inner_dis_x, inner_dist_y;
-      int error;
-      Atom netColorTarget;
-
-      inner_dis_x = offx - offx2;
-      inner_dist_y = offy - offy2;
-      rec[0].x = gdisp->disp_xoffset + inner_dis_x;
-      rec[0].y = gdisp->disp_yoffset + inner_dist_y;
-      dim_corr_x = 2 * rec[0].x - 2 * inner_dis_x;
-      dim_corr_y = 2 * rec[0].y - 2 * inner_dist_y;
-      rec[0].width = gdisp->disp_width - dim_corr_x;
-      rec[0].height = gdisp->disp_height - dim_corr_y;
-
-      reg = XFixesCreateRegion( xdisplay, rec, 1);
-      rect = XFixesFetchRegion( xdisplay, reg, &nRect );
-      if(!nRect)
-      {
-        printf( OY_DBG_FORMAT_
-                 "Display: %s Window id: %d  Could not load Xregion:%d\n",
-                 OY_DBG_ARGS_,
-                 display_string, (int)w, (int)reg );
-
-      } else if(rect[0].x != rec[0].x ||
-                rect[0].y != rec[0].y )
-      {
-        printf( OY_DBG_FORMAT_
-                 "Display: %s Window id: %d  Xregion:%d has wrong position %d,%d\n",
-                 OY_DBG_ARGS_,
-                 display_string, (int)w, (int)reg, rect[0].x, rect[0].y );
-      } else
-        printf( OY_DBG_FORMAT_
-                 "Display: %s Window id: %d  Xregion:%d uploaded %dx%d+%d+%d"
-                 "  %d:%d %d:%d\n",
-                 OY_DBG_ARGS_,
-                 display_string, (int)w, (int)reg,
-                 rect[0].width, rect[0].height, rect[0].x, rect[0].y,
-                 offx, offx2, offy, offy2 );
-
-      region.region = htonl(reg);
-      memset( region.md5, 0, 16 );
-
-      /* look for old regions */
-      old_regions = XcolorRegionFetch( xdisplay, w, &old_regions_n );
-     /* remove our own old region */
-      for(i = 0; i < old_regions_n; ++i)
-      {
-
-        if(!old_regions[i].region || pos >= 0)
-          break;
-
-        rect = XFixesFetchRegion( xdisplay, ntohl(old_regions[i].region),
-                                  &nRect );
-
-        for(j = 0; j < nRect; ++j)
-        {
-          int * old_window_rectangle = gdisp->old_disp_geometry;
-
-          printf( OY_DBG_FORMAT_
-                 "reg[%d]: %dx%d+%d+%d %dx%d+%d+%d\n",
-                 OY_DBG_ARGS_, i,
-                 old_window_rectangle[2], old_window_rectangle[3],
-                 old_window_rectangle[0], old_window_rectangle[1],
-                 rect[j].width, rect[j].height, rect[j].x, rect[j].y
-                );
-          if(old_window_rectangle[0] == rect[j].x &&
-             old_window_rectangle[1] == rect[j].y &&
-             old_window_rectangle[2] == rect[j].width &&
-             old_window_rectangle[3] == rect[j].height )
-          {
-            pos = i;
-            break;
-          }
-        }
-      }
-      if(pos >= 0)
-      {
-        int undeleted_n = old_regions_n;
-        XcolorRegionDelete( xdisplay, w, pos, 1 );
-        old_regions = XcolorRegionFetch( xdisplay, w, &old_regions_n );
-        if(undeleted_n - old_regions_n != 1)
-          printf(  OY_DBG_FORMAT_"removed %d; have still %d\n", OY_DBG_ARGS_,
-                   pos, (int)old_regions_n );
-      }
-
-      /* upload the new or changed region to the X server */
-      error = XcolorRegionInsert( xdisplay, w, 0, &region, 1 );
-      if(error)
-        printf( OY_DBG_FORMAT_
-                 "XcolorRegionInsert failed\n",
-                 OY_DBG_ARGS_ );
-      netColorTarget = XInternAtom( xdisplay, "_NET_COLOR_TARGET", True );
-      if(!netColorTarget)
-      {
-        printf( OY_DBG_FORMAT_
-                 "XInternAtom(..\"_NET_COLOR_TARGET\"..) failed\n",
-                 OY_DBG_ARGS_ );
-        error = 1;
-      }
-      if(!error)
-      XChangeProperty( xdisplay, w, netColorTarget, XA_STRING, 8,
-                       PropModeReplace,
-                       (unsigned char*) display_string, strlen(display_string));
-
-      XFlush(xdisplay);
-
-      /* remember the old rectangle */
-        gdisp->old_disp_geometry[0] = gdisp->disp_xoffset + offx - offx2;
-        gdisp->old_disp_geometry[1] = gdisp->disp_yoffset + offy - offy2;
-        gdisp->old_disp_geometry[2] = gdisp->disp_width - dim_corr_x;
-        gdisp->old_disp_geometry[3] = gdisp->disp_height - dim_corr_y;
-    }
-  }
-#endif
-}
-
 /**
 *   gdisplay_canvas_events()  -  handles the events concerning the 'canvas'
 *                                       widget of a GDisplay
diff --git a/app/gdisplay.c b/app/gdisplay.c
index a883928..fe788dd 100644
--- a/app/gdisplay.c
+++ b/app/gdisplay.c
@@ -1513,6 +1513,7 @@ gdisplay_expose_full (GDisplay *gdisp)
   gdisplay_add_display_area (gdisp, 0, 0,
 			     gdisp->disp_width,
 			     gdisp->disp_height);
+  gdisplay_set_colour_region (gdisp);
 }
 
 void
diff --git a/app/gdisplay_ops.c b/app/gdisplay_ops.c
index a7438d4..d5cc27c 100644
--- a/app/gdisplay_ops.c
+++ b/app/gdisplay_ops.c
@@ -38,6 +38,12 @@
 #include "layout.h"
 #include "base_frame_manager.h"
 
+#ifdef GDK_WINDOWING_X11
+#include "X11/Xcm/Xcm.h"
+#include <X11/Xlib.h>
+#include <X11/extensions/Xfixes.h>
+#endif
+
 static void gdisplay_close_warning_callback (GtkWidget *, gpointer);
 static void gdisplay_cancel_warning_callback (GtkWidget *, gpointer);
 static void gdisplay_close_warning_dialog   (char *, GDisplay *);
@@ -176,7 +182,8 @@ gdisplay_shrink_wrap (GDisplay *gdisp)
       x = HIGHPASS (shell_x, BOUNDS (s_width - shell_width, border_x, s_width));
       y = HIGHPASS (shell_y, BOUNDS (s_height - shell_height, border_y, s_height));
 
-      if (x != shell_x || y != shell_y)
+      if( (x != shell_x || y != shell_y) &&
+          0 < x && x < disp_width && 0 < y && y < disp_height )
 	gdk_window_move (gdisp->shell->window, x, y);
 
       /*  Set the new disp_width and disp_height values  */
@@ -205,7 +212,8 @@ gdisplay_shrink_wrap (GDisplay *gdisp)
       x = HIGHPASS (shell_x, BOUNDS (s_width - shell_width, border_x, s_width));
       y = HIGHPASS (shell_y, BOUNDS (s_height - shell_height, border_y, s_height));
 
-      if (x != shell_x || y != shell_y)
+      if( (x != shell_x || y != shell_y) &&
+          0 < x && x < disp_width && 0 < y && y < disp_height )
 	gdk_window_move (gdisp->shell->window, x, y);
 
       /*  Set the new disp_width and disp_height values  */
@@ -385,3 +393,157 @@ gdisplay_close_warning_dialog (char     *image_name,
 
   gtk_widget_show (mbox);
 }
+
+#define OY_DBG_FORMAT_ "%s:%d %s() "
+#define OY_DBG_ARGS_ __FILE__,__LINE__,strrchr(__func__,'/')?strrchr(__func__,'/')+1:__func__
+
+void gdisplay_set_colour_region(GDisplay * gdisp)
+{
+#ifdef GDK_WINDOWING_X11
+  gint       i,j;
+
+  if(!gdk_window_is_visible(gdisp->canvas->window))
+    return;
+
+  if( gdisp->old_disp_geometry[0] != gdisp->disp_xoffset ||
+      gdisp->old_disp_geometry[1] != gdisp->disp_yoffset ||
+      gdisp->old_disp_geometry[2] != gdisp->disp_width ||
+      gdisp->old_disp_geometry[3] != gdisp->disp_height )
+  {
+    GdkDisplay *display = gdk_display_get_default ();
+    GdkWindow * event_box = gtk_widget_get_window(gdisp->canvas);
+    GdkWindow * top_window = gdk_window_get_toplevel(event_box);
+    Window w = GDK_WINDOW_XID(top_window);
+    Display    *xdisplay;
+    GdkScreen  *screen;
+    int offx = 0, offy = 0, offx2 = 0, offy2 = 0;
+    gdk_window_get_origin( event_box, &offx, &offy );
+    gdk_window_get_origin( top_window, &offx2, &offy2 );
+    xdisplay = gdk_x11_display_get_xdisplay (display);
+    screen  = gdk_screen_get_default ();
+
+    {
+      XRectangle rec[2] = { { 0,0,0,0 }, { 0,0,0,0 } },
+               * rect = 0;
+      int nRect = 0;
+      XserverRegion reg = 0;
+      XcolorRegion region, *old_regions = 0;
+      unsigned long old_regions_n = 0;
+      int pos = -1;
+      const char * display_string = DisplayString(xdisplay);
+      int dim_corr_x, dim_corr_y,
+          inner_dis_x, inner_dist_y;
+      int error;
+      Atom netColorTarget;
+
+      inner_dis_x = offx - offx2;
+      inner_dist_y = offy - offy2;
+      rec[0].x = gdisp->disp_xoffset + inner_dis_x;
+      rec[0].y = gdisp->disp_yoffset + inner_dist_y;
+      dim_corr_x = 2 * rec[0].x - 2 * inner_dis_x;
+      dim_corr_y = 2 * rec[0].y - 2 * inner_dist_y;
+      rec[0].width = gdisp->disp_width - dim_corr_x;
+      rec[0].height = gdisp->disp_height - dim_corr_y;
+
+      reg = XFixesCreateRegion( xdisplay, rec, 1);
+      rect = XFixesFetchRegion( xdisplay, reg, &nRect );
+      if(!nRect)
+      {
+        printf( OY_DBG_FORMAT_
+                 "Display: %s Window id: %d  Could not load Xregion:%d\n",
+                 OY_DBG_ARGS_,
+                 display_string, (int)w, (int)reg );
+
+      } else if(rect[0].x != rec[0].x ||
+                rect[0].y != rec[0].y )
+      {
+        printf( OY_DBG_FORMAT_
+                 "Display: %s Window id: %d  Xregion:%d has wrong position %d,%d\n",
+                 OY_DBG_ARGS_,
+                 display_string, (int)w, (int)reg, rect[0].x, rect[0].y );
+      } else
+        printf( OY_DBG_FORMAT_
+                 "Display: %s Window id: %d  Xregion:%d uploaded %dx%d+%d+%d"
+                 "  %d:%d %d:%d\n",
+                 OY_DBG_ARGS_,
+                 display_string, (int)w, (int)reg,
+                 rect[0].width, rect[0].height, rect[0].x, rect[0].y,
+                 offx, offx2, offy, offy2 );
+
+      region.region = htonl(reg);
+      memset( region.md5, 0, 16 );
+
+      /* look for old regions */
+      old_regions = XcolorRegionFetch( xdisplay, w, &old_regions_n );
+     /* remove our own old region */
+      for(i = 0; i < old_regions_n; ++i)
+      {
+
+        if(!old_regions[i].region || pos >= 0)
+          break;
+
+        rect = XFixesFetchRegion( xdisplay, ntohl(old_regions[i].region),
+                                  &nRect );
+
+        for(j = 0; j < nRect; ++j)
+        {
+          int * old_window_rectangle = gdisp->old_disp_geometry;
+
+          printf( OY_DBG_FORMAT_
+                 "reg[%d]: %dx%d+%d+%d %dx%d+%d+%d\n",
+                 OY_DBG_ARGS_, i,
+                 old_window_rectangle[2], old_window_rectangle[3],
+                 old_window_rectangle[0], old_window_rectangle[1],
+                 rect[j].width, rect[j].height, rect[j].x, rect[j].y
+                );
+          if(old_window_rectangle[0] == rect[j].x &&
+             old_window_rectangle[1] == rect[j].y &&
+             old_window_rectangle[2] == rect[j].width &&
+             old_window_rectangle[3] == rect[j].height )
+          {
+            pos = i;
+            break;
+          }
+        }
+      }
+      if(pos >= 0)
+      {
+        int undeleted_n = old_regions_n;
+        XcolorRegionDelete( xdisplay, w, pos, 1 );
+        old_regions = XcolorRegionFetch( xdisplay, w, &old_regions_n );
+        if(undeleted_n - old_regions_n != 1)
+          printf(  OY_DBG_FORMAT_"removed %d; have still %d\n", OY_DBG_ARGS_,
+                   pos, (int)old_regions_n );
+      }
+
+      /* upload the new or changed region to the X server */
+      error = XcolorRegionInsert( xdisplay, w, 0, &region, 1 );
+      if(error)
+        printf( OY_DBG_FORMAT_
+                 "XcolorRegionInsert failed\n",
+                 OY_DBG_ARGS_ );
+      netColorTarget = XInternAtom( xdisplay, "_NET_COLOR_TARGET", True );
+      if(!netColorTarget)
+      {
+        printf( OY_DBG_FORMAT_
+                 "XInternAtom(..\"_NET_COLOR_TARGET\"..) failed\n",
+                 OY_DBG_ARGS_ );
+        error = 1;
+      }
+      if(!error)
+      XChangeProperty( xdisplay, w, netColorTarget, XA_STRING, 8,
+                       PropModeReplace,
+                       (unsigned char*) display_string, strlen(display_string));
+
+      XFlush(xdisplay);
+
+      /* remember the old rectangle */
+        gdisp->old_disp_geometry[0] = gdisp->disp_xoffset + offx - offx2;
+        gdisp->old_disp_geometry[1] = gdisp->disp_yoffset + offy - offy2;
+        gdisp->old_disp_geometry[2] = gdisp->disp_width - dim_corr_x;
+        gdisp->old_disp_geometry[3] = gdisp->disp_height - dim_corr_y;
+    }
+  }
+#endif
+}
+
diff --git a/app/gdisplay_ops.h b/app/gdisplay_ops.h
index 4ab7e7a..f16096b 100644
--- a/app/gdisplay_ops.h
+++ b/app/gdisplay_ops.h
@@ -28,5 +28,6 @@ void    gdisplay_new_view     (GDisplay *);
 void    gdisplay_close_window (GDisplay *, int);
 void    gdisplay_shrink_wrap  (GDisplay *);
 int     gdisplay_resize_image (GDisplay *);
+void    gdisplay_set_colour_region( GDisplay * );
 
 #endif  /* __GDISPLAY_OPS_H__ */
diff --git a/app/menus.c b/app/menus.c
index 5f4dff3..0b8535b 100644
--- a/app/menus.c
+++ b/app/menus.c
@@ -1323,8 +1323,10 @@ menus_set_sensitive (char *path,
       if (widget)
 	gtk_widget_set_sensitive (widget, sensitive);
     }
+#ifdef DEBUG_
   if (!ifactory || !widget)
     e_printf ("Unable to set sensitivity for menu which doesn't exist:\n%s", tpath);
+#endif
 
   if(tpath) free(tpath);
 }
@@ -1351,8 +1353,10 @@ menus_set_state (char *path,
       else
 	widget = NULL;
     }
+#ifdef DEBUG_
   if (!ifactory || !widget)
     e_printf ("Unable to set state for menu which doesn't exist:\n%s", tpath);
+#endif
 
   if(tpath) free(tpath);
 }
diff --git a/app/scale.c b/app/scale.c
index de8a597..71137d9 100644
--- a/app/scale.c
+++ b/app/scale.c
@@ -66,6 +66,8 @@ resize_display (GDisplay *gdisp,
   /* re-enable the active tool */
   active_tool_control (RESUME, (void *) gdisp);
   zoom_view_changed(gdisp);
+  if (!resize_window)
+    gdisplay_set_colour_region(gdisp);
 }
 
 
diff --git a/app/store_frame_manager.c b/app/store_frame_manager.c
index fd1c6ac..cb66e56 100644
--- a/app/store_frame_manager.c
+++ b/app/store_frame_manager.c
@@ -56,6 +56,7 @@
 #include "plug_in.h"
 #include "spline.h"
 #include "layer_pvt.h"
+#include "scale.h"
 
 #include "buttons/play_forward.xpm"
 #include "buttons/play_forward_is.xpm"
@@ -1663,12 +1664,12 @@ sfm_frame_create (GDisplay* disp, GImage* img, int num, int active,
 static void
 sfm_frame_make_cur (GDisplay *disp, int row)
 {
-  int i;
 
   gtk_clist_select_row (GTK_CLIST(disp->bfm->sfm->store_list), row, 5);
 
   /* update wait run */
 #if GTK_MAJOR_VERSION < 2
+  int i;
   for( i = 0; i < 12; ++i)
 #endif
     while (gtk_events_pending())
@@ -1683,6 +1684,8 @@ sfm_store_make_cur (GDisplay *gdisplay, int row)
   store_frame_manager *fm;
   char tmp[256];
   SplineTool *spline_tool=NULL;
+  int geo[2] = {0,0};
+  static int geo_changed = 0;
 
   if (row == -1)
     return;
@@ -1710,10 +1713,25 @@ sfm_store_make_cur (GDisplay *gdisplay, int row)
     }
 
   /* display the new store */
+  geo[0] = gdisplay->gimage->width;
+  geo[1] = gdisplay->gimage->height;
   gdisplay->gimage = item->gimage;
   gdisplay->ID = item->gimage->ID;
   gdisplays_update_title (gdisplay->gimage->ID);
-  gdisplay_add_update_area (gdisplay, fm->s_x, fm->s_y, fm->e_x, fm->e_y);
+  if(geo[0] == gdisplay->gimage->width &&
+     geo[1] == gdisplay->gimage->height)
+    gdisplay_add_update_area (gdisplay, fm->s_x, fm->s_y, fm->e_x, fm->e_y);
+  else
+  {
+    int resize_window = FALSE,
+        redisplay = TRUE;
+    geo_changed = 1;
+    resize_display (gdisplay, resize_window, redisplay );
+  }
+
+  if(geo_changed)
+    gdisplay_add_update_area( gdisplay, 0, 0,
+                              item->gimage->width, item->gimage->height );
 #if 0
   if (active_tool->type == CLONE)
     clone_flip_image ();
@@ -2392,6 +2410,14 @@ sfm_store_add_dialog_create (GDisplay *disp)
     }
 }
 
+#define NO_HARD_WM_BORDERS_X -52
+#define NO_HARD_WM_BORDERS_Y -75
+#define NO_HARD_WM_BORDERS_X2 +92
+#define NO_HARD_WM_BORDERS_Y2 +105
+
+/* useful for twm */
+/* #define WM_CAN_NO_FULLSCREEN 1 */
+
 void 
 sfm_slide_show_callback (GtkWidget *w, gpointer data)
 {
@@ -2408,25 +2434,47 @@ sfm_slide_show_callback (GtkWidget *w, gpointer data)
       display->slide_show = display->slide_show ? 0 : 1;
       if(display->slide_show)
 	{
+#ifdef WM_CAN_NO_FULLSCREEN
+          /* Just fit inside the available screen and show window title.
+           *  A real full screen mode is different. */
+          int add_x=0, add_x1=0, add_y=0, add_y2=0;
+          /* Modern window managers, like Compiz have hard y borders and move a 
+             window to the next virtual desktop if they feel good with that. */
+          add_x = NO_HARD_WM_BORDERS_X;
+          add_y = NO_HARD_WM_BORDERS_Y;
+          add_x1 = NO_HARD_WM_BORDERS_X2;
+          add_y2 = NO_HARD_WM_BORDERS_Y2;
+#endif
           if(GTK_WIDGET_VISIBLE(display->hrule))
             rulers_visible = 1;
 	  gdk_window_get_geometry(window->window, &win_x, &win_y, &win_w, &win_h, &win_d);
 
+	  gtk_container_set_border_width(GTK_CONTAINER(window), 0);
 	  gtk_widget_hide(display->menubar);
 	  gtk_widget_hide(display->hsb);
 	  gtk_widget_hide(display->vsb);
 	  gtk_widget_hide(display->hrule);
 	  gtk_widget_hide(display->vrule);
 
-	  gdk_window_move_resize (window->window, -50, -75, gdk_screen_width()+92, 
-				  gdk_screen_height()+105);
-	  gtk_window_set_default_size (GTK_WINDOW (window), gdk_screen_width()+92,
-				       gdk_screen_height()+105);
-	  gtk_widget_set_usize (GTK_WIDGET(window), gdk_screen_width()+92, 
-				gdk_screen_height()+105);
+#ifdef WM_CAN_NO_FULLSCREEN
+	  gdk_window_move_resize (window->window, add_x, add_y,
+                                  gdk_screen_width() + add_x1,
+				  gdk_screen_height() + add_y2);
+	  gtk_window_set_default_size (GTK_WINDOW (window),
+                                       gdk_screen_width() + add_x1,
+				       gdk_screen_height() + add_y2);
+	  gtk_widget_set_usize (GTK_WIDGET(window),
+                                gdk_screen_width() + add_x1, 
+				gdk_screen_height() + add_y2);
+#else
+          gtk_window_fullscreen( GTK_WINDOW(window) );
+#endif
 	}
       else
 	{
+#ifndef WM_CAN_NO_FULLSCREEN
+          gtk_window_unfullscreen( GTK_WINDOW(window) );
+#endif
 	  gdk_window_move_resize (window->window, win_x, win_y, win_w, win_h);
 	  gtk_window_set_default_size (GTK_WINDOW (window), win_w, win_h);
 	  gtk_widget_set_usize (GTK_WIDGET(window), win_w, win_h);
