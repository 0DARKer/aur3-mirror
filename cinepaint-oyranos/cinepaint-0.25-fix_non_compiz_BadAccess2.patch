diff --git a/app/disp_callbacks.c b/app/disp_callbacks.c
index 9708a23..f48afc6 100644
--- a/app/disp_callbacks.c
+++ b/app/disp_callbacks.c
@@ -231,6 +231,9 @@ static void gdisplay_set_colour_region(GDisplay * gdisp)
 #ifdef GDK_WINDOWING_X11
   gint       i,j;
 
+  if(!gdk_window_is_visible(gdisp->canvas->window))
+    return;
+
   if( gdisp->old_disp_geometry[0] != gdisp->disp_xoffset ||
       gdisp->old_disp_geometry[1] != gdisp->disp_yoffset ||
       gdisp->old_disp_geometry[2] != gdisp->disp_width ||
@@ -240,13 +243,15 @@ static void gdisplay_set_colour_region(GDisplay * gdisp)
     GdkWindow * event_box = gtk_widget_get_window(gdisp->canvas);
     GdkWindow * top_window = gdk_window_get_toplevel(event_box);
     Window w = GDK_WINDOW_XID(top_window);
+    Display    *xdisplay;
+    GdkScreen  *screen;
     int offx = 0, offy = 0, offx2 = 0, offy2 = 0;
     gdk_window_get_origin( event_box, &offx, &offy );
     gdk_window_get_origin( top_window, &offx2, &offy2 );
-    Display    *xdisplay = gdk_x11_display_get_xdisplay (display);
-    GdkScreen  *screen  = gdk_screen_get_default ();
-    Window root = GDK_WINDOW_XID( gdk_screen_get_root_window (screen) );
+    xdisplay = gdk_x11_display_get_xdisplay (display);
+    screen  = gdk_screen_get_default ();
 
+    {
       XRectangle rec[2] = { { 0,0,0,0 }, { 0,0,0,0 } },
                * rect = 0;
       int nRect = 0;
@@ -257,6 +262,8 @@ static void gdisplay_set_colour_region(GDisplay * gdisp)
       const char * display_string = DisplayString(xdisplay);
       int dim_corr_x, dim_corr_y,
           inner_dis_x, inner_dist_y;
+      int error;
+      Atom netColorTarget;
 
       inner_dis_x = offx - offx2;
       inner_dist_y = offy - offy2;
@@ -339,12 +346,20 @@ static void gdisplay_set_colour_region(GDisplay * gdisp)
       }
 
       /* upload the new or changed region to the X server */
-      int error = XcolorRegionInsert( xdisplay, w, 0, &region, 1 );
+      error = XcolorRegionInsert( xdisplay, w, 0, &region, 1 );
       if(error)
         printf( OY_DBG_FORMAT_
                  "XcolorRegionInsert failed\n",
                  OY_DBG_ARGS_ );
-      Atom netColorTarget = XInternAtom( xdisplay, "_NET_COLOR_TARGET", True );
+      netColorTarget = XInternAtom( xdisplay, "_NET_COLOR_TARGET", True );
+      if(!netColorTarget)
+      {
+        printf( OY_DBG_FORMAT_
+                 "XInternAtom(..\"_NET_COLOR_TARGET\"..) failed\n",
+                 OY_DBG_ARGS_ );
+        error = 1;
+      }
+      if(!error)
       XChangeProperty( xdisplay, w, netColorTarget, XA_STRING, 8,
                        PropModeReplace,
                        (unsigned char*) display_string, strlen(display_string));
@@ -356,6 +371,7 @@ static void gdisplay_set_colour_region(GDisplay * gdisp)
         gdisp->old_disp_geometry[1] = gdisp->disp_yoffset + offy - offy2;
         gdisp->old_disp_geometry[2] = gdisp->disp_width - dim_corr_x;
         gdisp->old_disp_geometry[3] = gdisp->disp_height - dim_corr_y;
+    }
   }
 #endif
 }
@@ -461,6 +477,11 @@ gdisplay_canvas_events (GtkWidget *canvas,
 #     endif
       redraw (gdisp, eevent->area.x, eevent->area.y,
           eevent->area.width, eevent->area.height);
+      if( gdisp->old_disp_geometry[0] == 0 &&
+          gdisp->old_disp_geometry[1] == 0 &&
+          gdisp->old_disp_geometry[2] == 0 &&
+          gdisp->old_disp_geometry[3] == 0 )
+        gdisplay_set_colour_region(gdisp);
       return_val = TRUE;
       break;
 
