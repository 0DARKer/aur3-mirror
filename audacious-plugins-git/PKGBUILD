# $Id$
# Maintainer: Radioactiveman <thomas-lange2@gmx.de>
# Contributor: Gaetan Bisson <bisson@archlinux.org>
# Contributor: Alexander Fehr <pizzapunk gmail com>
# Contributor: William Rea <sillywilly@gmail.com>

pkgname=audacious-plugins-git
pkgver=20120924
pkgrel=1
pkgdesc="Plugins for Audacious"
url="http://audacious-media-player.org/"
license=('custom:BSD' 'GPL3')
arch=('i686' 'x86_64')

makedepends=("audacious-git>=${pkgver}"
             'oss' 'alsa-lib' 'pulseaudio' 'jack2' 'lame' 'libvorbis' 'flac'
             'mpg123' 'faad2' 'ffmpeg' 'libmodplug' 'fluidsynth' 'libcdio'
             'libsidplay' 'wavpack' 'libnotify' 'lirc-utils' 'curl' 'libmtp'
             'neon' 'libmms' 'libcue' 'git')

optdepends=('oss: Open Sound System v4 output'
            'alsa-lib: Advanced Linux Sound Arch. output'
            'pulseaudio: PulseAudio output'
            'jack2: Jack Audio Connection Kit output'
            'lame: FileWriter MP3 output'
            'libvorbis: Vorbis input, FileWriter Vorbis output'
            'flac: FLAC input, FileWriter FLAC output'

            'mpg123: MP3 input'
            'faad2: AAC input'
            'ffmpeg: ffaudio input'
            'libmodplug: modplug input'
            'fluidsynth: MIDI FluidSynth backend input'
            'libcdio: CD Digital Audio input'
            'libsidplay: Commodore 64 audio input'
            'wavpack: WavPack input'

            'libnotify: libnotify OSD'
            'lirc-utils: LIRC'
            'curl: AudioScrobbler Client'
            'libmtp: Upload to MTP device'

            'neon: neon-based http transport'
            'libmms: libmms-based mms transport'
            'libcue: CUE playlist format')

provides=('audacious-plugins')
conflicts=('audacious-plugins' 'audacious-plugins-hg')

_gitroot="git://github.com/audacious-media-player/audacious-plugins.git"
_gitname="audacious-plugins"
_branch="master" # Choose between 'master' (devel), '3.3.x' and '3.2.x' (legacy)

build() {
    msg "Connecting to GIT server..."

    if [[ -d ${_gitname} ]]; then
        ( cd ${_gitname} && git pull origin )
        msg "The local files are updated."
    else
        git clone -b ${_branch} ${_gitroot}
    fi

    msg "GIT checkout done or server timeout"
    msg "Starting make..."

    rm -rf ${_gitname}-build
    git clone ${_gitname}{,-build}
    cd ${_gitname}-build

    ./autogen.sh
    ./configure \
        --prefix=/usr \
        --enable-amidiplug \
        --disable-adplug \

    make
}

package() {
    cd "${srcdir}/${_gitname}-build"
    make DESTDIR="${pkgdir}" install
    install -Dm644 COPYING "${pkgdir}/usr/share/licenses/${pkgname}/LICENSE"
}
