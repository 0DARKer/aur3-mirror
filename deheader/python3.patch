--- deheader.orig	2010-12-28 13:38:49.000000000 -0800
+++ deheader	2010-12-28 14:04:46.000000000 -0800
@@ -1226,11 +1226,11 @@
             if not os.path.isdir(root):
                 if excludes and excludes.search(root):
                     if verbose > 1:
-                        print "deheader: %s excluded" % root
+                        print ("deheader: %s excluded" % root)
                 elif InclusionMap.c_source(root):
                     self.files.append(root)
                 else:
-                    print >>sys.stderr, "deheader: can't analyze %s" % root
+                    print ("deheader: can't analyze %s" % root, file=sys.stderr)
             else:
                 for root, dirs, files in os.walk(root):
                     dirs = filter(lambda x: not x.startswith("."), dirs)
@@ -1238,7 +1238,7 @@
                         path = os.path.join(root, name)
                         if excludes and excludes.search(path):
                             if verbose > 1:
-                                print "deheader: %s excluded" % root
+                                print ("deheader: %s excluded" % root)
                         elif InclusionMap.c_source(path):
                             self.files.append(path)
         self.depends_on = {}
@@ -1260,15 +1260,15 @@
                 elif line.startswith("#include"):            
                     if verbosity >= PROGRESS_DEBUG:
                         name = trim(line)
-                        print "deheader: %s includes %s" % (sourcefile, name)
+                        print ("deheader: %s includes %s" % (sourcefile, name))
                     if ignore and ignore.search(line):
                         if verbosity >= PROGRESS_DEBUG:
-                            print "deheader: ignoring %s (exclusion match with %s)." % (name, ignore.pattern)
+                            print ("deheader: ignoring %s (exclusion match with %s)." % (name, ignore.pattern))
                         continue
                     if not conditions or conditions == ["S_SPLINT_S"]:
                         includes.append(line)
                     elif verbose > 1:
-                        print "deheader: ignoring %s (conditional inclusion)" % name
+                        print ("deheader: ignoring %s (conditional inclusion)" % name)
                 for (r, c, h) in compiled:
                     if c.search(line):
                         if not set(h).issubset(set(seen)):
@@ -1282,7 +1282,7 @@
                 trimmedcount[ref] = trimmedcount.get(ref, 0) + 1
             for ref in trimmedcount:
                 if trimmedcount[ref] > 1:
-                    print "deheader: %s has more than one inclusion of %s" % (sourcefile, ref)
+                    print ("deheader: %s has more than one inclusion of %s" % (sourcefile, ref))
     def forget(self, sourcefile, header):
         "Forget a header dependency."
         self.depends_on[sourcefile].remove(header)
@@ -1323,7 +1323,7 @@
     elif trimmed[0] == '<':
         return trimmed.split('>')[0] + ">"
     else:
-        return `line`
+        return line
 
 def testcompile(source, maker, msg="", verbosity=0):
     "Test-compile a sourcefile.  Return the status and the compilation time"
@@ -1344,8 +1344,8 @@
     else:
         explain = "succeeded"
     if verbosity >= PROGRESS_DEBUG:
-        print "deheader: %s%s %s." \
-          % (sourcefile, msg, explain)
+        print ("deheader: %s%s %s." \
+          % (sourcefile, msg, explain))
     if os.path.exists(derived):
         os.remove(derived)
     return (status, end - start)
@@ -1370,7 +1370,7 @@
                     for required in requirements:
                         if required in header:
                             if verbosity >= PROGRESS_DEBUG:
-                                print "deheader: in %s, %s prevents uninclusion of %s" % (sourcefile, trigger, trim(header))
+                                print ("deheader: in %s, %s prevents uninclusion of %s" % (sourcefile, trigger, trim(header)))
                             retain += 1
                 if not retain:
                     saveit.remove_headers([header])
@@ -1390,7 +1390,7 @@
     stillhere = map(trim, includes)
     for (requirement, trigger) in requires:
         if not set(requirement).issubset(stillhere):
-            print "deheader: in %s, %s portability requires %s." % (sourcefile, trigger, ",".join(requirement))
+            print ("deheader: in %s, %s portability requires %s." % (sourcefile, trigger, ",".join(requirement)))
     return unneeded
 
 def deheader(sourcefile, maker, includes, requires, remove, verbose):
@@ -1404,7 +1404,7 @@
                                  includes[:], requires, verbose)
         if unneeded:
             for line in unneeded:
-                print "deheader: remove %s from %s" % (trim(line), sourcefile)
+                print ("deheader: remove %s from %s" % (trim(line), sourcefile))
             if remove:
                 remove_it = SaveForModification(sourcefile)
                 remove_it.remove_headers(unneeded)
@@ -1412,7 +1412,7 @@
                 del remove_it
         return Summary([sourcefile], includes, unneeded)
     else:
-        print >>sys.stderr, "deheader: basic compilation failed on %s" % (sourcefile,)
+        print ("deheader: basic compilation failed on %s" % (sourcefile,), file=sys.stderr)
         return Summary([sourcefile], includes, [])
 
 # After-action analysis starts here
@@ -1455,8 +1455,8 @@
         elif switch in ('-v', '--verbose'):
             verbose += 1
         elif switch in ('-V', '--version'):
-            print "deheader", version
-            raise SystemExit, 0
+            print ("deheader", version)
+            raise SystemExit(0)
         elif switch in ('-x', '--exclude'):
             excludes = val
     if not ignores:
@@ -1476,7 +1476,7 @@
     stats = Summary()
     for summary in summaries:
         stats = stats + summary
-    print "deheader: saw", stats
-    raise SystemExit, 0
+    print ("deheader: saw", stats)
+    raise SystemExit(0)
 
 # End
