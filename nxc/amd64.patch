Only in nbc_amd64/: ParamUtils.o
Only in nbc_amd64/: ParamUtils.ppu
diff -rup nbc/bricktools/FANTOMFPC.PAS nbc_amd64/bricktools/FANTOMFPC.PAS
--- nbc/bricktools/FANTOMFPC.PAS	2008-04-03 04:05:20.000000000 +0200
+++ nbc_amd64/bricktools/FANTOMFPC.PAS	2009-01-11 13:54:09.000000000 +0100
@@ -7,61 +7,61 @@ uses
 
 {$I FANTOM_CONST.INC}
 
-function createNXT(resString : PChar; var status : integer; checkFWversion : byte) : Cardinal;
-function createNXTIterator(searchBluetooth : byte; bluetoothSearchTimeout : Cardinal; var status : integer) : Cardinal;
-function iFile_getAvailableSize(fileHandle : Cardinal; var status : integer) : Cardinal;
-function iFile_getSize(fileHandle : Cardinal; var status : integer) : Cardinal;
-function iFileIterator_getFile(iterHandle : Cardinal; var status : integer) : Cardinal;
-function iFileIterator_getSize(fileIterHandle : Cardinal; var status : integer) : Cardinal;
-function iModule_getIOMapSize(moduleHandle : Cardinal; var status : integer) : Cardinal;
-function iModule_getModuleID(moduleHandle : Cardinal; var status : integer) : Cardinal;
-function iModule_getModuleSize(moduleHandle : Cardinal; var status : integer) : Cardinal;
-function iModule_readIOMap(moduleHandle : Cardinal; offset : Cardinal; numberBytesToRead : Cardinal; dataBuffer : PByte; var status : integer) : Cardinal;
-function iModule_writeIOMap(moduleHandle : Cardinal; offset : Cardinal; numberBytesToWrite : Cardinal; dataBuffer : PByte; var status : integer) : Cardinal;
-function iModuleIterator_getModule(modIterHandle : Cardinal; var status : integer) : Cardinal;
-function iNXT_createFile(nxtHandle : Cardinal; const filename : PChar; var status : integer) : Cardinal;
-function iNXT_createFileIterator(nxtHandle : Cardinal; filePattern : PChar; var status : integer) : Cardinal;
-function iNXT_createModule(nxtHandle : Cardinal; moduleName : PChar; moduleID : Cardinal; moduleSize : Cardinal; IOMapSize : Cardinal; var status : integer) : Cardinal;
-function iNXT_createModuleIterator(nxtHandle : Cardinal; moduleNamePattern : PChar; var status : integer) : Cardinal;
-function iNXT_pollAvailableLength(nxtHandle : Cardinal; bufferSelector : Cardinal; var status : integer) : Cardinal;
-function iNXT_readBufferData(nxtHandle : Cardinal; dataBuffer : PByte; bufferSelector : Cardinal; numberOfBytesToRead : Cardinal; var status : integer) : Cardinal;
-function iNXT_write(nxtHandle : Cardinal; writeBuffer : PByte; writeBufferSize : Cardinal; var status : integer) : Cardinal;
-function iNXTIterator_getNXT(nxtIterHandle : Cardinal; var status : integer) : Cardinal;
-
-procedure destroyNXT(nxtHandle : Cardinal; var status : integer);
-procedure destroyNXTIterator(nxtIteratorHandle : Cardinal; var status : integer);
-procedure iFile_close(fileHandle : Cardinal; var status : integer);
-procedure iFile_getName(fileHandle : Cardinal; filename : PChar; var status : integer);
-procedure iFile_openForDataAppend(fileHandle : Cardinal; var status : integer);
-procedure iFile_openForDataWrite(fileHandle : Cardinal; sizeInBytes : Cardinal; var status : integer);
-procedure iFile_openForLinearWrite(fileHandle : Cardinal; sizeInBytes : Cardinal; var status : integer);
-procedure iFile_openForRead(fileHandle : Cardinal; var status : integer);
-procedure iFile_openForWrite(fileHandle : Cardinal; fileSize : Cardinal; var status : integer);
-procedure iFile_read(fileHandle : Cardinal; fileDataBuffer : PByte; bufferSize : Cardinal; var status : integer);
-procedure iFile_remove(fileHandle : Cardinal; var status : integer);
-procedure iFile_write(fileHandle : Cardinal; writeBuffer : PByte; writeBufferLength : Cardinal; var status : integer);
-procedure iFileIterator_advance(iterHandle : Cardinal; var status : integer);
-procedure iFileIterator_getName(iterHandle : Cardinal; filename : PChar; var status : integer);
-procedure iModule_getName(moduleHandle : Cardinal; moduleName : PChar; var status : integer);
-procedure iModuleIterator_advance(modIterHandle : Cardinal; var status : integer);
-procedure iModuleIterator_getName(modIterHandle : Cardinal; moduleName : PChar; var status : integer);
-procedure iNXT_bluetoothFactoryReset(nxtHandle : Cardinal; var status : integer);
+function createNXT(resString : PChar; var status : integer; checkFWversion : byte) : QWord;
+function createNXTIterator(searchBluetooth : byte; bluetoothSearchTimeout : QWord; var status : integer) : QWord;
+function iFile_getAvailableSize(fileHandle : QWord; var status : integer) : QWord;
+function iFile_getSize(fileHandle : QWord; var status : integer) : QWord;
+function iFileIterator_getFile(iterHandle : QWord; var status : integer) : QWord;
+function iFileIterator_getSize(fileIterHandle : QWord; var status : integer) : QWord;
+function iModule_getIOMapSize(moduleHandle : QWord; var status : integer) : QWord;
+function iModule_getModuleID(moduleHandle : QWord; var status : integer) : QWord;
+function iModule_getModuleSize(moduleHandle : QWord; var status : integer) : QWord;
+function iModule_readIOMap(moduleHandle : QWord; offset : QWord; numberBytesToRead : QWord; dataBuffer : PByte; var status : integer) : QWord;
+function iModule_writeIOMap(moduleHandle : QWord; offset : QWord; numberBytesToWrite : QWord; dataBuffer : PByte; var status : integer) : QWord;
+function iModuleIterator_getModule(modIterHandle : QWord; var status : integer) : QWord;
+function iNXT_createFile(nxtHandle : QWord; const filename : PChar; var status : integer) : QWord;
+function iNXT_createFileIterator(nxtHandle : QWord; filePattern : PChar; var status : integer) : QWord;
+function iNXT_createModule(nxtHandle : QWord; moduleName : PChar; moduleID : QWord; moduleSize : QWord; IOMapSize : QWord; var status : integer) : QWord;
+function iNXT_createModuleIterator(nxtHandle : QWord; moduleNamePattern : PChar; var status : integer) : QWord;
+function iNXT_pollAvailableLength(nxtHandle : QWord; bufferSelector : QWord; var status : integer) : QWord;
+function iNXT_readBufferData(nxtHandle : QWord; dataBuffer : PByte; bufferSelector : QWord; numberOfBytesToRead : QWord; var status : integer) : QWord;
+function iNXT_write(nxtHandle : QWord; writeBuffer : PByte; writeBufferSize : QWord; var status : integer) : QWord;
+function iNXTIterator_getNXT(nxtIterHandle : QWord; var status : integer) : QWord;
+
+procedure destroyNXT(nxtHandle : QWord; var status : integer);
+procedure destroyNXTIterator(nxtIteratorHandle : QWord; var status : integer);
+procedure iFile_close(fileHandle : QWord; var status : integer);
+procedure iFile_getName(fileHandle : QWord; filename : PChar; var status : integer);
+procedure iFile_openForDataAppend(fileHandle : QWord; var status : integer);
+procedure iFile_openForDataWrite(fileHandle : QWord; sizeInBytes : QWord; var status : integer);
+procedure iFile_openForLinearWrite(fileHandle : QWord; sizeInBytes : QWord; var status : integer);
+procedure iFile_openForRead(fileHandle : QWord; var status : integer);
+procedure iFile_openForWrite(fileHandle : QWord; fileSize : QWord; var status : integer);
+procedure iFile_read(fileHandle : QWord; fileDataBuffer : PByte; bufferSize : QWord; var status : integer);
+procedure iFile_remove(fileHandle : QWord; var status : integer);
+procedure iFile_write(fileHandle : QWord; writeBuffer : PByte; writeBufferLength : QWord; var status : integer);
+procedure iFileIterator_advance(iterHandle : QWord; var status : integer);
+procedure iFileIterator_getName(iterHandle : QWord; filename : PChar; var status : integer);
+procedure iModule_getName(moduleHandle : QWord; moduleName : PChar; var status : integer);
+procedure iModuleIterator_advance(modIterHandle : QWord; var status : integer);
+procedure iModuleIterator_getName(modIterHandle : QWord; moduleName : PChar; var status : integer);
+procedure iNXT_bluetoothFactoryReset(nxtHandle : QWord; var status : integer);
 procedure iNXT_bootIntoFirmwareDownloadMode(resourceName : PChar; var status : integer);
-procedure iNXT_destroyFile(nxtHandle : Cardinal; fileHandle : Cardinal; var status : integer);
-procedure iNXT_destroyFileIterator(nxtHandle : Cardinal; iterHandle : Cardinal; var status : integer);
-procedure iNXT_destroyModule(nxtHandle : Cardinal; moduleHandle : Cardinal; var status : integer);
-procedure iNXT_destroyModuleIterator(nxtHandle : Cardinal; modIterHandle : Cardinal; var status : integer);
-procedure iNXT_downloadFirmware(nxtHandle : Cardinal; firmwareBuffer : PByte; firmwareBufferSize : Cardinal; var status : integer);
-procedure iNXT_eraseUserFlash(nxtHandle : Cardinal; var status : integer);
+procedure iNXT_destroyFile(nxtHandle : QWord; fileHandle : QWord; var status : integer);
+procedure iNXT_destroyFileIterator(nxtHandle : QWord; iterHandle : QWord; var status : integer);
+procedure iNXT_destroyModule(nxtHandle : QWord; moduleHandle : QWord; var status : integer);
+procedure iNXT_destroyModuleIterator(nxtHandle : QWord; modIterHandle : QWord; var status : integer);
+procedure iNXT_downloadFirmware(nxtHandle : QWord; firmwareBuffer : PByte; firmwareBufferSize : QWord; var status : integer);
+procedure iNXT_eraseUserFlash(nxtHandle : QWord; var status : integer);
 procedure iNXT_findDeviceInFirmwareDownloadMode(resString : PChar; var status : integer);
-procedure iNXT_getDeviceInfo(nxtHandle : Cardinal; name : PChar; address : PByte; signalStrength : PByte; var availableFlash : Cardinal; var status : integer);
-procedure iNXT_getFirmwareVersion(nxtHandle : Cardinal; var protocolVersionMajor, protocolVersionMinor, firmwareVersionMajor, firmwareVersionMinor : byte; var status : integer);
-procedure iNXT_getResourceString(nxtHandle : Cardinal; resString : PChar; var status : integer);
-procedure iNXT_read(nxtHandle : Cardinal; readBuffer : PByte; readBufferSize : Cardinal; var status : integer);
-procedure iNXT_sendDirectCommand(nxtHandle : Cardinal; requireResponse : byte; inputBufferPtr : Pbyte; inputBufferSize : Cardinal; outputBufferPtr : PByte; outputBufferSize : Cardinal; var status : integer);
-procedure iNXT_setName(nxtHandle : Cardinal; newName : PChar; var status : integer);
-procedure iNXTIterator_advance(NXTIterHandle : Cardinal; var status : integer);
-procedure iNXTIterator_getName(NXTIterHandle : Cardinal; resString : PChar; var status : integer);
+procedure iNXT_getDeviceInfo(nxtHandle : QWord; name : PChar; address : PByte; signalStrength : PByte; var availableFlash : QWord; var status : integer);
+procedure iNXT_getFirmwareVersion(nxtHandle : QWord; var protocolVersionMajor, protocolVersionMinor, firmwareVersionMajor, firmwareVersionMinor : byte; var status : integer);
+procedure iNXT_getResourceString(nxtHandle : QWord; resString : PChar; var status : integer);
+procedure iNXT_read(nxtHandle : QWord; readBuffer : PByte; readBufferSize : QWord; var status : integer);
+procedure iNXT_sendDirectCommand(nxtHandle : QWord; requireResponse : byte; inputBufferPtr : Pbyte; inputBufferSize : QWord; outputBufferPtr : PByte; outputBufferSize : QWord; var status : integer);
+procedure iNXT_setName(nxtHandle : QWord; newName : PChar; var status : integer);
+procedure iNXTIterator_advance(NXTIterHandle : QWord; var status : integer);
+procedure iNXTIterator_getName(NXTIterHandle : QWord; resString : PChar; var status : integer);
 procedure pairBluetooth(resourceName : PChar; passkey : PChar; pairedResourceName : PChar; var status : integer);
 procedure unpairBluetooth(resourceName : PChar; var status : integer);
 procedure FantomSDKClose;
@@ -210,7 +210,7 @@ begin
   if ReadTO(Handle, @header[0], 2, ms) <> 2 then
     Exit;
 
-  packetSize := header[0] + (header[1]*256);
+  packetSize := Integer(header[0]) + (Integer(header[1])*256);
   if packetSize > Count then
     Exit;
 
@@ -400,16 +400,16 @@ type
     constructor Create(aNXT : TNxt; const aFilename : string); virtual;
     destructor Destroy; override;
     procedure getName(var fileName : string);
-    function  getSize(var status : integer) : Cardinal;
-    function  getAvailableSize(var status : integer) : Cardinal;
+    function  getSize(var status : integer) : QWord;
+    function  getAvailableSize(var status : integer) : QWord;
     procedure openForRead(var status : integer);
-    procedure openForWrite(sizeInBytes : Cardinal; var status : integer);
-    procedure openForLinearWrite(sizeInBytes : Cardinal; var status : integer);
-    procedure openForDataWrite(sizeInBytes : Cardinal; var status : integer);
+    procedure openForWrite(sizeInBytes : QWord; var status : integer);
+    procedure openForLinearWrite(sizeInBytes : QWord; var status : integer);
+    procedure openForDataWrite(sizeInBytes : QWord; var status : integer);
     procedure openForDataAppend(var status : integer);
     procedure close(var status : integer);
-    function  read(bufferPtr : PByte; numberOfBytes : Cardinal; var status : integer) : Cardinal;
-    function  write(bufferPtr : PByte; numberOfBytes : Cardinal; var status : integer) : Cardinal;
+    function  read(bufferPtr : PByte; numberOfBytes : QWord; var status : integer) : QWord;
+    function  write(bufferPtr : PByte; numberOfBytes : QWord; var status : integer) : QWord;
     procedure remove(var status : integer);
   end;
 
@@ -418,7 +418,7 @@ type
     fNXT : TNxt;
     fPattern : string;
     fFileName : string;
-    fSize : Cardinal;
+    fSize : QWord;
     fValid : boolean;
     fFirstTime : boolean;
     fHandle : byte;
@@ -429,25 +429,25 @@ type
     function  getFile(var status : integer) : TNxtFile;
     procedure advance(var status : integer);
     procedure getName(var filename : string; var status : integer);
-    function  getSize(var status : integer) : Cardinal;
+    function  getSize(var status : integer) : QWord;
   end;
 
   TNxtIModule = class
   protected
     fNXT : TNxt;
     fModuleName : string;
-    fModuleID : Cardinal;
-    fSize : Cardinal;
-    fIOMapSize : Cardinal;
+    fModuleID : QWord;
+    fSize : QWord;
+    fIOMapSize : QWord;
   public
     constructor Create(aNXT : TNxt); virtual;
     destructor Destroy; override;
     procedure getName(var moduleName : string);
-    function  getModuleID : Cardinal;
-    function  getModuleSize : Cardinal;
-    function  getModuleIOMapSize : Cardinal;
-    function  readIOMap(offsetInBytes, numberOfBytes : Cardinal; dataBufferPtr : PByte; var status : integer) : Cardinal;
-    function  writeIOMap(offsetInBytes, numberOfBytes : Cardinal; dataBufferPtr : PByte; var status : integer) : Cardinal;
+    function  getModuleID : QWord;
+    function  getModuleSize : QWord;
+    function  getModuleIOMapSize : QWord;
+    function  readIOMap(offsetInBytes, numberOfBytes : QWord; dataBufferPtr : PByte; var status : integer) : QWord;
+    function  writeIOMap(offsetInBytes, numberOfBytes : QWord; dataBufferPtr : PByte; var status : integer) : QWord;
   end;
 
   TNxtIModuleIterator = class
@@ -455,9 +455,9 @@ type
     fNXT : TNxt;
     fPattern : string;
     fModuleName : string;
-    fModuleID : Cardinal;
-    fSize : Cardinal;
-    fIOMapSize : Cardinal;
+    fModuleID : QWord;
+    fSize : QWord;
+    fIOMapSize : QWord;
     fValid : boolean;
     fFirstTime : boolean;
     fHandle : byte;
@@ -480,8 +480,8 @@ type
     fNXTViaUSB : boolean;
     fCurSerialIdx : integer;
     fSearchBT : boolean;
-    fBTTimeout : Cardinal;
-    fBTSeconds : Cardinal;
+    fBTTimeout : QWord;
+    fBTSeconds : QWord;
   public
     constructor Create; virtual;
     destructor Destroy; override;
@@ -510,7 +510,7 @@ type
     function createFileIterator(const fileNamePattern : string; var status : integer) : TNxtFileIterator;
     procedure destroyFileIterator(var fileIteratorPtr : TNxtFileIterator);
     function createModule(const moduleName : string;
-      moduleID, moduleSizeInBytes, ioMapSizeInBytes : Cardinal; var status : integer) : TNxtIModule;
+      moduleID, moduleSizeInBytes, ioMapSizeInBytes : QWord; var status : integer) : TNxtIModule;
     procedure destroyModule(var modulePtr : TNxtIModule);
     function createModuleIterator(const moduleNamePattern : string; var status : integer) : TNxtIModuleIterator;
     procedure destroyModuleIterator(var moduleIteratorPtr : TNxtIModuleIterator);
@@ -519,21 +519,21 @@ type
           var protocolVersionMinorRef : Byte; var firmwareVersionMajorRef : Byte;
           var firmwareVersionMinorRef : Byte; var status : integer);
     function sendDirectCommand(requireResponse : boolean; const commandBufferPtr : PByte;
-          commandBufferSizeInBytes : Cardinal; responseBufferPtr : PByte;
-          responseBufferSizeInBytes : Cardinal; var status : integer) : Cardinal;
+          commandBufferSizeInBytes : QWord; responseBufferPtr : PByte;
+          responseBufferSizeInBytes : QWord; var status : integer) : QWord;
     procedure downloadFirmware(const firmwareBufferPtr : PByte;
-          firmwareBufferSizeInBytes : Cardinal; var status : integer);
-    function write(const bufferPtr : PByte; numberOfBytes : Cardinal;
-          var status : integer) : Cardinal;
-    function read(bufferPtr : PByte; numberOfBytes : Cardinal; var status : integer) : Cardinal;
+          firmwareBufferSizeInBytes : QWord; var status : integer);
+    function write(const bufferPtr : PByte; numberOfBytes : QWord;
+          var status : integer) : QWord;
+    function read(bufferPtr : PByte; numberOfBytes : QWord; var status : integer) : QWord;
     procedure bootIntoFirmwareDownloadMode(var status : integer);
     procedure setName(const newName : string; var status : integer);
     procedure getDeviceInfo(var name : string; bluetoothAddress : PByte;
-          signalStrength : PByte; var availableFlash : Cardinal; var status : integer);
+          signalStrength : PByte; var availableFlash : QWord; var status : integer);
     procedure eraseUserFlash(var status : integer);
-    function pollAvailableLength(bufferSelector : byte; var status : integer) : Cardinal;
+    function pollAvailableLength(bufferSelector : byte; var status : integer) : QWord;
     function readBufferData(dataBuffer : PByte; bufferSelector : byte;
-          numberOfBytesToRead : Cardinal; var status : integer) : Cardinal;
+          numberOfBytesToRead : QWord; var status : integer) : QWord;
     procedure getResourceString(var resString : string; var status : integer);
     procedure bluetoothFactoryReset(var status : integer);
     class function createNXT(const resString : string;
@@ -653,28 +653,28 @@ begin
 end;
 
 function createNXT(resString : PChar; var status : integer;
-  checkFWversion : byte) : Cardinal;
+  checkFWversion : byte) : QWord;
 var
   tmp : TNxt;
 begin
   Result := 0;
   if status < kStatusNoError then Exit;
   tmp := TNxt.createNXT(resString, status, Boolean(checkFWversion));
-  Result := Cardinal(tmp);
+  Result := QWord(tmp);
 end;
 
-function createNXTIterator(searchBluetooth : byte; bluetoothSearchTimeout : Cardinal;
-  var status : integer) : Cardinal;
+function createNXTIterator(searchBluetooth : byte; bluetoothSearchTimeout : QWord;
+  var status : integer) : QWord;
 var
   tmp : TNxtIterator;
 begin
   Result := 0;
   if status < kStatusNoError then Exit;
   tmp := TNxt.createNXTIterator(Boolean(searchBluetooth), bluetoothSearchtimeout, status);
-  Result := Cardinal(tmp);
+  Result := QWord(tmp);
 end;
 
-function iFile_getAvailableSize(fileHandle : Cardinal; var status : integer) : Cardinal;
+function iFile_getAvailableSize(fileHandle : QWord; var status : integer) : QWord;
 var
   tmp : TNxtFile;
 begin
@@ -688,7 +688,7 @@ begin
   end;
 end;
 
-function iFile_getSize(fileHandle : Cardinal; var status : integer) : Cardinal;
+function iFile_getSize(fileHandle : QWord; var status : integer) : QWord;
 var
   tmp : TNxtFile;
 begin
@@ -702,7 +702,7 @@ begin
   end;
 end;
 
-function iFileIterator_getFile(iterHandle : Cardinal; var status : integer) : Cardinal;
+function iFileIterator_getFile(iterHandle : QWord; var status : integer) : QWord;
 var
   tmp : TNxtFileIterator;
 begin
@@ -710,13 +710,13 @@ begin
   if status < kStatusNoError then Exit;
   try
     tmp := TNxtFileIterator(iterHandle);
-    Result := Cardinal(tmp.getFile(status));
+    Result := QWord(tmp.getFile(status));
   except
     status := kStatusFWIllegalHandle;
   end;
 end;
 
-function iFileIterator_getSize(fileIterHandle : Cardinal; var status : integer) : Cardinal;
+function iFileIterator_getSize(fileIterHandle : QWord; var status : integer) : QWord;
 var
   tmp : TNxtFileIterator;
 begin
@@ -730,7 +730,7 @@ begin
   end;
 end;
 
-function iModule_getIOMapSize(moduleHandle : Cardinal; var status : integer) : Cardinal;
+function iModule_getIOMapSize(moduleHandle : QWord; var status : integer) : QWord;
 var
   tmp : TNxtIModule;
 begin
@@ -745,7 +745,7 @@ begin
   end;
 end;
 
-function iModule_getModuleID(moduleHandle : Cardinal; var status : integer) : Cardinal;
+function iModule_getModuleID(moduleHandle : QWord; var status : integer) : QWord;
 var
   tmp : TNxtIModule;
 begin
@@ -760,7 +760,7 @@ begin
   end;
 end;
 
-function iModule_getModuleSize(moduleHandle : Cardinal; var status : integer) : Cardinal;
+function iModule_getModuleSize(moduleHandle : QWord; var status : integer) : QWord;
 var
   tmp : TNxtIModule;
 begin
@@ -775,8 +775,8 @@ begin
   end;
 end;
 
-function iModule_readIOMap(moduleHandle : Cardinal; offset : Cardinal;
-  numberBytesToRead : Cardinal; dataBuffer : PByte; var status : integer) : Cardinal;
+function iModule_readIOMap(moduleHandle : QWord; offset : QWord;
+  numberBytesToRead : QWord; dataBuffer : PByte; var status : integer) : QWord;
 var
   tmp : TNxtIModule;
 begin
@@ -790,8 +790,8 @@ begin
   end;
 end;
 
-function iModule_writeIOMap(moduleHandle : Cardinal; offset : Cardinal;
-  numberBytesToWrite : Cardinal; dataBuffer : PByte; var status : integer) : Cardinal;
+function iModule_writeIOMap(moduleHandle : QWord; offset : QWord;
+  numberBytesToWrite : QWord; dataBuffer : PByte; var status : integer) : QWord;
 var
   tmp : TNxtIModule;
 begin
@@ -805,8 +805,8 @@ begin
   end;
 end;
 
-function iModuleIterator_getModule(modIterHandle : Cardinal;
-  var status : integer) : Cardinal;
+function iModuleIterator_getModule(modIterHandle : QWord;
+  var status : integer) : QWord;
 var
   tmp : TNxtIModuleIterator;
 begin
@@ -814,14 +814,14 @@ begin
   if status < kStatusNoError then Exit;
   try
     tmp := TNxtIModuleIterator(modIterHandle);
-    Result := Cardinal(tmp.getModule(status));
+    Result := QWord(tmp.getModule(status));
   except
     status := kStatusFWIllegalHandle;
   end;
 end;
 
-function iNXT_createFile(nxtHandle : Cardinal; const filename : PChar;
-  var status : integer) : Cardinal;
+function iNXT_createFile(nxtHandle : QWord; const filename : PChar;
+  var status : integer) : QWord;
 var
   tmp : TNxt;
 begin
@@ -829,14 +829,14 @@ begin
   if status < kStatusNoError then Exit;
   try
     tmp := TNxt(nxtHandle);
-    Result := Cardinal(tmp.createFile(filename, status));
+    Result := QWord(tmp.createFile(filename, status));
   except
     status := kStatusFWIllegalHandle;
   end;
 end;
 
-function iNXT_createFileIterator(nxtHandle : Cardinal; filePattern : PChar;
-  var status : integer) : Cardinal;
+function iNXT_createFileIterator(nxtHandle : QWord; filePattern : PChar;
+  var status : integer) : QWord;
 var
   tmp : TNxt;
 begin
@@ -844,15 +844,15 @@ begin
   if status < kStatusNoError then Exit;
   try
     tmp := TNxt(nxtHandle);
-    Result := Cardinal(tmp.createFileIterator(filePattern, status));
+    Result := QWord(tmp.createFileIterator(filePattern, status));
   except
     status := kStatusFWIllegalHandle;
   end;
 end;
 
-function iNXT_createModule(nxtHandle : Cardinal; moduleName : PChar;
-  moduleID : Cardinal; moduleSize : Cardinal; IOMapSize : Cardinal;
-  var status : integer) : Cardinal;
+function iNXT_createModule(nxtHandle : QWord; moduleName : PChar;
+  moduleID : QWord; moduleSize : QWord; IOMapSize : QWord;
+  var status : integer) : QWord;
 var
   tmp : TNxt;
 begin
@@ -860,14 +860,14 @@ begin
   if status < kStatusNoError then Exit;
   try
     tmp := TNxt(nxtHandle);
-    Result := Cardinal(tmp.createModule(moduleName, moduleID, moduleSize, IOMapSize, status));
+    Result := QWord(tmp.createModule(moduleName, moduleID, moduleSize, IOMapSize, status));
   except
     status := kStatusFWIllegalHandle;
   end;
 end;
 
-function iNXT_createModuleIterator(nxtHandle : Cardinal;
-  moduleNamePattern : PChar; var status : integer) : Cardinal;
+function iNXT_createModuleIterator(nxtHandle : QWord;
+  moduleNamePattern : PChar; var status : integer) : QWord;
 var
   tmp : TNxt;
 begin
@@ -875,14 +875,14 @@ begin
   if status < kStatusNoError then Exit;
   try
     tmp := TNxt(nxtHandle);
-    Result := Cardinal(tmp.createModuleIterator(moduleNamePattern, status));
+    Result := QWord(tmp.createModuleIterator(moduleNamePattern, status));
   except
     status := kStatusFWIllegalHandle;
   end;
 end;
 
-function iNXT_pollAvailableLength(nxtHandle : Cardinal;
-  bufferSelector : Cardinal; var status : integer) : Cardinal;
+function iNXT_pollAvailableLength(nxtHandle : QWord;
+  bufferSelector : QWord; var status : integer) : QWord;
 var
   tmp : TNxt;
 begin
@@ -896,8 +896,8 @@ begin
   end;
 end;
 
-function iNXT_readBufferData(nxtHandle : Cardinal; dataBuffer : PByte;
-  bufferSelector : Cardinal; numberOfBytesToRead : Cardinal; var status : integer) : Cardinal;
+function iNXT_readBufferData(nxtHandle : QWord; dataBuffer : PByte;
+  bufferSelector : QWord; numberOfBytesToRead : QWord; var status : integer) : QWord;
 var
   tmp : TNxt;
 begin
@@ -911,8 +911,8 @@ begin
   end;
 end;
 
-function iNXT_write(nxtHandle : Cardinal; writeBuffer : PByte;
-  writeBufferSize : Cardinal; var status : integer) : Cardinal;
+function iNXT_write(nxtHandle : QWord; writeBuffer : PByte;
+  writeBufferSize : QWord; var status : integer) : QWord;
 var
   tmp : TNxt;
 begin
@@ -926,7 +926,7 @@ begin
   end;
 end;
 
-function iNXTIterator_getNXT(nxtIterHandle : Cardinal; var status : integer) : Cardinal;
+function iNXTIterator_getNXT(nxtIterHandle : QWord; var status : integer) : QWord;
 var
   tmp : TNxtIterator;
 begin
@@ -934,13 +934,13 @@ begin
   if status < kStatusNoError then Exit;
   try
     tmp := TNxtIterator(nxtIterHandle);
-    Result := Cardinal(tmp.getNXT(status));
+    Result := QWord(tmp.getNXT(status));
   except
     status := kStatusFWIllegalHandle;
   end;
 end;
 
-procedure destroyNXT(nxtHandle : Cardinal; var status : integer);
+procedure destroyNXT(nxtHandle : QWord; var status : integer);
 var
   tmp : TNxt;
 begin
@@ -954,7 +954,7 @@ begin
   end;
 end;
 
-procedure destroyNXTIterator(nxtIteratorHandle : Cardinal; var status : integer);
+procedure destroyNXTIterator(nxtIteratorHandle : QWord; var status : integer);
 var
   tmp : TNxtIterator;
 begin
@@ -968,7 +968,7 @@ begin
   end;
 end;
 
-procedure iFile_close(fileHandle : Cardinal; var status : integer);
+procedure iFile_close(fileHandle : QWord; var status : integer);
 var
   tmp : TNxtFile;
 begin
@@ -981,7 +981,7 @@ begin
   end;
 end;
 
-procedure iFile_getName(fileHandle : Cardinal; filename : PChar;
+procedure iFile_getName(fileHandle : QWord; filename : PChar;
   var status : integer);
 var
   tmp : TNxtFile;
@@ -998,7 +998,7 @@ begin
   end;
 end;
 
-procedure iFile_openForDataAppend(fileHandle : Cardinal; var status : integer);
+procedure iFile_openForDataAppend(fileHandle : QWord; var status : integer);
 var
   tmp : TNxtFile;
 begin
@@ -1011,7 +1011,7 @@ begin
   end;
 end;
 
-procedure iFile_openForDataWrite(fileHandle : Cardinal; sizeInBytes : Cardinal;
+procedure iFile_openForDataWrite(fileHandle : QWord; sizeInBytes : QWord;
   var status : integer);
 var
   tmp : TNxtFile;
@@ -1025,7 +1025,7 @@ begin
   end;
 end;
 
-procedure iFile_openForLinearWrite(fileHandle : Cardinal; sizeInBytes : Cardinal;
+procedure iFile_openForLinearWrite(fileHandle : QWord; sizeInBytes : QWord;
   var status : integer);
 var
   tmp : TNxtFile;
@@ -1039,7 +1039,7 @@ begin
   end;
 end;
 
-procedure iFile_openForRead(fileHandle : Cardinal; var status : integer);
+procedure iFile_openForRead(fileHandle : QWord; var status : integer);
 var
   tmp : TNxtFile;
 begin
@@ -1052,7 +1052,7 @@ begin
   end;
 end;
 
-procedure iFile_openForWrite(fileHandle : Cardinal; fileSize : Cardinal;
+procedure iFile_openForWrite(fileHandle : QWord; fileSize : QWord;
   var status : integer);
 var
   tmp : TNxtFile;
@@ -1066,8 +1066,8 @@ begin
   end;
 end;
 
-procedure iFile_read(fileHandle : Cardinal; fileDataBuffer : PByte;
-  bufferSize : Cardinal; var status : integer);
+procedure iFile_read(fileHandle : QWord; fileDataBuffer : PByte;
+  bufferSize : QWord; var status : integer);
 var
   tmp : TNxtFile;
 begin
@@ -1080,7 +1080,7 @@ begin
   end;
 end;
 
-procedure iFile_remove(fileHandle : Cardinal; var status : integer);
+procedure iFile_remove(fileHandle : QWord; var status : integer);
 var
   tmp : TNxtFile;
 begin
@@ -1093,8 +1093,8 @@ begin
   end;
 end;
 
-procedure iFile_write(fileHandle : Cardinal; writeBuffer : PByte;
-  writeBufferLength : Cardinal; var status : integer);
+procedure iFile_write(fileHandle : QWord; writeBuffer : PByte;
+  writeBufferLength : QWord; var status : integer);
 var
   tmp : TNxtFile;
 begin
@@ -1107,7 +1107,7 @@ begin
   end;
 end;
 
-procedure iFileIterator_advance(iterHandle : Cardinal; var status : integer);
+procedure iFileIterator_advance(iterHandle : QWord; var status : integer);
 var
   tmp : TNxtFileIterator;
 begin
@@ -1120,7 +1120,7 @@ begin
   end;
 end;
 
-procedure iFileIterator_getName(iterHandle : Cardinal; filename : PChar;
+procedure iFileIterator_getName(iterHandle : QWord; filename : PChar;
   var status : integer);
 var
   tmp : TNxtFileIterator;
@@ -1137,7 +1137,7 @@ begin
   end;
 end;
 
-procedure iModule_getName(moduleHandle : Cardinal; moduleName : PChar;
+procedure iModule_getName(moduleHandle : QWord; moduleName : PChar;
   var status : integer);
 var
   tmp : TNxtIModule;
@@ -1154,7 +1154,7 @@ begin
   end;
 end;
 
-procedure iModuleIterator_advance(modIterHandle : Cardinal; var status : integer);
+procedure iModuleIterator_advance(modIterHandle : QWord; var status : integer);
 var
   tmp : TNxtIModuleIterator;
 begin
@@ -1167,7 +1167,7 @@ begin
   end;
 end;
 
-procedure iModuleIterator_getName(modIterHandle : Cardinal; moduleName : PChar;
+procedure iModuleIterator_getName(modIterHandle : QWord; moduleName : PChar;
   var status : integer);
 var
   tmp : TNxtIModuleIterator;
@@ -1184,7 +1184,7 @@ begin
   end;
 end;
 
-procedure iNXT_bluetoothFactoryReset(nxtHandle : Cardinal; var status : integer);
+procedure iNXT_bluetoothFactoryReset(nxtHandle : QWord; var status : integer);
 var
   tmp : TNxt;
 begin
@@ -1211,7 +1211,7 @@ begin
   end;
 end;
 
-procedure iNXT_destroyFile(nxtHandle : Cardinal; fileHandle : Cardinal;
+procedure iNXT_destroyFile(nxtHandle : QWord; fileHandle : QWord;
   var status : integer);
 var
   tmp : TNxt;
@@ -1228,7 +1228,7 @@ begin
   end;
 end;
 
-procedure iNXT_destroyFileIterator(nxtHandle : Cardinal; iterHandle : Cardinal;
+procedure iNXT_destroyFileIterator(nxtHandle : QWord; iterHandle : QWord;
   var status : integer);
 var
   tmp : TNxt;
@@ -1245,7 +1245,7 @@ begin
   end;
 end;
 
-procedure iNXT_destroyModule(nxtHandle : Cardinal; moduleHandle : Cardinal;
+procedure iNXT_destroyModule(nxtHandle : QWord; moduleHandle : QWord;
   var status : integer);
 var
   tmp : TNxt;
@@ -1262,8 +1262,8 @@ begin
   end;
 end;
 
-procedure iNXT_destroyModuleIterator(nxtHandle : Cardinal;
-  modIterHandle : Cardinal; var status : integer);
+procedure iNXT_destroyModuleIterator(nxtHandle : QWord;
+  modIterHandle : QWord; var status : integer);
 var
   tmp : TNxt;
   tmpModIter : TNxtIModuleIterator;
@@ -1279,8 +1279,8 @@ begin
   end;
 end;
 
-procedure iNXT_downloadFirmware(nxtHandle : Cardinal; firmwareBuffer : PByte;
-  firmwareBufferSize : Cardinal; var status : integer);
+procedure iNXT_downloadFirmware(nxtHandle : QWord; firmwareBuffer : PByte;
+  firmwareBufferSize : QWord; var status : integer);
 var
   tmp : TNxt;
 begin
@@ -1293,7 +1293,7 @@ begin
   end;
 end;
 
-procedure iNXT_eraseUserFlash(nxtHandle : Cardinal; var status : integer);
+procedure iNXT_eraseUserFlash(nxtHandle : QWord; var status : integer);
 var
   tmp : TNxt;
 begin
@@ -1321,8 +1321,8 @@ begin
   end;
 end;
 
-procedure iNXT_getDeviceInfo(nxtHandle : Cardinal; name : PChar; address : PByte;
-  signalStrength : PByte; var availableFlash : Cardinal; var status : integer);
+procedure iNXT_getDeviceInfo(nxtHandle : QWord; name : PChar; address : PByte;
+  signalStrength : PByte; var availableFlash : QWord; var status : integer);
 var
   tmp : TNxt;
   tmpName : string;
@@ -1338,7 +1338,7 @@ begin
   end;
 end;
 
-procedure iNXT_getFirmwareVersion(nxtHandle : Cardinal; var protocolVersionMajor,
+procedure iNXT_getFirmwareVersion(nxtHandle : QWord; var protocolVersionMajor,
   protocolVersionMinor, firmwareVersionMajor, firmwareVersionMinor : byte;
   var status : integer);
 var
@@ -1354,7 +1354,7 @@ begin
   end;
 end;
 
-procedure iNXT_getResourceString(nxtHandle : Cardinal; resString : PChar;
+procedure iNXT_getResourceString(nxtHandle : QWord; resString : PChar;
   var status : integer);
 var
   tmp : TNxt;
@@ -1371,8 +1371,8 @@ begin
   end;
 end;
 
-procedure iNXT_read(nxtHandle : Cardinal; readBuffer : PByte;
-  readBufferSize : Cardinal; var status : integer);
+procedure iNXT_read(nxtHandle : QWord; readBuffer : PByte;
+  readBufferSize : QWord; var status : integer);
 var
   tmp : TNxt;
 begin
@@ -1385,9 +1385,9 @@ begin
   end;
 end;
 
-procedure iNXT_sendDirectCommand(nxtHandle : Cardinal; requireResponse : byte;
-  inputBufferPtr : Pbyte; inputBufferSize : Cardinal; outputBufferPtr : PByte;
-  outputBufferSize : Cardinal; var status : integer);
+procedure iNXT_sendDirectCommand(nxtHandle : QWord; requireResponse : byte;
+  inputBufferPtr : Pbyte; inputBufferSize : QWord; outputBufferPtr : PByte;
+  outputBufferSize : QWord; var status : integer);
 var
   tmp : TNxt;
 begin
@@ -1402,7 +1402,7 @@ begin
   end;
 end;
 
-procedure iNXT_setName(nxtHandle : Cardinal; newName : PChar; var status : integer);
+procedure iNXT_setName(nxtHandle : QWord; newName : PChar; var status : integer);
 var
   tmp : TNxt;
 begin
@@ -1415,7 +1415,7 @@ begin
   end;
 end;
 
-procedure iNXTIterator_advance(NXTIterHandle : Cardinal; var status : integer);
+procedure iNXTIterator_advance(NXTIterHandle : QWord; var status : integer);
 var
   tmp : TNxtIterator;
 begin
@@ -1428,7 +1428,7 @@ begin
   end;
 end;
 
-procedure iNXTIterator_getName(NXTIterHandle : Cardinal; resString : PChar;
+procedure iNXTIterator_getName(NXTIterHandle : QWord; resString : PChar;
   var status : integer);
 var
   tmp : TNxtIterator;
@@ -1556,7 +1556,7 @@ begin
 end;
 
 function TNxt.createModule(const moduleName: string; moduleID,
-  moduleSizeInBytes, ioMapSizeInBytes: Cardinal;
+  moduleSizeInBytes, ioMapSizeInBytes: QWord;
   var status: integer): TNxtIModule;
 begin
   Result := nil;
@@ -1650,7 +1650,7 @@ begin
 end;
 
 procedure TNxt.downloadFirmware(const firmwareBufferPtr: PByte;
-  firmwareBufferSizeInBytes: Cardinal; var status: integer);
+  firmwareBufferSizeInBytes: QWord; var status: integer);
 begin
   // TODO: Firmware download is not currently supported.
   if not Assigned(firmwareBufferPtr) then Exit;
@@ -1707,7 +1707,7 @@ begin
 end;
 
 procedure TNxt.getDeviceInfo(var name: string; bluetoothAddress,
-  signalStrength: PByte; var availableFlash: Cardinal;
+  signalStrength: PByte; var availableFlash: QWord;
   var status: integer);
 var
   cmd : TBaseCmd;
@@ -1731,7 +1731,7 @@ begin
       Move(p^, bluetoothAddress^, 6);
       inc(p, 7);
       Move(p^, signalStrength^, 4);
-      availableFlash := BytesToCardinal(buf[29], buf[30], buf[31], buf[32]);
+      availableFlash := BytesToQWord(buf[29], buf[30], buf[31], buf[32]);
       status := kStatusNoError;
     end
     else
@@ -1813,7 +1813,7 @@ begin
 end;
 
 function TNxt.pollAvailableLength(bufferSelector: byte;
-  var status: integer): Cardinal;
+  var status: integer): QWord;
 var
   cmd : TBaseCmd;
   buf : array[0..4] of Byte;
@@ -1837,8 +1837,8 @@ begin
   end;
 end;
 
-function TNxt.read(bufferPtr: PByte; numberOfBytes: Cardinal;
-  var status: integer): Cardinal;
+function TNxt.read(bufferPtr: PByte; numberOfBytes: QWord;
+  var status: integer): QWord;
 var
   ret : integer;
 begin
@@ -1863,7 +1863,7 @@ begin
 end;
 
 function TNxt.readBufferData(dataBuffer: PByte; bufferSelector: byte;
-  numberOfBytesToRead: Cardinal; var status: integer): Cardinal;
+  numberOfBytesToRead: QWord; var status: integer): QWord;
 var
   cmd : TBaseCmd;
   buf : array[0..63] of Byte;
@@ -1891,9 +1891,9 @@ begin
 end;
 
 function TNxt.sendDirectCommand(requireResponse: boolean;
-  const commandBufferPtr: PByte; commandBufferSizeInBytes: Cardinal;
-  responseBufferPtr: PByte; responseBufferSizeInBytes: Cardinal;
-  var status: integer): Cardinal;
+  const commandBufferPtr: PByte; commandBufferSizeInBytes: QWord;
+  responseBufferPtr: PByte; responseBufferSizeInBytes: QWord;
+  var status: integer): QWord;
 var
   ret : integer;
   BufOut, BufIn : PByte;
@@ -2053,8 +2053,8 @@ begin
   status := kStatusNoError;
 end;
 
-function TNxt.write(const bufferPtr: PByte; numberOfBytes: Cardinal;
-  var status: integer): Cardinal;
+function TNxt.write(const bufferPtr: PByte; numberOfBytes: QWord;
+  var status: integer): QWord;
 var
   ret, chunkRet, size : integer;
   buf, p : PByte;
@@ -2158,7 +2158,7 @@ begin
   inherited;
 end;
 
-function TNxtFile.getAvailableSize(var status: integer): Cardinal;
+function TNxtFile.getAvailableSize(var status: integer): QWord;
 begin
   Result := 0;
   if status < kStatusNoError then Exit;
@@ -2178,7 +2178,7 @@ begin
   fileName := fFilename;
 end;
 
-function TNxtFile.getSize(var status: integer): Cardinal;
+function TNxtFile.getSize(var status: integer): QWord;
 begin
   Result := 0;
   if status < kStatusNoError then Exit;
@@ -2204,7 +2204,7 @@ begin
     if (len = size) and (buf[2] = 0) then
     begin
       fHandle := buf[3];
-      fAvailableSize := BytesToCardinal(buf[4], buf[5], buf[6], buf[7]);
+      fAvailableSize := BytesToQWord(buf[4], buf[5], buf[6], buf[7]);
       fOpen   := True;
       status  := kStatusNoError;
     end
@@ -2220,7 +2220,7 @@ begin
   end;
 end;
 
-procedure TNxtFile.openForDataWrite(sizeInBytes: Cardinal;
+procedure TNxtFile.openForDataWrite(sizeInBytes: QWord;
   var status: integer);
 var
   cmd : TNxtCmd;
@@ -2253,7 +2253,7 @@ begin
   end;
 end;
 
-procedure TNxtFile.openForLinearWrite(sizeInBytes: Cardinal;
+procedure TNxtFile.openForLinearWrite(sizeInBytes: QWord;
   var status: integer);
 var
   cmd : TNxtCmd;
@@ -2302,7 +2302,7 @@ begin
     if (len = size) and (buf[2] = 0) then
     begin
       fHandle := buf[3];
-      fSize   := BytesToCardinal(buf[4], buf[5], buf[6], buf[7]);
+      fSize   := BytesToQWord(buf[4], buf[5], buf[6], buf[7]);
       fOpen   := True;
       status  := kStatusNoError;
     end
@@ -2318,7 +2318,7 @@ begin
   end;
 end;
 
-procedure TNxtFile.openForWrite(sizeInBytes: Cardinal;
+procedure TNxtFile.openForWrite(sizeInBytes: QWord;
   var status: integer);
 var
   cmd : TNxtCmd;
@@ -2351,10 +2351,10 @@ begin
   end;
 end;
 
-function TNxtFile.read(bufferPtr: PByte; numberOfBytes: Cardinal;
-  var status: integer): Cardinal;
+function TNxtFile.read(bufferPtr: PByte; numberOfBytes: QWord;
+  var status: integer): QWord;
 var
-  size : Cardinal;
+  size : QWord;
   cmd : TBaseCmd;
   cnt : SmallInt;
   rbuf : array[0..63] of Byte;
@@ -2378,7 +2378,7 @@ begin
       begin
         status  := kStatusNoError;
         fHandle := rbuf[3];
-        cnt := SmallInt(BytesToCardinal(rbuf[4], rbuf[5]));
+        cnt := SmallInt(BytesToQWord(rbuf[4], rbuf[5]));
         buf := @rbuf[6];
         Move(buf^, p^, cnt);
       end
@@ -2422,12 +2422,12 @@ begin
   end;
 end;
 
-function TNxtFile.write(bufferPtr: PByte; numberOfBytes: Cardinal;
-  var status: integer): Cardinal;
+function TNxtFile.write(bufferPtr: PByte; numberOfBytes: QWord;
+  var status: integer): QWord;
 var
   cmd : TNxtCmd;
   p, buf : PByte;
-  size : Cardinal;
+  size : QWord;
   cnt : Word;
   Data : array[0..kNXT_MaxBytes-1] of Byte;
   b : Byte;
@@ -2461,7 +2461,7 @@ begin
         if (len = rsize) and (rbuf[2] = 0) then
         begin
           status  := kStatusNoError;
-          cnt     := Word(BytesToCardinal(rbuf[4], rbuf[5]));
+          cnt     := Word(BytesToQWord(rbuf[4], rbuf[5]));
         end
         else
         begin
@@ -2513,7 +2513,7 @@ begin
         fHandle := buf[3];
         for i := 4 to 23 do
           fFileName := fFileName + Char(buf[i]);
-        fSize  := BytesToCardinal(buf[24], buf[25], buf[26], buf[27]);
+        fSize  := BytesToQWord(buf[24], buf[25], buf[26], buf[27]);
         status := kStatusNoError;
       end
       else
@@ -2594,7 +2594,7 @@ begin
   end;
 end;
 
-function TNxtFileIterator.getSize(var status: integer): Cardinal;
+function TNxtFileIterator.getSize(var status: integer): QWord;
 begin
   Result := 0;
   if status < kStatusNoError then Exit;
@@ -2624,17 +2624,17 @@ begin
   inherited;
 end;
 
-function TNxtIModule.getModuleID: Cardinal;
+function TNxtIModule.getModuleID: QWord;
 begin
   Result := fModuleID;
 end;
 
-function TNxtIModule.getModuleIOMapSize: Cardinal;
+function TNxtIModule.getModuleIOMapSize: QWord;
 begin
   Result := fIOMapSize;
 end;
 
-function TNxtIModule.getModuleSize: Cardinal;
+function TNxtIModule.getModuleSize: QWord;
 begin
   Result := fSize;
 end;
@@ -2644,8 +2644,8 @@ begin
   moduleName := fModuleName;
 end;
 
-function TNxtIModule.readIOMap(offsetInBytes, numberOfBytes: Cardinal;
-  dataBufferPtr: PByte; var status: integer): Cardinal;
+function TNxtIModule.readIOMap(offsetInBytes, numberOfBytes: QWord;
+  dataBufferPtr: PByte; var status: integer): QWord;
 var
   cmd : TNxtCmd;
   buf : PByte;
@@ -2688,7 +2688,7 @@ begin
       Result := False;
       Exit;
     end;
-    ModID := fLink.GetReplyCardinal(0); // first 4 bytes
+    ModID := fLink.GetReplyQWord(0); // first 4 bytes
     Count  := fLink.GetReplyWord(4); // bytes 5 & 6
     for i := 0 to 63 do begin
       if i >= Count then Break;
@@ -2702,8 +2702,8 @@ begin
 *)
 end;
 
-function TNxtIModule.writeIOMap(offsetInBytes, numberOfBytes: Cardinal;
-  dataBufferPtr: PByte; var status: integer): Cardinal;
+function TNxtIModule.writeIOMap(offsetInBytes, numberOfBytes: QWord;
+  dataBufferPtr: PByte; var status: integer): QWord;
 begin
   Result := 0;
   if offsetInBytes > 64 then Exit;
@@ -2732,7 +2732,7 @@ begin
         Result := False;
         Exit;
       end;
-      ModID := fLink.GetReplyCardinal(0); // first 4 bytes
+      ModID := fLink.GetReplyQWord(0); // first 4 bytes
       count  := fLink.GetReplyWord(4); // bytes 5 & 6
     end;
     Result := len >= kRCX_OK;
@@ -2779,9 +2779,9 @@ begin
         fHandle := buf[3];
         for i := 4 to 23 do
           fModuleName := fModuleName + Char(buf[i]);
-        fModuleID  := BytesToCardinal(buf[24], buf[25], buf[26], buf[27]);
-        fSize      := BytesToCardinal(buf[28], buf[29], buf[30], buf[31]);
-        fIOMapSize := BytesToCardinal(buf[32], buf[33]);
+        fModuleID  := BytesToQWord(buf[24], buf[25], buf[26], buf[27]);
+        fSize      := BytesToQWord(buf[28], buf[29], buf[30], buf[31]);
+        fIOMapSize := BytesToQWord(buf[32], buf[33]);
         status     := kStatusNoError;
       end
       else
Only in nbc_amd64/bricktools: FANTOMFPC.PAS~
Only in nbc_amd64/bricktools: FANTOMFPC.o
Only in nbc_amd64/bricktools: FANTOMFPC.ppu
Only in nbc_amd64/bricktools: FantomSpirit.o
diff -rup nbc/bricktools/FantomSpirit.pas nbc_amd64/bricktools/FantomSpirit.pas
--- nbc/bricktools/FantomSpirit.pas	2008-03-17 03:38:36.000000000 +0100
+++ nbc_amd64/bricktools/FantomSpirit.pas	2009-01-11 13:55:16.000000000 +0100
@@ -9,10 +9,10 @@ type
   TFantomSpirit = class(TBrickComm)
   private
     fResPort : string;
-    fNXTHandle : Cardinal;
+    fNXTHandle : QWord;
     fResourceNames : TStrings;
-//    fNXTFileHandle : Cardinal;
-//    fNXTFileIteratorHandle : Cardinal;
+//    fNXTFileHandle : QWord;
+//    fNXTFileIteratorHandle : QWord;
     dcResponse : array [0..63] of byte;
     function TransferFirmware(aStream: TStream): boolean;
   protected
@@ -41,7 +41,7 @@ type
   protected
     function  dcBuffer: PByte;
     function  GetReplyByte(index: integer): Byte;
-    function  GetReplyCardinal(index: integer): Cardinal;
+    function  GetReplyQWord(index: integer): QWord;
     function  GetReplyWord(index: integer): Word;
     procedure SetResourcePort(const name : string);
     procedure LookupResourceName;
@@ -83,7 +83,7 @@ type
     function BrickAlive : boolean; override;
     function Shutdown : boolean; override;
     function Sleep(aVal : integer) : boolean; override;
-	  function Version(var rom : Cardinal; var ram : Cardinal) : boolean; override;
+	  function Version(var rom : QWord; var ram : QWord) : boolean; override;
     function TransmitPower(aLevel : TTransmitLevel) : boolean; override;
 
     function Poll(aSrc, aNum : integer) : integer; override;
@@ -191,11 +191,11 @@ type
     function PlaySoundFile(const filename : string; bLoop : boolean) : boolean; override;
     function GetNXTOutputState(const aPort : byte; var power : integer;
       var mode, regmode : byte; var turnratio : integer;
-      var runstate : byte; var tacholimit : cardinal; var tachocount,
+      var runstate : byte; var tacholimit : QWord; var tachocount,
       blocktachocount, rotationcount : longint) : boolean; override;
     function SetNXTOutputState(const aPort : byte; const power : integer;
       const mode, regmode : byte; const turnratio : integer;
-      const runstate : byte; const tacholimit : cardinal) : boolean; override;
+      const runstate : byte; const tacholimit : QWord) : boolean; override;
     function GetNXTInputValues(const aPort : byte; var valid, calibrated : boolean;
       var stype, smode : byte; var raw, normalized : word;
       var scaled, calvalue : smallint) : boolean; override;
@@ -203,53 +203,53 @@ type
     function ResetInputScaledValue(const aPort : byte) : boolean; override;
     function ResetOutputPosition(const aPort : byte; const Relative : boolean) : boolean; override;
     function MessageWrite(const inbox : byte; const msg : string) : boolean; override;
-    function KeepAlive(var time : cardinal; const chkResponse : boolean = true) : boolean; override;
+    function KeepAlive(var time : QWord; const chkResponse : boolean = true) : boolean; override;
     function LSGetStatus(aPort : byte; var bytesReady : byte) : boolean; override;
     function GetCurrentProgramName(var name : string) : boolean; override;
     function GetButtonState(const idx : byte; const reset : boolean;
       var pressed : boolean; var count : byte) : boolean; override;
     function MessageRead(const remote, local : byte; const remove : boolean; var Msg : NXTMessage) : boolean; override;
     // NXT system commands
-    function NXTOpenRead(const filename : string; var handle : cardinal;
-      var size : cardinal) : boolean; override;
-    function NXTOpenWrite(const filename : string; const size : cardinal;
-      var handle : cardinal) : boolean; override;
-    function NXTRead(var handle : cardinal; var count : word;
+    function NXTOpenRead(const filename : string; var handle : QWord;
+      var size : QWord) : boolean; override;
+    function NXTOpenWrite(const filename : string; const size : QWord;
+      var handle : QWord) : boolean; override;
+    function NXTRead(var handle : QWord; var count : word;
       var buffer : NXTDataBuffer) : boolean; override;
-    function NXTWrite(var handle : cardinal; const buffer : NXTDataBuffer;
+    function NXTWrite(var handle : QWord; const buffer : NXTDataBuffer;
       var count : word; const chkResponse : boolean = false) : boolean; override;
-    function NXTCloseFile(var handle : cardinal; const chkResponse: boolean = false) : boolean; override;
+    function NXTCloseFile(var handle : QWord; const chkResponse: boolean = false) : boolean; override;
     function NXTDeleteFile(var filename : string; const chkResponse: boolean = false) : boolean; override;
-    function NXTFindFirstFile(var filename : string; var handle : cardinal; var filesize : cardinal) : boolean; override;
-    function NXTFindNextFile(var handle : cardinal; var filename : string; var filesize : cardinal) : boolean; override;
+    function NXTFindFirstFile(var filename : string; var handle : QWord; var filesize : QWord) : boolean; override;
+    function NXTFindNextFile(var handle : QWord; var filename : string; var filesize : QWord) : boolean; override;
     function NXTGetVersions(var protmin, protmaj, firmmin, firmmaj : byte) : boolean; override;
-    function NXTOpenWriteLinear(const filename : string; const size : cardinal;
-      var handle : cardinal) : boolean; override;
-    function NXTOpenReadLinear(const filename : string; var handle : cardinal;
-      var size : cardinal) : boolean; override;
-    function NXTOpenWriteData(const filename : string; const size : cardinal;
-      var handle : cardinal) : boolean; override;
-    function NXTOpenAppendData(const filename : string; var size : cardinal;
-      var handle : cardinal) : boolean; override;
-    function NXTCloseModuleHandle(var handle : cardinal; const chkResponse: boolean = false) : boolean; override;
+    function NXTOpenWriteLinear(const filename : string; const size : QWord;
+      var handle : QWord) : boolean; override;
+    function NXTOpenReadLinear(const filename : string; var handle : QWord;
+      var size : QWord) : boolean; override;
+    function NXTOpenWriteData(const filename : string; const size : QWord;
+      var handle : QWord) : boolean; override;
+    function NXTOpenAppendData(const filename : string; var size : QWord;
+      var handle : QWord) : boolean; override;
+    function NXTCloseModuleHandle(var handle : QWord; const chkResponse: boolean = false) : boolean; override;
     function NXTBootCommand(const chkResponse: boolean = false) : boolean; override;
     function NXTSetBrickName(const name : string; const chkResponse: boolean = false) : boolean; override;
     function NXTGetDeviceInfo(var name : string; BTAddress : PByte;
-      var BTSignal : Cardinal; var memFree : Cardinal) : boolean; override;
+      var BTSignal : QWord; var memFree : QWord) : boolean; override;
     function NXTFreeMemory : integer; override;
     function NXTDeleteUserFlash(const chkResponse: boolean = false) : boolean; override;
     function NXTBTFactoryReset(const chkResponse: boolean = false) : boolean; override;
     function NXTPollCommandLen(const bufNum : byte; var count : byte) : boolean; override;
     function NXTPollCommand(const bufNum : byte; var count : byte;
       var buffer : NXTDataBuffer) : boolean; override;
-    function NXTWriteIOMap(var ModID : Cardinal; const Offset : Word;
+    function NXTWriteIOMap(var ModID : QWord; const Offset : Word;
       var count : Word; const buffer : NXTDataBuffer; chkResponse : Boolean = False) : boolean; override;
-    function NXTReadIOMap(var ModID : Cardinal; const Offset : Word;
+    function NXTReadIOMap(var ModID : QWord; const Offset : Word;
       var count : Word; var buffer : NXTDataBuffer) : boolean; override;
-    function NXTFindFirstModule(var ModName : string; var Handle : cardinal;
-      var ModID, ModSize : Cardinal; var IOMapSize : Word) : boolean; override;
-    function NXTFindNextModule(var Handle : cardinal; var ModName : string;
-      var ModID, ModSize : Cardinal; var IOMapSize : Word) : boolean; override;
+    function NXTFindFirstModule(var ModName : string; var Handle : QWord;
+      var ModID, ModSize : QWord; var IOMapSize : Word) : boolean; override;
+    function NXTFindNextModule(var Handle : QWord; var ModName : string;
+      var ModID, ModSize : QWord; var IOMapSize : Word) : boolean; override;
     function NXTRenameFile(const old, new : string; const chkResponse: boolean = false) : boolean; override;
 {
   kNXT_SCGetBTAddress          = $9A;
@@ -270,7 +270,7 @@ uses
   rcx_constants, Contnrs, Math, uNXTConstants,
   {$IFNDEF FPC}FANTOM{$ELSE}FANTOMFPC{$ENDIF};
 
-function NXTModuleIDToName(const modID : cardinal) : string;
+function NXTModuleIDToName(const modID : QWord) : string;
 var
   i : integer;
 begin
@@ -329,7 +329,7 @@ end;
 
 function TFantomSpirit.Shutdown: boolean;
 var
-  modID : Cardinal;
+  modID : QWord;
   count : Word;
   buffer : NXTDataBuffer;
 begin
@@ -349,7 +349,7 @@ function TFantomSpirit.MotorsOn(aMotorLi
 var
   mode, regmode, runstate : byte;
   oldpower, power, turnratio : integer;
-  tacholimit : cardinal;
+  tacholimit : QWord;
   tachocount, blocktachocount, rotationcount : integer;
   i : Byte;
 begin
@@ -392,7 +392,7 @@ function TFantomSpirit.MotorsOff(aMotorL
 var
   mode, regmode, runstate : byte;
   power, turnratio : integer;
-  tacholimit : cardinal;
+  tacholimit : QWord;
   i : Byte;
 begin
   Result := IsOpen;
@@ -419,7 +419,7 @@ function TFantomSpirit.MotorsFloat(aMoto
 var
   mode, regmode, runstate : byte;
   power, turnratio : integer;
-  tacholimit : cardinal;
+  tacholimit : QWord;
   i : Byte;
 begin
   Result := IsOpen;
@@ -446,7 +446,7 @@ function TFantomSpirit.SetFwd(aMotorList
 var
   mode, regmode, runstate : byte;
   power, turnratio : integer;
-  tacholimit : cardinal;
+  tacholimit : QWord;
   tachocount, blocktachocount, rotationcount : integer;
   i : Byte;
 begin
@@ -490,7 +490,7 @@ function TFantomSpirit.SetRwd(aMotorList
 var
   mode, regmode, runstate : byte;
   power, turnratio : integer;
-  tacholimit : cardinal;
+  tacholimit : QWord;
   tachocount, blocktachocount, rotationcount : integer;
   i : Byte;
 begin
@@ -534,7 +534,7 @@ function TFantomSpirit.SwitchDirection(a
 var
   mode, regmode, runstate : byte;
   power, turnratio : integer;
-  tacholimit : cardinal;
+  tacholimit : QWord;
   tachocount, blocktachocount, rotationcount : integer;
   i : Byte;
 begin
@@ -568,7 +568,7 @@ function TFantomSpirit.SetMotorPower(aMo
 var
   mode, regmode, runstate : byte;
   oldpower, power, turnratio : integer;
-  tacholimit : cardinal;
+  tacholimit : QWord;
   tachocount, blocktachocount, rotationcount : integer;
   i : Byte;
 begin
@@ -677,7 +677,7 @@ end;
 
 function TFantomSpirit.Open: boolean;
 var
-  nih : Cardinal;
+  nih : QWord;
   status, status2 : integer;
   resNamePC : array[0..54] of Char;
   pairedResNamePC : array[0..54] of Char;
@@ -818,7 +818,7 @@ end;
 
 function TFantomSpirit.Ping: boolean;
 var
-  time : cardinal;
+  time : QWord;
 begin
   Result := IsOpen;
   if not Result then Exit;
@@ -965,7 +965,7 @@ end;
 
 function TFantomSpirit.GetNXTOutputState(const aPort: byte; var power: integer;
   var mode, regmode: byte; var turnratio: integer; var runstate: byte;
-  var tacholimit: cardinal; var tachocount, blocktachocount, rotationcount: Integer): boolean;
+  var tacholimit: QWord; var tachocount, blocktachocount, rotationcount: Integer): boolean;
 var
   cmd : TNINxtCmd;
   status : integer;
@@ -986,10 +986,10 @@ begin
     regmode   := GetReplyByte(3);
     turnratio := ShortInt(GetReplyByte(4));
     runstate  := GetReplyByte(5);
-    tacholimit := GetReplyCardinal(6);
-    tachocount := Integer(GetReplyCardinal(10));
-    blocktachocount := Integer(GetReplyCardinal(14));
-    rotationcount := Integer(GetReplyCardinal(18));
+    tacholimit := GetReplyQWord(6);
+    tachocount := Integer(GetReplyQWord(10));
+    blocktachocount := Integer(GetReplyQWord(14));
+    rotationcount := Integer(GetReplyQWord(18));
   finally
     cmd.Free;
   end;
@@ -998,7 +998,7 @@ end;
 function TFantomSpirit.SetNXTOutputState(const aPort: byte;
   const power: integer; const mode, regmode: byte;
   const turnratio: integer; const runstate: byte;
-  const tacholimit: cardinal): boolean;
+  const tacholimit: QWord): boolean;
 var
   cmd : TNINxtCmd;
 //  orig : PByte;
@@ -1142,7 +1142,7 @@ begin
   end;
 end;
 
-function TFantomSpirit.KeepAlive(var time: cardinal; const chkResponse : boolean): boolean;
+function TFantomSpirit.KeepAlive(var time: QWord; const chkResponse : boolean): boolean;
 var
   cmd : TNINxtCmd;
   b : byte;
@@ -1168,7 +1168,7 @@ begin
     begin
       if not Result then
         Exit;
-      time := Integer(GetReplyCardinal(0));
+      time := Integer(GetReplyQWord(0));
     end;
   finally
     cmd.Free;
@@ -1347,8 +1347,8 @@ begin
   end;
 end;
 
-function TFantomSpirit.NXTOpenRead(const filename: string; var handle: cardinal;
-  var size: cardinal): boolean;
+function TFantomSpirit.NXTOpenRead(const filename: string; var handle: QWord;
+  var size: QWord): boolean;
 var
   status : integer;
 begin
@@ -1375,13 +1375,13 @@ begin
 end;
 
 function TFantomSpirit.NXTOpenReadLinear(const filename: string;
-  var handle: cardinal; var size: cardinal): boolean;
+  var handle: QWord; var size: QWord): boolean;
 begin
   Result := NXTOpenRead(filename, handle, size);
 end;
 
 function TFantomSpirit.NXTOpenAppendData(const filename: string;
-  var size: cardinal; var handle: cardinal): boolean;
+  var size: QWord; var handle: QWord): boolean;
 var
   status : integer;
 begin
@@ -1408,7 +1408,7 @@ begin
 end;
 
 function TFantomSpirit.NXTOpenWrite(const filename: string;
-  const size: cardinal; var handle: cardinal): boolean;
+  const size: QWord; var handle: QWord): boolean;
 var
   status : integer;
 begin
@@ -1430,7 +1430,7 @@ begin
 end;
 
 function TFantomSpirit.NXTOpenWriteData(const filename: string;
-  const size: cardinal; var handle: cardinal): boolean;
+  const size: QWord; var handle: QWord): boolean;
 var
   status : integer;
 begin
@@ -1452,7 +1452,7 @@ begin
 end;
 
 function TFantomSpirit.NXTOpenWriteLinear(const filename: string;
-  const size: cardinal; var handle: cardinal): boolean;
+  const size: QWord; var handle: QWord): boolean;
 var
   status : integer;
 begin
@@ -1473,7 +1473,7 @@ begin
   end;
 end;
 
-function TFantomSpirit.NXTRead(var handle: cardinal; var count: word;
+function TFantomSpirit.NXTRead(var handle: QWord; var count: word;
   var buffer: NXTDataBuffer): boolean;
 var
   status : integer;
@@ -1485,7 +1485,7 @@ begin
   Result := status >= kStatusNoError;
 end;
 
-function TFantomSpirit.NXTWrite(var handle: cardinal; const buffer: NXTDataBuffer;
+function TFantomSpirit.NXTWrite(var handle: QWord; const buffer: NXTDataBuffer;
   var count: word; const chkResponse: boolean): boolean;
 var
   status : integer;
@@ -1500,7 +1500,7 @@ begin
     Result := status >= kStatusNoError;
 end;
 
-function TFantomSpirit.NXTCloseFile(var handle: cardinal; const chkResponse: boolean): boolean;
+function TFantomSpirit.NXTCloseFile(var handle: QWord; const chkResponse: boolean): boolean;
 var
   status : integer;
 begin
@@ -1521,7 +1521,7 @@ end;
 
 function TFantomSpirit.NXTDeleteFile(var filename: string; const chkResponse: boolean): boolean;
 var
-  handle : cardinal;
+  handle : QWord;
   status : integer;
 begin
   Result := IsOpen;
@@ -1542,7 +1542,7 @@ begin
 end;
 
 function TFantomSpirit.NXTFindFirstFile(var filename: string;
-  var handle: cardinal; var filesize : cardinal): boolean;
+  var handle: QWord; var filesize : QWord): boolean;
 var
   status : integer;
   buf : array[0..19] of Char;
@@ -1561,8 +1561,8 @@ begin
   end;
 end;
 
-function TFantomSpirit.NXTFindNextFile(var handle: cardinal; var filename: string;
-  var filesize : cardinal): boolean;
+function TFantomSpirit.NXTFindNextFile(var handle: QWord; var filename: string;
+  var filesize : QWord): boolean;
 var
   status : integer;
   Buf : array[0..19] of Char;
@@ -1600,7 +1600,7 @@ begin
   Result := status >= kStatusNoError;
 end;
 
-function TFantomSpirit.NXTCloseModuleHandle(var handle: cardinal; const chkResponse: boolean): boolean;
+function TFantomSpirit.NXTCloseModuleHandle(var handle: QWord; const chkResponse: boolean): boolean;
 var
   status : integer;
 begin
@@ -1649,7 +1649,7 @@ begin
 end;
 
 function TFantomSpirit.NXTGetDeviceInfo(var name: string;
-  BTAddress : PByte; var BTSignal : Cardinal; var memFree : Cardinal): boolean;
+  BTAddress : PByte; var BTSignal : QWord; var memFree : QWord): boolean;
 var
   status : integer;
   buf : array[0..20] of Char;
@@ -1693,19 +1693,19 @@ end;
 type
   TFileInfoRec = class
   public
-    FileHandle : Cardinal;
-    TotalSize : Cardinal;
-    AvailableSize : Cardinal;
+    FileHandle : QWord;
+    TotalSize : QWord;
+    AvailableSize : QWord;
     Name : string;
   end;
 
 function TFantomSpirit.NXTUploadFile(const filename: string; const dir : string): boolean;
 var
-  handle : cardinal;
-  size, totalSize, availableSize : Cardinal;
+  handle : QWord;
+  size, totalSize, availableSize : QWord;
   MS : TMemoryStream;
   tmpFilename : string;
-  NXTFileIteratorHandle : Cardinal;
+  NXTFileIteratorHandle : QWord;
   status, i : integer;
   buf : array[0..20] of Char;
   fileBuf : PByte;
@@ -1752,7 +1752,7 @@ begin
         FIR := TFileInfoRec(OL.Items[i]);
         tmpFilename := FIR.Name;
         handle      := FIR.FileHandle;
-        size        := Cardinal(Max(FIR.TotalSize - FIR.AvailableSize, 0));
+        size        := QWord(Max(FIR.TotalSize - FIR.AvailableSize, 0));
         status      := kStatusNoError;
         iFile_openForRead(handle, status);
         MS := TMemoryStream.Create;
@@ -1815,9 +1815,9 @@ end;
 
 function TFantomSpirit.NXTListFiles(const searchPattern: string; Files: TStrings): boolean;
 var
-  size : Cardinal;
+  size : QWord;
   tmpfilename : string;
-  NXTFileIteratorHandle : Cardinal;
+  NXTFileIteratorHandle : QWord;
   buf : array[0..20] of Char;
   status : integer;
 begin
@@ -1842,7 +1842,7 @@ end;
 function TFantomSpirit.NXTListModules(const searchPattern: string;
   Modules: TStrings): boolean;
 var
-  size, mID, NXTModuleIteratorHandle, handle : Cardinal;
+  size, mID, NXTModuleIteratorHandle, handle : QWord;
   buf : array[0..20] of Char;
   status : integer;
   iosize : Word;
@@ -1897,11 +1897,11 @@ end;
 
 function TFantomSpirit.TransferFirmware(aStream : TStream) : boolean;
 var
-  size : Cardinal;
+  size : QWord;
   resBuf : array[0..255] of Char;
   status : integer;
   buf : PByte;
-  elapsedTime : Cardinal;
+  elapsedTime : QWord;
   bStop : boolean;
   cur, i : integer;
 const
@@ -1910,7 +1910,7 @@ const
   K_STEPS = 30;
 begin
   Result := IsOpen;
-  size   := Cardinal(aStream.Size);
+  size   := QWord(aStream.Size);
   bStop  := False;
   status := kStatusNoError;
   cur := 0;
@@ -2001,8 +2001,8 @@ end;
 function TFantomSpirit.NXTDownloadStream(aStream: TStream; const dest : string;
   const filetype: TNXTFileType): boolean;
 var
-  size : Cardinal;
-  handle : cardinal;
+  size : QWord;
+  handle : QWord;
   status : integer;
   buf : PByte;
   nxtFilename, delname : string;
@@ -2018,7 +2018,7 @@ begin
   else
   begin
     if not Result then Exit;
-    size := Cardinal(aStream.Size);
+    size := QWord(aStream.Size);
     // download means from PC to NXT
     // make destination filename a valid NXT filename (15.3)
     nxtFilename := MakeValidNXTFilename(dest);
@@ -2079,12 +2079,12 @@ begin
     count := 0;
 end;
 
-function TFantomSpirit.NXTWriteIOMap(var ModID: Cardinal;
+function TFantomSpirit.NXTWriteIOMap(var ModID: QWord;
   const Offset: Word; var count: Word; const buffer: NXTDataBuffer;
   chkResponse : Boolean): boolean;
 var
   status : integer;
-  mh : Cardinal;
+  mh : QWord;
   modName : string;
 begin
   Result := IsOpen;
@@ -2105,11 +2105,11 @@ begin
   end;
 end;
 
-function TFantomSpirit.NXTReadIOMap(var ModID: Cardinal;
+function TFantomSpirit.NXTReadIOMap(var ModID: QWord;
   const Offset: Word; var Count: Word; var buffer: NXTDataBuffer): boolean;
 var
   status : integer;
-  mh : Cardinal;
+  mh : QWord;
   modName : string;
 begin
   Result := IsOpen;
@@ -2130,13 +2130,13 @@ begin
   end;
 end;
 
-function TFantomSpirit.NXTFindNextModule(var Handle: cardinal;
-  var ModName: string; var ModID, ModSize: Cardinal;
+function TFantomSpirit.NXTFindNextModule(var Handle: QWord;
+  var ModName: string; var ModID, ModSize: QWord;
   var IOMapSize: Word): boolean;
 var
   status : integer;
   Buf : array[0..19] of Char;
-  mh : cardinal;
+  mh : QWord;
 begin
   Result := IsOpen;
   if not Result then Exit;
@@ -2168,12 +2168,12 @@ begin
   end;
 end;
 
-function TFantomSpirit.NXTFindFirstModule(var ModName: string; var Handle: cardinal;
-  var ModID, ModSize: Cardinal; var IOMapSize: Word): boolean;
+function TFantomSpirit.NXTFindFirstModule(var ModName: string; var Handle: QWord;
+  var ModID, ModSize: QWord; var IOMapSize: Word): boolean;
 var
   status : integer;
   buf : array[0..19] of Char;
-  mh : cardinal;
+  mh : QWord;
 begin
   Result := IsOpen;
   if not Result then Exit;
@@ -2202,9 +2202,9 @@ begin
   Result := @dcResponse[0];
 end;
 
-function BytesToCardinal(b1 : byte; b2 : byte = 0; b3 : byte = 0; b4 : Byte = 0) : Cardinal;
+function BytesToQWord(b1 : byte; b2 : byte = 0; b3 : byte = 0; b4 : Byte = 0) : QWord;
 begin
-  Result := Cardinal(b1) + (Cardinal(b2) shl 8) + (Cardinal(b3) shl 16) + (Cardinal(b4) shl 24);
+  Result := QWord(b1) + (QWord(b2) shl 8) + (QWord(b3) shl 16) + (QWord(b4) shl 24);
 end;
 
 function TFantomSpirit.GetReplyByte(index: integer): Byte;
@@ -2215,9 +2215,9 @@ begin
 
 end;
 
-function TFantomSpirit.GetReplyCardinal(index: integer): Cardinal;
+function TFantomSpirit.GetReplyQWord(index: integer): QWord;
 begin
-  Result := BytesToCardinal(GetReplyByte(index),
+  Result := BytesToQWord(GetReplyByte(index),
                             GetReplyByte(index+1),
                             GetReplyByte(index+2),
                             GetReplyByte(index+3));
@@ -2225,12 +2225,12 @@ end;
 
 function TFantomSpirit.GetReplyWord(index: integer): Word;
 begin
-  Result := Word(BytesToCardinal(GetReplyByte(index), GetReplyByte(index+1)));
+  Result := Word(BytesToQWord(GetReplyByte(index), GetReplyByte(index+1)));
 end;
 
 function TFantomSpirit.NXTListBricks(Bricks: TStrings): boolean;
 var
-  nih : Cardinal;
+  nih : QWord;
   status, status2 : integer;
   resNamePC : array[0..255] of Char;
   resName, alias, tmp : string;
@@ -2552,7 +2552,7 @@ var
   res : boolean;
   mode, regmode, runstate : byte;
   power, turnratio : integer;
-  tacholimit : cardinal;
+  tacholimit : QWord;
   tachocount, blocktachocount, rotationcount : integer;
   bBrake : boolean;
 begin
@@ -2659,12 +2659,12 @@ var
   stype, smode : byte;
   raw, normalized : word;
   scaled, calvalue : smallint;
-  modID : Cardinal;
+  modID : QWord;
   count : Word;
   buffer : NXTDataBuffer;
   power, turnratio, tachocount, blocktachocount, rotationcount : integer;
   mode, regmode, runstate : byte;
-  tacholimit : cardinal;
+  tacholimit : QWord;
   protmin, protmaj, firmmin, firmmaj : byte;
 begin
   Result := 0;
@@ -2701,7 +2701,7 @@ begin
       res := NXTReadIOMap(modID, CommandOffsetTick, count, buffer);
       if res then
       begin
-        Result := BytesToCardinal(buffer.Data[0], buffer.Data[1], buffer.Data[2], buffer.Data[3]);
+        Result := BytesToQWord(buffer.Data[0], buffer.Data[1], buffer.Data[2], buffer.Data[3]);
       end;
     end;
     kRCX_BatteryLevelType : begin
@@ -2764,7 +2764,7 @@ end;
 function TFantomSpirit.PollEEPROM(block: Integer): TStrings;
 var
   i, j, start, finish, status : Integer;
-  mh, Offset, cnt : Cardinal;
+  mh, Offset, cnt : QWord;
   buf : PByte;
 const
   MAX_BLOCK  = $803;
@@ -2820,7 +2820,7 @@ end;
 function TFantomSpirit.PollMemory(address, size: Integer): TStrings;
 var
   status, cnt : integer;
-  mh, Offset : Cardinal;
+  mh, Offset : QWord;
   amt, i : Integer;
   buf : PByte;
 const
@@ -2867,7 +2867,7 @@ end;
 
 function TFantomSpirit.PowerDownTime(aTime: integer): boolean;
 var
-  modID : Cardinal;
+  modID : QWord;
   count : Word;
   buffer : NXTDataBuffer;
 begin
@@ -3143,7 +3143,7 @@ begin
   if aSize = 0 then Exit;
 end;
 
-function TFantomSpirit.Version(var rom, ram: Cardinal): boolean;
+function TFantomSpirit.Version(var rom, ram: QWord): boolean;
 var
   protmin, protmaj, firmmin, firmmaj : byte;
 begin
@@ -3188,7 +3188,7 @@ end;
 function TFantomSpirit.NXTFreeMemory: integer;
 var
   BTAddr : PByte;
-  memFree, BTSig : Cardinal;
+  memFree, BTSig : QWord;
   nxtName : string;
 begin
   Result := 0;
@@ -3214,7 +3214,7 @@ var
   status : integer;
   b : byte;
   buf, readBuf : PByte;
-  bufLen : Cardinal;
+  bufLen : QWord;
 begin
   Result := Open;
   if not Result then Exit;
Only in nbc_amd64/bricktools: FantomSpirit.pas~
Only in nbc_amd64/bricktools: FantomSpirit.ppu
Only in nbc_amd64/bricktools: libusb.o
Only in nbc_amd64/bricktools: libusb.pas~
Only in nbc_amd64/bricktools: libusb.ppu
Only in nbc_amd64/bricktools: rcx_cmd.o
Only in nbc_amd64/bricktools: rcx_cmd.ppu
Only in nbc_amd64/bricktools: rcx_constants.o
Only in nbc_amd64/bricktools: rcx_constants.ppu
Only in nbc_amd64/bricktools: uSpirit.o
diff -rup nbc/bricktools/uSpirit.pas nbc_amd64/bricktools/uSpirit.pas
--- nbc/bricktools/uSpirit.pas	2008-04-03 06:07:08.000000000 +0200
+++ nbc_amd64/bricktools/uSpirit.pas	2009-01-10 12:19:53.000000000 +0100
@@ -106,7 +106,7 @@ type
     fActive : boolean;
     fAutoClose: boolean;
     fBrickType: byte;
-    fBST: Cardinal;
+    fBST: QWord;
     fBTName: string;
     fDataLog: TStrings;
     fFastMode: boolean;
@@ -196,7 +196,7 @@ type
     function BrickAlive : boolean; virtual; abstract;
     function Shutdown : boolean; virtual; abstract;
     function Sleep(aVal : integer) : boolean; virtual; abstract;
-	  function Version(var rom : Cardinal; var ram : Cardinal) : boolean; virtual; abstract;
+	  function Version(var rom : QWord; var ram : QWord) : boolean; virtual; abstract;
     function TransmitPower(aLevel : TTransmitLevel) : boolean; virtual; abstract;
 
     function Poll(aSrc, aNum : integer) : integer; virtual; abstract;
@@ -304,11 +304,11 @@ type
     function PlaySoundFile(const filename : string; bLoop : boolean) : boolean; virtual; abstract;
     function GetNXTOutputState(const port : byte; var power : integer;
       var mode, regmode : byte; var turnratio : integer;
-      var runstate : byte; var tacholimit : cardinal; var tachocount,
+      var runstate : byte; var tacholimit : QWord; var tachocount,
       blocktachocount, rotationcount : longint) : boolean; virtual; abstract;
     function SetNXTOutputState(const port : byte; const power : integer;
       const mode, regmode : byte; const turnratio : integer;
-      const runstate : byte; const tacholimit : cardinal) : boolean; virtual; abstract;
+      const runstate : byte; const tacholimit : QWord) : boolean; virtual; abstract;
     function GetNXTInputValues(const port : byte; var valid, calibrated : boolean;
       var stype, smode : byte; var raw, normalized : word;
       var scaled, calvalue : smallint) : boolean; virtual; abstract;
@@ -316,54 +316,54 @@ type
     function ResetInputScaledValue(const port : byte) : boolean; virtual; abstract;
     function ResetOutputPosition(const port : byte; const Relative : boolean) : boolean; virtual; abstract;
     function MessageWrite(const inbox : byte; const msg : string) : boolean; virtual; abstract;
-    function KeepAlive(var time : cardinal; const chkResponse : boolean = true) : boolean; virtual; abstract;
+    function KeepAlive(var time : QWord; const chkResponse : boolean = true) : boolean; virtual; abstract;
     function LSGetStatus(port : byte; var bytesReady : byte) : boolean; virtual; abstract;
     function GetCurrentProgramName(var name : string) : boolean; virtual; abstract;
     function GetButtonState(const idx : byte; const reset : boolean;
       var pressed : boolean; var count : byte) : boolean; virtual; abstract;
     function MessageRead(const remote, local : byte; const remove : boolean; var Msg : NXTMessage) : boolean; virtual; abstract;
     // NXT system commands
-    function NXTOpenRead(const filename : string; var handle : cardinal;
-      var size : cardinal) : boolean; virtual; abstract;
-    function NXTOpenWrite(const filename : string; const size : cardinal;
-      var handle : cardinal) : boolean; virtual; abstract;
-    function NXTRead(var handle : cardinal; var count : word;
+    function NXTOpenRead(const filename : string; var handle : QWord;
+      var size : QWord) : boolean; virtual; abstract;
+    function NXTOpenWrite(const filename : string; const size : QWord;
+      var handle : QWord) : boolean; virtual; abstract;
+    function NXTRead(var handle : QWord; var count : word;
       var buffer : NXTDataBuffer) : boolean; virtual; abstract;
-    function NXTWrite(var handle : cardinal; const buffer : NXTDataBuffer;
+    function NXTWrite(var handle : QWord; const buffer : NXTDataBuffer;
       var count : word; const chkResponse : boolean = false) : boolean; virtual; abstract;
-    function NXTCloseFile(var handle : cardinal; const chkResponse: boolean = false) : boolean; virtual; abstract;
+    function NXTCloseFile(var handle : QWord; const chkResponse: boolean = false) : boolean; virtual; abstract;
     function NXTDeleteFile(var filename : string; const chkResponse: boolean = false) : boolean; virtual; abstract;
-    function NXTFindFirstFile(var filename : string; var handle : cardinal; var filesize : cardinal) : boolean; virtual; abstract;
-    function NXTFindNextFile(var handle : cardinal; var filename : string; var filesize : cardinal) : boolean; virtual; abstract;
+    function NXTFindFirstFile(var filename : string; var handle : QWord; var filesize : QWord) : boolean; virtual; abstract;
+    function NXTFindNextFile(var handle : QWord; var filename : string; var filesize : QWord) : boolean; virtual; abstract;
     function NXTGetVersions(var protmin, protmaj, firmmin, firmmaj : byte) : boolean; virtual; abstract;
-    function NXTOpenWriteLinear(const filename : string; const size : cardinal;
-      var handle : cardinal) : boolean; virtual; abstract;
-    function NXTOpenReadLinear(const filename : string; var handle : cardinal;
-      var size : cardinal) : boolean; virtual; abstract;
-    function NXTOpenWriteData(const filename : string; const size : cardinal;
-      var handle : cardinal) : boolean; virtual; abstract;
-    function NXTOpenAppendData(const filename : string; var size : cardinal;
-      var handle : cardinal) : boolean; virtual; abstract;
-    function NXTCloseModuleHandle(var handle : cardinal; const chkResponse: boolean = false) : boolean; virtual; abstract;
+    function NXTOpenWriteLinear(const filename : string; const size : QWord;
+      var handle : QWord) : boolean; virtual; abstract;
+    function NXTOpenReadLinear(const filename : string; var handle : QWord;
+      var size : QWord) : boolean; virtual; abstract;
+    function NXTOpenWriteData(const filename : string; const size : QWord;
+      var handle : QWord) : boolean; virtual; abstract;
+    function NXTOpenAppendData(const filename : string; var size : QWord;
+      var handle : QWord) : boolean; virtual; abstract;
+    function NXTCloseModuleHandle(var handle : QWord; const chkResponse: boolean = false) : boolean; virtual; abstract;
     function NXTBootCommand(const chkResponse: boolean = false) : boolean; virtual; abstract;
     function NXTSetBrickName(const name : string; const chkResponse: boolean = false) : boolean; virtual; abstract;
     function NXTGetBrickName : string;
     function NXTGetDeviceInfo(var name : string; BTAddress : PByte;
-      var BTSignal : Cardinal; var memFree : Cardinal) : boolean; virtual; abstract;
+      var BTSignal : QWord; var memFree : QWord) : boolean; virtual; abstract;
     function NXTFreeMemory : integer; virtual; abstract;
     function NXTDeleteUserFlash(const chkResponse: boolean = false) : boolean; virtual; abstract;
     function NXTBTFactoryReset(const chkResponse: boolean = false) : boolean; virtual; abstract;
     function NXTPollCommandLen(const bufNum : byte; var count : byte) : boolean; virtual; abstract;
     function NXTPollCommand(const bufNum : byte; var count : byte;
       var buffer : NXTDataBuffer) : boolean; virtual; abstract;
-    function NXTWriteIOMap(var ModID : Cardinal; const Offset : Word;
+    function NXTWriteIOMap(var ModID : QWord; const Offset : Word;
       var count : Word; const buffer : NXTDataBuffer; chkResponse : Boolean = False) : boolean; virtual; abstract;
-    function NXTReadIOMap(var ModID : Cardinal; const Offset : Word;
+    function NXTReadIOMap(var ModID : QWord; const Offset : Word;
       var count : Word; var buffer : NXTDataBuffer) : boolean; virtual; abstract;
-    function NXTFindFirstModule(var ModName : string; var Handle : cardinal;
-      var ModID, ModSize : Cardinal; var IOMapSize : Word) : boolean; virtual; abstract;
-    function NXTFindNextModule(var Handle : cardinal; var ModName : string;
-      var ModID, ModSize : Cardinal; var IOMapSize : Word) : boolean; virtual; abstract;
+    function NXTFindFirstModule(var ModName : string; var Handle : QWord;
+      var ModID, ModSize : QWord; var IOMapSize : Word) : boolean; virtual; abstract;
+    function NXTFindNextModule(var Handle : QWord; var ModName : string;
+      var ModID, ModSize : QWord; var IOMapSize : Word) : boolean; virtual; abstract;
     function NXTRenameFile(const old, new : string; const chkResponse: boolean = false) : boolean; virtual; abstract;
 {
   kNXT_SCGetBTAddress          = $9A;
@@ -386,7 +386,7 @@ type
     property  FastMode : boolean read fFastMode write SetFastMode;
     property  UseBluetooth : boolean read GetUseBT write SetUseBT;
     property  BluetoothName : string read fBTName write SetBTName;
-    property  BluetoothSearchTimeout : Cardinal read fBST write fBST;
+    property  BluetoothSearchTimeout : QWord read fBST write fBST;
     property  Quiet : Boolean read GetQuiet write SetQuiet;
     property  BrickType : byte read FBrickType write SetBrickType;
     property  Port : string read fPort write SetPort;
@@ -759,7 +759,7 @@ end;
 function TBrickComm.NXTGetBrickName: string;
 var
   bt : array[0..5] of byte;
-  btsig, memfree : Cardinal;
+  btsig, memfree : QWord;
 begin
   Result := '';
   memfree := 0;
Only in nbc_amd64/bricktools: uSpirit.pas~
Only in nbc_amd64/bricktools: uSpirit.ppu
Only in nbc_amd64/: mwGenericLex.o
Only in nbc_amd64/: mwGenericLex.ppu
Only in nbc_amd64/nxt: NBCCommonData.o
Only in nbc_amd64/nxt: NBCCommonData.pas
Only in nbc_amd64/nxt: NBCCommonData.ppu
Only in nbc_amd64/nxt: NXCDefsData.o
Only in nbc_amd64/nxt: NXCDefsData.pas
Only in nbc_amd64/nxt: NXCDefsData.ppu
Only in nbc_amd64/nxt: NXTDefsData.o
Only in nbc_amd64/nxt: NXTDefsData.pas
Only in nbc_amd64/nxt: NXTDefsData.ppu
Only in nbc_amd64/nxt: P10Build.o
Only in nbc_amd64/nxt: P10Build.ppu
Only in nbc_amd64/nxt: P10Build.rst
Only in nbc_amd64/nxt: Parser10.o
Only in nbc_amd64/nxt: Parser10.ppu
Only in nbc_amd64/nxt: mkdata
Only in nbc_amd64/nxt: mkdata.o
Only in nbc_amd64/nxt: nbc
Only in nbc_amd64/nxt: nbc.o
Only in nbc_amd64/nxt: nbc.rst
Only in nbc_amd64/nxt: nbc_preproc.inc
diff -rup nbc/nxt/nbclinux.mak nbc_amd64/nxt/nbclinux.mak
--- nbc/nxt/nbclinux.mak	2008-10-19 18:08:00.000000000 +0200
+++ nbc_amd64/nxt/nbclinux.mak	2009-01-11 11:30:21.000000000 +0100
@@ -11,14 +11,14 @@ clean::
 realclean:: clean
 	rm -f $(PROGRAMS) mkdata NBCCommonData.pas NXTDefsData.pas NXCDefsData.pas
 
-PFLAGS=-S2cdghi -dRELEASE -vewnhi -l -Fu../ -Fu. -Fu../bricktools -Fu../png -Fu/usr/lib/lazarus/lcl/units/i386-linux/ -dCAN_DOWNLOAD -dLCL
+PFLAGS=-S2cdghi -dRELEASE -vwnhi -l -Fu../ -Fu. -Fu../bricktools -Fu../png -Fu/usr/lib/lazarus/lcl/units/x86_64-linux/ -dCAN_DOWNLOAD -dLCL
 
-#/usr/bin/ppc386  -S2cgi -OG1 -gl -WG -va -l -Fu/usr/lib/lazarus/lcl/units/i386-linux/ -Fu/usr/lib/lazarus/lcl/units/i386-linux/gtk/ -Fu/usr/lib/lazarus/packager/units/i386-linux/ -Fu. -dLCL -dLCLgtk /tmp/testcompileroptions.pas
+#/usr/bin/ppcx64  -S2cgi -OG1 -gl -WG -va -l -Fu/usr/lib/lazarus/lcl/units/x86_64-linux/ -Fu/usr/lib/lazarus/lcl/units/i386-linux/gtk/ -Fu/usr/lib/lazarus/packager/units/i386-linux/ -Fu. -dLCL -dLCLgtk /tmp/testcompileroptions.pas
 
 
 # Linux
 PTOOLPREFIX=/usr/bin/
-PPC=$(PTOOLPREFIX)ppc386
+PPC=$(PTOOLPREFIX)ppcx64
 
 # how to link executable
 nbc: nbc.dpr nbc_preproc.inc
Only in nbc_amd64/nxt: nbclinux.mak~
Only in nbc_amd64/nxt: nxt.dat
Only in nbc_amd64/nxt: uNBCCommon.o
Only in nbc_amd64/nxt: uNBCCommon.ppu
Only in nbc_amd64/nxt: uNBCCommon.rst
Only in nbc_amd64/nxt: uNBCInterface.o
Only in nbc_amd64/nxt: uNBCInterface.ppu
Only in nbc_amd64/nxt: uNXCComp.o
Only in nbc_amd64/nxt: uNXCComp.ppu
Only in nbc_amd64/nxt: uNXCComp.rst
Only in nbc_amd64/nxt: uNXTClasses.o
Only in nbc_amd64/nxt: uNXTClasses.ppu
Only in nbc_amd64/nxt: uNXTClasses.rst
Only in nbc_amd64/nxt: uNXTConstants.o
Only in nbc_amd64/nxt: uNXTConstants.ppu
Only in nbc_amd64/nxt: uPreprocess.o
Only in nbc_amd64/nxt: uPreprocess.ppu
Only in nbc_amd64/nxt: uPreprocess.rst
Only in nbc_amd64/nxt: uRIC.o
Only in nbc_amd64/nxt: uRIC.ppu
Only in nbc_amd64/nxt: uRICComp.o
Only in nbc_amd64/nxt: uRICComp.ppu
Only in nbc_amd64/nxt: uRICComp.rst
Only in nbc_amd64/nxt: uRPGComp.o
Only in nbc_amd64/nxt: uRPGComp.ppu
Only in nbc_amd64/nxt: uRPGComp.rst
Only in nbc_amd64/: uCmdLineUtils.o
Only in nbc_amd64/: uCmdLineUtils.ppu
Only in nbc_amd64/: uCmdLineUtils.rst
Only in nbc_amd64/: uCommonUtils.o
diff -rup nbc/uCommonUtils.pas nbc_amd64/uCommonUtils.pas
--- nbc/uCommonUtils.pas	2007-07-12 23:48:58.000000000 +0200
+++ nbc_amd64/uCommonUtils.pas	2009-01-10 12:17:47.000000000 +0100
@@ -47,6 +47,7 @@ function HiWord(L: Cardinal): Word;
 function HiByte(W: Word): Byte;
 function GetByte(val : Cardinal; idx : integer) : Byte;
 function BytesToCardinal(b1 : byte; b2 : byte = 0; b3 : byte = 0; b4 : Byte = 0) : Cardinal; {overload;}
+function BytesToQWord(b1 : byte; b2 : byte = 0; b3 : byte = 0; b4 : Byte = 0) : QWord; {overload;}
 //function BytesToCardinal(b : array of byte) : Cardinal; overload;
 procedure GetFileList(const Directory : string; const Pattern : string; List : TStringlist);
 procedure GetSubDirectories(const Directory : string; List : TStringlist);
@@ -212,6 +213,11 @@ begin
   Result := Cardinal(b1) + (Cardinal(b2) shl 8) + (Cardinal(b3) shl 16) + (Cardinal(b4) shl 24);
 end;
 
+function BytesToQWord(b1 : byte; b2 : byte = 0; b3 : byte = 0; b4 : Byte = 0) : QWord;
+begin
+  Result := QWord(b1) + (QWord(b2) shl 8) + (QWord(b3) shl 16) + (QWord(b4) shl 24);
+end;
+
 {
 function BytesToCardinal(b : array of byte) : Cardinal;
 var
Only in nbc_amd64/: uCommonUtils.pas~
Only in nbc_amd64/: uCommonUtils.ppu
Only in nbc_amd64/: uGenLexer.o
Only in nbc_amd64/: uGenLexer.ppu
Only in nbc_amd64/: uNBCLexer.o
Only in nbc_amd64/: uNBCLexer.ppu
Only in nbc_amd64/: uNXCLexer.o
Only in nbc_amd64/: uNXCLexer.ppu
Only in nbc_amd64/: uVersionInfo.o
Only in nbc_amd64/: uVersionInfo.ppu
