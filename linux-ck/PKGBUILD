# Maintainer: graysky <graysky AT archlinux DOT us>
# Contributor: Tobias Powalowski <tpowa@archlinux.org>
# Contributor: Thomas Baechler <thomas@archlinux.org>
###########################################################################################################
#                                          Patch and Build Options
###########################################################################################################
#
## Note all kernels get the ck patch set with BFS so there is no option to enable/disable it!
#
_makenconfig="n"	# select additional kernel options prior to a build via nconfig
_localmodcfg="n"	# compile ONLY probed modules - see notes below!
_localyescfg="n"	# convert all modules to core - see notes below!
_use_current="n"	# use the current kernel's .config file - see notes below!
_BFQ_patches="n"	# add BFQ patches for the BFQ I/O scheduler
###########################################################################################################
#                                        More Details and References
###########################################################################################################
## LOCALMODCONFIG OPTION
# As of mainline 2.6.32, running with this option will only build the modules that you currently have
# probed in your system VASTLY reducing the number of modules build.
#
# WARNING - make CERTAIN that all modules are modprobed BEFORE you begin making the pkg!
# Read, https://bbs.archlinux.org/viewtopic.php?pid=830221#p830221
# To keep track of which modules are needed for your specific system/hardware, give my module_db script
# a try: http://aur.archlinux.org/packages.php?ID=41689
#
# Note that if you use my script, this PKGBUILD will auto run the reload_data base for you to probe
# all the modules you have logged!
#
## LOCALMODCONFIG OPTION
# This adds the option localyesconfig to make. This is similar to localmodconfig, but after it removes
# unnecessary modules it runs "sed -i s/=m/=y/" on the .config file. It then runs "make silentoldconfig"
# to fix any holes that were created by the conversion of modules to core.
## USE CURRENT KERNEL'S .CONFIG
# Enabling this option will use the .config of the RUNNING kernel rather than the ARCH defaults.
# Useful when the package gets updated and you already went through the trouble of customizing your
# config options.  NOT recommended when a new kernel is released, but again, convenient for package bumps.
## BFQ
# read, http://algo.ing.unimo.it/people/paolo/disk_sched/
#
###########################################################################################################
pkgname=linux-ck
true && pkgname=(linux-ck linux-ck-headers)
_kernelname=-ck
_basekernel=3.0
pkgver=${_basekernel}
pkgrel=1
makedepends=('xmlto' 'docbook-xsl')
arch=(i686 x86_64)
license=('GPL2')
url="http://ck-hack.blogspot.com"
options=(!strip)
_ckpatchversion=1
_ckpatchname="patch-${_basekernel}-ck${_ckpatchversion}"
_bfqpath="http://algo.ing.unimo.it/people/paolo/disk_sched/patches/3.0.0"
source=(ftp://ftp.kernel.org/pub/linux/kernel/v3.0/linux-${_basekernel}.tar.bz2
#ftp://ftp.kernel.org/pub/linux/kernel/v3.0/patch-${pkgver}.bz2
config config.x86_64 # the main kernel config files
linux-ck.install linux-ck.preset # standard config files for mkinitcpio ramdisk
fix-i915.patch
#http://www.kernel.org/pub/linux/kernel/people/ck/patches/3.0/${_basekernel}/${_basekernel}-ck${_ckpatchversion}/${_ckpatchname}.bz2 # ck_patchset
#${_bfqpath}/{0001 0002 0003} # bfq patchset
)

build() {

	cd ${srcdir}/linux-$_basekernel
	#patch -p1 -i ${srcdir}/patch-${pkgver}

	# add latest fixes from stable queue, if needed
	# http://git.kernel.org/?p=linux/kernel/git/stable/stable-queue.git

	# fix #19234 i1915 display size
	patch -Np1 -i ${srcdir}/fix-i915.patch

	### Patch source with ck patchset with BFS
	# Fix double name in EXTRAVERSION
	sed -i -re "s/^(.EXTRAVERSION).*$/\1 = /" ${srcdir}/${_ckpatchname}
	msg "Patching source with the ck2 patch set using bfs v0.406"
	patch -Np1 -i ${srcdir}/${_ckpatchname}

	### Optionally patch source for BFQ patches
	if [ ${_BFQ_patches} = "y" ]; then
		msg "Patching source with BFQ patches"
		for p in $(ls ${srcdir}/000*.patch); do
			patch -Np1 -i $p
		done
	fi

	### Clean tree and copy ARCH config over
	msg "Running make mrproper to clean source tree"
	make mrproper

	if [ "$CARCH" = "x86_64" ]; then
		cat ../config.x86_64 >./.config
	else
		cat ../config >./.config
	fi

	### Optionally use running kernel's config
	# code originally by nous; http://aur.archlinux.org/packages.php?ID=40191
	if [ ${_use_current} = "y" ]; then
		if [[ -s /proc/config.gz ]]; then
			msg "Extracting config from /proc/config.gz..."
			modprobe configs
			zcat /proc/config.gz > ./.config
		else
			warning "You kernel was not compiled with IKCONFIG_PROC!"
			warning "You cannot read the current config!"
			warning "Aborting!"
			exit
		fi
	fi

	if [ "${_kernelname}" != "" ]; then
		sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
	fi

	# If user patched to BFQ, set it as default io scheduler
	if [ ${_BFQ_patches} = "y" ]; then
		sed -i -e s'/CONFIG_CFQ_GROUP_IOSCHED=y/CONFIG_CFQ_GROUP_IOSCHED=y\nCONFIG_IOSCHED_BFQ=y\nCONFIG_CGROUP_BFQIO=y/' \
			-i -e s'/CONFIG_DEFAULT_CFQ=y/# CONFIG_DEFAULT_CFQ is not set\nCONFIG_DEFAULT_BFQ=y/' \
			-i -e '/CONFIG_DEFAULT_IOSCHED/ s,cfq,bfq,' ./.config
	fi

	# remove the extraversion from Makefile
	# this ensures our kernel version is always 3.X-ck
	# this way, minor kernel updates will not break external modules
	# we need to change this soon, see FS#16702
	sed -i 's|^EXTRAVERSION = .*$|EXTRAVERSION = |g' Makefile
	# get kernel version
	msg "Running make prepare for you to enable patched options of your choosing"
	make prepare
	### Optionally load needed modules for the make localmodconfig
	# See http://aur.archlinux.org/packages.php?ID=41689
	if [ $_localmodcfg = "y" ]; then
		msg "If you have modprobe_db installed, running reload_database now"
		if [ -e /usr/bin/reload_database ]; then
			/usr/bin/reload_database
		fi
		msg "Running Steven Rostedt's make localmodconfig now"
		make localmodconfig
	fi

	if [ $_localyescfg = "y" ]; then
		msg "Running make localyesconfig"
		make localyesconfig
	fi

	if [ $_makenconfig = "y" ]; then
		msg "Running make nconfig"
		make nconfig
	fi

	msg "Running make bzImage and modules"
	make ${MAKEFLAGS} bzImage modules
}

package_linux-ck() {
_Kpkgdesc='ARCH kernel with Brain Fuck Scheduler v0.406 and all the goodies in the ck2 patch set.'
pkgdesc="${_Kpkgdesc}"
provides=("${pkgname}=${pkgver}")
backup=(etc/mkinitcpio.d/linux-ck.preset)
depends=('coreutils' 'linux-firmware' 'module-init-tools>=3.16' 'mkinitcpio>=0.7')
replaces=('kernel26-ck')
install=linux-ck.install
#conflicts=('linux-ck')
#groups=('ck-generic')
optdepends=('crda: to set the correct wireless channels of your country'
'lirc-ck: Linux Infrared Remote Control kernel modules for linux-ck'
'nvidia-ck: nVidia drivers for linux-ck'
'nvidia-beta-ck: nVidia beta drivers for linux-ck'
'modprobed_db: Keeps track of EVERY kernel module that has ever been probed - useful for those of us who make localmodconfig')

KARCH=x86
cd ${srcdir}/linux-$_basekernel
#get kernel version
_kernver="$(make kernelrelease)"
mkdir -p ${pkgdir}/{lib/modules,lib/firmware,boot}
msg "Running make modules_install"
make INSTALL_MOD_PATH=${pkgdir} modules_install
cp System.map ${pkgdir}/boot/System.map26${_kernelname}
cp arch/$KARCH/boot/bzImage ${pkgdir}/boot/vmlinuz26${_kernelname}

# add vmlinux
install -m644 -D vmlinux ${pkgdir}/usr/src/linux-${_kernver}/vmlinux

# install fallback mkinitcpio.conf file and preset file for kernel
install -m644 -D ${srcdir}/${pkgname}.preset ${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset
# set correct depmod command for install
sed \
	-e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/g" \
	-e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
	-i $startdir/${pkgname}.install
sed \
	-e "s|default_image=.*|default_image=\"/boot/initramfs-${pkgname}.img\"|g" \
	-e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${pkgname}-fallback.img\"|g" \
	-i ${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset

# remove build and source links
rm -f ${pkgdir}/lib/modules/${_kernver}/{source,build}
# add compat symlink for the kernel image
ln -sf vmlinuz-${pkgname} ${pkgdir}/boot/vmlinuz26${_kernelname}
# remove the firmware
rm -rf ${pkgdir}/lib/firmware
# gzip -9 all modules to save 100MB of space
find "$pkgdir" -name '*.ko' -exec gzip -9 {} \;
}

package_linux-ck-headers() {
_Hpkgdesc='Header files and scripts to build modules for linux-ck.'
pkgdesc="${_Hpkgdesc}"
#conflicts=('linux-ck-headers')
#groups=('ck-generic')
provides=("${pkgname}=${pkgver}" "linux-headers=${pkgver}") # the 2nd entry allows linux-ck to be the sole kernel package and works with virtualbox
replaces=('kernel26-ck-headers')

mkdir -p ${pkgdir}/lib/modules/${_kernver}
cd ${pkgdir}/lib/modules/${_kernver}
ln -sf ../../../usr/src/linux-${_kernver} build
cd ${srcdir}/linux-$_basekernel
install -D -m644 Makefile \
	${pkgdir}/usr/src/linux-${_kernver}/Makefile
install -D -m644 kernel/Makefile \
	${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile
install -D -m644 .config \
	${pkgdir}/usr/src/linux-${_kernver}/.config
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include

for i in acpi asm-generic config crypto drm generated linux math-emu media net pcmcia scsi sound trace video xen; do
	cp -a include/$i ${pkgdir}/usr/src/linux-${_kernver}/include/
done

# copy arch includes for external modules
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/x86
cp -a arch/x86/include ${pkgdir}/usr/src/linux-${_kernver}/arch/x86/

# copy files necessary for later builds, like nvidia and vmware
cp Module.symvers ${pkgdir}/usr/src/linux-${_kernver}
cp -a scripts ${pkgdir}/usr/src/linux-${_kernver}
# fix permissions on scripts dir
chmod og-w -R ${pkgdir}/usr/src/linux-${_kernver}/scripts
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions

mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/kernel

cp arch/$KARCH/Makefile ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/
if [ "$CARCH" = "i686" ]; then
	cp arch/$KARCH/Makefile_32.cpu ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/
fi
cp arch/$KARCH/kernel/asm-offsets.s ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/kernel/

# add headers for lirc package
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video
cp drivers/media/video/*.h  ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/
for i in bt8xx cpia2 cx25840 cx88 em28xx et61x251 pwc saa7134 sn9c102; do
	mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/$i
	cp -a drivers/media/video/$i/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/$i
done
# add docbook makefile
install -D -m644 Documentation/DocBook/Makefile \
	${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile
# add dm headers
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/md
cp drivers/md/*.h  ${pkgdir}/usr/src/linux-${_kernver}/drivers/md
# add inotify.h
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include/linux
cp include/linux/inotify.h ${pkgdir}/usr/src/linux-${_kernver}/include/linux/
# add wireless headers
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/
cp net/mac80211/*.h ${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/
# add dvb headers for external modules
# in reference to:
# http://bugs.archlinux.org/task/9912
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core
cp drivers/media/dvb/dvb-core/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core/
# add dvb headers for external modules
# in reference to:
# http://bugs.archlinux.org/task/11194
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/

# fix if user disables dvb support
[[ -e include/config/dvb/ ]] && cp include/config/dvb/*.h ${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/
# add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
# in reference to:
# http://bugs.archlinux.org/task/13146
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
cp drivers/media/dvb/frontends/lgdt330x.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
cp drivers/media/video/msp3400-driver.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
# add dvb headers
# in reference to:
# http://bugs.archlinux.org/task/20402
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-usb
cp drivers/media/dvb/dvb-usb/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-usb/
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends
cp drivers/media/dvb/frontends/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/common/tuners
cp drivers/media/common/tuners/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/common/tuners/
# add xfs and shmem for aufs building
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/fs/xfs
mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/mm
cp fs/xfs/xfs_sb.h ${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h
# copy in Kconfig files
for i in `find . -name "Kconfig*"`; do
	mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/`echo $i | sed 's|/Kconfig.*||'`
	cp $i ${pkgdir}/usr/src/linux-${_kernver}/$i
done

chown -R root.root ${pkgdir}/usr/src/linux-${_kernver}
find ${pkgdir}/usr/src/linux-${_kernver} -type d -exec chmod 755 {} \;
# strip scripts directory
find ${pkgdir}/usr/src/linux-${_kernver}/scripts  -type f -perm -u+w 2>/dev/null | while read binary ; do
case "$(file -bi "$binary")" in
	*application/x-sharedlib*) # Libraries (.so)
		/usr/bin/strip $STRIP_SHARED "$binary";;
	*application/x-archive*) # Libraries (.a)
		/usr/bin/strip $STRIP_STATIC "$binary";;
	*application/x-executable*) # Binaries
		/usr/bin/strip $STRIP_BINARIES "$binary";;
esac
done 
# remove unneeded architectures
rm -rf ${pkgdir}/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,cris,frv,h8300,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,parisc,powerpc,ppc,s390,sh,sh64,sparc,sparc64,um,v850,xtensa}
}
# Global pkgdesc and depends are here so that they will be picked up by AUR
pkgdesc='ARCH kernel with Brain Fuck Scheduler v0.406 and all the goodies in the ck1 patch set.'
sha256sums=('64b0228b54ce39b0b2df086109a7b737cde58e3df4f779506ddcaccee90356a0'
            '920dbb0dfd6ce8ece768d84106a8966f8a3f0a6e4f6d4fc2c081706957084200'
            'dd5be7fe21ad4b7ff07ca622fb38cc3c3b25f6d5bf48591e14f36411df7d5d29'
            'a791f6deae12d6f4ec43a1f5e38e153e67bed2326bce13b2d4e45a6649ae68df'
            'c2cf8cc2600502de348f3dc3aae9a3bde5486759db15cb8a93df7aa35bd6e7da'
            'e5f844f1e1719abbdc4ceeb9386b8186edee3bc92cdb1953a87b9e1d27ee59f1')
