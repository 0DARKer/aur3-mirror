diff -aur arabica-2012-November/include/XSLT/impl/xslt_apply_templates.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_apply_templates.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_apply_templates.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_apply_templates.hpp	2013-04-04 06:39:27.929550990 +0200
@@ -48,7 +48,7 @@
         throw std::runtime_error("apply-templates select expression is not a node-set");
       nodes = value.asNodeSet();
     }
-    sort(node, nodes, context);
+    this->sort(node, nodes, context);
     context.stylesheet().applyTemplates(nodes, context, mode_);
   } // execute
 
diff -aur arabica-2012-November/include/XSLT/impl/xslt_attribute.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_attribute.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_attribute.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_attribute.hpp	2013-04-04 04:16:57.630656196 +0200
@@ -56,7 +56,7 @@
 
     context.sink().start_attribute(name, namesp);
     ChainStackFrame<string_type, string_adaptor> frame(context);
-    execute_children(node, context);
+    this->execute_children(node, context);
     context.sink().end_attribute();
   } // execute
 
diff -aur arabica-2012-November/include/XSLT/impl/xslt_choose.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_choose.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_choose.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_choose.hpp	2013-04-04 04:17:26.631104734 +0200
@@ -32,7 +32,7 @@
   virtual void execute(const DOM::Node<string_type, string_adaptor>& node, 
                        ExecutionContext<string_type, string_adaptor>& context) const
   {
-    execute_children(node, context);
+    this->execute_children(node, context);
   } // execute
 
 private:
@@ -49,7 +49,7 @@
   virtual void execute(const DOM::Node<string_type, string_adaptor>& node, 
                        ExecutionContext<string_type, string_adaptor>& context) const
   {
-    execute_children(node, context);
+    this->execute_children(node, context);
   } // execute
 }; // class Otherwise
 
diff -aur arabica-2012-November/include/XSLT/impl/xslt_comment.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_comment.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_comment.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_comment.hpp	2013-04-04 04:16:40.147052548 +0200
@@ -22,7 +22,7 @@
   {
     context.sink().start_comment();
 
-    execute_children(node, context);
+    this->execute_children(node, context);
 
     context.sink().end_comment();
   } // execute
diff -aur arabica-2012-November/include/XSLT/impl/xslt_copy.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_copy.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_copy.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_copy.hpp	2013-04-04 06:40:03.340098417 +0200
@@ -82,13 +82,13 @@
 
   virtual void execute(const DOM::Node<string_type, string_adaptor>& node, ExecutionContext<string_type, string_adaptor>& context) const
   {
-    copy(node, context);
+    this->copy(node, context);
   } // execute
 
 protected:
   virtual void process_content(const DOM::Node<string_type, string_adaptor>& node, ExecutionContext<string_type, string_adaptor>& context) const
   {
-    execute_children(node, context);
+    this->execute_children(node, context);
   } // process_content
 
 private:
@@ -120,7 +120,7 @@
 
     Arabica::XPath::NodeSet<string_type, string_adaptor> nodes = value.asNodeSet();
     for(typename Arabica::XPath::NodeSet<string_type, string_adaptor>::const_iterator n = nodes.begin(), e = nodes.end(); n != e; ++n)
-      copy(*n, context);
+      this->copy(*n, context);
   } // execute
 
 protected:
@@ -130,11 +130,11 @@
     {
       const DOM::NamedNodeMap<string_type, string_adaptor>& attrs = node.getAttributes();
       for(unsigned int a = 0; a < attrs.getLength(); ++a)
-        copy(attrs.item(a), context);
+        this->copy(attrs.item(a), context);
     } // if ...
 
     for(DOM::Node<string_type, string_adaptor> n = node.getFirstChild(); n != 0; n = n.getNextSibling())
-      copy(n, context);
+      this->copy(n, context);
   } // process_content
 
 private:
diff -aur arabica-2012-November/include/XSLT/impl/xslt_element.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_element.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_element.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_element.hpp	2013-04-04 04:16:11.369940691 +0200
@@ -57,7 +57,7 @@
     if(context.sink().start_element(name, namesp)) 
     {
       ChainStackFrame<string_type, string_adaptor> frame(context);
-      execute_children(node, context);
+      this->execute_children(node, context);
       context.sink().end_element(name, namesp);
     }
   } // execute
diff -aur arabica-2012-November/include/XSLT/impl/xslt_for_each.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_for_each.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_for_each.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_for_each.hpp	2013-04-04 06:40:32.003875197 +0200
@@ -40,14 +40,14 @@
       throw SAX::SAXException("xsl:for-each must select a node set");
 
     NodeSet nodes = sel.asNodeSet();
-    sort(node, nodes, context);
+    this->sort(node, nodes, context);
 
     LastFrame<string_type, string_adaptor> last(context, nodes.size());
     for(size_t n = 0, e = nodes.size(); n != e; ++n)
     {
       ChainStackFrame<string_type, string_adaptor> frame(context);
       context.setPosition(nodes[n], n+1);
-      execute_children(nodes[n], context);
+      this->execute_children(nodes[n], context);
     } // for ...
   } // execute
 
diff -aur arabica-2012-November/include/XSLT/impl/xslt_functions.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_functions.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_functions.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_functions.hpp	2013-04-04 04:52:29.740295343 +0200
@@ -43,7 +43,7 @@
   {
     NodeSet nodes;
      
-    XPathValue a0 = arg(0, context, executionContext);
+    XPathValue a0 = baseT::arg(0, context, executionContext);
     if(baseT::argCount() != 1)
       throw Arabica::XPath::UnsupportedException("two arg version of document()");
     if(a0.type() != Arabica::XPath::STRING)
@@ -107,7 +107,7 @@
   virtual NodeSet doEvaluate(const DOMNode& context,
                              const XPathExecutionContext& executionContext) const
   {
-    string_type keyname = argAsString(0, context, executionContext);
+    string_type keyname = this->argAsString(0, context, executionContext);
     string_type keyClarkName = QualifiedName::parseQName(keyname, true, namespaces_).clarkName();
 
     XPathValue a1 = baseT::arg(1, context, executionContext);
diff -aur arabica-2012-November/include/XSLT/impl/xslt_if.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_if.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_if.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_if.hpp	2013-04-04 04:15:41.102805960 +0200
@@ -27,7 +27,7 @@
   {
     ChainStackFrame<string_type, string_adaptor> frame(context);
     if(test_->evaluateAsBool(node, context.xpathContext()))
-      execute_children(node, context);
+      this->execute_children(node, context);
   } // execute
 
 private:
diff -aur arabica-2012-November/include/XSLT/impl/xslt_inline_element.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_inline_element.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_inline_element.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_inline_element.hpp	2013-04-04 04:14:49.422006923 +0200
@@ -76,7 +76,7 @@
         a->execute(node, context);
 
       ChainStackFrame<string_type, string_adaptor> frame(context);
-      execute_children(node, context);
+      this->execute_children(node, context);
       context.sink().end_element(name_, namespace_);
     }
   } // execute
diff -aur arabica-2012-November/include/XSLT/impl/xslt_message.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_message.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_message.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_message.hpp	2013-04-04 04:15:21.879175371 +0200
@@ -25,7 +25,7 @@
   virtual void execute(const DOM::Node<string_type, string_adaptor>& node, ExecutionContext<string_type, string_adaptor>& context) const
   {
     RedirectionFrame toMessageSink(context);
-    execute_children(node, context);
+    this->execute_children(node, context);
 
     if(terminate_)
       throw SAX::SAXException("Stylesheet terminated by xsl:message");
diff -aur arabica-2012-November/include/XSLT/impl/xslt_processing_instruction.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_processing_instruction.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_processing_instruction.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_processing_instruction.hpp	2013-04-04 04:15:08.728971998 +0200
@@ -30,7 +30,7 @@
     validate_name(name);
 
     context.sink().start_processing_instruction(name);
-    execute_children(node, context);
+    this->execute_children(node, context);
     context.sink().end_processing_instruction();
   } // execute
 
diff -aur arabica-2012-November/include/XSLT/impl/xslt_template.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_template.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_template.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_template.hpp	2013-04-04 04:13:24.307357199 +0200
@@ -54,7 +54,7 @@
 
   virtual void execute(const DOM::Node<string_type, string_adaptor>& node, ExecutionContext<string_type, string_adaptor>& context) const
   {
-    execute_children(node, context);
+    this->execute_children(node, context);
   } // execute
 
   const MatchExprList& compiled_matches() const { return matches_; }
diff -aur arabica-2012-November/include/XSLT/impl/xslt_variable_impl.hpp arabica-2012-November.patched/include/XSLT/impl/xslt_variable_impl.hpp
--- arabica-2012-November/include/XSLT/impl/xslt_variable_impl.hpp	2012-11-26 11:47:49.000000000 +0100
+++ arabica-2012-November.patched/include/XSLT/impl/xslt_variable_impl.hpp	2013-04-04 04:14:29.418363951 +0200
@@ -43,7 +43,7 @@
     if(select_)
       return select_->evaluate(node, context.xpathContext());
 
-    execute_children(node, context);
+    this->execute_children(node, context);
 
     if(sink.node() == 0)
       return StringValue::createValue(string_adaptor::empty_string());
