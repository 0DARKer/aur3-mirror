--- mememaker.sh	2012-03-18 00:23:10.000000000 -0400
+++ mememaker2.sh	2012-03-20 20:09:11.373220794 -0400
@@ -1,5 +1,5 @@
 #!/bin/bash
-function imgur {
+imgur (){
 # imgur script by Bart Nagel <bart@tremby.net>
 # version 2
 # I release this as public domain. Do with it what you will.
@@ -23,7 +23,7 @@
 apikey="b3625162d3418ac51a9ee805b1840452"
 
 # function to output usage instructions
-function usage {
+usage () {
 	echo "Usage: $(basename $0) <filename>
 Upload an image to imgur and output its new URL to stdout. Its delete page is
 output to stderr.
@@ -85,27 +85,119 @@
 echo All delete urls are saved in ~/deleteurls.txt
 echo "$url $deleteurl" >> ~/deleteurls.txt
 }
+creatememe () {	
+	if [[ -z $top ]]; then
+		echo -n Top caption: 
+		read top
+	fi
+	if [[ -z $bottom ]]; then
+		echo -n Bottom caption: 
+		read bottom
+	fi
+	width=`identify -format %w meme.jpg`
+	convert -background '#0008' -fill white -gravity center -size ${width}x30 \
+			  caption:"$bottom" \
+			  meme.jpg +swap -gravity south -composite  out.png
+	convert -background '#0008' -fill white -gravity center -size ${width}x30 \
+			  caption:"$top" \
+			  out.png +swap -gravity north -composite  out.png
+	imgur out.png
+	rm out.png
+	rm meme.jpg
+}
+checkarg () {
+	if [[ "${1:0:1}" == "-" || -z $1  ]]; then
+		cont=0;
+	else
+		cont=1;
+	fi
+}
 cd `dirname "$0"`
-echo Please select a meme.
-cat ./list.txt
-echo 
-echo 
-echo -n meme \#: 
-read meme
-cp ./memes/$meme.jpg ./meme.jpg
-echo 
-echo -n Top caption: 
-read top
-echo 
-echo -n Bottom caption: 
-read bottom
-width=`identify -format %w meme.jpg`
-convert -background '#0008' -fill white -gravity center -size ${width}x30 \
-          caption:"$bottom" \
-          meme.jpg +swap -gravity south -composite  out.png
-convert -background '#0008' -fill white -gravity center -size ${width}x30 \
-          caption:"$top" \
-          out.png +swap -gravity north -composite  out.png
-imgur out.png
-rm out.png
-rm meme.jpg
\ No newline at end of file
+while :
+do
+	case $1 in
+		-h | --help)
+			echo -e "-h --help  		display this message"
+			echo -e "-s --split 		create a split meme"
+			echo -e "-s --split #1 #2 	create a split meme with #1 on top and #2 on bottom"
+			echo -e "-m --meme 			create a meme"
+			echo -e "-m --meme #1 #2 	create a meme with #1 on top and #2 on bottom"
+			echo -e "-a --add 			add a file to memes folder"
+			exit 0
+			;;
+		-a | --add)
+			cp $2 ./memes/${2##*/}
+			exit 0;;
+		-l | --list)
+			cat ./list.txt
+			exit 0;;
+		-s | --split)
+			if [[ -n $2 && "${2:0:1}" != "-" && -f "./memes/$2.jpg" ]];then
+				[[ -z $3 || "${3:0:1}" == "-" && -f "./memes/$3.jpg" ]] && echo "Please include 2 memes" && exit 0
+				convert -crop 100%x50% ./memes/$2.jpg "$2"%d.jpg
+				convert -crop 100%x50% ./memes/$3.jpg "$3"%d.jpg
+				convert -append -adaptive-resize "480x480" "$2"0.jpg "$3"1.jpg meme.jpg
+				rm  "$2"0.jpg "$2"1.jpg  "$3"1.jpg "$3"0.jpg
+				shift 3
+			else
+				cat ./list.txt
+				echo Please select Top Meme
+				echo -n meme1 \#:
+				read meme1
+				echo Please select bottomMeme
+				echo -n meme2 \#:
+				read meme2
+				convert -crop 100%x50% ./memes/$meme1.jpg "$meme1"%d.jpg
+				conver t-crop 100%x50% ./memes/$meme2.jpg "$meme2"%d.jpg
+				convert -append -adaptive-resize "480x480" "$meme1"0.jpg "$meme2"1.jpg meme.jpg
+				rm  "$meme1"0.jpg "$meme2"1.jpg  "$meme1"1.jpg "$meme2"0.jpg
+				shift
+			fi;;
+		-m | --meme)
+			if [[ -n $2 && "${2:0:1}" != "-" && -f "./memes/$2.jpg" ]];then
+				cp ./memes/$2.jpg ./meme.jpg
+			else
+				cat ./list.txt
+				echo Please select a meme.
+				echo -n meme \#: 
+				read meme
+				cp ./memes/$meme.jpg ./meme.jpg
+			fi;;
+		-t | --top)
+			shift
+			[[ -z $1 ]] && echo "Please include a string for the top caption" && exit 0
+			top=$1
+			shift
+			checkarg
+			while [[ $cont -eq 1 ]]; do
+				top="$top $1"
+				shift
+				checkarg
+			done
+			cont=1;;
+		-b | --bottom)
+			shift
+			[[ -z $1 ]] && echo "Please include a string for the bottom caption" && exit 0
+			bottom=$1
+			shift
+			checkarg
+			while [[ $cont -eq 1 ]]; do
+				top="$bottom $1"
+				shift
+				checkarg
+			done
+			cont=1;;
+		--)
+			shift
+			break
+			;;
+		-*)
+			echo "WARN: Unknown option (ignored): $1" >&2
+			break
+			;;
+		*)
+			break
+			;;
+	esac
+done
+[[ -f ./meme.jpg ]] && creatememe || echo "for options try mememaker --help"
