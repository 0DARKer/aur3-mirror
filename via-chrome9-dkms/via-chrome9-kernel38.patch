diff --git a/via_chrome9_cbios.c b/via_chrome9_cbios.c
index 3430313..4b69885 100644
--- a/via_chrome9_cbios.c
+++ b/via_chrome9_cbios.c
@@ -2058,13 +2058,11 @@ struct edid * via_chrome9_connector_get_edid(
 
 	if (CBIOS_OK == CBiosGetEdid(pcbe, &cb_get_edid)) {
 		KMS_DEBUG("device 0x%x EDID successful get.\n", device);
-		connector->display_info.raw_edid = (char *)edid;
 	} else {
 		KMS_DEBUG("device 0x%x EDID get fail. construct fake edid.\n", device);
 		via_chrome9_construct_fake_edid_info(p_priv,
 				(struct via_cb_edid_block_data *)(cb_get_edid.EdidBuffer),
 				EDID_BLOCK_SIZE, device, true);
-		connector->display_info.raw_edid = (char *)edid;
 	}
 
 	return edid;
@@ -2148,7 +2146,7 @@ void via_chrome9_get_child_descriptor_by_device(
  * do not select 800x600 timing as target timing.
  */
 static bool via_chrome9_is_ad9389_8x6(int device, 
-		struct drm_display_mode *mode)
+		const struct drm_display_mode *mode)
 {
 	u8 tx_type = 0;
 
@@ -2173,7 +2171,7 @@ static bool via_chrome9_is_ad9389_8x6(int device,
  */
 static bool via_chrome9_get_mode_select_method(
 		struct drm_encoder *encoder,  enum mode_select  *method,
-		int device,  struct drm_display_mode *mode)
+		int device,  const struct drm_display_mode *mode)
 {
 	bool is_ad9389b_8x6 = false;
 
@@ -2332,7 +2330,7 @@ void via_chrome9_dump_cbios_mode_table(struct via_cb_mode_table *mode_table,
 }
 
 bool via_chrome9_mode_fixup_helper(
-	struct drm_encoder *encoder, struct drm_display_mode *mode,
+	struct drm_encoder *encoder, const struct drm_display_mode *mode,
 	struct drm_display_mode *adjusted_mode, int device)
 {
 	struct drm_crtc *crtc = encoder->crtc ;
diff --git a/via_chrome9_connector.c b/via_chrome9_connector.c
index d69c06a..ac6ba2a 100644
--- a/via_chrome9_connector.c
+++ b/via_chrome9_connector.c
@@ -706,7 +706,6 @@ int via_vga_get_modes(struct drm_connector *connector)
 	} else {
 		kfree(via_chrome9_connector->edid);
 		via_chrome9_connector->edid = NULL;
-		connector->display_info.raw_edid = NULL;
 	}
 	return ret;
 }
@@ -749,7 +748,6 @@ int via_vga_2_get_modes(struct drm_connector *connector)
 	} else {
 		kfree(via_chrome9_connector->edid);
 		via_chrome9_connector->edid = NULL;
-		connector->display_info.raw_edid = NULL;
 	}
 	return ret;
 }
@@ -1000,20 +998,20 @@ void via_chrome9_set_hdmi_xorg_options(void *options, int size,
 			via_hdmi_options->bottom_border);
 
 		/* step1: refresh properties value. */
-		drm_connector_property_set_value(
-			&via_chrome9_connector->base,
+		drm_object_property_set_value(
+			&via_chrome9_connector->base.base,
 			p_priv->mode_info.left_border_property,
 			via_hdmi_options->left_border);
-		drm_connector_property_set_value(
-			&via_chrome9_connector->base,
+		drm_object_property_set_value(
+			&via_chrome9_connector->base.base,
 			p_priv->mode_info.right_border_property,
 			via_hdmi_options->right_border);
-		drm_connector_property_set_value(
-			&via_chrome9_connector->base,
+		drm_object_property_set_value(
+			&via_chrome9_connector->base.base,
 			p_priv->mode_info.top_border_property,
 			via_hdmi_options->top_border);
-		drm_connector_property_set_value(
-			&via_chrome9_connector->base,
+		drm_object_property_set_value(
+			&via_chrome9_connector->base.base,
 			p_priv->mode_info.bottom_border_property,
 			via_hdmi_options->bottom_border);
 
@@ -1258,7 +1256,6 @@ int via_chrome9_hdmi_get_modes(struct drm_connector *connector)
 
 	if(via_conn->edid) {
 		kfree((u8 *)via_conn->edid);
-		connector->display_info.raw_edid = NULL;
 		via_conn->edid = NULL;
 	}
     
@@ -1336,7 +1333,6 @@ int via_chrome9_hdmi_2_get_modes(struct drm_connector *connector)
 
 	if(via_conn->edid) {
 		kfree((u8 *)via_conn->edid);
-		connector->display_info.raw_edid = NULL;
 		via_conn->edid = NULL;
 	}
     
@@ -1616,13 +1612,13 @@ void via_chrome9_borders_property_attach(
 		(struct drm_via_chrome9_private *)dev->dev_private;
 
 	KMS_DEBUG("\n");
-	drm_connector_attach_property( connector,
+	drm_object_attach_property( &connector->base,
 		p_priv->mode_info.left_border_property, 0);
-	drm_connector_attach_property( connector,
+	drm_object_attach_property( &connector->base,
 		p_priv->mode_info.right_border_property, 0);
-	drm_connector_attach_property( connector,
+	drm_object_attach_property( &connector->base,
 		p_priv->mode_info.top_border_property, 0);
-	drm_connector_attach_property( connector,
+	drm_object_attach_property( &connector->base,
 		p_priv->mode_info.bottom_border_property, 0);
 }
 
@@ -1729,9 +1725,9 @@ void via_chrome9_add_connector(struct drm_device *dev,
 			via_chrome9_connector_convert[connector_index]);
 		drm_connector_helper_add(&via_conn->base,
 			&via_chrome9_vga_connector_helper_funcs);
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.signal_format, SIGNAL_FORMAT_VGA); 
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		               p_priv->mode_info.connector_type, CONNECTOR_TYPE_VGA);	
 		
 		break;
@@ -1753,16 +1749,16 @@ void via_chrome9_add_connector(struct drm_device *dev,
 			via_chrome9_connector_convert[connector_index]);
 		drm_connector_helper_add(&via_conn->base,
 			&via_chrome9_vga_2_connector_helper_funcs);
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.signal_format, SIGNAL_FORMAT_VGA); 				
 		 
 		if(via_chrome9_get_transmiter_type(ACTIVE_TYPE_CRT2))
 		{
-			drm_connector_attach_property( connector,
+			drm_object_attach_property( &connector->base,
 		               p_priv->mode_info.connector_type, CONNECTOR_TYPE_DVI_I); 
 		}
 		else
-			drm_connector_attach_property( connector,
+			drm_object_attach_property( &connector->base,
 		               p_priv->mode_info.connector_type, CONNECTOR_TYPE_VGA); 
 		break;
 	case VIA_CHROME9_DEVICE_CONNECTOR_LCD:
@@ -1802,9 +1798,9 @@ void via_chrome9_add_connector(struct drm_device *dev,
 			break;
 
 		}
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.signal_format, SIGNAL_FORMAT_LVDS); 
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.connector_type, CONNECTOR_TYPE_PANEL); 
 		break;
 	case VIA_CHROME9_DEVICE_CONNECTOR_HDMI:
@@ -1833,9 +1829,9 @@ void via_chrome9_add_connector(struct drm_device *dev,
 		drm_connector_helper_add(&via_conn->base,
 			&via_chrome9_hdmi_connector_helper_funcs);
 		via_chrome9_borders_property_attach(connector, dev);
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.signal_format, SIGNAL_FORMAT_TMDS); 
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.connector_type, CONNECTOR_TYPE_HDMI); 
 		
 		/* initial hdmi cts patch variable.*/
@@ -1876,9 +1872,9 @@ void via_chrome9_add_connector(struct drm_device *dev,
 		drm_connector_helper_add(&via_conn->base,
 			&via_chrome9_hdmi_2_connector_helper_funcs);
 		via_chrome9_borders_property_attach(connector, dev);
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.signal_format, SIGNAL_FORMAT_TMDS); 
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.connector_type, CONNECTOR_TYPE_HDMI); 
 		break;
 	case VIA_CHROME9_DEVICE_CONNECTOR_DP_1:
@@ -1906,9 +1902,9 @@ void via_chrome9_add_connector(struct drm_device *dev,
 			via_chrome9_connector_convert[connector_index]);
 		drm_connector_helper_add(&via_conn->base,
 			&via_chrome9_dp_1_connector_helper_funcs);
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.signal_format, SIGNAL_FORMAT_DISPLAYPORT); 
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.connector_type, CONNECTOR_TYPE_DISPLAYPORT); 
 		break;
 	case VIA_CHROME9_DEVICE_CONNECTOR_DP_2:
@@ -1937,9 +1933,9 @@ void via_chrome9_add_connector(struct drm_device *dev,
 			via_chrome9_connector_convert[connector_index]);
 		drm_connector_helper_add(&via_conn->base,
 			&via_chrome9_dp_2_connector_helper_funcs);
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.signal_format, SIGNAL_FORMAT_DISPLAYPORT); 
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.connector_type, CONNECTOR_TYPE_DISPLAYPORT);
 		break;
 	case VIA_CHROME9_DEVICE_CONNECTOR_DVI_D:
@@ -1968,16 +1964,16 @@ void via_chrome9_add_connector(struct drm_device *dev,
 			via_chrome9_connector_convert[connector_index]);
 		drm_connector_helper_add(&via_conn->base,
 			&via_chrome9_dvi_connector_helper_funcs);
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.signal_format, SIGNAL_FORMAT_TMDS); 		
 		
 		if(via_chrome9_get_transmiter_type(ACTIVE_TYPE_DVI))
 		{ 
-			drm_connector_attach_property( connector,
+			drm_object_attach_property( &connector->base,
 		               p_priv->mode_info.connector_type, CONNECTOR_TYPE_HDMI); 		  
 		}
 		else
-			drm_connector_attach_property( connector,
+			drm_object_attach_property( &connector->base,
 		               p_priv->mode_info.connector_type, CONNECTOR_TYPE_DVI_D); 
 			
 		break;
@@ -2007,16 +2003,16 @@ void via_chrome9_add_connector(struct drm_device *dev,
 			via_chrome9_connector_convert[connector_index]);
 		drm_connector_helper_add(&via_conn->base,
 			&via_chrome9_dvi_2_connector_helper_funcs);
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.signal_format, SIGNAL_FORMAT_TMDS); 		
 		
 		if(via_chrome9_get_transmiter_type(ACTIVE_TYPE_DVI2))
 		{
-			drm_connector_attach_property( connector,
+			drm_object_attach_property( &connector->base,
 		               p_priv->mode_info.connector_type, CONNECTOR_TYPE_HDMI); 
 		}
 		else
-			drm_connector_attach_property( connector,
+			drm_object_attach_property( &connector->base,
 		               p_priv->mode_info.connector_type, CONNECTOR_TYPE_DVI_D); 
 		break;
 	case VIA_CHROME9_DEVICE_CONNECTOR_LCD_2:
@@ -2054,9 +2050,9 @@ void via_chrome9_add_connector(struct drm_device *dev,
 			break;
 
 		}
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.signal_format, SIGNAL_FORMAT_LVDS); 
-		drm_connector_attach_property( connector,
+		drm_object_attach_property( &connector->base,
 		          p_priv->mode_info.connector_type, CONNECTOR_TYPE_PANEL); 
 		break;
 	case VIA_CHROME9_DEVICE_CONNECTOR_TV:
diff --git a/via_chrome9_crtc.c b/via_chrome9_crtc.c
index 0bbe826..6b7b503 100644
--- a/via_chrome9_crtc.c
+++ b/via_chrome9_crtc.c
@@ -520,7 +520,7 @@ void via_chrome9_crtc_dpms(struct drm_crtc *crtc, int mode)
 }
 
 static bool via_chrome9_crtc_mode_fixup(struct drm_crtc *crtc,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	return true;
diff --git a/via_chrome9_display_common.h b/via_chrome9_display_common.h
index ab0dc3a..535bbc6 100644
--- a/via_chrome9_display_common.h
+++ b/via_chrome9_display_common.h
@@ -25,7 +25,7 @@
 #ifndef __VIA_CHROME9_DISPLAY_COMMON_H__
 #define __VIA_CHROME9_DISPLAY_COMMON_H__
 
-#include "drm.h"
+#include <drm/drm.h>
 #include "drm_edid.h"
 #include "drm_crtc.h"
 
diff --git a/via_chrome9_dma.c b/via_chrome9_dma.c
index f70145c..7ca7b7c 100644
--- a/via_chrome9_dma.c
+++ b/via_chrome9_dma.c
@@ -22,8 +22,8 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
+#include <drm/drm.h>
 #include "drmP.h"
-#include "drm.h"
 #include "via_chrome9_drm.h"
 #include "via_chrome9_drv.h"
 #include "via_chrome9_3d_reg.h"
diff --git a/via_chrome9_drm.c b/via_chrome9_drm.c
index da3b70c..4b630da 100644
--- a/via_chrome9_drm.c
+++ b/via_chrome9_drm.c
@@ -365,9 +365,8 @@ int via_chrome9_ioctl_cpu_grab(struct drm_device *dev, void *data,
 		if (vobj->owner_file == file_priv) {
 			goto out;
 		} else { /*other process grab it, wait */
-			ret = ttm_bo_wait_cpu(&vobj->bo, false);
-			if (ret)
-				goto out;
+			ret = -EBUSY;
+			goto out;
 		}
 	}
 	/*If no process grab it, wait Idle & grab it*/
diff --git a/via_chrome9_drv.c b/via_chrome9_drv.c
index f29e854..fb2b933 100644
--- a/via_chrome9_drv.c
+++ b/via_chrome9_drv.c
@@ -136,7 +136,7 @@ DEFINE_PCI_DEVICE_TABLE(pciidlist) = {
 #if VIA_CHROME9_ENABLE_KMS
 static struct drm_driver driver;
 
-static int __devinit
+static int
 via_chrome9_pci_probe(struct pci_dev *pdev, const struct pci_device_id *ent)
 {
 	return drm_get_pci_dev(pdev, ent, &driver);
@@ -279,7 +279,6 @@ static struct drm_driver driver = {
 	.get_vblank_counter = drm_vblank_count,
 	.enable_vblank = via_chrome9_enable_vblank,
 	.disable_vblank = via_chrome9_disable_vblank,
-	.reclaim_buffers = drm_core_reclaim_buffers,
 	.gem_init_object = via_chrome9_gem_object_init,
 	.gem_free_object = via_chrome9_gem_object_free,
 	.ioctls = via_chrome9_ioctls,
diff --git a/via_chrome9_drv.h b/via_chrome9_drv.h
index ef2cabc..73d7b68 100644
--- a/via_chrome9_drv.h
+++ b/via_chrome9_drv.h
@@ -252,10 +252,9 @@ struct via_chrome9_engine_ops {
 	struct via_chrome9_fence_ops {
 		int (*fence_emit)(struct drm_via_chrome9_private *p_priv,
 			struct via_chrome9_fence_object *p_fence_object);
-		bool (*fence_signaled)(struct via_chrome9_fence_object *p_fence,
-			void *arg);
+		bool (*fence_signaled)(struct via_chrome9_fence_object *p_fence);
 		int (*fence_wait)(struct via_chrome9_fence_object *p_fence,
-			void *sync_arg, bool lazy, bool interruptible);
+			bool lazy, bool interruptible);
 	} fence_ops;
 	void (*instert_sync_cmd)(struct drm_device *dev,
 		unsigned int wait_engines, unsigned int cmd_type);
diff --git a/via_chrome9_encoder.c b/via_chrome9_encoder.c
index 14ec577..c3e49ea 100644
--- a/via_chrome9_encoder.c
+++ b/via_chrome9_encoder.c
@@ -209,7 +209,7 @@ struct via_cea_timing_info_rec via_cea_timing_table[] = {
 };
 
 extern bool via_chrome9_mode_fixup_helper(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode, 
 		int dwDevice );
 
@@ -273,7 +273,7 @@ static void via_chrome9_dac_dpms(struct drm_encoder *encoder, int mode)
 }
 
 static bool via_chrome9_dac_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct drm_crtc *crtc = encoder->crtc;
@@ -323,7 +323,7 @@ static void via_chrome9_dac_2_dpms(struct drm_encoder *encoder, int mode)
 }
 
 static bool via_chrome9_dac_2_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct drm_crtc *crtc = encoder->crtc;
@@ -379,7 +379,7 @@ static void via_chrome9_lvds_prepare(struct drm_encoder *encoder)
 }
 
 bool via_chrome9_lvds_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct drm_crtc *crtc = encoder->crtc ;
@@ -436,7 +436,7 @@ static void via_chrome9_lvds_2_prepare(struct drm_encoder *encoder)
 }
 
 bool via_chrome9_lvds_2_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct drm_crtc *crtc = encoder->crtc ;
@@ -508,7 +508,7 @@ static void via_chrome9_hdmi_enc_dpms(struct drm_encoder *encoder, int mode)
 }
 
 bool via_hdmi_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct drm_crtc *crtc = encoder->crtc ;
@@ -521,14 +521,14 @@ bool via_hdmi_mode_fixup(struct drm_encoder *encoder,
 }
 
 static bool via_chrome9_internal_hdmi_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	return via_hdmi_mode_fixup(encoder, mode, adjusted_mode);
 }
 
 static bool via_chrome9_hdmi_enc_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct via_chrome9_encoder *via_chrome9_encoder =
@@ -587,7 +587,7 @@ static void via_chrome9_hdmi_2_enc_dpms(struct drm_encoder *encoder, int mode)
 }
 
 bool via_hdmi_2_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct drm_crtc *crtc = encoder->crtc ;
@@ -600,7 +600,7 @@ bool via_hdmi_2_mode_fixup(struct drm_encoder *encoder,
 }
 
 static bool via_chrome9_hdmi_2_enc_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct via_chrome9_crtc *via_chrome9_crtc =
@@ -655,7 +655,7 @@ static void via_chrome9_DP_1_enc_dpms(struct drm_encoder *encoder, int mode)
 }
 
 static bool via_chrome9_DP_1_enc_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct drm_crtc *crtc = encoder->crtc;
@@ -705,7 +705,7 @@ static void via_chrome9_DP_2_enc_dpms(struct drm_encoder *encoder, int mode)
 }
 
 static bool via_chrome9_DP_2_enc_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct drm_crtc *crtc = encoder->crtc;
@@ -755,7 +755,7 @@ static void via_chrome9_tmds_dpms(struct drm_encoder *encoder, int mode)
 }
 
 static bool via_chrome9_tmds_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct drm_crtc *crtc = encoder->crtc;
@@ -804,7 +804,7 @@ static void via_chrome9_tmds_2_dpms(struct drm_encoder *encoder, int mode)
 }
 
 static bool via_chrome9_tmds_2_mode_fixup(struct drm_encoder *encoder,
-		struct drm_display_mode *mode,
+		const struct drm_display_mode *mode,
 		struct drm_display_mode *adjusted_mode)
 {
 	struct drm_crtc *crtc = encoder->crtc ;
diff --git a/via_chrome9_fence.c b/via_chrome9_fence.c
index 92a961d..49f5791 100644
--- a/via_chrome9_fence.c
+++ b/via_chrome9_fence.c
@@ -22,13 +22,13 @@
  * DEALINGS IN THE SOFTWARE.
  */
 
+#include <drm/drm.h>
 #include <linux/seq_file.h>
 #include <asm/atomic.h>
 #include <linux/wait.h>
 #include <linux/list.h>
 #include <linux/kref.h>
 #include "drmP.h"
-#include "drm.h"
 #include "via_chrome9_drv.h"
 #include "via_chrome9_fence.h"
 #include "via_chrome9_object.h"
@@ -96,8 +96,7 @@ via_chrome9_fence_poll_locked(struct via_chrome9_fence_object *p_fence)
 	return false;
 }
 /* The TTM bo driver specific function */
-bool via_chrome9_fence_signaled_h6(struct via_chrome9_fence_object *p_fence,
-	void *sync_arg)
+bool via_chrome9_fence_signaled_h6(struct via_chrome9_fence_object *p_fence)
 {
 	if (!p_fence)
 		return true;
@@ -115,8 +114,7 @@ bool via_chrome9_fence_signaled_h6(struct via_chrome9_fence_object *p_fence,
 }
 /*The TTM bo driver specific function*/
 bool via_chrome9_fence_signaled_h5s2vp1(
-		struct via_chrome9_fence_object *p_fence,
-		void *arg)
+		struct via_chrome9_fence_object *p_fence)
 {
 	if (!p_fence)
 		return true;
@@ -140,7 +138,7 @@ bool via_chrome9_fence_signaled_h5s2vp1(
 /* The TTM bo driver specific function */
 /* Can solve fence sequence wrap  */
 int via_chrome9_fence_wait_h6(struct via_chrome9_fence_object *p_fence,
-		void *sync_arg,	bool lazy, bool interruptible)
+		bool lazy, bool interruptible)
 {
 	struct drm_via_chrome9_private *dev_priv = p_fence->p_priv;
 	struct via_chrome9_fence_ops *fence_ops =
@@ -148,7 +146,7 @@ int via_chrome9_fence_wait_h6(struct via_chrome9_fence_object *p_fence,
 	int ret;
 	int timeout = HZ / 100;
 
-	if (fence_ops->fence_signaled(p_fence, sync_arg))
+	if (fence_ops->fence_signaled(p_fence))
 		return 0;
 retry:
 	if (time_after(jiffies, p_fence->timeout)) {
@@ -161,18 +159,18 @@ retry:
 	if (interruptible) {
 		ret = wait_event_interruptible_timeout(
 			p_fence->p_priv->p_fence->fence_wait_queue,
-			fence_ops->fence_signaled(p_fence, sync_arg),
+			fence_ops->fence_signaled(p_fence),
 			timeout);
 		if (ret < 0)
 			return ret;
 	} else {
 		ret = wait_event_timeout(
 			p_fence->p_priv->p_fence->fence_wait_queue,
-			fence_ops->fence_signaled(p_fence, sync_arg),
+			fence_ops->fence_signaled(p_fence),
 			timeout);
 	}
 
-	ret = fence_ops->fence_signaled(p_fence, sync_arg);
+	ret = fence_ops->fence_signaled(p_fence);
 	if (unlikely(!ret))
 		goto retry;
 
@@ -181,30 +179,30 @@ retry:
 
 #if 0
 int via_chrome9_fence_wait_h5s2vp1(struct via_chrome9_fence_object *p_fence,
-		void *sync_arg,	bool lazy, bool interruptible)
+		bool lazy, bool interruptible)
 {
 	struct drm_via_chrome9_private *dev_priv = p_fence->p_priv;
 	struct via_chrome9_fence_ops *fence_ops =
 		&dev_priv->engine_ops.fence_ops;
 	int ret;
 
-	if (fence_ops->fence_signaled(p_fence, sync_arg))
+	if (fence_ops->fence_signaled(p_fence))
 		return 0;
 
 	if (interruptible) {
 		ret = wait_event_interruptible(
 			p_fence->p_priv->p_fence->fence_wait_queue,
-			fence_ops->fence_signaled(p_fence, sync_arg));
+			fence_ops->fence_signaled(p_fence));
 		if (ret < 0)
 			return ret;
 
 	} else {
 		wait_event(
 			p_fence->p_priv->p_fence->fence_wait_queue,
-			fence_ops->fence_signaled(p_fence, sync_arg));
+			fence_ops->fence_signaled(p_fence));
 	}
 
-	ret = fence_ops->fence_signaled(p_fence, sync_arg);
+	ret = fence_ops->fence_signaled(p_fence);
 	if (unlikely(!ret)) {
 		printk(KERN_ERR "fence wait function out with fence un-signaled.\n");
 		return -EBUSY;
@@ -214,8 +212,7 @@ int via_chrome9_fence_wait_h5s2vp1(struct via_chrome9_fence_object *p_fence,
 }
 #endif
 /* The TTM bo driver specific function */
-int via_chrome9_fence_flush(struct via_chrome9_fence_object *p_fence,
-		void *sync_arg)
+int via_chrome9_fence_flush(struct via_chrome9_fence_object *p_fence)
 {
 	return 0;
 }
diff --git a/via_chrome9_fence.h b/via_chrome9_fence.h
index 71aa114..c5483e2 100644
--- a/via_chrome9_fence.h
+++ b/via_chrome9_fence.h
@@ -112,19 +112,19 @@ extern int via_chrome9_fence_emit_h5s2vp1(
 		struct via_chrome9_fence_object *p_fence_object);
 
 extern bool via_chrome9_fence_signaled_h6(
-	struct via_chrome9_fence_object *p_fence, void *sync_arg);
+	struct via_chrome9_fence_object *p_fence);
 extern bool via_chrome9_fence_signaled_h5s2vp1(
-	struct via_chrome9_fence_object *p_fence, void *sync_arg);
+	struct via_chrome9_fence_object *p_fence);
 
 extern int via_chrome9_fence_wait_h6(
 	struct via_chrome9_fence_object *p_fence,
-	void *sync_arg, bool lazy, bool interruptible);
+	bool lazy, bool interruptible);
 
 extern int via_chrome9_fence_wait_h5s2vp1(
 	struct via_chrome9_fence_object *p_fence,
-	void *sync_arg, bool lazy, bool interruptible);
+	bool lazy, bool interruptible);
 extern int via_chrome9_fence_flush(
-	struct via_chrome9_fence_object *p_fence, void *sync_arg);
+	struct via_chrome9_fence_object *p_fence);
 extern void via_chrome9_fence_unref(
 	struct via_chrome9_fence_object **pp_fence);
 extern void *via_chrome9_fence_ref(
diff --git a/via_chrome9_mode.h b/via_chrome9_mode.h
index cb4f6c2..d767c47 100644
--- a/via_chrome9_mode.h
+++ b/via_chrome9_mode.h
@@ -25,8 +25,8 @@
 #ifndef VIA_CHROME9_MODE_H
 #define VIA_CHROME9_MODE_H
 
+#include <drm/drm_mode.h>
 #include "drmP.h"
-#include "drm_mode.h"
 #include "drm_crtc.h"
 #include "drm_crtc_helper.h"
 #include "via_chrome9_fb.h"
diff --git a/via_chrome9_object.c b/via_chrome9_object.c
index a80891c..2edca2c 100644
--- a/via_chrome9_object.c
+++ b/via_chrome9_object.c
@@ -187,7 +187,12 @@ via_chrome9_buffer_object_create(struct ttm_bo_device *bdev,
 	acc_size = ttm_bo_dma_acc_size(bdev, size,
 				sizeof(struct via_chrome9_object));
 		
-#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,7,0))
+	ret = ttm_bo_init(bdev, &vobj->bo, size, type, &vobj->placement,
+				     page_alignment, interruptible,
+				     persistant_swap_storage, acc_size, NULL,
+				     &via_chrome9_buffer_object_destroy);
+#elif (LINUX_VERSION_CODE >= KERNEL_VERSION(3,5,0))
 	ret = ttm_bo_init(bdev, &vobj->bo, size, type, &vobj->placement,
 				     page_alignment, buffer_start,
 				     interruptible,
@@ -504,7 +509,7 @@ int via_chrome9_bo_pin(struct via_chrome9_object *bo, u32 domain, u64 *gpu_addr)
 	via_ttm_placement_from_domain(bo, domain);
 	for (i = 0; i < bo->placement.num_placement; i++)
 		bo->placements[i] |= TTM_PL_FLAG_NO_EVICT;
-	r = ttm_bo_validate(&bo->bo, &bo->placement, false, false, false);
+	r = ttm_bo_validate(&bo->bo, &bo->placement, false, false);
 	if (likely(r == 0)) {
 		if (gpu_addr != NULL)
 			*gpu_addr = bo->bo.offset;
@@ -528,7 +533,7 @@ int via_chrome9_bo_unpin(struct via_chrome9_object *bo)
 
 	for (i = 0; i < bo->placement.num_placement; i++)
 		bo->placements[i] &= ~TTM_PL_FLAG_NO_EVICT;
-	r = ttm_bo_validate(&bo->bo, &bo->placement, false, false, false);
+	r = ttm_bo_validate(&bo->bo, &bo->placement, false, false);
 	if (unlikely(r != 0))
 		DRM_ERROR("via_chrome9 unpin failed\n");
 
@@ -569,8 +574,7 @@ int via_chrome9_object_set_domain(struct via_chrome9_object *bo,
 	 * and cache coherence when GTT is cached
 	 * */
 	if (!(domain & bo->bo.mem.placement & TTM_PL_MASK_MEM))
-		r = ttm_bo_validate(&bo->bo, &bo->placement, false, false,
-		false);
+		r = ttm_bo_validate(&bo->bo, &bo->placement, false, false);
 	else /* may need to flush GPU cache */
 		via_chrome9_set_cpu_domain(&bo->bo, domain);
 
@@ -590,11 +594,15 @@ int via_chrome9_object_wait_cpu_access(
 	if (likely((atomic_read(&bo->bo.cpu_writers) > 0))) {
 		if (bo->owner_file) {
 			BUG_ON(file_priv == bo->owner_file);
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,7,0))
+			ret = -EBUSY;
+#else
 			ret = ttm_bo_wait_cpu(&bo->bo, false);
 			if (ret) {
 				DRM_ERROR("via_chrome9: reserve bo is "
 				"interrupted when GPU awaitting cpu\n");
 			}
+#endif
 		}
 	}
 	return ret;
diff --git a/via_chrome9_reloc.c b/via_chrome9_reloc.c
index fc93788..78932e2 100644
--- a/via_chrome9_reloc.c
+++ b/via_chrome9_reloc.c
@@ -297,7 +297,11 @@ retry:
 			/* validate the ttm buffer with proposed placement */
 			ret = ttm_bo_validate(&parse->reloc_buffer[i].vobj->bo,
 				&parse->reloc_buffer[i].vobj->placement,
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,7,0))
+				true, false);
+#else
 				true, false, false);
+#endif
 			if (unlikely(ret)) {
 				if (ret !=  -ERESTARTSYS) {
 					DRM_ERROR(
@@ -328,7 +332,9 @@ retry:
 				parse->reloc_buffer[i].vobj->bo.sync_obj;
 			parse->reloc_buffer[i].vobj->bo.sync_obj =
 				via_chrome9_fence_ref(parse->fence);
+#if (LINUX_VERSION_CODE < KERNEL_VERSION(3,7,0))
 			parse->reloc_buffer[i].vobj->bo.sync_obj_arg = NULL;
+#endif
 		}
 		/*GPU fetch command in serial sequence,
 		so GPU no need to wait GPU idle*/
@@ -337,8 +343,13 @@ retry:
 		if (old_fence) {
 			if (test_bit(TTM_BO_PRIV_FLAG_MOVING,
 				&parse->reloc_buffer[i].vobj->bo.priv_flags))
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION(3,7,0))
+				if (!fence_ops->fence_wait(old_fence,
+					false, false))
+#else
 				if (!fence_ops->fence_wait(old_fence, NULL,
 					false, false))
+#endif
 					clear_bit(TTM_BO_PRIV_FLAG_MOVING,
 						&parse->reloc_buffer[i].vobj
 						->bo.priv_flags);
diff --git a/via_chrome9_ttm.c b/via_chrome9_ttm.c
index 38c0d00..98528bf 100644
--- a/via_chrome9_ttm.c
+++ b/via_chrome9_ttm.c
@@ -38,7 +38,7 @@
 
 
 struct via_chrome9_backend {
-//	struct ttm_backend	backend; /* the class's method */	
+	struct ttm_tt		ttm;
 	/* GART start entry to which the pages bind */
 	unsigned long		start_entry;
 };
@@ -53,7 +53,7 @@ static int via_chrome9_pcie_bind(struct ttm_tt *ttm, struct ttm_mem_reg *bo_mem)
 	struct ttm_bo_device *bdev;
 
 	//be = container_of(ttm->be, struct tony_backend, ttm->be);
-	be = (struct via_chrome9_backend*)ttm->be;
+	be = (struct via_chrome9_backend*)ttm;
 	bdev = ttm->bdev;
 	p_priv = container_of(bdev, struct drm_via_chrome9_private, bdev); 
 
@@ -118,7 +118,7 @@ static int via_chrome9_pcie_unbind(struct ttm_tt *ttm)
 	struct ttm_bo_device *bdev;
 
 //	be = container_of(ttm->be, struct tony_backend, ttm->be);
-	be = (struct via_chrome9_backend*)ttm->be;
+	be = (struct via_chrome9_backend*)ttm;
 	bdev = ttm->bdev;
 	p_priv = container_of(bdev, struct drm_via_chrome9_private, bdev); 
 
@@ -181,26 +181,22 @@ struct ttm_tt *via_chrome9_ttm_tt_create(struct ttm_bo_device *bdev,
 		struct page *dummy_read_page)
 {
 	struct ttm_bo_driver *bo_driver = bdev->driver;
-	struct ttm_tt *ttm;
 	struct via_chrome9_backend *be;
 
 	if (!bo_driver)
 		return NULL;
 
-	ttm = kzalloc(sizeof(*ttm), GFP_KERNEL);
-	if (!ttm)
+	be = kzalloc(sizeof(struct via_chrome9_backend), GFP_KERNEL);
+	if (!be)
 		return NULL;
 
-	ttm->func = &via_chrome9_be_func;
-
-	be = kzalloc(sizeof(struct via_chrome9_backend), GFP_KERNEL);
-	ttm->be = (struct ttm_backend*)be;
+	be->ttm.func = &via_chrome9_be_func;
 
-	if (ttm_tt_init(ttm, bdev, size, page_flags, dummy_read_page)) {
+	if (ttm_tt_init(&be->ttm, bdev, size, page_flags, dummy_read_page)) {
 		return NULL;
 	}
 
-	return ttm;
+	return &be->ttm;
 }
 
 int via_chrome9_ttm_tt_populate(struct ttm_tt *ttm)
@@ -279,17 +275,17 @@ static int via_chrome9_verify_access(struct ttm_buffer_object *bo,
 	return 0;
 }
 
-static inline bool via_chrome9_sync_obj_signaled(void *sync_obj, void *sync_arg)
+static inline bool via_chrome9_sync_obj_signaled(void *sync_obj)
 {
 	struct via_chrome9_fence_object *p_fence_object =
 		(struct via_chrome9_fence_object *)sync_obj;
 	struct drm_via_chrome9_private *dev_priv = p_fence_object->p_priv;
 	struct via_chrome9_fence_ops *fence_ops =
 		&dev_priv->engine_ops.fence_ops;
-	return fence_ops->fence_signaled(sync_obj, sync_arg);
+	return fence_ops->fence_signaled(sync_obj);
 }
 
-static inline int via_chrome9_sync_obj_wait(void *sync_obj, void *sync_arg,
+static inline int via_chrome9_sync_obj_wait(void *sync_obj,
 		bool lazy, bool interruptible)
 {
 	struct via_chrome9_fence_object *p_fence_object =
@@ -298,12 +294,12 @@ static inline int via_chrome9_sync_obj_wait(void *sync_obj, void *sync_arg,
 	struct via_chrome9_fence_ops *fence_ops =
 		&dev_priv->engine_ops.fence_ops;
 
-	return fence_ops->fence_wait(sync_obj, sync_arg, lazy, interruptible);
+	return fence_ops->fence_wait(sync_obj, lazy, interruptible);
 }
 
-static inline int via_chrome9_sync_obj_flush(void *sync_obj, void *sync_arg)
+static inline int via_chrome9_sync_obj_flush(void *sync_obj)
 {
-	return via_chrome9_fence_flush(sync_obj, sync_arg);
+	return via_chrome9_fence_flush(sync_obj);
 }
 
 static inline void via_chrome9_sync_obj_unref(void **sync_obj)
@@ -1088,7 +1084,7 @@ static int via_chrome9_release_sg_obj(struct pci_dev *pdev,
 		&sg_obj->dev_priv->engine_ops.fence_ops;
 	int ret = 0;
 
-	if (fence_ops->fence_signaled(chrome9_fence, NULL)) {
+	if (fence_ops->fence_signaled(chrome9_fence)) {
 		via_chrome9_fence_unref(&chrome9_fence);
 		chrome9_free_sg_info(pdev, &sg_obj->via_chrome9_sg_info);
 
@@ -1155,7 +1151,7 @@ static void chrome9_sg_delayed_workqueue(struct work_struct *work)
 
 
 static int via_chrome9_move(struct ttm_buffer_object *bo,
-		bool evict, bool interruptible, bool no_wait_reserve,
+		bool evict, bool interruptible,
 		bool no_wait_gpu, struct ttm_mem_reg *new_mem)
 {
 	struct drm_via_chrome9_private *dev_priv;
@@ -1215,8 +1211,8 @@ static int via_chrome9_move(struct ttm_buffer_object *bo,
 	chrome9_h6_dma_fire(drm_dev, (struct chrome9_sg_info *)sg_obj, 0);
 	spin_unlock(&sg_obj->dev_priv->sg_manager->lock);
 
-	r = ttm_bo_move_accel_cleanup(bo, (void *)fence, NULL,
-		evict, no_wait_reserve, no_wait_gpu, new_mem);
+	r = ttm_bo_move_accel_cleanup(bo, (void *)fence,
+		evict, no_wait_gpu, new_mem);
 
 #if DMA_DEBUG
 	r04 = getmmioregister(dev_priv->mmio_map, 0xE04);
@@ -1231,7 +1227,7 @@ static int via_chrome9_move(struct ttm_buffer_object *bo,
 }
 
 int via_chrome9_bo_move(struct ttm_buffer_object *bo,
-		bool evict, bool interruptible, bool no_wait_reserve,
+		bool evict, bool interruptible,
 		bool no_wait_gpu, struct ttm_mem_reg *new_mem)
 {
 	struct ttm_mem_reg *old_mem = &bo->mem;
@@ -1265,7 +1261,7 @@ int via_chrome9_bo_move(struct ttm_buffer_object *bo,
 		new_mem->mem_type == TTM_PL_VRAM) {
 		/*flush cache if needed*/
 		ttm_tt_set_placement_caching(bo->ttm, TTM_PL_FLAG_WC);
-		r = via_chrome9_move(bo, evict, interruptible, no_wait_reserve,
+		r = via_chrome9_move(bo, evict, interruptible,
 			no_wait_gpu, new_mem);
 	}
 
@@ -1283,7 +1279,7 @@ int via_chrome9_bo_move(struct ttm_buffer_object *bo,
 		placement.busy_placement = &proposed_placement;
 		proposed_placement = TTM_PL_FLAG_TT | TTM_PL_MASK_CACHING;
 		r = ttm_bo_mem_space(bo, &placement, &tmp_mem,
-			     interruptible, no_wait_reserve, no_wait_gpu);
+			     interruptible, no_wait_gpu);
 		if (unlikely(r))
 			return r;
 
@@ -1293,15 +1289,15 @@ int via_chrome9_bo_move(struct ttm_buffer_object *bo,
 			return r;
 		}
 		ttm_tt_bind(bo->ttm, &tmp_mem);
-		r = via_chrome9_move(bo, evict, interruptible, no_wait_reserve,
+		r = via_chrome9_move(bo, evict, interruptible,
 				no_wait_gpu, &tmp_mem);
 		/*move TT to SYSTEM*/
-		r = ttm_bo_move_ttm(bo, true, no_wait_reserve, no_wait_gpu,
+		r = ttm_bo_move_ttm(bo, true, no_wait_gpu,
 			new_mem);
 	}
 out:
 	if (r)
-		r = ttm_bo_move_memcpy(bo, evict, no_wait_reserve,
+		r = ttm_bo_move_memcpy(bo, evict,
 			no_wait_gpu, new_mem);
 	return r;
 
diff --git a/via_chrome9_ttm.h b/via_chrome9_ttm.h
index 584269a..90f77d5 100644
--- a/via_chrome9_ttm.h
+++ b/via_chrome9_ttm.h
@@ -33,7 +33,7 @@ extern void via_chrome9_ttm_fini(struct drm_device *dev);
 extern struct ttm_backend *
 via_chrome9_pcie_backend_init(struct drm_via_chrome9_private *p_priv);
 extern int via_chrome9_bo_move(struct ttm_buffer_object *bo,
-		bool evict, bool interruptible,  bool no_wait_reserve,
+		bool evict, bool interruptible,
 		bool no_wait_gpu, struct ttm_mem_reg *new_mem);
 extern int via_chrome9_sg_move_init(struct drm_device *dev);
 extern int via_chrome9_sg_move_fini(struct drm_device *dev);
diff --git a/via_chrome9_verifier.c b/via_chrome9_verifier.c
index f59ddc7..0c525ce 100644
--- a/via_chrome9_verifier.c
+++ b/via_chrome9_verifier.c
@@ -31,9 +31,9 @@
  * be very slow.
  */
 
+#include <drm/drm.h>
 #include "via_chrome9_3d_reg.h"
 #include "drmP.h"
-#include "drm.h"
 #include "via_chrome9_drm.h"
 #include "via_chrome9_verifier.h"
 #include "via_chrome9_drv.h"
