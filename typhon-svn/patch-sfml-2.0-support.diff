Only in typhon-svn-build/build: CMakeCache.txt
Only in typhon-svn-build/build: CMakeFiles
Only in typhon-svn-build/build: cmake_install.cmake
Only in typhon-svn-build/build: data
Only in typhon-svn-build/build: Makefile
Only in typhon-svn-build/build: src
diff -ru typhon-svn/src/editor.cpp typhon-svn-build/src/editor.cpp
--- typhon-svn/src/editor.cpp	2011-08-27 14:51:06.000000000 +0200
+++ typhon-svn-build/src/editor.cpp	2011-08-27 15:59:27.000000000 +0200
@@ -144,7 +144,7 @@
 		strcpy(searchstring,"\0");
 	}
 
-	else if((ekey == sf::Key::Delete || ekey == sf::Key::Back) && searchlength)
+	else if((ekey == sf::Keyboard::Delete || ekey == sf::Keyboard::Back) && searchlength)
 	{
 		searchstring[--searchlength] = '\0';
 		changed = true;
@@ -188,7 +188,7 @@
 		editlength=0;
 		{strcpy(toeditstring,thisstring);}
 	}
-	else if((ekey == sf::Key::Delete || ekey == sf::Key::Back) && editlength)
+	else if((ekey == sf::Keyboard::Delete || ekey == sf::Keyboard::Back) && editlength)
 	{
 		thisstring[--editlength] = '\0';
 		changed = true;
@@ -204,7 +204,7 @@
 
 	else if(
 	// TODO XK_dead_tilde should be a tilde, but it's written as uppercase "S"
-	(ekey <= 255 || ekey==sf::Key::Tilde)
+	(ekey <= 255 || ekey==sf::Keyboard::Tilde)
 	&&
 	((unsigned)editlength < sizeof(thisstring) - 1)
 	)
diff -ru typhon-svn/src/inputhandling.cpp typhon-svn-build/src/inputhandling.cpp
--- typhon-svn/src/inputhandling.cpp	2011-08-27 14:51:06.000000000 +0200
+++ typhon-svn-build/src/inputhandling.cpp	2011-08-27 16:09:57.000000000 +0200
@@ -18,7 +18,7 @@
 #include "mmdhandling.h"
 
 sf::Event event;
-sf::Input const& sfinput = window.GetInput();
+
 
 bool mouserotationmode=0;
 int mousezoommode=0;
@@ -529,217 +529,217 @@
 
 char *keychar(int ekey)
 {
-	if(ekey==sf::Key::Escape)	return (char*)"Escape";
-	if(ekey==sf::Key::Return)	return (char*)"Return";
-	if(ekey==sf::Key::Q)		return (char*)"Q";
-	if(ekey==sf::Key::LShift)	return (char*)"Shift_L";
-	if(ekey==sf::Key::RShift)	return (char*)"Shift_R";
-	if(ekey==sf::Key::LControl)	return (char*)":LControl";
-	if(ekey==sf::Key::RControl)	return (char*)"RControl";
-	if(ekey==sf::Key::LAlt)		return (char*)"LAlt";
-	if(ekey==sf::Key::RAlt)		return (char*)"RAlt";
-	if(ekey==sf::Key::LSystem)	return (char*)"LSystem";
-	if(ekey==sf::Key::RSystem)	return (char*)"RSystem";
-	if(ekey==sf::Key::Menu)		return (char*)"Menu";
-	if(ekey==sf::Key::SemiColon)return (char*)"Semicolon";
-	if(ekey==sf::Key::Slash)	return (char*)"Slash";
-	if(ekey==sf::Key::Equal)	return (char*)"Equal";
-	if(ekey==sf::Key::Dash)		return (char*)"Minus";
-	if(ekey==sf::Key::LBracket)	return (char*)"LBracket";
-	if(ekey==sf::Key::RBracket)	return (char*)"RBracket";
-	if(ekey==sf::Key::Comma)	return (char*)"Comma";
-	if(ekey==sf::Key::Period)	return (char*)"Period";
-	if(ekey==sf::Key::Quote)	return (char*)"Quote";
-	if(ekey==sf::Key::BackSlash)return (char*)"Backslash";
-	if(ekey==sf::Key::Tilde)	return (char*)"Tilde";
-	if(ekey==sf::Key::Space)	return (char*)"Space";
-	if(ekey==sf::Key::Return)	return (char*)"Return";
-	if(ekey==sf::Key::Back)		return (char*)"Backspace";
-	if(ekey==sf::Key::Tab)		return (char*)"Tab";
-	if(ekey==sf::Key::PageUp)	return (char*)"Prior";
-	if(ekey==sf::Key::PageDown)	return (char*)"Next";
-	if(ekey==sf::Key::End)		return (char*)"End";
-	if(ekey==sf::Key::Home)		return (char*)"Home";
-	if(ekey==sf::Key::Insert)	return (char*)"Insert";
-	if(ekey==sf::Key::Delete)	return (char*)"Delete";
-	if(ekey==sf::Key::Add)		return (char*)"Plus";
-	if(ekey==sf::Key::Subtract)	return (char*)"Minus";
-	if(ekey==sf::Key::Multiply)	return (char*)"Multiply";
-	if(ekey==sf::Key::Divide)	return (char*)"Divide";
-	if(ekey==sf::Key::Pause)	return (char*)"Pause";
-	if(ekey==sf::Key::F1)		return (char*)"F1";
-	if(ekey==sf::Key::F2)		return (char*)"F2";
-	if(ekey==sf::Key::F3)		return (char*)"F3";
-	if(ekey==sf::Key::F4)		return (char*)"F4";
-	if(ekey==sf::Key::F5)		return (char*)"F5";
-	if(ekey==sf::Key::F6)		return (char*)"F6";
-	if(ekey==sf::Key::F7)		return (char*)"F7";
-	if(ekey==sf::Key::F8)		return (char*)"F8";
-	if(ekey==sf::Key::F9)		return (char*)"F9";
-	if(ekey==sf::Key::F10)		return (char*)"F10";
-	if(ekey==sf::Key::F11)		return (char*)"F11";
-	if(ekey==sf::Key::F12)		return (char*)"F12";
-	if(ekey==sf::Key::F13)		return (char*)"F13";
-	if(ekey==sf::Key::F14)		return (char*)"F14";
-	if(ekey==sf::Key::F15)		return (char*)"F15";
-	if(ekey==sf::Key::Left)		return (char*)"Left";
-	if(ekey==sf::Key::Right)	return (char*)"Right";
-	if(ekey==sf::Key::Up)		return (char*)"Up";
-	if(ekey==sf::Key::Down)		return (char*)"Down";
-	if(ekey==sf::Key::Numpad0)	return (char*)"0";
-	if(ekey==sf::Key::Numpad1)	return (char*)"1";
-	if(ekey==sf::Key::Numpad2)	return (char*)"2";
-	if(ekey==sf::Key::Numpad3)	return (char*)"3";
-	if(ekey==sf::Key::Numpad4)	return (char*)"4";
-	if(ekey==sf::Key::Numpad5)	return (char*)"5";
-	if(ekey==sf::Key::Numpad6)	return (char*)"6";
-	if(ekey==sf::Key::Numpad7)	return (char*)"7";
-	if(ekey==sf::Key::Numpad8)	return (char*)"8";
-	if(ekey==sf::Key::Numpad9)	return (char*)"9";
-	if(ekey==sf::Key::A)		return (char*)"A";
-	if(ekey==sf::Key::Z)		return (char*)"Z";
-	if(ekey==sf::Key::E)		return (char*)"E";
-	if(ekey==sf::Key::R)		return (char*)"R";
-	if(ekey==sf::Key::T)		return (char*)"T";
-	if(ekey==sf::Key::Y)		return (char*)"Y";
-	if(ekey==sf::Key::U)		return (char*)"U";
-	if(ekey==sf::Key::I)		return (char*)"I";
-	if(ekey==sf::Key::O)		return (char*)"O";
-	if(ekey==sf::Key::P)		return (char*)"P";
-	if(ekey==sf::Key::Q)		return (char*)"Q";
-	if(ekey==sf::Key::S)		return (char*)"S";
-	if(ekey==sf::Key::D)		return (char*)"D";
-	if(ekey==sf::Key::F)		return (char*)"F";
-	if(ekey==sf::Key::G)		return (char*)"G";
-	if(ekey==sf::Key::H)		return (char*)"H";
-	if(ekey==sf::Key::J)		return (char*)"J";
-	if(ekey==sf::Key::K)		return (char*)"K";
-	if(ekey==sf::Key::L)		return (char*)"L";
-	if(ekey==sf::Key::M)		return (char*)"M";
-	if(ekey==sf::Key::W)		return (char*)"W";
-	if(ekey==sf::Key::X)		return (char*)"X";
-	if(ekey==sf::Key::C)		return (char*)"C";
-	if(ekey==sf::Key::V)		return (char*)"V";
-	if(ekey==sf::Key::B)		return (char*)"B";
-	if(ekey==sf::Key::N)		return (char*)"N";
-	if(ekey==sf::Key::Num0)		return (char*)"0";
-	if(ekey==sf::Key::Num1)		return (char*)"1";
-	if(ekey==sf::Key::Num2)		return (char*)"2";
-	if(ekey==sf::Key::Num3)		return (char*)"3";
-	if(ekey==sf::Key::Num4)		return (char*)"4";
-	if(ekey==sf::Key::Num5)		return (char*)"5";
-	if(ekey==sf::Key::Num6)		return (char*)"6";
-	if(ekey==sf::Key::Num7)		return (char*)"7";
-	if(ekey==sf::Key::Num8)		return (char*)"8";
-	if(ekey==sf::Key::Num9)		return (char*)"9";
+	if(ekey==sf::Keyboard::Escape)	return (char*)"Escape";
+	if(ekey==sf::Keyboard::Return)	return (char*)"Return";
+	if(ekey==sf::Keyboard::Q)		return (char*)"Q";
+	if(ekey==sf::Keyboard::LShift)	return (char*)"Shift_L";
+	if(ekey==sf::Keyboard::RShift)	return (char*)"Shift_R";
+	if(ekey==sf::Keyboard::LControl)	return (char*)":LControl";
+	if(ekey==sf::Keyboard::RControl)	return (char*)"RControl";
+	if(ekey==sf::Keyboard::LAlt)		return (char*)"LAlt";
+	if(ekey==sf::Keyboard::RAlt)		return (char*)"RAlt";
+	if(ekey==sf::Keyboard::LSystem)	return (char*)"LSystem";
+	if(ekey==sf::Keyboard::RSystem)	return (char*)"RSystem";
+	if(ekey==sf::Keyboard::Menu)		return (char*)"Menu";
+	if(ekey==sf::Keyboard::SemiColon)return (char*)"Semicolon";
+	if(ekey==sf::Keyboard::Slash)	return (char*)"Slash";
+	if(ekey==sf::Keyboard::Equal)	return (char*)"Equal";
+	if(ekey==sf::Keyboard::Dash)		return (char*)"Minus";
+	if(ekey==sf::Keyboard::LBracket)	return (char*)"LBracket";
+	if(ekey==sf::Keyboard::RBracket)	return (char*)"RBracket";
+	if(ekey==sf::Keyboard::Comma)	return (char*)"Comma";
+	if(ekey==sf::Keyboard::Period)	return (char*)"Period";
+	if(ekey==sf::Keyboard::Quote)	return (char*)"Quote";
+	if(ekey==sf::Keyboard::BackSlash)return (char*)"Backslash";
+	if(ekey==sf::Keyboard::Tilde)	return (char*)"Tilde";
+	if(ekey==sf::Keyboard::Space)	return (char*)"Space";
+	if(ekey==sf::Keyboard::Return)	return (char*)"Return";
+	if(ekey==sf::Keyboard::Back)		return (char*)"Backspace";
+	if(ekey==sf::Keyboard::Tab)		return (char*)"Tab";
+	if(ekey==sf::Keyboard::PageUp)	return (char*)"Prior";
+	if(ekey==sf::Keyboard::PageDown)	return (char*)"Next";
+	if(ekey==sf::Keyboard::End)		return (char*)"End";
+	if(ekey==sf::Keyboard::Home)		return (char*)"Home";
+	if(ekey==sf::Keyboard::Insert)	return (char*)"Insert";
+	if(ekey==sf::Keyboard::Delete)	return (char*)"Delete";
+	if(ekey==sf::Keyboard::Add)		return (char*)"Plus";
+	if(ekey==sf::Keyboard::Subtract)	return (char*)"Minus";
+	if(ekey==sf::Keyboard::Multiply)	return (char*)"Multiply";
+	if(ekey==sf::Keyboard::Divide)	return (char*)"Divide";
+	if(ekey==sf::Keyboard::Pause)	return (char*)"Pause";
+	if(ekey==sf::Keyboard::F1)		return (char*)"F1";
+	if(ekey==sf::Keyboard::F2)		return (char*)"F2";
+	if(ekey==sf::Keyboard::F3)		return (char*)"F3";
+	if(ekey==sf::Keyboard::F4)		return (char*)"F4";
+	if(ekey==sf::Keyboard::F5)		return (char*)"F5";
+	if(ekey==sf::Keyboard::F6)		return (char*)"F6";
+	if(ekey==sf::Keyboard::F7)		return (char*)"F7";
+	if(ekey==sf::Keyboard::F8)		return (char*)"F8";
+	if(ekey==sf::Keyboard::F9)		return (char*)"F9";
+	if(ekey==sf::Keyboard::F10)		return (char*)"F10";
+	if(ekey==sf::Keyboard::F11)		return (char*)"F11";
+	if(ekey==sf::Keyboard::F12)		return (char*)"F12";
+	if(ekey==sf::Keyboard::F13)		return (char*)"F13";
+	if(ekey==sf::Keyboard::F14)		return (char*)"F14";
+	if(ekey==sf::Keyboard::F15)		return (char*)"F15";
+	if(ekey==sf::Keyboard::Left)		return (char*)"Left";
+	if(ekey==sf::Keyboard::Right)	return (char*)"Right";
+	if(ekey==sf::Keyboard::Up)		return (char*)"Up";
+	if(ekey==sf::Keyboard::Down)		return (char*)"Down";
+	if(ekey==sf::Keyboard::Numpad0)	return (char*)"0";
+	if(ekey==sf::Keyboard::Numpad1)	return (char*)"1";
+	if(ekey==sf::Keyboard::Numpad2)	return (char*)"2";
+	if(ekey==sf::Keyboard::Numpad3)	return (char*)"3";
+	if(ekey==sf::Keyboard::Numpad4)	return (char*)"4";
+	if(ekey==sf::Keyboard::Numpad5)	return (char*)"5";
+	if(ekey==sf::Keyboard::Numpad6)	return (char*)"6";
+	if(ekey==sf::Keyboard::Numpad7)	return (char*)"7";
+	if(ekey==sf::Keyboard::Numpad8)	return (char*)"8";
+	if(ekey==sf::Keyboard::Numpad9)	return (char*)"9";
+	if(ekey==sf::Keyboard::A)		return (char*)"A";
+	if(ekey==sf::Keyboard::Z)		return (char*)"Z";
+	if(ekey==sf::Keyboard::E)		return (char*)"E";
+	if(ekey==sf::Keyboard::R)		return (char*)"R";
+	if(ekey==sf::Keyboard::T)		return (char*)"T";
+	if(ekey==sf::Keyboard::Y)		return (char*)"Y";
+	if(ekey==sf::Keyboard::U)		return (char*)"U";
+	if(ekey==sf::Keyboard::I)		return (char*)"I";
+	if(ekey==sf::Keyboard::O)		return (char*)"O";
+	if(ekey==sf::Keyboard::P)		return (char*)"P";
+	if(ekey==sf::Keyboard::Q)		return (char*)"Q";
+	if(ekey==sf::Keyboard::S)		return (char*)"S";
+	if(ekey==sf::Keyboard::D)		return (char*)"D";
+	if(ekey==sf::Keyboard::F)		return (char*)"F";
+	if(ekey==sf::Keyboard::G)		return (char*)"G";
+	if(ekey==sf::Keyboard::H)		return (char*)"H";
+	if(ekey==sf::Keyboard::J)		return (char*)"J";
+	if(ekey==sf::Keyboard::K)		return (char*)"K";
+	if(ekey==sf::Keyboard::L)		return (char*)"L";
+	if(ekey==sf::Keyboard::M)		return (char*)"M";
+	if(ekey==sf::Keyboard::W)		return (char*)"W";
+	if(ekey==sf::Keyboard::X)		return (char*)"X";
+	if(ekey==sf::Keyboard::C)		return (char*)"C";
+	if(ekey==sf::Keyboard::V)		return (char*)"V";
+	if(ekey==sf::Keyboard::B)		return (char*)"B";
+	if(ekey==sf::Keyboard::N)		return (char*)"N";
+	if(ekey==sf::Keyboard::Num0)		return (char*)"0";
+	if(ekey==sf::Keyboard::Num1)		return (char*)"1";
+	if(ekey==sf::Keyboard::Num2)		return (char*)"2";
+	if(ekey==sf::Keyboard::Num3)		return (char*)"3";
+	if(ekey==sf::Keyboard::Num4)		return (char*)"4";
+	if(ekey==sf::Keyboard::Num5)		return (char*)"5";
+	if(ekey==sf::Keyboard::Num6)		return (char*)"6";
+	if(ekey==sf::Keyboard::Num7)		return (char*)"7";
+	if(ekey==sf::Keyboard::Num8)		return (char*)"8";
+	if(ekey==sf::Keyboard::Num9)		return (char*)"9";
 	else return (char*)"none";
 }
 
-sf::Key::Code ksf(char *Key) 
+int ksf(char *Key) 
 {
-	if (strcasecmp(Key,"Escape") == 0)		return sf::Key::Escape;
-	if (strcasecmp(Key,"Return") == 0)		return sf::Key::Return;
-	if (strcasecmp(Key,"Shift_L") == 0)		return sf::Key::LShift;
-	if (strcasecmp(Key,"Shift_R") == 0)		return sf::Key::RShift;
-	if (strcasecmp(Key,"Control_L") == 0)	return sf::Key::LControl;
-	if (strcasecmp(Key,"Control_R") == 0)	return sf::Key::RControl;
-	if (strcasecmp(Key,"Alt_L") == 0)		return sf::Key::LAlt;
-	if (strcasecmp(Key,"Alt_R") == 0)		return sf::Key::RAlt;
-	if (strcasecmp(Key,"Super_L") == 0)		return sf::Key::LSystem;
-	if (strcasecmp(Key,"Super_R") == 0)		return sf::Key::RSystem;
-	if (strcasecmp(Key,"Menu") == 0)		return sf::Key::Menu;
-	if (strcasecmp(Key,"semicolon") == 0)    return sf::Key::SemiColon;
-	if (strcasecmp(Key,"slash") == 0)        return sf::Key::Slash;
-	if (strcasecmp(Key,"equal") == 0)        return sf::Key::Equal;
-	if (strcasecmp(Key,"minus") == 0)        return sf::Key::Dash;
-	if (strcasecmp(Key,"bracketleft") == 0)  return sf::Key::LBracket;
-	if (strcasecmp(Key,"bracketright") == 0) return sf::Key::RBracket;
-	if (strcasecmp(Key,"comma") == 0)        return sf::Key::Comma;
-	if (strcasecmp(Key,"period") == 0)       return sf::Key::Period;
-	if (strcasecmp(Key,"dead_acute") == 0)   return sf::Key::Quote;
-	if (strcasecmp(Key,"backslash") == 0)    return sf::Key::BackSlash;
-	if (strcasecmp(Key,"dead_grave") == 0)   return sf::Key::Tilde;
-	if (strcasecmp(Key,"space") == 0)        return sf::Key::Space;
-	if (strcasecmp(Key,"KP_Enter") == 0)     return sf::Key::Return;
-	if (strcasecmp(Key,"BackSpace") == 0)    return sf::Key::Back;
-	if (strcasecmp(Key,"Tab") == 0)          return sf::Key::Tab;
-	if (strcasecmp(Key,"Prior") == 0)        return sf::Key::PageUp;
-	if (strcasecmp(Key,"Next") == 0)         return sf::Key::PageDown;
-	if (strcasecmp(Key,"End") == 0)          return sf::Key::End;
-	if (strcasecmp(Key,"Home") == 0)         return sf::Key::Home;
-	if (strcasecmp(Key,"Insert") == 0)       return sf::Key::Insert;
-	if (strcasecmp(Key,"Delete") == 0)       return sf::Key::Delete;
-	if (strcasecmp(Key,"KP_Add") == 0)       return sf::Key::Add;
-	if (strcasecmp(Key,"KP_Subtract") == 0)  return sf::Key::Subtract;
-	if (strcasecmp(Key,"KP_Multiply") == 0)  return sf::Key::Multiply;
-	if (strcasecmp(Key,"KP_Divide") == 0)    return sf::Key::Divide;
-	if (strcasecmp(Key,"Pause") == 0)        return sf::Key::Pause;
-	if (strcasecmp(Key,"F1") == 0)           return sf::Key::F1;
-	if (strcasecmp(Key,"F2") == 0)           return sf::Key::F2;
-	if (strcasecmp(Key,"F3") == 0)           return sf::Key::F3;
-	if (strcasecmp(Key,"F4") == 0)           return sf::Key::F4;
-	if (strcasecmp(Key,"F5") == 0)           return sf::Key::F5;
-	if (strcasecmp(Key,"F6") == 0)           return sf::Key::F6;
-	if (strcasecmp(Key,"F7") == 0)           return sf::Key::F7;
-	if (strcasecmp(Key,"F8") == 0)           return sf::Key::F8;
-	if (strcasecmp(Key,"F9") == 0)           return sf::Key::F9;
-	if (strcasecmp(Key,"F10") == 0)          return sf::Key::F10;
-	if (strcasecmp(Key,"F11") == 0)          return sf::Key::F11;
-	if (strcasecmp(Key,"F12") == 0)          return sf::Key::F12;
-	if (strcasecmp(Key,"F13") == 0)          return sf::Key::F13;
-	if (strcasecmp(Key,"F14") == 0)          return sf::Key::F14;
-	if (strcasecmp(Key,"F15") == 0)          return sf::Key::F15;
-	if (strcasecmp(Key,"Left") == 0)         return sf::Key::Left;
-	if (strcasecmp(Key,"Right") == 0)        return sf::Key::Right;
-	if (strcasecmp(Key,"Up") == 0)           return sf::Key::Up;
-	if (strcasecmp(Key,"Down") == 0)         return sf::Key::Down;
-	if (strcasecmp(Key,"KP_0") == 0)         return sf::Key::Numpad0;
-	if (strcasecmp(Key,"KP_1") == 0)         return sf::Key::Numpad1;
-	if (strcasecmp(Key,"KP_2") == 0)         return sf::Key::Numpad2;
-	if (strcasecmp(Key,"KP_3") == 0)         return sf::Key::Numpad3;
-	if (strcasecmp(Key,"KP_4") == 0)         return sf::Key::Numpad4;
-	if (strcasecmp(Key,"KP_5") == 0)         return sf::Key::Numpad5;
-	if (strcasecmp(Key,"KP_6") == 0)         return sf::Key::Numpad6;
-	if (strcasecmp(Key,"KP_7") == 0)         return sf::Key::Numpad7;
-	if (strcasecmp(Key,"KP_8") == 0)         return sf::Key::Numpad8;
-	if (strcasecmp(Key,"KP_9") == 0)         return sf::Key::Numpad9;
-	if (strcasecmp(Key,"A") == 0)            return sf::Key::A;
-	if (strcasecmp(Key,"Z") == 0)            return sf::Key::Z;
-	if (strcasecmp(Key,"E") == 0)            return sf::Key::E;
-	if (strcasecmp(Key,"R") == 0)            return sf::Key::R;
-	if (strcasecmp(Key,"T") == 0)            return sf::Key::T;
-	if (strcasecmp(Key,"Y") == 0)            return sf::Key::Y;
-	if (strcasecmp(Key,"U") == 0)            return sf::Key::U;
-	if (strcasecmp(Key,"I") == 0)            return sf::Key::I;
-	if (strcasecmp(Key,"O") == 0)            return sf::Key::O;
-	if (strcasecmp(Key,"P") == 0)            return sf::Key::P;
-	if (strcasecmp(Key,"Q") == 0)            return sf::Key::Q;
-	if (strcasecmp(Key,"S") == 0)            return sf::Key::S;
-	if (strcasecmp(Key,"D") == 0)            return sf::Key::D;
-	if (strcasecmp(Key,"F") == 0)            return sf::Key::F;
-	if (strcasecmp(Key,"G") == 0)            return sf::Key::G;
-	if (strcasecmp(Key,"H") == 0)            return sf::Key::H;
-	if (strcasecmp(Key,"J") == 0)            return sf::Key::J;
-	if (strcasecmp(Key,"K") == 0)            return sf::Key::K;
-	if (strcasecmp(Key,"L") == 0)            return sf::Key::L;
-	if (strcasecmp(Key,"M") == 0)            return sf::Key::M;
-	if (strcasecmp(Key,"W") == 0)            return sf::Key::W;
-	if (strcasecmp(Key,"X") == 0)            return sf::Key::X;
-	if (strcasecmp(Key,"C") == 0)            return sf::Key::C;
-	if (strcasecmp(Key,"V") == 0)            return sf::Key::V;
-	if (strcasecmp(Key,"B") == 0)            return sf::Key::B;
-	if (strcasecmp(Key,"N") == 0)            return sf::Key::N;
-	if (strcasecmp(Key,"0") == 0)            return sf::Key::Num0;
-	if (strcasecmp(Key,"1") == 0)            return sf::Key::Num1;
-	if (strcasecmp(Key,"2") == 0)            return sf::Key::Num2;
-	if (strcasecmp(Key,"3") == 0)            return sf::Key::Num3;
-	if (strcasecmp(Key,"4") == 0)            return sf::Key::Num4;
-	if (strcasecmp(Key,"5") == 0)            return sf::Key::Num5;
-	if (strcasecmp(Key,"6") == 0)            return sf::Key::Num6;
-	if (strcasecmp(Key,"7") == 0)            return sf::Key::Num7;
-	if (strcasecmp(Key,"8") == 0)            return sf::Key::Num8;
-	if (strcasecmp(Key,"9") == 0)            return sf::Key::Num9;
-	return sf::Key::Code(0);
+	if (strcasecmp(Key,"Escape") == 0)		return sf::Keyboard::Escape;
+	if (strcasecmp(Key,"Return") == 0)		return sf::Keyboard::Return;
+	if (strcasecmp(Key,"Shift_L") == 0)		return sf::Keyboard::LShift;
+	if (strcasecmp(Key,"Shift_R") == 0)		return sf::Keyboard::RShift;
+	if (strcasecmp(Key,"Control_L") == 0)	return sf::Keyboard::LControl;
+	if (strcasecmp(Key,"Control_R") == 0)	return sf::Keyboard::RControl;
+	if (strcasecmp(Key,"Alt_L") == 0)		return sf::Keyboard::LAlt;
+	if (strcasecmp(Key,"Alt_R") == 0)		return sf::Keyboard::RAlt;
+	if (strcasecmp(Key,"Super_L") == 0)		return sf::Keyboard::LSystem;
+	if (strcasecmp(Key,"Super_R") == 0)		return sf::Keyboard::RSystem;
+	if (strcasecmp(Key,"Menu") == 0)		return sf::Keyboard::Menu;
+	if (strcasecmp(Key,"semicolon") == 0)    return sf::Keyboard::SemiColon;
+	if (strcasecmp(Key,"slash") == 0)        return sf::Keyboard::Slash;
+	if (strcasecmp(Key,"equal") == 0)        return sf::Keyboard::Equal;
+	if (strcasecmp(Key,"minus") == 0)        return sf::Keyboard::Dash;
+	if (strcasecmp(Key,"bracketleft") == 0)  return sf::Keyboard::LBracket;
+	if (strcasecmp(Key,"bracketright") == 0) return sf::Keyboard::RBracket;
+	if (strcasecmp(Key,"comma") == 0)        return sf::Keyboard::Comma;
+	if (strcasecmp(Key,"period") == 0)       return sf::Keyboard::Period;
+	if (strcasecmp(Key,"dead_acute") == 0)   return sf::Keyboard::Quote;
+	if (strcasecmp(Key,"backslash") == 0)    return sf::Keyboard::BackSlash;
+	if (strcasecmp(Key,"dead_grave") == 0)   return sf::Keyboard::Tilde;
+	if (strcasecmp(Key,"space") == 0)        return sf::Keyboard::Space;
+	if (strcasecmp(Key,"KP_Enter") == 0)     return sf::Keyboard::Return;
+	if (strcasecmp(Key,"BackSpace") == 0)    return sf::Keyboard::Back;
+	if (strcasecmp(Key,"Tab") == 0)          return sf::Keyboard::Tab;
+	if (strcasecmp(Key,"Prior") == 0)        return sf::Keyboard::PageUp;
+	if (strcasecmp(Key,"Next") == 0)         return sf::Keyboard::PageDown;
+	if (strcasecmp(Key,"End") == 0)          return sf::Keyboard::End;
+	if (strcasecmp(Key,"Home") == 0)         return sf::Keyboard::Home;
+	if (strcasecmp(Key,"Insert") == 0)       return sf::Keyboard::Insert;
+	if (strcasecmp(Key,"Delete") == 0)       return sf::Keyboard::Delete;
+	if (strcasecmp(Key,"KP_Add") == 0)       return sf::Keyboard::Add;
+	if (strcasecmp(Key,"KP_Subtract") == 0)  return sf::Keyboard::Subtract;
+	if (strcasecmp(Key,"KP_Multiply") == 0)  return sf::Keyboard::Multiply;
+	if (strcasecmp(Key,"KP_Divide") == 0)    return sf::Keyboard::Divide;
+	if (strcasecmp(Key,"Pause") == 0)        return sf::Keyboard::Pause;
+	if (strcasecmp(Key,"F1") == 0)           return sf::Keyboard::F1;
+	if (strcasecmp(Key,"F2") == 0)           return sf::Keyboard::F2;
+	if (strcasecmp(Key,"F3") == 0)           return sf::Keyboard::F3;
+	if (strcasecmp(Key,"F4") == 0)           return sf::Keyboard::F4;
+	if (strcasecmp(Key,"F5") == 0)           return sf::Keyboard::F5;
+	if (strcasecmp(Key,"F6") == 0)           return sf::Keyboard::F6;
+	if (strcasecmp(Key,"F7") == 0)           return sf::Keyboard::F7;
+	if (strcasecmp(Key,"F8") == 0)           return sf::Keyboard::F8;
+	if (strcasecmp(Key,"F9") == 0)           return sf::Keyboard::F9;
+	if (strcasecmp(Key,"F10") == 0)          return sf::Keyboard::F10;
+	if (strcasecmp(Key,"F11") == 0)          return sf::Keyboard::F11;
+	if (strcasecmp(Key,"F12") == 0)          return sf::Keyboard::F12;
+	if (strcasecmp(Key,"F13") == 0)          return sf::Keyboard::F13;
+	if (strcasecmp(Key,"F14") == 0)          return sf::Keyboard::F14;
+	if (strcasecmp(Key,"F15") == 0)          return sf::Keyboard::F15;
+	if (strcasecmp(Key,"Left") == 0)         return sf::Keyboard::Left;
+	if (strcasecmp(Key,"Right") == 0)        return sf::Keyboard::Right;
+	if (strcasecmp(Key,"Up") == 0)           return sf::Keyboard::Up;
+	if (strcasecmp(Key,"Down") == 0)         return sf::Keyboard::Down;
+	if (strcasecmp(Key,"KP_0") == 0)         return sf::Keyboard::Numpad0;
+	if (strcasecmp(Key,"KP_1") == 0)         return sf::Keyboard::Numpad1;
+	if (strcasecmp(Key,"KP_2") == 0)         return sf::Keyboard::Numpad2;
+	if (strcasecmp(Key,"KP_3") == 0)         return sf::Keyboard::Numpad3;
+	if (strcasecmp(Key,"KP_4") == 0)         return sf::Keyboard::Numpad4;
+	if (strcasecmp(Key,"KP_5") == 0)         return sf::Keyboard::Numpad5;
+	if (strcasecmp(Key,"KP_6") == 0)         return sf::Keyboard::Numpad6;
+	if (strcasecmp(Key,"KP_7") == 0)         return sf::Keyboard::Numpad7;
+	if (strcasecmp(Key,"KP_8") == 0)         return sf::Keyboard::Numpad8;
+	if (strcasecmp(Key,"KP_9") == 0)         return sf::Keyboard::Numpad9;
+	if (strcasecmp(Key,"A") == 0)            return sf::Keyboard::A;
+	if (strcasecmp(Key,"Z") == 0)            return sf::Keyboard::Z;
+	if (strcasecmp(Key,"E") == 0)            return sf::Keyboard::E;
+	if (strcasecmp(Key,"R") == 0)            return sf::Keyboard::R;
+	if (strcasecmp(Key,"T") == 0)            return sf::Keyboard::T;
+	if (strcasecmp(Key,"Y") == 0)            return sf::Keyboard::Y;
+	if (strcasecmp(Key,"U") == 0)            return sf::Keyboard::U;
+	if (strcasecmp(Key,"I") == 0)            return sf::Keyboard::I;
+	if (strcasecmp(Key,"O") == 0)            return sf::Keyboard::O;
+	if (strcasecmp(Key,"P") == 0)            return sf::Keyboard::P;
+	if (strcasecmp(Key,"Q") == 0)            return sf::Keyboard::Q;
+	if (strcasecmp(Key,"S") == 0)            return sf::Keyboard::S;
+	if (strcasecmp(Key,"D") == 0)            return sf::Keyboard::D;
+	if (strcasecmp(Key,"F") == 0)            return sf::Keyboard::F;
+	if (strcasecmp(Key,"G") == 0)            return sf::Keyboard::G;
+	if (strcasecmp(Key,"H") == 0)            return sf::Keyboard::H;
+	if (strcasecmp(Key,"J") == 0)            return sf::Keyboard::J;
+	if (strcasecmp(Key,"K") == 0)            return sf::Keyboard::K;
+	if (strcasecmp(Key,"L") == 0)            return sf::Keyboard::L;
+	if (strcasecmp(Key,"M") == 0)            return sf::Keyboard::M;
+	if (strcasecmp(Key,"W") == 0)            return sf::Keyboard::W;
+	if (strcasecmp(Key,"X") == 0)            return sf::Keyboard::X;
+	if (strcasecmp(Key,"C") == 0)            return sf::Keyboard::C;
+	if (strcasecmp(Key,"V") == 0)            return sf::Keyboard::V;
+	if (strcasecmp(Key,"B") == 0)            return sf::Keyboard::B;
+	if (strcasecmp(Key,"N") == 0)            return sf::Keyboard::N;
+	if (strcasecmp(Key,"0") == 0)            return sf::Keyboard::Num0;
+	if (strcasecmp(Key,"1") == 0)            return sf::Keyboard::Num1;
+	if (strcasecmp(Key,"2") == 0)            return sf::Keyboard::Num2;
+	if (strcasecmp(Key,"3") == 0)            return sf::Keyboard::Num3;
+	if (strcasecmp(Key,"4") == 0)            return sf::Keyboard::Num4;
+	if (strcasecmp(Key,"5") == 0)            return sf::Keyboard::Num5;
+	if (strcasecmp(Key,"6") == 0)            return sf::Keyboard::Num6;
+	if (strcasecmp(Key,"7") == 0)            return sf::Keyboard::Num7;
+	if (strcasecmp(Key,"8") == 0)            return sf::Keyboard::Num8;
+	if (strcasecmp(Key,"9") == 0)            return sf::Keyboard::Num9;
+	return int(0);
 }
 
 void input()
@@ -1013,16 +1013,16 @@
 			}
 
 
-			if(event.Type==event.JoyButtonPressed && usejoypad) 
+			if(event.Type==event.JoystickButtonPressed && usejoypad) 
 			{
 				if (waitforjoypad)
 				{
 					int done=0;
 					while (!done)
 					{
-						if (event.JoyButtonPressed)
+						if (event.JoystickButtonPressed)
 						{
-							editbutton=event.JoyButton.Button;
+							editbutton=event.JoystickButton.Button;
 							done = 1;
 						}
 					}
@@ -1048,39 +1048,39 @@
 				{
 			//		while(!event.JoyButtonReleased) 
 					{
-						if (sfinput.IsJoystickButtonDown(jdev, joypadtriangle))	{if (videocount>=3){togglevideomenu();}}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadcircle))	{hidesetmenu();}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadcross))	{startselection();}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadsquare))	{toggleemumode();}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadl2))		{menupageup();selchanged=1;}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadr2))		{menupagedown();selchanged=1;}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadl1))		{dokeychangeval(-changevaluespeed, -1);}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadr1))		{dokeychangeval(changevaluespeed, 1);}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadselect))	{pressescape();}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadstart))	{printf("start pressed\n");}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadup))		{dokeyup();selchanged=1;}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadright))	{dokeyright();selchanged=1;}
-						if (sfinput.IsJoystickButtonDown(jdev, joypaddown))		{dokeydown();selchanged=1;}
-						if (sfinput.IsJoystickButtonDown(jdev, joypadleft))		{dokeyleft();selchanged=1;}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadtriangle))	{if (videocount>=3){togglevideomenu();}}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadcircle))	{hidesetmenu();}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadcross))	{startselection();}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadsquare))	{toggleemumode();}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadl2))		{menupageup();selchanged=1;}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadr2))		{menupagedown();selchanged=1;}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadl1))		{dokeychangeval(-changevaluespeed, -1);}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadr1))		{dokeychangeval(changevaluespeed, 1);}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadselect))	{pressescape();}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadstart))	{printf("start pressed\n");}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadup))		{dokeyup();selchanged=1;}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadright))	{dokeyright();selchanged=1;}
+						if (sf::Joystick::IsButtonPressed(jdev, joypaddown))		{dokeydown();selchanged=1;}
+						if (sf::Joystick::IsButtonPressed(jdev, joypadleft))		{dokeyleft();selchanged=1;}
 					}
 				}
 			}
 
 
-			if(event.Type==event.JoyMoved && usejoypad)
+			if(event.Type==event.JoystickMoved && usejoypad)
 			{
-				if (event.JoyMove.Axis == sf::Joy::AxisX)
+				if (event.JoystickMove.Axis == sf::Joystick::X)
 				{
-					if (event.JoyMove.Position > joydeadzone)
+					if (event.JoystickMove.Position > joydeadzone)
 					{dokeyright();selchanged=1;}
-					else if (event.JoyMove.Position < -joydeadzone)
+					else if (event.JoystickMove.Position < -joydeadzone)
 					{dokeyleft();selchanged=1;}
 				}
-				else if (event.JoyMove.Axis == sf::Joy::AxisY)
+				else if (event.JoystickMove.Axis == sf::Joystick::Y)
 				{
-					if (event.JoyMove.Position > joydeadzone)
+					if (event.JoystickMove.Position > joydeadzone)
 					{dokeydown();selchanged=1;}
-					else if (event.JoyMove.Position < -joydeadzone)
+					else if (event.JoystickMove.Position < -joydeadzone)
 					{dokeyup();selchanged=1;}
 				}
 			}
@@ -1308,8 +1308,9 @@
 				#endif //WITHBERKELIUM		
 				)
 				{
-					rootX = sfinput.GetMouseX();
-					rootY = sfinput.GetMouseY();
+                    sf::Vector2i position = sf::Mouse::GetPosition();
+					rootX = position.x;
+					rootY = position.y;
 					mousepos(rootX,rootY);
 				}
 			}
diff -ru typhon-svn/src/inputhandling.h typhon-svn-build/src/inputhandling.h
--- typhon-svn/src/inputhandling.h	2011-08-27 14:51:06.000000000 +0200
+++ typhon-svn-build/src/inputhandling.h	2011-08-27 16:01:13.000000000 +0200
@@ -40,6 +40,6 @@
 void setboxkeydown();
 void leavesetbox();
 void drawkeyhelp();
-extern sf::Key::Code ksf(char *Key);
+extern int ksf(char *Key);
 extern char *keychar(int ekey);
 void input();
