--- configure.ac.orig	2013-05-12 17:08:29.934340680 +0200
+++ configure.ac	2013-05-12 17:09:42.918555699 +0200
@@ -233,25 +233,6 @@
 AC_SUBST(BUILD_CC)
 
 ##########
-# Do we want to support multithreaded use of sqlite
-#
-AC_ARG_ENABLE(threadsafe, 
-AC_HELP_STRING([--enable-threadsafe],[Support threadsafe operation]),,enable_threadsafe=yes)
-AC_MSG_CHECKING([whether to support threadsafe operation])
-if test "$enable_threadsafe" = "no"; then
-  SQLITE_THREADSAFE=0
-  AC_MSG_RESULT([no])
-else
-  SQLITE_THREADSAFE=1
-  AC_MSG_RESULT([yes])
-fi
-AC_SUBST(SQLITE_THREADSAFE)
-
-if test "$SQLITE_THREADSAFE" = "1"; then
-  AC_SEARCH_LIBS(pthread_create, pthread)
-fi
-
-##########
 # Do we want to allow a connection created in one thread to be used
 # in another thread.  This does not work on many Linux systems (ex: RedHat 9)
 # due to bugs in the threading implementations.  This is thus off by default.
@@ -365,6 +346,25 @@
 AC_SUBST(TARGET_EXEEXT)
 
 ##########
+# Do we want to support multithreaded use of sqlite
+#
+AC_ARG_ENABLE(threadsafe,
+AC_HELP_STRING([--enable-threadsafe],[Support threadsafe operation]),,enable_threadsafe=yes)
+AC_MSG_CHECKING([whether to support threadsafe operation])
+if test "$enable_threadsafe" = "no"; then
+  SQLITE_THREADSAFE=0
+  AC_MSG_RESULT([no])
+else
+  SQLITE_THREADSAFE=1
+  AC_MSG_RESULT([yes])
+fi
+AC_SUBST(SQLITE_THREADSAFE)
+
+if test "$SQLITE_THREADSAFE" = "1" -a "$SQLITE_OS_UNIX" = "1" ; then
+  AC_SEARCH_LIBS(pthread_create, pthread)
+fi
+
+##########
 # Figure out all the parameters needed to compile against Tcl.
 #
 # This code is derived from the SC_PATH_TCLCONFIG and SC_LOAD_TCLCONFIG
