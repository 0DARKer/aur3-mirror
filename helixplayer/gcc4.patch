diff -Naur hxplay-1.0.8-orig/audio/fixptutil/pub/math64.h hxplay-1.0.8/audio/fixptutil/pub/math64.h
--- hxplay-1.0.8-orig/audio/fixptutil/pub/math64.h	2004-09-17 14:22:38.000000000 -0400
+++ hxplay-1.0.8/audio/fixptutil/pub/math64.h	2006-08-22 01:05:30.000000000 -0400
@@ -131,56 +131,31 @@
 /* Compute a * b / c, using 64-bit intermediate result */
 static __inline__ int MulDiv64(register int x, register int y, register int z)
 {
-    /* we specify four alternatives here, one for each permutation of memory or
-       register operand in the multiplier and the divisor. All are commutative in
-       the multiplication arguments, one of which needs to be in eax when we
-       start. */
-
-    __asm__ volatile ("imull %2\n\t"
-                      "idivl %3\n"
-                      : "+a,a,a,a" (x)
-                      : "%0,%0,%0,%0" (x), "m,r,m,r" (y), "m,m,r,r" (z)
-                      : "edx") ;    
-    return x ;
+    return (INT64)x*(INT64)y/(INT64)z;
 }
 
 /* Compute (a * b) >> 32, using 64-bit intermediate result */
 static __inline__ int MulShift32(int x, int y)
 {
-    int z ;
-    /* we specify two alternatives here. The first one can read the multiplier from
-       memory, the second from from a register. Both return the result in eax,edx
-       and are commutative in the arguments, one of which needs to be in eax when we
-       start. */
-    __asm__ volatile ("imull %3" : "=d,d" (z), "+a,a" (x): "%1,1" (x), "m,r" (y)) ;
-    return z ;
+    return ((INT64)x*(INT64)y)>>32;
 }
 
 /* Compute (a * b) >> 31, using 64-bit intermediate result */
 static __inline__ int MulShift31(int x, int y)
 {
-    int zhi ;
-    __asm__ volatile ("imull %3\n\t"
-                      "shrdl $31,%1,%0": "+a,a" (x), "=d,d" (zhi) : "%0,%0" (x), "m,r" (y)) ;
-    return x ;
+    return ((INT64)x*(INT64)y)>>30;
 }
 
 /* Compute (a * b) >> 30, using 64-bit intermediate result */
 static __inline__ int MulShift30(int x, int y)
 {
-    int zhi ;
-    __asm__ volatile ("imull %3\n\t"
-                      "shrdl $30,%1,%0" : "+a,a" (x), "=d,d" (zhi) : "%0,%0" (x), "m,r" (y)) ;
-    return x ;
+    return ((INT64)x*(INT64)y)>>30;
 }
 
 /* Compute (a * b) >> n, using 64-bit intermediate result */
 static __inline__ int MulShiftN(register int x, register int y, register int n)
 {
-    int zhi ;
-    __asm__ volatile ("imull %3\n\t"
-                      "shrdl %%cl,%1,%0" : "+a,a" (x), "=d,d" (zhi) : "%0,%0" (x), "m,r" (y), "c,c" (n)) ;
-    return x ;
+    return ((INT64)x*(INT64)y)>>n;
 }
 
 #ifdef TIMING
@@ -197,6 +172,9 @@
 #endif
 
 #ifdef DEBUG
+#  ifdef ASSERT
+#    undef ASSERT
+#  endif
 #define ASSERT(x) if (!(x)) __asm__ __volatile ("int $3" :: )
 #endif
 #endif // defined(__GNUC__) && defined(__i386__)
diff -Naur hxplay-1.0.8-orig/common/system/pub/platform/unix/pthreadthreads.h hxplay-1.0.8/common/system/pub/platform/unix/pthreadthreads.h
--- hxplay-1.0.8-orig/common/system/pub/platform/unix/pthreadthreads.h	2004-07-08 21:43:45.000000000 -0400
+++ hxplay-1.0.8/common/system/pub/platform/unix/pthreadthreads.h	2006-08-22 01:13:35.000000000 -0400
@@ -102,10 +102,7 @@
 
 #ifndef _MAC_UNIX
 
-struct HXsem_t : public sem_t
-{
-    char padding[64]; /* Flawfinder: ignore */ // different linux versions have different binary reps blechhhh!
-};
+typedef sem_t HXsem_t;
 
 //=======================================================================
 //
diff -Naur hxplay-1.0.8-orig/player/hxclientkit/src/CHXClientSiteSupplier.h hxplay-1.0.8/player/hxclientkit/src/CHXClientSiteSupplier.h
--- hxplay-1.0.8-orig/player/hxclientkit/src/CHXClientSiteSupplier.h	2004-07-08 21:49:47.000000000 -0400
+++ hxplay-1.0.8/player/hxclientkit/src/CHXClientSiteSupplier.h	2006-08-22 01:15:38.000000000 -0400
@@ -51,6 +51,7 @@
 #define _CHXCLIENT_SITE_SUPPLIER_H_
 
 #include "CHXClientUnknown.h"
+#include "CHXClientSite.h"
 
 #include "enter_hx_headers.h"
 #include "hxwintyp.h"
