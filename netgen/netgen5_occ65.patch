diff -Naur netgen-5.0.0/libsrc/occ/Partition_Inter3d.cxx netgen-5.0.0_new/libsrc/occ/Partition_Inter3d.cxx
--- netgen-5.0.0/libsrc/occ/Partition_Inter3d.cxx	2012-11-09 16:15:02.000000000 +0100
+++ netgen-5.0.0_new/libsrc/occ/Partition_Inter3d.cxx	2013-05-05 12:09:04.126154032 +0200
@@ -243,8 +243,8 @@
       Standard_Integer i, nbExt = anExtPS.NbExt();
       Extrema_POnSurf aPOnSurf;
       for (i = 1; i <= nbExt; ++i )
-	if (anExtPS.Value( i ) <= TolE)               // V6.3
-	  // if (anExtPS.SquareDistance( i ) <= TolE)   // V6.5
+	//if (anExtPS.Value( i ) <= TolE)               // V6.3
+	  if (anExtPS.SquareDistance( i ) <= TolE)   // V6.5
 	  {
           aPOnSurf = anExtPS.Point( i );
           break;
diff -Naur netgen-5.0.0/libsrc/occ/Partition_Loop2d.cxx netgen-5.0.0_new/libsrc/occ/Partition_Loop2d.cxx
--- netgen-5.0.0/libsrc/occ/Partition_Loop2d.cxx	2012-11-09 16:15:02.000000000 +0100
+++ netgen-5.0.0_new/libsrc/occ/Partition_Loop2d.cxx	2013-05-05 12:10:23.103509363 +0200
@@ -210,7 +210,7 @@
     Cc->D1(uc, PC, CTg1);
     if (!isForward) CTg1.Reverse();
 
-    Standard_Real anglemin = 3 * PI, tolAng = 1.e-8;
+    Standard_Real anglemin = 3 * M_PI, tolAng = 1.e-8;
 
     // select an edge whose first derivative is most left of CTg1
     // ie an angle between Tg1 and CTg1 is least
@@ -234,7 +234,7 @@
       // -PI < angle < PI
       Standard_Real angle = Tg1.Angle(CTg1);
 
-      if (PI - Abs(angle) <= tolAng)
+      if (M_PI - Abs(angle) <= tolAng)
       {
         // an angle is too close to PI; assure that an angle sign really
         // reflects an edge position: +PI - an edge is worst,
diff -Naur netgen-5.0.0/libsrc/occ/Partition_Spliter.cxx netgen-5.0.0_new/libsrc/occ/Partition_Spliter.cxx
--- netgen-5.0.0/libsrc/occ/Partition_Spliter.cxx	2012-11-09 16:15:02.000000000 +0100
+++ netgen-5.0.0_new/libsrc/occ/Partition_Spliter.cxx	2013-05-05 12:10:48.283728677 +0200
@@ -1169,8 +1169,8 @@
           for (; j<=nbj && ok; ++j) {
             if (Extrema.IsMin(j)) {
 	      hasMin = Standard_True;
-	      ok = Extrema.Value(j) <= tol;  // V6.3
-	      // ok = Extrema.SquareDistance(j) <= tol;  // V6.5
+	      //ok = Extrema.Value(j) <= tol;  // V6.3
+	       ok = Extrema.SquareDistance(j) <= tol;  // V6.5
 	    }
           }
         }
diff -Naur netgen-5.0.0/ng/ngpkg.cpp netgen-5.0.0_new/ng/ngpkg.cpp
--- netgen-5.0.0/ng/ngpkg.cpp	2012-11-09 16:15:00.000000000 +0100
+++ netgen-5.0.0_new/ng/ngpkg.cpp	2013-05-05 12:20:11.068600889 +0200
@@ -2225,7 +2225,7 @@
     double tmp = context->width * context->height * 255.0 * 255.0;
     double Ypsnr = psnr( context->coded_frame->error[0] / tmp );
     double quality = context->coded_frame->quality/(double)FF_QP2LAMBDA;
-    char pict_type = av_get_pict_type_char(context->coded_frame->pict_type);
+    char pict_type = av_get_picture_type_char(context->coded_frame->pict_type);
     cout << "video: frame=" << count_frames << " type=" << pict_type;
     cout << " size=" << bytes << " PSNR(Y)=" << Ypsnr << " dB q=" << (float)quality << endl;
   }
