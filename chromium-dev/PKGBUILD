# Contributor: Mikhail Vorozhtsov <mikhail.vorozhtsov@gmail.com>
# Maintainer: Gustavo Alvarez <sl1pkn07@gmail.com>

pkgname=chromium-dev
pkgver=17.0.963.2
pkgrel=1
_buildtype=Release
test "x${DEBUG}" = "xyes" && _buildtype=Debug
pkgdesc='The open-source project behind Google Chrome (Dev channel)'
arch=('i686' 'x86_64')
url='http://www.chromium.org/'
license=('BSD')
depends=('alsa-lib' 'xdg-utils' 'hicolor-icon-theme' 'libevent' 'libxss' 'nss' 'libxslt' 'desktop-file-utils' 'gtk2' 'speex') #'icu'
makedepends=('python2' 'gperf' 'yasm' 'mesa' 'bison')
optdepends=()
test "${_buildtype}" = Debug && options[${#options[@]}]=!strip
options=()
install="${pkgname}".install
source=(http://gsdview.appspot.com/chromium-browser-official/chromium-"${pkgver}".tar.bz2
        "${pkgname}".desktop 
        "${pkgname}".sh
        filter-sp.patch)
md5sums=('f2facc92356de8c43f5dad11f6598053'
         '4d3824048614dd10fcd83d7e5c8ea091'
         'eaeaf4a71707d8a767be9a7d467bb809'
         '249623d6e8e70f919ae0392cf2c42f9b')

## BUILD OPTIONS ##

# Build With Pulseaudio (0 = Off | 1 = On)
_use_pulseaudio=0
if test $_use_pulseaudio = 1; then
  depends[${#depends[@]}]=libpulse
  _pulseaudio=1
  else
  _pulseaudio=0
fi

# Build "ffmpegsumo.so" (0) | Use system ffmpeg (1)
_use_ffmpeg_system_libs=0
if test $_use_ffmpeg_system_libs = 1; then
  depends[${#depends[@]}]=ffmpeg
  _system_ffmpeg=1
  _build_ffmpegsumo=0
else
  _system_ffmpeg=0
  _build_ffmpegsumo=1
fi

# Enable/Disable NACL (0 = Disable | 1 = Enable) #Enable FAIL BUILD. IN TEST TO FIX#
_use_nacl=0
if test $_use_nacl = 1; then
  _nacl=0
  depends[${#depends[@]}]=nacl-toolchain-newlib
else
  _nacl=1
fi

# Use Gnome Enviorement (don't touch, it's automatic)
_use_gnome=0
if test -x /usr/bin/gconftool-2; then
  _use_gnome=1
  depends[${#depends[@]}]=gconf
  depends[${#depends[@]}]=libgnome-keyring
fi

####################

build() {
   cd "${srcdir}"
if [ -d chromium-"${pkgver}" ]; then
     rm -fr chromium-build
     mv chromium-"${pkgver}" chromium-build
fi
   cd "${srcdir}"/chromium-build

## PATCHES ##

  msg "Patching sources..."

  msg "Save configuration in ~/.config/${pkgname}"
  sed -e "s|'filename': 'chromium-browser'|'filename': '${pkgname}'|" -e "s|'confdir': 'chromium'|'confdir': '${pkgname}'|" -i "${srcdir}"/chromium-build/chrome/chrome_exe.gypi
  sed -e "s|config_dir.Append(\"chromium\")|config_dir.Append(\"${pkgname}\")|" -e "s|config_dir.Append(\"chrome-frame\")|config_dir.Append(\"chrome-frame-${pkgname#chromium-}\")|" -i "${srcdir}"/chromium-build/chrome/common/chrome_paths_linux.cc
  msg2 "Done"

  msg "Force usage of python2 (can take a while).."
   rm -rf "${srcdir}"/python
   mkdir "${srcdir}"/python
   ln -s /usr/bin/python2 "${srcdir}"/python/python
   export PATH="${srcdir}"/python:$PATH
   #Really force use Python2
   find -type f -print0 | xargs -0 sed -i 's|#!/usr/bin/python|#!/usr/bin/python2|g'
  msg2 "Done"

if test $_use_nacl = 1; then
  msg "Patch & Copy NACL-Toolchain-newlib libraries to build NACL support"
  #http://code.google.com/p/chromium/issues/detail?id=104569
  patch -p0 < ../filter-sp.patch
  ln -s /opt/nacl-toolchain-newlib "${srcdir}"/chromium-build/native_client/toolchain/linux_x86_newlib
  msg2 "Done"
fi

  msg "Patching Sources Sucessfull"

############## 

  msg "Building Chromium..."
  chromium_arch=ia32
  test "${CARCH}" = x86_64 && chromium_arch=x64
  # http://code.google.com/p/chromium/issues/detail?id=41887
  export CXXFLAGS="${CXXFLAGS} -fno-ipa-cp"
  export GYP_GENERATORS='make'
  GYP_DEFINES="\
gcc_version=46 \
werror= \
no_strict_aliasing=1 \
linux_sandbox_path=/usr/lib/"${pkgname}"/chromium-sandbox \
linux_sandbox_chrome_path=/usr/lib/"${pkgname}"/chromium \
release_extra_cflags="${CFLAGS}" \
disable_nacl="${_nacl}" \
use_system_ffmpeg="${_system_ffmpeg}" \
build_ffmpegsumo="${_build_ffmpegsumo}" \
proprietary_codecs=1 \
use_system_vpx=1 \
use_system_speex=1 \
use_system_libxslt=1 \
use_system_libxml=1 \
use_system_bzip2=1 \
use_system_zlib=1 \
use_system_libexpat=1 \
use_system_libpng=1 \
use_system_yasm=1 \
use_system_libevent=1 \
use_system_icu=0 \
use_pulseaudio="${_pulseaudio}" \
use_gconf="${_use_gnome}" \
use_gnome_keyring="${_use_gnome}" \
linux_link_gnome_keyring="${_use_gnome}" \
target_arch="${chromium_arch}" \
"
  test "${CARCH}" = i686 && GYP_DEFINES=""${GYP_DEFINES}" disable_sse2=1"
  test "${_buildtype}" = Release && GYP_DEFINES=""${GYP_DEFINES}" linux_strip_binary=1 remove_webcore_debug_symbols=1"
  export GYP_DEFINES
  echo "${pkgver}" "${GYP_DEFINES}" > current.config

  python2 build/gyp_chromium -f make --depth=. build/all.gyp
  make "${MAKEFLAGS}" BUILDTYPE="${_buildtype}" chrome chrome_sandbox

  msg2 "Done"
}

package() {
  cd "${srcdir}"/chromium-build

  chromium_home="${pkgdir}"/usr/lib/"${pkgname}"

  install -Dm755 -D out/"${_buildtype}"/chrome "${chromium_home}"/chromium
  install -Dm4555 -o root -g root -D out/"${_buildtype}"/chrome_sandbox "${chromium_home}"/chromium-sandbox
  install -Dm644 out/"${_buildtype}"/chrome.pak "${chromium_home}"/chrome.pak
  install -Dm644 out/"${_buildtype}"/resources.pak "${chromium_home}"/resources.pak
  
  if test "${_use_ffmpeg_system_libs}" = 1; then
    for n in avcodec avdevice avfilter avformat avutil postproc swscale; do
      if test -e /usr/lib/lib"${n}".so.[0-9]; then
        f=`echo /usr/lib/lib"${n}".so.[0-9]`
      else
        f=`echo /usr/lib/lib"${n}".so.[0-9][0-9]`
      fi
      f=`basename "${f}"`
      ln -s ../"${f}" "${chromium_home}"/"${f}"
    done
  else
    if test -e out/"${_buildtype}"/libffmpegsumo.so; then
      install -Dm644 out/"${_buildtype}"/libffmpegsumo.so "${chromium_home}"/libffmpegsumo.so
    fi
  fi

  cp -a out/"${_buildtype}"/locales out/"${_buildtype}"/resources "${chromium_home}/"
  find "${chromium_home}" -type f -name '*.d' -delete
  install -Dm644 out/"${_buildtype}"/chrome.1 "${pkgdir}"/usr/share/man/man1/"${pkgname}".1

  install -Dm644 "${srcdir}"/"${pkgname}".desktop "${pkgdir}"/usr/share/applications/"${pkgname}".desktop
  for size in 16 22 24 32 48 128 256; do
    install -Dm644 chrome/app/theme/chromium/product_logo_"${size}".png "${pkgdir}"/usr/share/icons/hicolor/"${size}"x"${size}"/apps/"${pkgname}".png
  done
  install -Dm755 ${srcdir}/${pkgname}.sh "${pkgdir}"/usr/bin/"${pkgname}"

  install -Dm644 LICENSE "${pkgdir}"/usr/share/licenses/"${pkgname}"/LICENSE
}
