# Maintainer: Gustavo Alvarez <sl1pkn07@gmail.com>
# Contributor: Mikhail Vorozhtsov <mikhail.vorozhtsov@gmail.com>
# Contributor: Nagisa <simonas@kazlauskas.me>
# Contributor: Misc <andreas.reis@gmail.com>
# Contributor: Jeagoss <jgoliver@jeago.com>

#########################
## -- Build options -- ##
#########################

_use_clang=0           # Use clang compiler. Results in faster build and smaller chromium.
_use_libpdf=1          # Enable Chrome PDF support.
_use_pax=0             # If set 1, change PaX permisions in executables NOTE: only use if use PaX environment (IN TEST)
_use_pepperflash=1     # Use Pepper Flash plugin. Depends on Native Client!
_use_unittest=0        # Add/Run chromium unittest NOTE: this take long time and is possible the test fail in your system. ONLY FOR TEST OR DEBUGGING

##############################################
## -- Package and components information -- ##
##############################################
pkgname=chromium-dev
pkgver=36.0.1985.2
pkgrel=1
pkgdesc='The open-source project behind Google Chrome (Dev channel)'
arch=('i686' 'x86_64')
url="http://www.chromium.org/"
license=('BSD')
depends=('cairo' 'desktop-file-utils' 'hicolor-icon-theme' 'libevent' 'libpulse' 'libwebp' 'libxslt' 'libxss' 'minizip'
         'nss' 'pciutils' 're2' 'snappy' 'speech-dispatcher' 'speex' 'ttf-font' 'xdg-utils') #'libvpx' 'protobuf' 'opus' 'jsoncpp'
makedepends=('elfutils' 'gperf' 'ninja' 'perl-json' 'python2-simplejson' 'subversion' 'yasm') # 'libsrtp' 'python2-jinja' 'python2-ply'
[ "${CARCH}" = "x86_64" ] && makedepends+=('lib32-gcc-libs' 'lib32-zlib') && warning "To build need active [multilib] repository, if not , fail build"
install="chromium-dev.install"
backup=('etc/chromium-dev/default')
source=("https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${pkgver}.tar.xz"
        'chromium-dev.desktop'
        'chromium-dev.sh'
        'chromium-dev.default'
        'chromium-dev.xml'
        'pepper-flash'
        # Patch form Gentoo

        # Misc Patches
        )
sha1sums=("$(curl -sL "https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${pkgver}.tar.xz.hashes" | grep sha1 | cut -d " " -f3)"
          'aa07e8539935d9f472c30db30a4c88549ba7cc2b'
          '3ebf32c6cc0c533d83baefec05dee124d303ba2c'
          'e90eb2ffadf9e3e8f5dc20e6cc3410b28eae814e'
          '055fd99aedcb20343128854c3b00f7a731b6df20'
          '1bb355fba5d348669ce428b07908fa87bf2df766'
          # Patch form Gentoo

          # Misc Patches
          )
options=('!strip')

# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
# Note: These are for Arch Linux use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact foutrelis@archlinux.org for
# more information.
_google_api_key="AIzaSyDwr302FpOSkGRpLlUpPThNTDPbXcIn_FM"
_google_default_client_id="413772536636.apps.googleusercontent.com"
_google_default_client_secret="0ZChLK6AxeA3Isu96MkwqDR4"

################################################
## -- Don't touch anything below this line -- ##
################################################

[ "${CARCH}" = "i686" ] && _rpm_arch="i386" && _target_arch="ia32"
[ "${CARCH}" = "x86_64" ] && _rpm_arch="x86_64" && _target_arch="x64"

# If use PaX environment, need 'paxctl'
[ "${_use_pax}" = "1" ] && makedepends+=('paxctl')

# Pepper Flash Plugin and/or libpdf?
if [ "${_use_pepperflash}" = "1" -o "${_use_libpdf}" = "1" ]; then
  metadata="$(curl -sL "https://dl.google.com/linux/chrome/rpm/stable/${_rpm_arch}/repodata/other.xml.gz" | gzip -df)"
  _rpm_name="$(echo "${metadata}" | grep -e "unstable" | awk -v FS='name="' -v RS='" ' '$0=$2' | head -n 1)"
  _rpm_ver="$(echo "${metadata}" | grep -e "unstable" | awk -v FS='ver="' -v RS='" ' '$0=$2'  | head -n 1)"
  _rpm_rel="$(echo "${metadata}" | grep -e "unstable" | awk -v FS='rel="' -v RS='"/' '$0=$2' | head -n 1)"
  _rpm_sha1sum="$(echo "${metadata}" | grep -e "unstable" | awk -v FS='pkgid="' -v RS='" ' '$0=$2' | head -n 1)"
  source+=("http://dl.google.com/linux/chrome/rpm/stable/${_rpm_arch}/${_rpm_name}-${_rpm_ver}-${_rpm_rel}.${_rpm_arch}.rpm")
  sha1sums+=("${_rpm_sha1sum}")
  noextract+=("${_rpm_name}-${_rpm_ver}-${_rpm_rel}.${_rpm_arch}.rpm")
fi

[ "${_use_pepperflash}" = "1" ] && provides+=('chromium-pepper-flash') && conflicts+=('chromium-pepper-flash')
[ "${_use_libpdf}" = "1" ] && provides+=('chromium-libpdf') && conflicts+=('chromium-libpdf')

# Unit Test sources
if [ "${_use_unittest}" = "1" ]; then
  source+=("https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${pkgver}-testdata.tar.xz")
  sha1sums+=("$(curl -sL "https://commondatastorage.googleapis.com/chromium-browser-official/chromium-${pkgver}-testdata.tar.xz.hashes" | grep sha1 | cut -d " " -f3)")
  checkdepends+=('python2-pyftpdlib' 'python2-sendfile' 'python2-pyopenssl')
  _unittest="base_unittests cacheinvalidation_unittests content_unittests crypto_unittests gpu_unittests media_unittests net_unittests printing_unittests sql_unittests"
elif [ "${_use_unittest}" = "0" ]; then
  BUILDENV+=('!check')
fi

if [ "${_use_clang}" = "1" ]; then
  makedepends+=('clang')
fi

# Are we in Gnome?
_use_gnome=0
if [ -f /usr/lib/libgnome-keyring.so ]; then
  depends+=('libgnome-keyring')
  _use_gnome=1
fi

# Use Pulseaudio?
_use_pulseaudio=0
if [ -x /usr/bin/pulseaudio ]; then
  _use_pulseaudio=1
fi

prepare() {
  ##############################
  ## -- Get ready to build -- ##
  ##############################

  rm -rf build
  sync
  mv "chromium-${pkgver}" build
  sync
  cd build

  rm -rf "${srcdir}/python-path"
  mkdir "${srcdir}/python-path"
  ln -s /usr/bin/python2 "${srcdir}/python-path/python"

  export PATH="${srcdir}/python-path:$PATH"

  msg2 "Fix to save configuration in ~/.config/chromium-dev"
  sed -e "s|'filename': 'chromium-browser'|'filename': 'chromium-dev'|" \
      -e "s|'confdir': 'chromium'|'confdir': 'chromium-dev'|" \
      -i chrome/chrome_exe.gypi
  sed -e 's|config_dir.Append("chromium")|config_dir.Append("chromium-dev")|' \
      -e 's|config_dir.Append("chrome-frame")|config_dir.Append("chrome-frame-dev")|' \
      -i chrome/common/chrome_paths_linux.cc

  msg2 "Misc patches"
  # Patch sources

  msg2 "Remove unnecesary components to save space"
  # Remove most bundled libraries. Some are still needed.
  build/linux/unbundle/remove_bundled_libraries.py \
	'base/third_party/dmg_fp' \
	'base/third_party/dynamic_annotations' \
	'base/third_party/icu' \
	'base/third_party/nspr' \
	'base/third_party/superfasthash' \
	'base/third_party/symbolize' \
	'base/third_party/valgrind' \
	'base/third_party/xdg_mime' \
	'base/third_party/xdg_user_dirs' \
	'breakpad/src/third_party/curl' \
	'courgette/third_party' \
	'chrome/third_party/mozilla_security_manager' \
	'crypto/third_party/nss' \
	'native_client/src/third_party/dlmalloc' \
	'net/third_party/mozilla_security_manager' \
	'net/third_party/nss' \
	'third_party/WebKit' \
	'third_party/angle' \
	'third_party/brotli' \
	'third_party/cacheinvalidation' \
	'third_party/cld' \
	'third_party/cros_system_api' \
	'third_party/dom_distiller_js' \
	'third_party/ffmpeg' \
	'third_party/flot' \
	'third_party/hunspell' \
	'third_party/iccjpeg' \
	'third_party/icu' \
	'third_party/jinja2' \
	'third_party/jstemplate' \
	'third_party/jsoncpp' \
	'third_party/khronos' \
	'third_party/leveldatabase' \
	'third_party/libaddressinput' \
	'third_party/libjingle' \
	'third_party/libphonenumber' \
	'third_party/libsrtp' \
	'third_party/libusb' \
	'third_party/libvpx' \
	'third_party/libwebm' \
	'third_party/libxml/chromium' \
	'third_party/libXNVCtrl' \
	'third_party/libyuv' \
	'third_party/lss' \
	'third_party/lzma_sdk' \
	'third_party/markupsafe' \
	'third_party/mesa' \
	'third_party/modp_b64' \
	'third_party/mt19937ar' \
	'third_party/npapi' \
	'third_party/opus' \
	'third_party/ots' \
	'third_party/ply' \
	'third_party/polymer' \
	'third_party/protobuf' \
	'third_party/pywebsocket' \
	'third_party/qcms' \
	'third_party/readability' \
	'third_party/sfntly' \
	'third_party/skia' \
	'third_party/smhasher' \
	'third_party/sqlite' \
	'third_party/tcmalloc' \
	'third_party/tlslite' \
	'third_party/trace-viewer' \
	'third_party/undoview' \
	'third_party/usrsctp' \
	'third_party/webdriver' \
	'third_party/webrtc' \
	'third_party/widevine' \
	'third_party/x86inc' \
	'third_party/zlib/google' \
	'url/third_party/mozilla' \
	'v8/src/third_party/valgrind' \
	--do-remove
	
  # Compiler specific configuration...
  if [ "${_use_clang}" = "1" ]; then
    msg2 "Setup clang"
    # if use clang provide by chromium project, fail to build in 32bits machine.
    # rebuild chromium clang for solve build in 32bits take a severals minutes,
    # instead of this, use system clang provide by distro package
    mkdir -p third_party/llvm-build/Release+Asserts/bin/
    ln -s /usr/bin/clang third_party/llvm-build/Release+Asserts/bin/clang
    ln -s /usr/bin/clang third_party/llvm-build/Release+Asserts/bin/clang++
    ln -s /usr/bin/llvm-symbolizer third_party/llvm-build/Release+Asserts/bin/llvm-symbolizer
  fi

  msg2 "Prepare NaCl/PNaCl SDK: Download and install NaCl/PNaCl toolchains"
  build/download_nacl_toolchains.py --exclude arm_trusted
}

build() {
  cd build

  #######################
  ## -- Let's build -- ##
  #######################
  msg2 "Building Chromium..."

  # CFLAGS are passed through -Drelease_extra_cflags=
  export -n CFLAGS CXXFLAGS

  # Silence "typedef 'x' locally defined but not used" warnings
  CFLAGS+=' -Wno-unused-local-typedefs'

  # NOTES:
  # -Denable_sql_database=0                  | http://crbug.com/22208
  # -Dlogging_like_official_build=1          | Save space by removing DLOG and DCHECK messages (about 6% reduction).
  # -Dlinux_use_gold_flags=0                 | Never use bundled gold binary. Disable gold linker flags for now.
  # -Dusb_ids_path=/usr/share/hwdata/usb.ids | Use the file at run time instead of effectively compiling it in.
  # -Dlinux_use_tcmalloc=0                   | https://bugs.gentoo.org/show_bug.cgi?id=413637

  _flags=""

  _flags+="-Ddisable_glibc=1
           -Ddisable_nacl=0
           -Ddisable_pnacl=0
           -Ddisable_sse2=1
           -Ddisable_fatal_linker_warnings=1
           -Dffmpeg_branding=Chrome
           -Dgoogle_api_key="${_google_api_key}"
           -Dgoogle_default_client_id="${_google_default_client_id}"
           -Dgoogle_default_client_secret="${_google_default_client_secret}"
           -Dlibspeechd_h_prefix=speech-dispatcher/
           -Dlinux_link_gnome_keyring="${_use_gnome}"
           -Dlinux_link_gsettings="${_use_gnome}"
           -Dlinux_link_libpci=1
           -Dlinux_link_libspeechd=1
           -Dlinux_link_pulseaudio="${_use_pulseaudio}"
           -Dlinux_strip_binary=1
           -Dlinux_use_bundled_binutils=0
           -Dlinux_use_bundled_gold=0
           -Dlinux_use_gold_flags=0
           -Dlinux_use_tcmalloc=0
           -Dlogging_like_official_build=1
           -Dno_strict_aliasing=1
           -Dproprietary_codecs=1
           -Dpython_ver=2.7
           -Dremove_webcore_debug_symbols=1
           -Dsystem_libdir=lib
           -Dtarget_arch="${_target_arch}"
           -Dusb_ids_path=/usr/share/hwdata/usb.ids
           -Duse_gconf="${_use_gnome}"
           -Duse_gnome_keyring="${_use_gnome}"
           -Duse_pulseaudio="${_use_pulseaudio}"
           -Dwerror="

           # Broken flag in Ninja: -Drelease_extra_cflags="\"${CFLAGS}\"" | http://crbug.com/312030

  # Make it possible to remove third_party/adobe
  echo > "${srcdir}/flapper_version.h"
  _flags+=" -Dflapper_version_h_file=${srcdir}/flapper_version.h"

  if [ "${_use_clang}" = "1" ]; then
  # -Dclang=1 use clang instead of GCC
  # -Dclang_use_chrome_plugins=1 fail if use clang minor of v3.5. disable this
    _flags+=" -Dclang=1
              -Dclang_use_chrome_plugins=0"
  fi

  # TODO
  # -Duse_system_icu=1         | Resolve startup crash
  # -Duse_system_hunspell=1    | upstream changes needed
  # -Duse_system_jsoncpp=1     | need newer jsoncpp (0.6.0-rcX)
  # -Duse_system_libsrtp=1     | https://bugs.gentoo.org/show_bug.cgi?id=459932
  # -Duse_system_libvpx=1      | http://crbug.com/347823
  # -Duse_system_libusb=1      | http://crbug.com/266149
  # -Duse_system_opus=1        | https://code.google.com/p/webrtc/issues/detail?id=3077
  # -Duse_system_protobuf=1    | https://bugs.gentoo.org/show_bug.cgi?id=503084
  # -Duse_system_sqlite=1      | http://crbug.com/22208
  # -Duse_system_ssl=1         | http://crbug.com/58087

  _flags+=" -Duse_system_bzip2=1
            -Duse_system_flac=1
            -Duse_system_harfbuzz=1
            -Duse_system_jsoncpp=0
            -Duse_system_libevent=1
            -Duse_system_libjpeg=1
            -Duse_system_libpng=1
            -Duse_system_libvpx=0
            -Duse_system_libwebp=1
            -Duse_system_libxml=1
            -Duse_system_libxslt=1
            -Duse_system_minizip=1
            -Duse_system_nspr=1
            -Duse_system_opus=0
            -Duse_system_openssl=1
            -Duse_system_protobuf=0
            -Duse_system_re2=1
            -Duse_system_snappy=1
            -Duse_system_speex=1
            -Duse_system_xdg_utils=1
            -Duse_system_yasm=1
            -Duse_system_zlib=1"


  # Re-configure bundled ffmpeg
  msg2 "Configuring bundled ffmpeg"
  pushd third_party/ffmpeg > /dev/null
  chromium/scripts/build_ffmpeg.sh linux "${_target_arch}" "${srcdir}/build/third_party/ffmpeg" config-only
  chromium/scripts/copy_config.sh
  popd > /dev/null

  msg2 "1337's g0 7h3 p4r7y!"
  build/linux/unbundle/replace_gyp_files.py ${_flags}
  build/gyp_chromium --depth=. ${_flags}

  mkdir -p out/Release

  if [ "${_use_pax}" = "1" ]; then
    # Build mksnapshot and pax-mark it.
    ninja -C out/Release -v "mksnapshot.${_target_arch}"
    paxctl -cm "out/Release/mksnapshot.${_target_arch}"
  fi

  ninja -C out/Release -v chrome chrome_sandbox chromedriver ${_unittest}

  if [ "${_use_pax}" = "1" ]; then
    # Pax-mark again
    paxctl -cm out/Release/chrome
    if [ "${_use_unittest}" = "1" ]; then
      for x in "${_unittest}"; do
        paxctl -cm "out/Release/${x}"
      done
    fi
  fi
}

check() {
  cd build

  msg2 "Start Unittest"
  # need this locale to run test
  local LC_ALL='en_US.utf8'

  local excluded_base_unittests=(
    "OutOfMemoryDeathTest.ViaSharedLibraries"
    "StringUtilTest.FormatBytesUnlocalized"
    "TraceEventTestFixture.ConfigureSyntheticDelays"
  )

  out/Release/base_unittests --test-launcher-bot-mode --gtest_filter=-"$(echo ${excluded_base_unittests[@]} | sed 's| |:|g')"

  local excluded_cacheinvalidation_unittests=(
  )

  out/Release/cacheinvalidation_unittests --test-launcher-bot-mode --gtest_filter=-"$(echo ${excluded_cachevalidation_unittests[@]} | sed 's| |:|g')"

  if [ "${_use_clang}" = "1" ]; then
    local excluded_content_unittests=(
    )
  elif [ "${_use_clang}" = "0" ]; then
    local excluded_content_unittests=(
      "DevToolsManagerTest.NoUnresponsiveDialogInInspectedContents"
      "NavigationControllerTest.PurgeScreenshot"
      "RenderWidgetHostViewAuraCopyRequestTest.DestroyedAfterCopyRequest"
      "WebContentsImplTest.InterstitialCrasher"
      "WebContentsImplTest.NavigateBeforeInterstitialShows"
      "WebContentsImplTest.NewInterstitialDoesNotCancelPendingEntry"
      "WebContentsImplTest.ShowInterstitiaFromRendererlWithNewNavigationDontProceed"
      "WebContentsImplTest.ShowInterstitialCrashRendererThenGoBack"
      "WebContentsImplTest.ShowInterstitialFromBrowserNewNavigationProceed"
      "WebContentsImplTest.ShowInterstitialFromBrowserWithNewNavigationDontProceed"
      "WebContentsImplTest.ShowInterstitialFromRendererNewNavigationProceed"
      "WebContentsImplTest.ShowInterstitialNoNewNavigationDontProceed"
      "WebContentsImplTest.ShowInterstitialNoNewNavigationProceed"
      "WebContentsImplTest.ShowInterstitialOnInterstitial"
      "WebContentsImplTest.ShowInterstitialProceedMultipleCommands"
      "WebContentsImplTest.ShowInterstitialProceedShowInterstitial"
      "WebContentsImplTest.ShowInterstitialThenCloseAndShutdown"
      "WebContentsImplTest.ShowInterstitialThenCloseTab"
      "WebContentsImplTest.ShowInterstitialThenGoBack"
      "WebContentsImplTest.ShowInterstitialThenNavigate"
      "WebContentsImplTest.TwoQuickInterstitials"
      "WindowSliderTest.NoSlideWhenLayerCantBeCreated"
      "WindowSliderTest.OwnerIsDestroyedOnSlideComplete"
      "WindowSliderTest.OwnerIsDestroyedOnSliderDestroy"
      "WindowSliderTest.OwnerWindowChangesDuringWindowSlide"
      "WindowSliderTest.SwipeDuringSwipeAnimation"
      "WindowSliderTest.WindowSlideInterruptedThenContinues"
      "WindowSliderTest.WindowSlideIsCancelledOnEvent"
      "WindowSliderTest.WindowSlideUsingGesture"
    )
  fi

  out/Release/content_unittests --test-launcher-bot-mode --gtest_filter=-"$(echo ${excluded_content_unittests[@]} | sed 's| |:|g')"

  local excluded_crypto_unittests=(
  )

  out/Release/crypto_unittests --test-launcher-bot-mode --test-launcher-bot-mode --gtest_filter=-"$(echo ${excluded_crypto_unittests[@]} | sed 's| |:|g')"

  if [ "${_use_clang}" = "1" ]; then
    local excluded_gpu_unittests=(
    )
  elif [ "${_use_clang}" = "0" ]; then
    local excluded_gpu_unittests=(
      "ShaderTranslatorTest.GetAttributes"
      "ShaderTranslatorTest.GetUniforms"
      "ShaderTranslatorTest.InvalidVertexShader"
      "ShaderTranslatorTest.ValidFragmentShader"
      "ShaderTranslatorTest.ValidVertexShader"
    )
  fi

  out/Release/gpu_unittests --test-launcher-bot-mode --gtest_filter=-"$(echo ${excluded_gpu_unittests[@]} | sed 's| |:|g')"

  local excluded_media_unittests=(
    "AudioFileReaderTest.AAC"
    "AudioFileReaderTest.CorruptMP3"
    "AudioFileReaderTest.MP3"
    "AudioFileReaderTest.Vorbis"
    "AudioFileReaderTest.WaveF32LE"
    "AudioFileReaderTest.WaveS16LE"
    "AudioFileReaderTest.WaveS24LE"
    "AudioFileReaderTest.WaveU8"
    "AudioFileReaderTest.WaveValidFourChannelLayout"
    "AudioFileReaderTest.WithVideo"
    "LegacyFrameProcessor/PipelineIntegrationTest.MediaSource_MP3/0"
    "NewFrameProcessor/PipelineIntegrationTest.MediaSource_MP3/0"
    "PipelineIntegrationTest.BasicPlaybackHashed"
    "PipelineIntegrationTest.BasicPlaybackHashed_MP3"
    "PipelineIntegrationTest.BasicPlaybackLive"
    "PipelineIntegrationTest.F32PlaybackHashed"
  )

  out/Release/media_unittests --test-launcher-bot-mode --gtest_filter=-"$(echo ${excluded_media_unittests[@]} | sed 's| |:|g')"

  if [ "${_use_clang}" = "1" ]; then
    local excluded_net_unittests=(
    )
  elif [ "${_use_clang}" = "0" ]; then
    local excluded_net_unittests=(
      "NetUtilTest.IDNToUnicode*"
      "NetUtilTest.FormatUrl*"
      "SpdyFramerTests/SpdyFramerTest.CreatePushPromiseCompressed/2"
      "SpdyFramerTests/SpdyFramerTest.CreateContinuationCompressed/2"
      "HostResolverImplTest.FlushCacheOnIPAddressChange"
      "HostResolverImplTest.BypassCache"
      "HostResolverImplTest.ResolveFromCache"
      "ProxyResolverV8TracingTest.*"
      "SSLClientSocketTest.ConnectMismatched"
      "UDPSocketTest.*"
      "*EndToEndTest*"
      "Spdy/SpdyNetworkTransactionTest.CorruptFrameSessionError/*"
      "Spdy/SpdyNetworkTransactionTest.CorruptFrameSessionErrorSpdy4/9"
      "Spdy/SpdyNetworkTransactionTest.CorruptFrameSessionErrorSpdy4/10"
      "Spdy/SpdyNetworkTransactionTest.CorruptFrameSessionErrorSpdy4/11"
      "Spdy/SpdyNetworkTransactionTest.CorruptFrameSessionErrorSpdy4/12"
      "Spdy/SpdyNetworkTransactionTest.CorruptFrameSessionErrorSpdy4/13"
      "Spdy/SpdyNetworkTransactionTest.CorruptFrameSessionErrorSpdy4/14"
      "Spdy/SpdyNetworkTransactionTest.DecompressFailureOnSynReply/*"
      "Spdy/SpdyNetworkTransactionTest.ResponseWithoutSynReply/*"
      "Spdy/SpdyNetworkTransactionTest.EmptyPost/*"
      "Spdy/SpdyNetworkTransactionTest.Get/*"
      "Spdy/SpdyNetworkTransactionTest.GetAtEachPriority/*"
      "Spdy/SpdyNetworkTransactionTest.GoAwayWithActiveStream/*"
      "Spdy/SpdyNetworkTransactionTest.Head/*"
      "Spdy/SpdyNetworkTransactionTest.InvalidSynReply/*"
      "Spdy/SpdyNetworkTransactionTest.NullPost/*"
      "Spdy/SpdyNetworkTransactionTest.PartialWrite/*"
      "Spdy/SpdyNetworkTransactionTest.Put/*"
      "Spdy/SpdyNetworkTransactionTest.ResetPushWithTransferEncoding/*"
      "Spdy/SpdyNetworkTransactionTest.ResetReplyWithTransferEncoding/*"
      "Spdy/SpdyNetworkTransactionTest.SpdyOnOffToggle/*"
      "Spdy/SpdyNetworkTransactionTest.SynReplyHeaders/*"
      "Spdy/SpdyNetworkTransactionTest.SynReplyHeadersVary/*"
      "Spdy/SpdyNetworkTransactionTest.SynReplyWithHeaders/*"
      "Spdy/SpdyNetworkTransactionTest.SynReplyWithLateHeaders/*"
      "Spdy/SpdyNetworkTransactionTest.WriteError/11"
      "Spdy/SpdyNetworkTransactionTest.WriteError/14"
      "Spdy/SpdyNetworkTransactionTest.WriteError/2"
      "Spdy/SpdyNetworkTransactionTest.WriteError/5"
      "Spdy/SpdyNetworkTransactionTest.WriteError/8"
      "Version/QuicHttpStreamTest.DestroyedEarly/0"
      "Version/QuicHttpStreamTest.Priority/0"
    )
  fi

  out/Release/net_unittests --test-launcher-bot-mode --gtest_filter=-"$(echo ${excluded_net_unittests[@]} | sed 's| |:|g')"

  local excluded_printing_unittests=(
  )
  out/Release/printing_unittests --test-launcher-bot-mode --gtest_filter=-"$(echo ${excluded_printing_unittests[@]} | sed 's| |:|g')"

  local excluded_sql_unittests=(
  )

  out/Release/sql_unittests --test-launcher-bot-mode --gtest_filter=-"$(echo ${excluded_sql_unittests[@]} | sed 's| |:|g')"

  msg2 "All Unittest OK"
}

package() {
  install -Dm644 chromium-dev.default "${pkgdir}/etc/chromium-dev/default"
  install -Dm755 chromium-dev.sh "${pkgdir}/usr/bin/chromium-dev"
  install -Dm644 chromium-dev.desktop "${pkgdir}/usr/share/applications/chromium-dev.desktop"
  install -Dm644 build/LICENSE "${pkgdir}/usr/share/licenses/chromium-dev/LICENSE"

  cd build/out/Release
  install -Dm755 chrome "${pkgdir}/usr/lib/chromium-dev/chromium-dev"
  install -Dm4755 -o root -g root chrome_sandbox "${pkgdir}/usr/lib/chromium-dev/chrome-sandbox"
  install -Dm755 chromedriver "${pkgdir}/usr/lib/chromium-dev/chromedriver"
  ln -s /usr/lib/chromium-dev/chromedriver "${pkgdir}/usr/bin/chromedriver-dev"
  install -Dm644 {chrome_100_percent,content_resources,resources}.pak "${pkgdir}/usr/lib/chromium-dev"
  install -Dm644 icudtl.dat "${pkgdir}/usr/lib/chromium-dev/icudtl.dat"
  install -Dm755 libffmpegsumo.so "${pkgdir}/usr/lib/chromium-dev/libffmpegsumo.so"
  install -Dm644 pnacl/pnacl_public_pnacl_json "${pkgdir}/usr/lib/chromium-dev/pnacl/pnacl_public_pnacl_json"
  [ "${CARCH}" = "i686" ] && install -Dm644 pnacl/pnacl_public_x86_32_libpnacl_irt_shim_a "${pkgdir}/usr/lib/chromium-dev/pnacl/pnacl_public_x86_32_libpnacl_irt_shim_a"
  [ "${CARCH}" = "x86_64" ] && install -Dm644 pnacl/pnacl_public_x86_64_libpnacl_irt_shim_a "${pkgdir}/usr/lib/chromium-dev/pnacl/pnacl_public_x86_64_libpnacl_irt_shim_a"
  find locales -type f -name "*.pak" -exec install -Dm644 '{}' "${pkgdir}/usr/lib/chromium-dev/{}" \;
  install -Dm644 chrome.1 "${pkgdir}/usr/share/man/man1/chromium-dev.1"

  for _size in 16 22 24 32 48 128 256; do
    case "${_size}" in
      16|32) _branding="${srcdir}/build/chrome/app/theme/default_100_percent/chromium" ;;
      *) _branding="${srcdir}/build/chrome/app/theme/chromium" ;;
    esac
    install -Dm644 "${_branding}/product_logo_${_size}.png" "${pkgdir}/usr/share/icons/hicolor/${_size}x${_size}/apps/chromium-dev.png"
  done

  install -Dm755 libppGoogleNaClPluginChrome.so "${pkgdir}/usr/lib/chromium-dev/libppGoogleNaClPluginChrome.so"
  install -Dm755 nacl_helper{,_bootstrap} "${pkgdir}/usr/lib/chromium-dev"
  [ "${CARCH}" = "i686" ] && install -Dm755 nacl_irt_x86_32.nexe "${pkgdir}/usr/lib/chromium-dev/nacl_irt_x86_32.nexe"
  [ "${CARCH}" = "x86_64" ] && install -Dm755 nacl_irt_x86_64.nexe "${pkgdir}/usr/lib/chromium-dev/nacl_irt_x86_64.nexe"

  # Extract and install PepperFlash
  if [ "${_use_pepperflash}" = "1" ]; then
    msg2 "Adding PepperFlash"
    cd "${srcdir}"
    bsdtar -xf "${_rpm_name}-${_rpm_ver}-${_rpm_rel}.${_rpm_arch}.rpm" opt/google/chrome/PepperFlash
    install -Dm644 opt/google/chrome/PepperFlash/manifest.json "${pkgdir}/usr/lib/chromium-dev/PepperFlash/manifest.json"
    install -Dm755 opt/google/chrome/PepperFlash/libpepflashplayer.so "${pkgdir}/usr/lib/chromium-dev/PepperFlash/libpepflashplayer.so"
    rm -fr "${srcdir}/opt"
    _version="$(sed -n 's/.*"version": "\(.*\)",.*/\1/p' ${pkgdir}/usr/lib/chromium-dev/PepperFlash/manifest.json)"
    install -Dm644 pepper-flash "${pkgdir}/etc/chromium-dev/pepper-flash"
    sed "s|%%VERSION%%|${_version}|g" -i "${pkgdir}/etc/chromium-dev/pepper-flash"
  fi

  # Extract and install libpdf.so
  if [ "${_use_libpdf}" = "1" ]; then
    msg2 "Adding libpdf"
    cd "${srcdir}"
    bsdtar -xf "${_rpm_name}-${_rpm_ver}-${_rpm_rel}.${_rpm_arch}.rpm" opt/google/chrome/libpdf.so
    install -Dm755 opt/google/chrome/libpdf.so "${pkgdir}/usr/lib/chromium-dev/libpdf.so"
    rm -rf "${srcdir}/opt"
  fi

  [ "${_use_gnome}" = "1" ] && install -Dm644 "${srcdir}/chromium-dev.xml" "${pkgdir}/usr/share/gnome-control-center/default-apps/chromium-dev.xml"

  # Manually strip binaries so that 'nacl_irt_*.nexe' is left intact
  strip $STRIP_BINARIES "${pkgdir}/usr/lib/chromium-dev/"{chromium-dev,chrome-sandbox} \
    "${pkgdir}/usr/lib/chromium-dev/"nacl_helper{,_bootstrap}
  strip $STRIP_SHARED "${pkgdir}/usr/lib/chromium-dev/"{libppGoogleNaClPluginChrome,libffmpegsumo}.so
}
