# Maintainer: Gustavo Alvarez <sl1pkn07@gmail.com>
# Contributor: Mikhail Vorozhtsov <mikhail.vorozhtsov@gmail.com>
# Contributor: Nagisa <simonas@kazlauskas.me>
# Contributor: Misc <andreas.reis@gmail.com>
# Contributor: Jeagoss <jgoliver@jeago.com>

#########################
## -- Build options -- ##
#########################

_use_libpdf=1          # Enable Chrome PDF support.
_use_pepperflash=1     # Use Pepper Flash plugin. Depends on Native Client!
_use_clang=0           # Use clang compiler. Results in faster build and smaller chromium.
_use_unittest=0        # Run unit test? # IN TEST, DON'T ACTIVE

##############################################
## -- Package and components information -- ##
##############################################
pkgname=chromium-dev
pkgver=28.0.1500.11
_toolchains_rev=11338
pkgrel=1
pkgdesc='The open-source project behind Google Chrome (Dev channel)'
arch=('i686' 'x86_64')
url="http://www.chromium.org/"
license=('BSD')
depends=('alsa-lib' 'desktop-file-utils' 'ffmpeg' 'gtk2' 'gpsd' 'hicolor-icon-theme' 'jsoncpp' 'libevent' 'libwebp'
          'libxslt' 'libxss' 'minizip' 'nss' 'protobuf' 'snappy' 'speech-dispatcher' 'ttf-font' 'udev' 'v8-dev') # 're2'
makedepends=('elfutils' 'gperf' 'mesa' 'python2-ply' 'python2-simplejson' 'subversion' 'xdg-utils' 'yasm') # 'libsrtp'
[ "$CARCH" = "x86_64" ] && makedepends+=('lib32-gcc-libs' 'lib32-zlib') && warning "To build need active [multilib] repository, if not , fail build"

install="chromium-dev.install"
backup=('etc/chromium-dev/default')
source=("https://gsdview.appspot.com/chromium-browser-official/chromium-${pkgver}.tar.xz"
        'chromium-dev-r1.desktop'
        'chromium-dev.sh'
        'default'
        'gcc-4.7.diff'
        # Patch form Gentoo
        'http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/chromium/files/chromium-gpsd-r0.patch'
        'http://sources.gentoo.org/cgi-bin/viewvc.cgi/gentoo-x86/www-client/chromium/files/chromium-system-ffmpeg-r5.patch'
        # Nacl Components
        "naclsdk_nacl_linux_x86-${_toolchains_rev}.tgz::http://gsdview.appspot.com/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_linux_x86.tgz"
        "naclsdk_pnacl_linux_x86-${_toolchains_rev}.tgz::http://gsdview.appspot.com/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_pnacl_linux_x86.tgz"
        "naclsdk_pnacl_translator-${_toolchains_rev}.tgz::http://gsdview.appspot.com/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_pnacl_translator.tgz"
        "naclsdk_pnacl_translator-${_toolchains_rev}.sha1hash::http://gsdview.appspot.com/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_pnacl_translator.tgz.sha1hash")
sha1sums=('444c54e310cd9335653a9cbf4de0d0361cf69d4b'
          '64de05845dce1eb58c5c1757139f07caaf371c99'
          '22cb5f2044120ea0be5799fc2181a8ff189be512'
          'd6d2da45c0729dfd1c606a15c8ffb7591dbc7b44'
          'e25739be0c7e6d14c2675d3ed4dcd99f63f4661c'
          # Patch form Gentoo
          'faefcc85fab0dec3fc85efaeea5fa9a6d469e61c'
          '1e06a3bf11fefdfa85b1681846f3fb960a250000'
          # Nacl Components
          "$(curl -sL "http://gsdview.appspot.com/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_linux_x86.tgz.sha1hash")"
          "$(curl -sL "http://gsdview.appspot.com/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_pnacl_linux_x86.tgz.sha1hash")"
          "$(curl -sL "http://gsdview.appspot.com/nativeclient-archive2/toolchain/${_toolchains_rev}/naclsdk_pnacl_translator.tgz.sha1hash")"
          'SKIP')
noextract=("naclsdk_nacl_linux_x86-${_toolchains_rev}.tgz"
           "naclsdk_pnacl_linux_x86-${_toolchains_rev}.tgz"
           "naclsdk_pnacl_translator-${_toolchains_rev}.tgz")

# Google API keys (see http://www.chromium.org/developers/how-tos/api-keys)
# Note: These are for Arch Linux use ONLY. For your own distribution, please
# get your own set of keys. Feel free to contact foutrelis@archlinux.org for
# more information.
_google_api_key="AIzaSyDwr302FpOSkGRpLlUpPThNTDPbXcIn_FM"
_google_default_client_id="413772536636.apps.googleusercontent.com"
_google_default_client_secret="0ZChLK6AxeA3Isu96MkwqDR4"

################################################
## -- Don't touch anything below this line -- ##
################################################

[ "$CARCH" = "i686" ] && _rpm_arch='i386' && _target_arch='ia32'
[ "$CARCH" = "x86_64" ] && _rpm_arch='x86_64' && _target_arch='x64'

# Pepper Flash Plugin and/or libpdf?
if [ "${_use_pepperflash}" = "1" -o "${_use_libpdf}" = "1" ]; then
  rm -f filelists.xml*
  curl -sL "http://dl.google.com/linux/chrome/rpm/stable/${_rpm_arch}/repodata/filelists.xml.gz" | gzip -d > filelists.xml
  _rpm_build="$(grep -e "unstable" filelists.xml | cut -d '"' -f12 | head -n 1)"
  _rpm_ver="$(grep -e "unstable" filelists.xml | cut -d '"' -f10 | head -n 1)"
  _rpm_sha1sum="$(grep -e "unstable" filelists.xml | cut -d '"' -f2 | head -n 1)"
  rm -f filelists.xml*

  source+=("http://dl.google.com/linux/chrome/rpm/stable/${_rpm_arch}/google-chrome-unstable-${_rpm_ver}-${_rpm_build}.${_rpm_arch}.rpm")
  sha1sums+=("${_rpm_sha1sum}")
  noextract+=("google-chrome-unstable-${_rpm_ver}-${_rpm_build}.${_rpm_arch}.rpm")
fi

[ "${_use_pepperflash}" = "1" ] && provides+=('chromium-pepper-flash') && conflicts+=('chromium-pepper-flash')
[ "${_use_libpdf}" = "1" ] && provides+=('chromium-libpdf') && conflicts+=('chromium-libpdf')

# Unit Test sources
if [ "${_use_unittest}" = "1" ]; then
  source+=("https://gsdview.appspot.com/chromium-browser-official/chromium-${pkgver}-testdata.tar.xz")
  sha1sums+=('d3afda0c2186c6d2b98b61e2b0043a1245e0dc43')
  makedepends+=('python2-pyftpdlib')
  for i in base cacheinvalidation content crypto googleurl gpu net printing sql; do _unittest+=" ${i}_unittests"; done
fi

# Are we in Gnome?
_use_gnome=0
if [ -f /usr/lib/libgnome-keyring.so ]; then
  depends+=('libgnome-keyring')
  _use_gnome=1
fi

# Use Pulseaudio?
_use_pulseaudio=0
if [ -x /usr/bin/pulseaudio ]; then
  _use_pulseaudio=1
fi

prepare() {
  ##############################
  ## -- Get ready to build -- ##
  ##############################

  cd "${srcdir}"

  rm -rf chromium
  mv "chromium-${pkgver}" chromium
  cd chromium

  msg2 "Fix to save configuration in ~/.config/chromium-dev"
  sed -e "s|'filename': 'chromium-browser'|'filename': 'chromium-dev'|" \
      -e "s|'confdir': 'chromium'|'confdir': 'chromium-dev'|" \
      -i chrome/chrome_exe.gypi
  sed -e 's|config_dir.Append("chromium")|config_dir.Append(\"chromium-dev\")|' \
      -e 's|config_dir.Append("chrome-frame")|config_dir.Append(\"chrome-frame-dev\")|' \
      -i chrome/common/chrome_paths_linux.cc

  msg2 "Remove unnecesary components to save space"
  find third_party -type f \! -iname '*.gyp*' \
    \! -path 'third_party/WebKit/*' \
    \! -path 'third_party/angle/*' \
    \! -path 'third_party/cacheinvalidation/*' \
    \! -path 'third_party/cld/*' \
    \! -path 'third_party/cros_system_api/*'  \
    \! -path 'third_party/ffmpeg/*' \
    \! -path 'third_party/flot/*' \
    \! -path 'third_party/gold/*' \
    \! -path 'third_party/hunspell/*' \
    \! -path 'third_party/hyphen/*' \
    \! -path 'third_party/iccjpeg/*' \
    \! -path 'third_party/jstemplate/*' \
    \! -path 'third_party/khronos/*' \
    \! -path 'third_party/leveldatabase/*' \
    \! -path 'third_party/libXNVCtrl/*' \
    \! -path 'third_party/libjingle/*' \
    \! -path 'third_party/libphonenumber/*' \
    \! -path 'third_party/libsrtp/*' \
    \! -path 'third_party/libxml/chromium/*' \
    \! -path 'third_party/libyuv/*' \
    \! -path 'third_party/lss/*' \
    \! -path 'third_party/mesa/*' \
    \! -path 'third_party/modp_b64/*' \
    \! -path 'third_party/mongoose/*' \
    \! -path 'third_party/mt19937ar/*' \
    \! -path 'third_party/npapi/*' \
    \! -path 'third_party/openmax/*' \
    \! -path 'third_party/ots/*' \
    \! -path 'third_party/pywebsocket/*' \
    \! -path 'third_party/qcms/*' \
    \! -path 'third_party/re2/*' \
    \! -path 'third_party/sfntly/*' \
    \! -path 'third_party/skia/*' \
    \! -path 'third_party/smhasher/*' \
    \! -path 'third_party/sqlite/*' \
    \! -path 'third_party/tcmalloc/*' \
    \! -path 'third_party/tlslite/*' \
    \! -path 'third_party/trace-viewer/*' \
    \! -path 'third_party/undoview/*' \
    \! -path 'third_party/v8-i18n/*' \
    \! -path 'third_party/webdriver/*' \
    \! -path 'third_party/webrtc/*' \
    \! -path 'third_party/widevine/*' \
    \! -path 'third_party/x86inc/*' \
    \! -path 'third_party/zlib/google*' \
    -delete

  # Remove bundled v8.
  find v8 -type f \! -iname '*.gyp*' -delete

  msg2 "Misc patches"
  # Fix missing gcc4.7.x header
  patch -p0 -E -i "${srcdir}/gcc-4.7.diff"

  # Make it possible to remove third_party/adobe
  echo > "${srcdir}/flapper_version.h"

  # Patch for use some system libraries
  patch -p0 -E -i "${srcdir}/chromium-gpsd-r0.patch"
  patch -p1 -E -i "${srcdir}/chromium-system-ffmpeg-r5.patch"
  # Fix build with system libraries. To be upstreamed.

  #msg "Compiler specific configuration..."
  if [ "${_use_clang}" = "1" ]; then
    msg2 "Download clang"
    sh tools/clang/scripts/update.sh
  fi

  msg2 "Fix to really use python2."
  rm -rf "${srcdir}/python"
  mkdir "${srcdir}/python"
  ln -s /usr/bin/python2 "${srcdir}/python/python"
  export PATH="${srcdir}/python":$PATH
  find . -type f -exec sed -i -r -e 's|/usr/bin/python$|&2|g' -e 's|(/usr/bin/python2)\.4$|\1|g' {} \;

  msg "Prepare NaCl SDK"
  mkdir native_client/toolchain/.tars
  ln -s "${srcdir}/naclsdk_nacl_linux_x86-${_toolchains_rev}.tgz" native_client/toolchain/.tars/naclsdk_linux_x86.tgz
  ln -s "${srcdir}/naclsdk_pnacl_linux_x86-${_toolchains_rev}.tgz" native_client/toolchain/.tars/naclsdk_pnacl_linux_x86.tgz
  ln -s "${srcdir}/naclsdk_pnacl_translator-${_toolchains_rev}.tgz" native_client/toolchain/.tars/naclsdk_pnacl_translator.tgz
  mkdir native_client/toolchain/pnacl_translator
  ln -s "${srcdir}/naclsdk_pnacl_translator-${_toolchains_rev}.tgz" native_client/toolchain/pnacl_translator/SOURCE_SHA1
}

build() {
  cd "${srcdir}/chromium"

  #######################
  ## -- Let's build -- ##
  #######################
  msg2 "Building Chromium..."

  # CFLAGS are passed through release_extra_cflags below
  export -n CFLAGS CXXFLAGS

  # Silence "typedef 'x' locally defined but not used" warnings
  CFLAGS+=' -Wno-unused-local-typedefs'

  # TODO
  # -Denable_sql_database=0     | maybe fix in next release?
  # -Dmedia_use_libvpx=0        | re-enable on vp9 libvpx release (http://crbug.com/174287)

  _flags="-Ddisable_glibc=1
          -Ddisable_pnacl=0
          -Ddisable_sse2=1
          -Dffmpeg_branding=Chrome
          -Dflapper_version_h_file=${srcdir}/flapper_version.h
          -Dgoogle_api_key=${_google_api_key}
          -Dgoogle_default_client_id=${_google_default_client_id}
          -Dgoogle_default_client_secret=${_google_default_client_secret}
          -Dlibspeechd_h_prefix=speech-dispatcher/
          -Dlinux_link_gnome_keyring=${_use_gnome}
          -Dlinux_link_gsettings=1
          -Dlinux_link_libpci=1
          -Dlinux_link_libspeechd=1
          -Dlinux_link_libgps=1
          -Dlinux_sandbox_path=/usr/lib/chromium-dev/chromium-sandbox
          -Dlinux_sandbox_chrome_path=/usr/lib/chromium-dev/chromium
          -Dlinux_strip_binary=1
          -Dlinux_use_gold_binary=1
          -Dlinux_use_gold_flags=1
          -Dlinux_use_libgps=1
          -Dlinux_use_tcmalloc=0
          -Dmedia_use_libvpx=0
          -Dno_strict_aliasing=1
          -Dproprietary_codecs=1
          -Drelease_extra_cflags=${CFLAGS}
          -Dremove_webcore_debug_symbols=1
          -Dtarget_arch=${_target_arch}
          -Dusb_ids_path=/usr/share/hwdata/usb.ids
          -Duse_gconf=0
          -Duse_gnome_keyring=${_use_gnome}
          -Duse_pulseaudio=${_use_pulseaudio}
          -Dwerror="

  # TODO
  # -Duse_system_hunspell=1    | upstream changes needed
  # -Duse_system_ssl=1         | http://crbug.com/58087
  # -Duse_system_libsrtp=1     | https://bugs.gentoo.org/show_bug.cgi?id=459932
  # -Duse_system_re2=1         | need update re2 sources in chromium upstream
  # -Duse_system_sqlite=1      | maybe fix in next release?

  _flags+=" -Duse_system_bzip2=1
            -Duse_system_expat=1
            -Duse_system_ffmpeg=1
            -Duse_system_flac=1
            -Duse_system_harfbuzz=1
            -Duse_system_icu=1
            -Duse_system_jsoncpp=1
            -Duse_system_libevent=1
            -Duse_system_libjpeg=1
            -Duse_system_libpng=1
            -Duse_system_libsrtp=0
            -Duse_system_libusb=1
            -Duse_system_libvpx=1
            -Duse_system_libwebp=1
            -Duse_system_libxml=1
            -Duse_system_libxslt=1
            -Duse_system_nspr=1
            -Duse_system_mesa=1
            -Duse_system_minizip=1
            -Duse_system_opus=1
            -Duse_system_protobuf=1
            -Duse_system_re2=0
            -Duse_system_snappy=1
            -Duse_system_speex=1
            -Duse_system_sqlite=0
            -Duse_system_ssl=0
            -Duse_system_v8=1
            -Duse_system_xdg_utils=1
            -Duse_system_yasm=1
            -Duse_system_zlib=1"

  if [ "${_use_clang}" = "1" ]; then
    _flags+=" -Dclang=1
              -Dclang_use_chrome_plugins=1"
  else
    _flags+=" -Dgcc_version=48"
  fi

  GYP_DEFINES="$(echo ${_flags} | sed 's|-D||g')"
  export GYP_DEFINES

  build/linux/unbundle/replace_gyp_files.py ${_flags}
  build/gyp_chromium --depth=.

  make V=1 BUILDTYPE=Release chrome chrome_sandbox chromedriver ${_unittest}

  rm -rf "${srcdir}/chromium-build/third_party"
}

check() {
  if [ "${_use_unittest}" = "1" ]; then
    cd "${srcdir}/chromium"

    # need this locale to run test
    LC_ALL='en_US.utf8'
    export LC_ALL

    local excluded_base_unittests=(
            "ICUStringConversionsTest.*"
            "MessagePumpLibeventTest.*"
            "TimeTest.JsTime"
            "SecurityTest.NewOverflow"
    )
    out/Release/base_unittests "${excluded_base_unittests[@]}"

    out/Release/cacheinvalidation_unittests

    local excluded_content_unittests=(
            "RendererDateTimePickerTest.*"
    )
    out/Release/content_unittests "${excluded_content_unittests[@]}"

    out/Release/crypto_unittests

    out/Release/googleurl_unittests

    out/Release/gpu_unittests

    # TODO: add media_unittests after fixing compile
    # runtest out/Release/media_unittests

    local excluded_net_unittests=(
            "NetUtilTest.IDNToUnicode*"
            "NetUtilTest.FormatUrl*"
            "DnsConfigServiceTest.GetSystemConfig"
            "CertDatabaseNSSTest.ImportServerCert_SelfSigned"
            "CertDatabaseNSSTest.TrustIntermediateCa*" # http://crbug.com/224612
            "URLFetcher*"
            "HTTPSOCSPTest.*"
            "HTTPSEVCRLSetTest.*"
            "HTTPSCRLSetTest.*"
            "*SpdyFramerTest.BasicCompression*"
    )
    out/Release/net_unittests "${excluded_net_unittests[@]}"

    out/Release/printing_unittests

    local excluded_sql_unittests=(
            "SQLiteFeaturesTest.FTS2"
    )
    out/Release/sql_unittests "${excluded_sql_unittests[@]}"
  else
    true
  fi
}

package() {
  cd "${srcdir}/chromium/out/Release/"

  install -Dm644 "${srcdir}/default" "${pkgdir}/etc/chromium-dev/default"
  install -Dm755 "${srcdir}/chromium-dev.sh" "${pkgdir}/usr/bin/chromium-dev"
  install -Dm755 chrome "${pkgdir}/usr/lib/chromium-dev/chromium"
  install -Dm4755 -o root -g root chrome_sandbox "${pkgdir}/usr/lib/chromium-dev/chromium-sandbox"
  install -Dm755 chromedriver "${pkgdir}/usr/lib/chromium-dev/chromiumdriver"
  install -Dm644 {chrome,chrome_100_percent,chrome_remote_desktop,content_resources,resources}.pak "${pkgdir}/usr/lib/chromium-dev"
#  install -Dm755 libffmpegsumo.so "${pkgdir}/usr/lib/chromium-dev/libffmpegsumo.so"
  install -d "${pkgdir}/usr/lib/chromium-dev/locales"
  for i in $(find locales -name "*.pak"); do  install -Dm644 "${i}" "${pkgdir}/usr/lib/chromium-dev/${i}"; done
  install -Dm644 "${srcdir}/chromium-dev-r1.desktop" "${pkgdir}/usr/share/applications/chromium-dev.desktop"
  install -Dm644 chrome.1 "${pkgdir}/usr/share/man/man1/chromium-dev.1"
  install -Dm644 "${srcdir}/chromium/LICENSE" "${pkgdir}/usr/share/licenses/chromium-dev/LICENSE"
  for _size in 16 22 24 32 48 128 256; do
    case ${_size} in
      16|32) branding="${srcdir}/chromium/chrome/app/theme/default_100_percent/chromium" ;;
      *) branding="${srcdir}/chromium/chrome/app/theme/chromium" ;;
    esac
    install -Dm644 "${branding}/product_logo_${_size}.png" "${pkgdir}/usr/share/icons/hicolor/${_size}x${_size}/apps/chromium-dev.png"
  done
  install -Dm755 libppGoogleNaClPluginChrome.so "${pkgdir}/usr/lib/chromium-dev/libppGoogleNaClPluginChrome.so"
  install -Dm755 nacl_helper{,_bootstrap} "${pkgdir}/usr/lib/chromium-dev"
  [ "${CARCH}" = "i686" ] && install -Dm755 nacl_irt_x86_32.nexe "${pkgdir}/usr/lib/chromium-dev/nacl_irt_x86_32.nexe"
  [ "${CARCH}" = "x86_64" ] && install -Dm755 nacl_irt_x86_64.nexe "${pkgdir}/usr/lib/chromium-dev/nacl_irt_x86_64.nexe"

  # Extract and install PepperFlash
  if [ "${_use_pepperflash}" = "1" ]; then
    msg2 "Adding PepperFlash"
    cd "${srcdir}"
    bsdtar -xf "google-chrome-unstable-${_rpm_ver}-${_rpm_build}.${_rpm_arch}.rpm" opt/google/chrome/PepperFlash
    install -d "${pkgdir}/usr/lib/chromium-dev/PepperFlash"
    for i in "${srcdir}/opt/google/chrome/PepperFlash/"*; do install -Dm644 "$i" "${pkgdir}/usr/lib/chromium-dev/PepperFlash"; done
    chmod 775 "${pkgdir}/usr/lib/chromium-dev/PepperFlash/libpepflashplayer.so"
    rm -fr "${srcdir}/opt"
  fi

  # Extract and install libpdf.so
  if [ "${_use_libpdf}" = "1" ]; then
    msg2 "Adding libpdf"
    cd "${srcdir}"
    bsdtar -xf "google-chrome-unstable-${_rpm_ver}-${_rpm_build}.${_rpm_arch}.rpm" opt/google/chrome/libpdf.so
    install -Dm755 "${srcdir}/opt/google/chrome/libpdf.so" "${pkgdir}/usr/lib/chromium-dev/libpdf.so"
    rm -rf "${srcdir}/opt"
  fi
}
