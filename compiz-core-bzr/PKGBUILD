# Submitter: Nathan Hulse <nat.hulse@gmail.com>
# Contributor: Xiao-Long Chen <chenxiaolong@cxl.epac.to>

pkgname=compiz-core-bzr
pkgver=3094
pkgrel=1
pkgdesc="Compiz core components from the master branch at Launchpad."
url="https://launchpad.net/compiz-core"
arch=('i686' 'x86_64')
license=('GPL' 'LGPL' 'MIT')
depends=('boost' 'xorg-server' 'libxext' 'libxdamage' 'libxcomposite' 'startup-notification' 'librsvg' 'libgl' 'dbus' 'mesa' 'libxslt' 'fuse' 'glib2' 'glibmm' 'libsm' 'libxml2' 'libxrender' 'libice' 'pango' 'libpng')
optdepends=(
  'ccsm-bzr: CompizConfig Settings Manager'
  'compizconfig-backend-gconf-bzr: Store settings in GNOME GConf database'
  'compiz-plugins-main-bzr: Main plugins'
  'compiz-plugins-extra-bzr: Extra plugins'
  'metacity: Metacity window decoration themes support (need to rebuild this package)'
  'gnome-control-center: GNOME keybindings support (need to rebuild this package)'
  'kdebase-lib: KDE window decoration support (need to rebuild this package)' 
  'automoc: KDE window decoration support (need to rebuild this package)'
)
makedepends=('bzr' 'intltool' 'cmake')
provides=('compiz-core')
conflicts=('compiz-core')
install='compiz-core-bzr.install'

# GTK window decorator support
GTKWINDOWDECORATOR="on"
# Metaciy theme support for GTK window decorator
METACITY="on"
# KDE window decorator support
KDEWINDOWDECORATOR="on"
# GConf backend support
GCONF="on"
# GSettings backend support
GSETTINGS="on"

_bzrtrunk=lp:compiz-core
_bzrmod=compiz-core

# Do some basic option validation in order to handle build failures a bit more elegantly.

if [ "${GTKWINDOWDECORATOR}" == "on" ]; then
  CHECKGCONF=`pacman -Q gconf 2>/dev/null`
  if [ ! "${CHECKGCONF}" ]; then
    msg "Currently, gconf must be installed in order to build gtk-window-decorator."
    exit 1
  fi
  if [ "${GCONF}" != "on" ]; then
    msg "Currently, GCONF must be 'on' in order to build gtk-window-decorator."
    exit 1
  fi
fi

if [ "${GSETTINGS}" == "on" ]; then
  if [ "${GCONF}" != "on" ]; then
    msg "Currently, GCONF must be 'on' in order to enable gsettings support."
    exit 1
  fi
fi

build() {
  cd "$srcdir"

  msg "Connecting to Launchpad..."
  if [[ -d "$_bzrmod" ]]; then
    cd "$_bzrmod" && bzr pull "$_bzrtrunk" -r "$pkgver"
  else
    bzr branch "$_bzrtrunk" "$_bzrmod" -q -r "$pkgver"
  fi
  msg "Bazaar checkout done or server timeout."

  rm -rf "$srcdir/$_bzrmod-build"
  msg "Creating build directory..."
  cp -r "$srcdir/$_bzrmod" "$srcdir/$_bzrmod-build"
  mkdir "$srcdir/$_bzrmod-build"/build
  cd "$srcdir/$_bzrmod-build/build"

  msg "Running cmake..." 
  cmake .. \
    -DCMAKE_INSTALL_PREFIX="/usr" \
    -DCOMPIZ_DISABLE_SCHEMAS_INSTALL=On \
    -DCOMPIZ_BUILD_WITH_RPATH=FALSE \
    -DCOMPIZ_PACKAGING_ENABLED=TRUE \
    -DBUILD_GTK="${GTKWINDOWDECORATOR}" \
    -DBUILD_METACITY="${METACITY}" \
    -DBUILD_KDE4="${KDEWINDOWDECORATOR}" \
    -DUSE_GCONF="${GCONF}" \
    -DUSE_GSETTINGS="${GSETTINGS}" \
    -DCOMPIZ_BUILD_TESTING=Off \
    -DCOMPIZ_DEFAULT_PLUGINS="composite,opengl,decor,resize,place,move" \
    -DCOMPIZ_DISABLE_PLUGIN_FADE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_SCREENSHOT=Off \
    -DCOMPIZ_DISABLE_PLUGIN_OBS=Off \
    -DCOMPIZ_DISABLE_PLUGIN_DECOR=Off \
    -DCOMPIZ_DISABLE_PLUGIN_SCALE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_RESIZE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_CLONE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_WATER=Off \
    -DCOMPIZ_DISABLE_PLUGIN_ANNOTATE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_COMMANDS=Off \
    -DCOMPIZ_DISABLE_PLUGIN_BLUR=Off \
    -DCOMPIZ_DISABLE_PLUGIN_CUBE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_COMPOSITE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_COPYTEX=Off \
    -DCOMPIZ_DISABLE_PLUGIN_GNOMECOMPAT=Off \
    -DCOMPIZ_DISABLE_PLUGIN_OPENGL=Off \
    -DCOMPIZ_DISABLE_PLUGIN_KDE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_REGEX=Off \
    -DCOMPIZ_DISABLE_PLUGIN_COMPIZTOOLBOX=Off \
    -DCOMPIZ_DISABLE_PLUGIN_SWITCHER=Off \
    -DCOMPIZ_DISABLE_PLUGIN_INOTIFY=Off \
    -DCOMPIZ_DISABLE_PLUGIN_ROTATE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_PLACE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_MOVE=Off \
    -DCOMPIZ_DISABLE_PLUGIN_WOBBLY=Off \
    -DCOMPIZ_DISABLE_PLUGIN_IMGPNG=Off \
    -DCOMPIZ_DISABLE_PLUGIN_DBUS=Off \
    -DCOMPIZ_DISABLE_PLUGIN_IMGSVG=Off 
  make
}

package() {
  
  cd "$srcdir/$_bzrmod-build/build"
  make DESTDIR="${pkgdir}" install
  
  # Stupid findcompiz_install needs COMPIZ_DESTDIR and install needs DESTDIR
  # make findcompiz_install
  CMAKE_DIR=$(cmake --system-information | grep '^CMAKE_ROOT' | awk -F\" '{print $2}')
  install -dm755 "${pkgdir}${CMAKE_DIR}/Modules/"
  install -m644 ../cmake/FindCompiz.cmake "${pkgdir}${CMAKE_DIR}/Modules/"	

  # Add documentation
  install -dm755 "${pkgdir}/usr/share/doc/compiz-core/"
  install ../{AUTHORS,NEWS,README,TODO} "${pkgdir}/usr/share/doc/compiz-core/"

  # Amend XDG .desktop file to load the compizconfig plugin with compiz
  sed -i 's/Exec\=compiz/Exec\=compiz ccp/' "${pkgdir}/usr/share/applications/compiz.desktop"

  # Merge the gconf schema files
  if [ -d "${pkgdir}/usr/share/gconf/schemas" ]; then    
    gconf-merge-schema "${pkgdir}/usr/share/gconf/schemas/compiz-core.schemas.in" "{$pkgdir}"/usr/share/gconf/schemas/*.schemas
    sed -i '/<schemalist\/>/d' "${pkgdir}/usr/share/gconf/schemas/compiz-core.schemas.in"
    rm -f "${pkgdir}"/usr/share/gconf/schemas/*.schemas
    mv "${pkgdir}/usr/share/gconf/schemas/compiz-core.schemas.in" "${pkgdir}/usr/share/gconf/schemas/compiz-core.schemas"
  fi

  # Add the pesky gsettings schema files manually
  ls generated | grep -qm1 .gschema.xml
  if [ $? -eq 0 ]; then
    install -dm755 "${pkgdir}/usr/share/glib-2.0/schemas/" 
    install -m644 generated/*.gschema.xml "${pkgdir}/usr/share/glib-2.0/schemas/" 
  fi  
}
