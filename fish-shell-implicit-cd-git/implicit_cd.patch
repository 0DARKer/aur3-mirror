diff --git a/complete.cpp b/complete.cpp
index 4a9036e..25a8635 100644
--- a/complete.cpp
+++ b/complete.cpp
@@ -1141,6 +1141,37 @@ void completer_t::complete_cmd( const wcstring &str_cmd, bool use_function, bool
 		}
 
 	}
+	if( use_builtin || (use_function && function_exists( L"cd") ) )
+	{
+		/*
+		  Tab complete implicit cd for directories in CDPATH
+		*/
+		wcstring path = cdpath.c_str();
+		wcstokenizer tokenizer(path, ARRAY_SEP_STR);
+		wcstring base_path;
+
+		const wchar_t *cmd = str_cmd.c_str();
+		wchar_t *state;
+		if( cmd[0] != L'/' && ( wcsncmp( cmd, L"./", 2 )!=0) )
+		{
+			while (tokenizer.next(base_path))
+			{
+				if (base_path.empty())
+					continue;
+
+				/* Make sure the base path ends with a slash */
+				if (base_path.at(base_path.size() - 1) != L'/')
+					base_path.push_back(L'/');
+
+				wcstring nxt_completion = base_path;
+				nxt_completion.append(str_cmd);
+
+				expand_string(nxt_completion,
+							  this->completions,
+							  ACCEPT_INCOMPLETE | DIRECTORIES_ONLY );
+			}
+		}
+	}
 }
 
 
diff --git a/path.cpp b/path.cpp
index 2ba524e..61f31b9 100644
--- a/path.cpp
+++ b/path.cpp
@@ -303,16 +303,7 @@ bool path_can_be_implicit_cd(const wcstring &path, wcstring *out_path, const wch
     wcstring exp_path = path;
     expand_tilde(exp_path);
     
-    bool result = false;
-    if (string_prefixes_string(L"/", exp_path) ||
-        string_prefixes_string(L"./", exp_path) ||
-        string_prefixes_string(L"../", exp_path) ||
-        exp_path == L"..")
-    {
-        /* These paths can be implicit cd, so see if you cd to the path. Note that a single period cannot (that's used for sourcing files anyways) */
-        result = path_get_cdpath(exp_path, out_path, wd, vars);
-    }
-    return result;
+    return path_get_cdpath(exp_path, out_path, wd, vars);
 }
 
 bool path_get_config(wcstring &path)
