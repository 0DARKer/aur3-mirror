1c1
< #!/usr/bin/python
---
> #!/usr/bin/python2
7,8d6
< __minimum_python_version__ = (2, 5, 1)
< __maximum_python_version__ = (2, 6, 2)
16,35c14,33
<   2008/05/02: continue
<   2008/05/03: continue
<   2008/06/02: streams
<   2008/10/19: refactor, grep & extract functionality
<   2008/10/20: reference
<   2008/10/21: cleanup
<   2008/11/12: V0.3 dictionary parser
<   2008/11/13: option elements
<   2008/11/14: continue
<   2009/05/05: added /ASCIIHexDecode support (thanks Justin Prosco)
<   2009/05/11: V0.3.1 updated usage, added --verbose and --extract
<   2009/07/16: V0.3.2 Added Canonicalize (thanks Justin Prosco)
<   2009/07/18: bugfix EqualCanonical
<   2009/07/24: V0.3.3 Added --hash option
<   2009/07/25: EqualCanonical for option --type, added option --nocanonicalizedoutput
<   2009/07/28: V0.3.4 Added ASCII85Decode support
<   2009/08/01: V0.3.5 Updated ASCIIHexDecode to support whitespace obfuscation
<   2009/08/30: V0.3.6 TestPythonVersion
<   2010/01/08: V0.3.7 Added RLE and LZW support (thanks pARODY); added dump option
<   2010/01/09: Fixed parsing of incomplete startxref
---
> 2008/05/02: continue
> 2008/05/03: continue
> 2008/06/02: streams
> 2008/10/19: refactor, grep & extract functionality
> 2008/10/20: reference
> 2008/10/21: cleanup
> 2008/11/12: V0.3 dictionary parser
> 2008/11/13: option elements
> 2008/11/14: continue
> 2009/05/05: added /ASCIIHexDecode support (thanks Justin Prosco)
> 2009/05/11: V0.3.1 updated usage, added --verbose and --extract
> 2009/07/16: V0.3.2 Added Canonicalize (thanks Justin Prosco)
> 2009/07/18: bugfix EqualCanonical
> 2009/07/24: V0.3.3 Added --hash option
> 2009/07/25: EqualCanonical for option --type, added option --nocanonicalizedoutput
> 2009/07/28: V0.3.4 Added ASCII85Decode support
> 2009/08/01: V0.3.5 Updated ASCIIHexDecode to support whitespace obfuscation
> 2009/08/30: V0.3.6 TestPythonVersion
> 2010/01/08: V0.3.7 Added RLE and LZW support (thanks pARODY); added dump option
> 2010/01/09: Fixed parsing of incomplete startxref
38,41c36,39
<   - handle printf todo
<   - check 'real raw' option
<   - fix PrettyPrint
<   - support for JS hex string EC61C64349DB8D88AF0523C4C06E0F4D.pdf.vir
---
> - handle printf todo
> - check 'real raw' option
> - fix PrettyPrint
> - support for JS hex string EC61C64349DB8D88AF0523C4C06E0F4D.pdf.vir
599,618c597,616
<   import struct
<   n = b = 0
<   out = ''
<   for c in data:
<     if '!' <= c and c <= 'u':
<       n += 1
<       b = b*85+(ord(c)-33)
<       if n == 5:
<         out += struct.pack('>L',b)
<         n = b = 0
<     elif c == 'z':
<       assert n == 0
<       out += '\0\0\0\0'
<     elif c == '~':
<       if n:
<         for _ in range(5-n):
<           b = b*85+84
<         out += struct.pack('>L',b)[:n-1]
<       break
<   return out
---
>     import struct
>     n = b = 0
>     out = ''
>     for c in data:
>         if '!' <= c and c <= 'u':
>             n += 1
>             b = b * 85 + (ord(c) - 33)
>             if n == 5:
>                 out += struct.pack('>L',b)
>                 n = b = 0
> 	elif c == 'z':
>             assert n == 0
>             out += '\0\0\0\0'
>         elif c == '~':
>             if n:
>                 for _ in range(5 - n):
>                     b = b * 85 + 84
>                 out += struct.pack('>L',b)[:n - 1]
>             break
>     return out
878,895d875
< def TestPythonVersion(enforceMaximumVersion=False, enforceMinimumVersion=False):
<     if sys.version_info[0:3] > __maximum_python_version__:
<         if enforceMaximumVersion:
<             print 'This program does not work with this version of Python (%d.%d.%d)' % sys.version_info[0:3]
<             print 'Please use Python version %d.%d.%d' % __maximum_python_version__
<             sys.exit()
<         else:
<             print 'This program has not been tested with this version of Python (%d.%d.%d)' % sys.version_info[0:3]
<             print 'Should you encounter problems, please use Python version %d.%d.%d' % __maximum_python_version__
<     if sys.version_info[0:3] < __minimum_python_version__:
<         if enforceMinimumVersion:
<             print 'This program does not work with this version of Python (%d.%d.%d)' % sys.version_info[0:3]
<             print 'Please use Python version %d.%d.%d' % __maximum_python_version__
<             sys.exit()
<         else:
<             print 'This program has not been tested with this version of Python (%d.%d.%d)' % sys.version_info[0:3]
<             print 'Should you encounter problems, please use Python version %d.%d.%d' % __maximum_python_version__
< 
897d876
<     TestPythonVersion(enforceMaximumVersion=True)
