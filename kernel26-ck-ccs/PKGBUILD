# Maintainer: Jamie Nguyen <jamie tomoyolinux co uk>
# Contributer: Tobias Powalowski <tpowa@archlinux.org>
# Contributer: Thomas Baechler <thomas@archlinux.org>

pkgname="kernel26-ck-ccs"
# AUR does not support split packages
true && pkgname=('kernel26-ck-ccs' 'kernel26-ck-ccs-headers')
_kernelname=${pkgname#kernel26}
_basekernel=2.6.38
pkgver=${_basekernel}.7
pkgrel=1
url="http://www.kernel.org/"
arch=('i686' 'x86_64')
license=('GPL2')
options=('!strip')
_ccspatchver=1.8.1-20110511
_ccstoolsver=1.8.1.20110511
_ckpatchver=3
_ckpatchname="${_basekernel}-ck${_ckpatchver}-broken-out.tar.bz2"
_bfspatchname="2.6.38.6-sched-bfs-404.patch"
_url="http://www.kernel.org/pub/linux/kernel/v2.6"
_url_ccs="http://sourceforge.jp/frs/redir.php?f=/tomoyo/49684"
_url_ck="http://www.kernel.org/pub/linux/kernel/people/ck/patches/2.6"
source=("${_url}/linux-${_basekernel}.tar.bz2"
        "${_url}/patch-${pkgver}.bz2"
        "${_url_ccs}/ccs-patch-${_ccspatchver}.tar.gz"
        "${_url_ck}/${_basekernel}/${_basekernel}-ck${_ckpatchver}/${_ckpatchname}"
        "ccs-patch-2.6.38.diff"
        "archlogo.patch"
        "fix-i915.patch"
        "i915-pipeline.patch"
        "http://ck.kolivas.org/patches/bfs/2.6.38/${_bfspatchname}"
        # the main kernel config files
        "config" "config.x86_64"
        # standard config files for mkinitcpio ramdisk
        "${pkgname}.preset")
noextract=(ccs-patch-${_ccspatchver}.tar.gz)

build() {
  cd "${srcdir}/linux-${_basekernel}"

  if [[ "${_basekernel}" != "${pkgver}" ]]; then
    msg "Patching source with upstream patch..."
    patch -Np1 -i "${srcdir}/patch-${pkgver}" || return 1
  fi

  msg "Patching source with Arch Linux logos..."
  patch -Np1 -i "${srcdir}/archlogo.patch" || return 1

  msg "Patching source with Arch Linux fixes..."
  patch -Np1 -i "${srcdir}/fix-i915.patch" || return 1
  patch -Np1 -i "${srcdir}/i915-pipeline.patch" || return 1

  msg "Patching source with the ck${_ckpatchver} patch..."
  sed -i -re "s/^(.EXTRAVERSION).*$/\1 = /" \
    "${srcdir}/patches/ck${_ckpatchver}-version.patch"
  sed -i -e "s#2.6.38.2-sched-bfs-400.patch#../${_bfspatchname}#g" \
    "${srcdir}/patches/series"
  while read line; do
    patch -Np1 -i "${srcdir}/patches/${line}" || return 1
  done < "${srcdir}/patches/series"

  msg "Unpacking TOMOYO Linux 1.8.x into kernel source..."
  tar -xzf "${srcdir}/ccs-patch-${_ccspatchver}.tar.gz"

  msg "Patching source with TOMOYO Linux 1.8.x patch..."
  patch -Np1 -i "${srcdir}/ccs-patch-${_basekernel}.diff"

  if [ "${CARCH}" = "x86_64" ]; then
    cat ../config.x86_64 >./.config
  else
    cat ../config >./.config
  fi

  if [ "${_kernelname}" != "" ]; then
    sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
  fi

  # remove the extraversion from Makefile
  # this ensures our kernel version is always 2.6.XX-ARCH
  # this way, minor kernel updates will not break external modules
  sed -i 's|^EXTRAVERSION = .*$|EXTRAVERSION = |g' Makefile

  # get kernel version
  make prepare
  # load configuration
  # Configure the kernel. Replace the line below with one of your choice.
  #make menuconfig # CLI menu for configuration
  #make nconfig # new CLI menu for configuration
  #make xconfig # X-based configuration
  #make oldconfig # using old config from previous kernel version
  # ... or manually edit .config
  ####################
  # stop here
  # this is useful to configure the kernel
  #msg "Stopping build"
  #return 1
  ####################
  yes "" | make config
  # build!
  make ${MAKEFLAGS} bzImage modules
}

package_kernel26-ck-ccs() {
  pkgdesc="The Linux Kernel patched with ck/bfs and TOMOYO 1.8.x"
  backup=(etc/mkinitcpio.d/${pkgname}.preset)
  conflicts=("ccs-tools<${_ccstoolsver}")
  depends=('coreutils' 'linux-firmware' 'module-init-tools>=3.12-2' 'mkinitcpio>=0.6.8-2')
  # pwc, ieee80211 and hostap-driver26 modules are included in kernel26 now
  # nforce package support was abandoned by nvidia, kernel modules should cover everything now.
  # kernel24 support is dropped since glibc24
  replaces=('kernel24' 'kernel24-scsi' 'kernel26-scsi'
            'alsa-driver' 'ieee80211' 'hostap-driver26'
            'pwc' 'nforce' 'squashfs' 'unionfs' 'ivtv'
            'zd1211' 'kvm-modules' 'iwlwifi' 'rt2x00-cvs'
            'gspcav1' 'atl2' 'wlan-ng26' 'rt2500' 'nouveau-drm')
  install=${pkgname}.install
  optdepends=("ccs-tools>=${_ccstoolsver}: to manage TOMOYO Linux policy"
              'crda: to set the correct wireless channels of your country'
              'nvidia-ccs: NVIDIA drivers for kernel26-ck-ccs')

  KARCH=x86
  cd ${srcdir}/linux-$_basekernel
  # get kernel version
  _kernver="$(make kernelrelease)"
  mkdir -p ${pkgdir}/{lib/modules,lib/firmware,boot}
  make INSTALL_MOD_PATH=${pkgdir} modules_install
  cp System.map ${pkgdir}/boot/System.map26${_kernelname}
  cp arch/$KARCH/boot/bzImage ${pkgdir}/boot/vmlinuz26${_kernelname}
  #  # add vmlinux
  install -m644 -D vmlinux ${pkgdir}/usr/src/linux-${_kernver}/vmlinux

  # install fallback mkinitcpio.conf file and preset file for kernel
  install -m644 -D ${srcdir}/${pkgname}.preset ${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset
  # set correct depmod command for install
  sed \
    -e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/g" \
    -e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
    -i $startdir/${pkgname}.install
  sed \
    -e "s|source .*|source /etc/mkinitcpio.d/kernel26${_kernelname}.kver|g" \
    -e "s|default_image=.*|default_image=\"/boot/${pkgname}.img\"|g" \
    -e "s|fallback_image=.*|fallback_image=\"/boot/${pkgname}-fallback.img\"|g" \
    -i ${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset

  echo -e "# DO NOT EDIT THIS FILE\nALL_kver='${_kernver}'" > ${pkgdir}/etc/mkinitcpio.d/${pkgname}.kver
  # remove build and source links
  rm -f ${pkgdir}/lib/modules/${_kernver}/{source,build}
  # remove the firmware
  rm -rf ${pkgdir}/lib/firmware
  # gzip -9 all modules to safe 100MB of space
  find "$pkgdir" -name '*.ko' -exec gzip -9 {} \;
}

package_kernel26-ck-ccs-headers() {
  pkgdesc="Header files and scripts for building modules for kernel26-ck-ccs"
  mkdir -p ${pkgdir}/lib/modules/${_kernver}
  cd ${pkgdir}/lib/modules/${_kernver}
  ln -sf ../../../usr/src/linux-${_kernver} build
  cd ${srcdir}/linux-$_basekernel
  install -D -m644 Makefile \
    ${pkgdir}/usr/src/linux-${_kernver}/Makefile
  install -D -m644 kernel/Makefile \
    ${pkgdir}/usr/src/linux-${_kernver}/kernel/Makefile
  install -D -m644 .config \
    ${pkgdir}/usr/src/linux-${_kernver}/.config
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include

  for i in acpi asm-generic config crypto drm generated linux math-emu \
    media net pcmcia scsi sound trace video xen; do
    cp -a include/$i ${pkgdir}/usr/src/linux-${_kernver}/include/
  done

  # copy arch includes for external modules
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/x86
  cp -a arch/x86/include ${pkgdir}/usr/src/linux-${_kernver}/arch/x86/

  # copy files necessary for later builds, like nvidia and vmware
  cp Module.symvers ${pkgdir}/usr/src/linux-${_kernver}
  cp -a scripts ${pkgdir}/usr/src/linux-${_kernver}
  # fix permissions on scripts dir
  chmod og-w -R ${pkgdir}/usr/src/linux-${_kernver}/scripts
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/.tmp_versions

  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/kernel

  cp arch/$KARCH/Makefile ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/
  if [ "$CARCH" = "i686" ]; then
    cp arch/$KARCH/Makefile_32.cpu ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/
  fi
  cp arch/$KARCH/kernel/asm-offsets.s ${pkgdir}/usr/src/linux-${_kernver}/arch/$KARCH/kernel/

  # add headers for lirc package
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video
  cp drivers/media/video/*.h  ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/
  for i in bt8xx cpia2 cx25840 cx88 em28xx et61x251 pwc saa7134 sn9c102; do
   mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/$i
   cp -a drivers/media/video/$i/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/video/$i
  done
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/staging/usbvideo/
  cp -a drivers/staging/usbvideo/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/staging/usbvideo/
  # add docbook makefile
  install -D -m644 Documentation/DocBook/Makefile \
    ${pkgdir}/usr/src/linux-${_kernver}/Documentation/DocBook/Makefile
  # add dm headers
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/md
  cp drivers/md/*.h  ${pkgdir}/usr/src/linux-${_kernver}/drivers/md
  # add inotify.h
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include/linux
  cp include/linux/inotify.h ${pkgdir}/usr/src/linux-${_kernver}/include/linux/
  # add wireless headers
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/
  cp net/mac80211/*.h ${pkgdir}/usr/src/linux-${_kernver}/net/mac80211/
  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/9912
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core
  cp drivers/media/dvb/dvb-core/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-core/
  # add dvb headers for external modules
  # in reference to:
  # http://bugs.archlinux.org/task/11194
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/
  cp include/config/dvb/*.h ${pkgdir}/usr/src/linux-${_kernver}/include/config/dvb/
  # add dvb headers for http://mcentral.de/hg/~mrec/em28xx-new
  # in reference to:
  # http://bugs.archlinux.org/task/13146
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
  cp drivers/media/dvb/frontends/lgdt330x.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
  cp drivers/media/video/msp3400-driver.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
  # add dvb headers  
  # in reference to:
  # http://bugs.archlinux.org/task/20402
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-usb
  cp drivers/media/dvb/dvb-usb/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/dvb-usb/
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends
  cp drivers/media/dvb/frontends/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/dvb/frontends/
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/common/tuners
  cp drivers/media/common/tuners/*.h ${pkgdir}/usr/src/linux-${_kernver}/drivers/media/common/tuners/
  # add xfs and shmem for aufs building
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/fs/xfs
  mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/mm
  cp fs/xfs/xfs_sb.h ${pkgdir}/usr/src/linux-${_kernver}/fs/xfs/xfs_sb.h
  # copy in Kconfig files
  for i in `find . -name "Kconfig*"`; do 
    mkdir -p ${pkgdir}/usr/src/linux-${_kernver}/`echo $i | sed 's|/Kconfig.*||'`
    cp $i ${pkgdir}/usr/src/linux-${_kernver}/$i
  done

  chown -R root.root ${pkgdir}/usr/src/linux-${_kernver}
  find ${pkgdir}/usr/src/linux-${_kernver} -type d -exec chmod 755 {} \;
  # strip scripts directory
  find ${pkgdir}/usr/src/linux-${_kernver}/scripts  -type f -perm -u+w 2>/dev/null | while read binary ; do
  case "$(file -bi "$binary")" in
    *application/x-sharedlib*) # Libraries (.so)
    /usr/bin/strip $STRIP_SHARED "$binary";;
    *application/x-archive*) # Libraries (.a)
    /usr/bin/strip $STRIP_STATIC "$binary";;
    *application/x-executable*) # Binaries
    /usr/bin/strip $STRIP_BINARIES "$binary";;
    esac 
  done 
  # remove unneeded architectures
  rm -rf ${pkgdir}/usr/src/linux-${_kernver}/arch/{alpha,arm,arm26,avr32,blackfin,cris,frv,h8300,ia64,m32r,m68k,m68knommu,mips,microblaze,mn10300,parisc,powerpc,ppc,s390,sh,sh64,sparc,sparc64,um,v850,xtensa}
}

# information for AUR
pkgdesc="The Linux Kernel patched with ck/bfs and TOMOYO 1.8.x"
depends=('coreutils' 'linux-firmware' 'module-init-tools>=3.12-2' 'mkinitcpio>=0.6.8-2')
sha256sums=('72f0cfaefb8dc86b219d5a742dd0375332627641ecbdf5badd3158e2127b9304'
            '9dfc8c909d16ebb28802a66f603c8d412bb138ede58b9f1588254d7b560e747c'
            'c8b04f3fd73165e2f1b70615de69d44f3ca3f36a7bd58293d52bc3e2baf3b585'
            '521aa0720e9c4b4e7d27ac1506adeeb01ed43cd1a6c5f90a7275e076c5539112'
            'f2c2d01b63f18df50c03a6bead3147e6066937de5a93226dee1a50490ee83377'
            '3c257d300ebd7c36893da54c1231999f9cb0f135c11ac7d3e483662407182a40'
            '9ccadbe3eb30bb283af3eb869c3a4bdb764628854811cc616a2e02e9ef398705'
            '515e8ed680b5f3e8d012def9137c358ee173ed1be225f7c7dff4b47310fc86c2'
            '079ef71690f2d9b37a4f3fb170883a7d8477a45eecc8af863607dbacd8bb2b6f'
            '6f703c09e24c29b81ab4bf68388c58ab8cab9d2d9afc38690230802ecbb9ea42'
            'fc36423a25c0ef838ffc985560a26d151f2cf67db69a0f8e5efbe374fd15b769'
            '6b6865544701485cfdb388927e4b732213f7ff239631cb3e5ec0a725b5a117eb')

# vim: set ts=2 sw=2 et:
