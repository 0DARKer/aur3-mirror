diff -Naur /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/abs.sh /usr/lib/yaourt/abs.sh
--- /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/abs.sh	2009-08-17 22:50:12.000000000 +0300
+++ /usr/lib/yaourt/abs.sh	2009-12-07 01:11:31.000000000 +0200
@@ -13,7 +13,7 @@
 #       VERSION:  1.0
 #===============================================================================
 
-# download package from repos or grab PKGBUILD from repos.archlinux.org and run makepkg
+# download package from repos or grab PKGBUILD from ABS and run makepkg
 install_from_abs(){
 if [ $NOCONFIRM -eq 0 -a $SYSUPGRADE -eq 1 ]; then
 	echo
@@ -39,53 +39,37 @@
 	title $(eval_gettext 'Install $PKG from sources')
 	failed=0
 
-	# Build From AUR [Community] ?
-	if [ -z "$repository" ]; then echo $(eval_gettext '$PKG was not found on abs'); manage_error 1 || continue; fi
-	#if [ "$repository" = "testing" ]; then
-	#       	repository="all"
-	#fi
-	
-	# Manage specific Community and Testing packages
-	if [ "$repository" = "community" ]; then 
-		# Grab link to download pkgbuild from AUR Community
-		[ "$MAJOR" != "getpkgbuild" ] && msg $(eval_gettext 'Searching Community AUR page for $PKG')
-		aurid=`findaurid "$PKG"`
-		if [ -z "$aurid" ]; then
-                        echo $(eval_gettext '$pkgname was not found on AUR')
-			manage_error 1 || continue
-		fi
-		[ "$MAJOR" != "getpkgbuild" ] && aurcomments $aurid $PKG
-		# Crapy Hack waiting for AUR to be up to date with new repos.archlinux.org
-		category=`wget -q "http://aur.archlinux.org/packages.php?ID=$aurid" -O - | grep 'community ::' | sed 's|<[^<]*>||g' | awk '{print $3}'`
-		if [ -z "$category" ]; then
-                        echo $(eval_gettext 'Link to subversion repository was not found on AUR page')
-			manage_error 1 || continue
-		fi
-		# EndofHack
-		url="$ABS_REPOS_URL/community/$category/$PKG/?root=community"
-	else
-		# Grab link to download pkgbuild from new repos.archlinux.org
-		source /etc/makepkg.conf
-		[ -z "$CARCH" ] && CARCH="i686"
-		wget -q "${ABS_REPOS_URL}/$PKG/repos/" -O - > "$YAOURTTMPDIR/page.tmp"
-		if [ $? -ne 0 ] || [ ! -s "$YAOURTTMPDIR/page.tmp" ]; then
-			echo $(eval_gettext '$PKG was not found on abs repos.archlinux.org'); manage_error 1 || continue
-		fi
-		repos=( `grep "name=.*i686" "$YAOURTTMPDIR/page.tmp" | awk -F "\"" '{print $2}'` )
-		# if package exists in testing branch and in current branch, select the right url
-		if [ ${#repos[@]} -gt 1 -a $USETESTING -eq 1 ]; then
-			url="$ABS_REPOS_URL/$PKG/repos/${repos[1]}/"
+	# Check for abs installed
+	if [ $ABSINSTALLED -eq 0 ]; then error $(eval_gettext 'abs package must be installed to build packages from Arch Build System (repos.archlinux.org).'); manage_error 1 || continue; fi
+
+	source /etc/makepkg.conf
+	source /etc/abs.conf
+	[ -z "$CARCH" ] && CARCH="i686"
+
+	# verify if $repository in $REPOS list (list of repositories supported by abs)
+	elementexists ${REPOS[@]} $repository
+	if [ $? -gt 0 ]; then error $(eval_gettext '$repository repository is not supported by ABS.'); manage_error 1 || continue; fi
+
+	if [ $UID -eq 0 ]; then
+		launchedasroot=1
+		if [ $ASROOT -eq 1 ]; then
+			warning $(eval_gettext 'Building package as root is a BAD idea. \nPlease run yaourt as a non-privileged user.')
+			sleep 2 
 		else
-			url="$ABS_REPOS_URL/$PKG/repos/${repos[0]}/"
+			error $(eval_gettext 'Building package as root is a BAD idea and can cause permanent, \ncatastrophic damage to your system. Please run yaourt as a non-privileged \nuser. If you wish to run as root, please use the --asroot option.'); return 1;
 		fi
+	else
+		launchedasroot=0
 	fi
 
-	# Download Files on SVN package page
-	wget -q "$url" -O "$YAOURTTMPDIR/page.tmp"
-	manage_error $? || continue
-	files=( `grep "name=.*href=\"/viewvc.cgi/" "$YAOURTTMPDIR/page.tmp" | awk -F "\"" '{print $2}'`)
-	if [ ${#files[@]} -eq 0 ]; then echo "No file found for $PKG"; manage_error 1 || continue; fi
-	echo
+	# Get latest version of PKGBUILD and other files from ABS
+	msg "Performing ABS sync for $repository/$PKG"
+	launch_with_su "abs $repository/$PKG" &> /dev/null
+	if [ $? -gt 0 ]; then error $(eval_gettext 'ABS sync for $repository/$PKG package failed.'); manage_error 1 || continue; fi
+
+	files=( `ls $ABSROOT/$repository/$PKG`)
+	if [ ${#files[@]} -eq 0 ]; then echo "No files found for $PKG"; manage_error 1 || continue; fi
+
 	if [ "$MAJOR" != "getpkgbuild" ]; then
 		msg $(eval_gettext 'Retrieving PKGBUILD and local sources...')
 		wdir="$YAOURTTMPDIR/abs-$PKG"
@@ -98,26 +82,14 @@
 
 	for file in ${files[@]}; do
 		echo -e "   ${COL_BLUE}-> ${NO_COLOR}${COL_BOLD}$(eval_gettext 'Downloading ${file} in build dir')${NO_COLOR}"
-		if [ "$repository" = "community" ]; then
-			eval $INENGLISH wget --tries=3 --waitretry=3 --no-check-certificate "$ABS_REPOS_URL/community/$category/$PKG/$file?root=community\&view=co" -O $file
-		else
-			eval $INENGLISH wget --tries=3 --waitretry=3 --no-check-certificate "${url}${file}?view=co" -O $file
-		fi
+		eval $INENGLISH cp $ABSROOT/$repository/$PKG/$file .
 	done
 
 	[ "$MAJOR" = "getpkgbuild" ] && return 0
 
-	if [ $UID -eq 0 ]; then
-		runasroot=1
-        	warning $(eval_gettext 'Building package as root is dangerous.\n Please run yaourt as a non-privileged user.')
-		sleep 2
-	else
-		runasroot=0
-	fi
-	
 	readPKGBUILD
 	if [ -z "$pkgname" ]; then
-       		echo $(eval_gettext 'Unable to read PKGBUILD for $PKG')
+		echo $(eval_gettext 'Unable to read PKGBUILD for $PKG')
 		manage_error 1 || continue
 	fi
 	
@@ -190,44 +162,14 @@
 		aurid=`findaurid $pkgname`
 		vote_package "$pkgname" "$aurid"
 	done
-
 fi
-
-}
-
-
-#Downgrade all packages marked as "newer than extra/core/etc..."
-sysdowngrade()
-{
-	if [ $DOWNGRADE -eq 1 ]; then
-		msg $(eval_gettext 'Downgrading packages')
-		title $(eval_gettext 'Downgrading packages')
-		downgradelist=( `LC_ALL=C $PACMANBIN -Qu | grep "is newer than" | awk -F ":" '{print $2}'` )    
-		if [ ${#downgradelist[@]} -gt 0 ]; then
-			prepare_orphan_list
-			SYSUPGRADE=2
-			install_from_abs ${downgradelist[*]}
-			show_new_orphans
-		else
-			echo $(eval_gettext 'No package to downgrade')
-		fi
-		die
-	fi
 }
 
-
 # Searching for packages to update, buid from sources if necessary
 sysupgrade()
 {
 	prepare_orphan_list
-	if [ $SUDOINSTALLED -eq 1 ] && sudo -l | grep "\(pacman\ *$\|ALL\)" 1>/dev/null; then
-		sudo $PACMANBIN --sync --sysupgrade --print-uris $NEEDED $IGNOREPKG 1>$YAOURTTMPDIR/sysupgrade
-	elif [ "$UID" -eq 0 ]; then
-		$PACMANBIN --sync --sysupgrade --print-uris $NEEDED $IGNOREPKG 1> $YAOURTTMPDIR/sysupgrade
-	else
-		launch_with_su "$PACMANBIN --sync --sysupgrade --print-uris $NEEDED $IGNOREPKG 1> $YAOURTTMPDIR/sysupgrade"
-	fi
-	
+	$PACMANBIN --sync --sysupgrade --print-uris $DOWNGRADE $NEEDED $IGNOREPKG 1>$YAOURTTMPDIR/sysupgrade
 	if [ $? -ne 0 ]; then
 		cat $YAOURTTMPDIR/sysupgrade
 	fi
@@ -269,7 +211,7 @@
 		done
 		if [ ${#packagesfromsource[@]} -gt 0 ]; then
 			msg $(eval_gettext 'Packages to build from sources:')
-			eval $PACMANBIN --query --sysupgrade $NEEDED $IGNOREPKG
+			eval $PACMANBIN --query --sysupgrade $DOWNGRADE $NEEDED $IGNOREPKG
 			# Show package list before building
 			if [ $NOCONFIRM -eq 0 ]; then
 				echo -n $(eval_gettext 'Proceed with compilation and installation ? ')$(yes_no 1)
@@ -321,7 +263,7 @@
 			while [ "$CONTINUE_INSTALLING" = "V" -o "$CONTINUE_INSTALLING" = "C" ]; do
 				echo
 				echo -e "${COL_ARROW}==>  ${NO_COLOR}${COL_BOLD}"$(eval_gettext 'Continue installing ''$PKG''? ') $(yes_no 1)"${NO_COLOR}" >&2
-				prompt $(eval_gettext '[V]iew package detail   [M]anualy select packages')
+				prompt $(eval_gettext '[V]iew package detail   [M]anually select packages')
 				CONTINUE_INSTALLING=$(userinput "YNVM")
 				echo
 				if [ "$CONTINUE_INSTALLING" = "V" ]; then
@@ -407,18 +349,18 @@
 			lversion=`echo $line| awk -F '##' '{print $3}'`
 			rversion=`echo $line| awk -F '##' '{print $4}'`
 			if [ "$1" = "manual" ]; then
-                        	echo -e "\n$repository/$pkgname $lversion -> $rversion" >> $YAOURTTMPDIR/sysuplist
+				echo -e "\n$repository/$pkgname $lversion -> $rversion" >> $YAOURTTMPDIR/sysuplist
 				echo "#    `pkgdescription $pkgname`" >> $YAOURTTMPDIR/sysuplist
 			else
-                        	echo -e `colorizeoutputline $repository/$NO_COLOR$COL_BOLD$pkgname`$NO_COLOR" $COL_GREEN$lversion$NO_COLOR -> $COL_RED$rversion$NO_COLOR"
+				echo -e `colorizeoutputline $repository/$NO_COLOR$COL_BOLD$pkgname`$NO_COLOR" $COL_GREEN$lversion$NO_COLOR -> $COL_RED$rversion$NO_COLOR"
 				[ "$1" = "full" ] && echo -e "    $COL_ITALIQUE`pkgdescription $pkgname`$NO_COLOR"
 			fi
 		done
 	fi
 
-        # show new package
-        if [ ${#newpkgs[@]} -gt 0 ]; then
-        	echo
+	# show new package
+	if [ ${#newpkgs[@]} -gt 0 ]; then
+		echo
 		declare newpkgs=`echo -e ${newpkgs[*]} | tr ' ' '\n' | sort`
 		if [ "$1" = "manual" ]; then
 			echo -e "\n$separator\n# $(eval_gettext 'New package :')\n$separator" >> $YAOURTTMPDIR/sysuplist
@@ -433,7 +375,7 @@
 			requiredbypkg=$(eval_gettext 'not found')
 			for pkg in ${pkg_repository_name_ver[@]%\#\#*}; do
 				if [ "$pkg" != "$pkgname" ] && `LC_ALL=C pacman -Si $pkg |grep -m1 -A15 "^Repository"| sed -e '1,/^Provides/d' -e '/^Optional\ Deps/,$d'\
-				       | grep -q "\ $pkgname[ >=<]"`; then
+				| grep -q "\ $pkgname[ >=<]"`; then
 					requiredbypkg=$pkg
 					break
 				fi
@@ -603,6 +545,7 @@
 	fi
 	return $failed
 }
+
 build_package(){
 	failed=0
 	# Test PKGBUILD for last svn/cvs/... version
@@ -683,8 +626,9 @@
 	mkpkg_opt="$confirmation"
 	[ $NODEPS -eq 1 ] && mkpkg_opt="$mkpkg_opt -d"
 	[ $IGNOREARCH -eq 1 ] && mkpkg_opt="$mkpkg_opt -A"
+	[ $SKIPINTEG -eq 1 ] && mkpkg_opt="$mkpkg_opt --skipinteg"
 	[ $HOLDVER -eq 1 ] && mkpkg_opt="$mkpkg_opt --holdver"
-	if [ $runasroot -eq 1 ]; then 
+	if [ $launchedasroot -eq 1 ]; then
 		pacman_queuing; eval $INENGLISH PKGDEST=`pwd` nice -n 15 makepkg $mkpkg_opt --asroot --syncdeps --force -p ./PKGBUILD
 	else
 		if [ $SUDOINSTALLED -eq 1 ]; then
@@ -706,6 +650,7 @@
 	fi
 	return $failed
 }
+
 find_pkgbuild_deps (){
 	unset DEPS DEP_AUR DEP_ABS
 	readPKGBUILD
@@ -732,5 +677,4 @@
 		echo -e " - ${COL_YELLOW}$dep${NO_COLOR}" $(eval_gettext '(building from AUR)') 
 		DEP_AUR[${#DEP_AUR[@]}]=$dep 
 	done
-
 }
diff -Naur /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/alpm_backup.sh /usr/lib/yaourt/alpm_backup.sh
--- /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/alpm_backup.sh	2009-08-17 22:50:12.000000000 +0300
+++ /usr/lib/yaourt/alpm_backup.sh	2009-12-07 01:12:37.000000000 +0200
@@ -13,7 +13,6 @@
 #       VERSION:  1.0
 #===============================================================================
 
-
 # save alpm database (local directory only) in a tar.bz2 file
 save_alpm_db(){
 	msg $(eval_gettext 'Saving pacman database in $savedir')
@@ -67,17 +66,16 @@
 	read -e 
 	[ "$REPLY" != "$(eval_gettext 'yes')" ] && return 0
 	msg $(eval_gettext 'Deleting pacman DB')
-        launch_with_su "mv $PACMANROOT/local/ $YAOURTTMPDIR/alpmdb$$"
+	launch_with_su "mv $PACMANROOT/local/ $YAOURTTMPDIR/alpmdb$$"
 	msg $(eval_gettext 'Copying backup')
 	launch_with_su "mv $backupdir/local/ $PACMANROOT/local"
 	msg $(eval_gettext 'Testing the new database')
 	eval $PACMANBIN --query | LC_ALL=C sort > "$YAOURTTMPDIR/backup/nowdb"
 	if [ `diff "$YAOURTTMPDIR/backup/backupdb" "$YAOURTTMPDIR/backup/nowdb" | wc -l` -gt 0 ]; then
-	       warning $(eval_gettext 'Your backup is not successfully restored')
+		warning $(eval_gettext 'Your backup is not successfully restored')
 	else
-	       msg $(eval_gettext 'Your backup has been successfully restored')
-	       echo "`$PACMANBIN -Q | wc -l` packages found"
+		msg $(eval_gettext 'Your backup has been successfully restored')
+		echo "`$PACMANBIN -Q | wc -l` packages found"
 	fi
 	echo $(eval_gettext '(old database is saved in $YAOURTTMPDIR/alpmdb$_pid)')
 }
-
diff -Naur /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/alpm_query.sh /usr/lib/yaourt/alpm_query.sh
--- /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/alpm_query.sh	2009-08-17 22:50:12.000000000 +0300
+++ /usr/lib/yaourt/alpm_query.sh	2009-12-07 01:14:17.000000000 +0200
@@ -13,7 +13,6 @@
 #       VERSION:  1.0
 #===============================================================================
 
-
 # search in sync db for packages wich depends on/conflicts whith/provides argument
 searchforpackageswhich(){
 	# repositories variable is set by pacman_conf.sh
@@ -54,7 +53,7 @@
 orphans=( `pacman -Qqdt` )
 if [ ${#orphans[@]} -eq 0 ]; then return 0; fi
 for orphan in ${orphans[@]}; do
-      	echo -e "${COL_YELLOW}${orphan} ${NO_COLOR}$(eval_gettext 'was installed as dependencies but are no longer required by any installed package')"
+	echo -e "${COL_YELLOW}${orphan} ${NO_COLOR}$(eval_gettext 'was installed as dependencies but are no longer required by any installed package')"
 done
 echo
 prompt $(eval_gettext 'Do you want to remove these packages (with -Rcs options) ? ') $(yes_no 2)
diff -Naur /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/alpm_stats.sh /usr/lib/yaourt/alpm_stats.sh
--- /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/alpm_stats.sh	2009-08-17 22:50:12.000000000 +0300
+++ /usr/lib/yaourt/alpm_stats.sh	2009-12-07 01:15:49.000000000 +0200
@@ -12,6 +12,7 @@
 #        AUTHOR:   Julien MISCHKOWITZ (wain@archlinux.fr)
 #       VERSION:  1.0
 #===============================================================================
+
 buildpackagelist()
 {
 	# get the repositories list in pacman.conf
@@ -29,13 +30,13 @@
 		local reponumber=0
 		for repo in ${repositories[@]}; do
 			if [ -d "$PACMANROOT/sync/$repo/$pkg" ]; then
-		       		repos_packages[$reponumber]=$((${repos_packages[$reponumber]}+1))
+				repos_packages[$reponumber]=$((${repos_packages[$reponumber]}+1))
 				found=1
 				break
 			fi
 			reponumber=$(($reponumber+1))
 		done
-        done
+	done
 	# Construction de la liste des paquets ignorés/noupgrade/holdpkg
 	ignorepkg=(`LC_ALL="C" pacman --debug 2>/dev/null | grep "^debug: config: IgnorePkg:" |awk '{print $4}'|uniq`)
 	holdpkg=(`LC_ALL="C" pacman --debug 2>/dev/null | grep "^debug: config: HoldPkg:" |awk '{print $4}'|uniq`)
@@ -78,7 +79,7 @@
 		if [ $nbcol -gt $NBCOLMAX ] ; then echo;nbcol=1;fi
 	done
 	pacman -Sl | awk '{print $2"-"$3}' | LC_ALL=C sort | uniq > $tmp_files/abs
-        pacman -Q | awk '{print $1"-"$2}' | LC_ALL=C sort > $tmp_files/installed
+	pacman -Q | awk '{print $1"-"$2}' | LC_ALL=C sort > $tmp_files/installed
 	echo -e " ${NO_COLOR}$(eval_gettext 'others')* ${COL_YELLOW}($(LC_ALL=C comm -2 -3 $tmp_files/installed $tmp_files/abs|wc -l))${NO_COLOR}"
 	echo
 	echo -e "${NO_COLOR}"*$(eval_gettext 'others')" $(eval_gettext 'are packages not up to date or installed from local\nbuild or AUR Unsupported')${NO_COLOR}"
@@ -129,4 +130,3 @@
 	fi
 	echo -e "${COL_GREEN}$(eval_gettext 'Space used by src downloaded in cache:') ${COL_YELLOW} $srcdestsize"
 }
-
diff -Naur /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/aur.sh /usr/lib/yaourt/aur.sh
--- /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/aur.sh	2009-08-17 22:50:12.000000000 +0300
+++ /usr/lib/yaourt/aur.sh	2009-12-07 01:17:38.000000000 +0200
@@ -17,14 +17,14 @@
 initjsoninfo(){
 unset jsoninfo
 jsoninfo=`wget -q -O - "http://aur.archlinux.org/rpc.php?type=info&arg=$(urlencode $1)"`
-if  echo $jsoninfo | grep -q '"No result found"' || [ -z "$jsoninfo" ]; then
+if echo $jsoninfo | grep -q '"No result found"' || [ -z "$jsoninfo" ]; then
 	return 1
 else
 	return 0
 fi
 }
 
-#Get value from json (in memory):  ID, Name, Version, Description, URL, URLPath, License, NumVotes, OutOfDate
+#Get value from json (in memory): ID, Name, Version, Description, URL, URLPath, License, NumVotes, OutOfDate
 parsejsoninfo(){
 	echo $jsoninfo | sed -e 's/^.*[{,]"'$1'":"//' -e 's/"[,}].*$//'
 }
@@ -46,7 +46,6 @@
 	return 1
 }
 
-
 # return 0 if package is on AUR Community else 1
 is_in_community(){
 	initjsoninfo $1 || return 1
@@ -78,8 +77,8 @@
 done
 readPKGBUILD
 if [ -z "$pkgname" ]; then
-       echo "Unable to read $PKG's PKGBUILD"
-       return 1
+	echo "Unable to read $PKG's PKGBUILD"
+	return 1
 fi
 echo "Repository	: AUR Unsupported"
 echo "Name		: $pkgname"
@@ -215,7 +214,6 @@
 			echo $pkgvote
 		fi
 	fi
-
 }
 
 # give to user all info to build and install Unsupported package from AUR
@@ -224,17 +222,22 @@
 	pkgdesc=
 	pkgver=
 	pkgrel=
-	runasroot=0
+	launchedasroot=0
 	failed=0
 	DEP_AUR=( )
 	local PKG="$1"
-	title $(eval_gettext 'Installing $PKG from AUR')
-	UID_ROOT=0
-	if [ "$UID" -eq "$UID_ROOT" ]
-	then
-		runasroot=1
-		warning $(eval_gettext 'Building unsupported package as root is dangerous.\n Please run yaourt as a non-privileged user.')
-		sleep 2
+	title $(eval_gettext 'Install $PKG from AUR')
+	msg "Building $PKG from AUR"
+	if [ $UID -eq 0 ]; then
+		launchedasroot=1
+		if [ $ASROOT -eq 1 ]; then
+			warning $(eval_gettext 'Building package as root is a BAD idea. \nPlease run yaourt as a non-privileged user.')
+			sleep 2 
+		else
+			error $(eval_gettext 'Building package as root is a BAD idea and can cause permanent, \ncatastrophic damage to your system. Please run yaourt as a non-privileged \nuser. If you wish to run as root, please use the --asroot option.'); return 1;
+		fi
+	else
+		launchedasroot=0
 	fi
 
 	wdir="$YAOURTTMPDIR/aur-$PKG"
@@ -248,7 +251,7 @@
 
 	# Initialize jsoninfo & exclude package moved into community repository	
 	initjsoninfo $PKG || { echo -e "${COL_YELLOW}"$(eval_gettext '$PKG not found on AUR')"${NO_COLOR}"; continue; }
-	
+
 	# grab comments and info from aur page
 	echo
 	aurid=$(parsejsoninfo ID)
@@ -362,7 +365,7 @@
 		done
 	fi
 
-	# compil PKGBUILD if dep's building not failed
+	# compile PKGBUILD if dep's building not failed
 	[ $failed -ne 1 ] && build_package
 	retval=$?
 	if [ $retval -eq 1 ]; then
@@ -405,7 +408,7 @@
 		rrel=${aur_version#*-}
 		lver=${local_version%-*}
 		rver=${aur_version%-*}
-		if  [ "$rver" = "$lver" ] &&  `is_x_gt_y $rrel $lrel` || `is_x_gt_y $rver $lver`; then
+		if [ "$rver" = "$lver" ] &&  `is_x_gt_y $rrel $lrel` || `is_x_gt_y $rver $lver`; then
 			echo -en "${COL_GREEN}${local_version} => ${aur_version}${NO_COLOR}"
 			if grep "^${PKG}$" $tmp_files/ignorelist > /dev/null; then
 				echo -e "${COL_RED} "$(eval_gettext '(ignoring package upgrade)')"${NO_COLOR}"
@@ -454,5 +457,3 @@
 	done
 	cleanoutput
 }
-
-
diff -Naur /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/basicfunctions.sh /usr/lib/yaourt/basicfunctions.sh
--- /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/basicfunctions.sh	2009-08-17 22:50:12.000000000 +0300
+++ /usr/lib/yaourt/basicfunctions.sh	2009-12-07 01:26:16.000000000 +0200
@@ -13,6 +13,17 @@
 #       VERSION:  1.0
 #===============================================================================
 
+# verify if $2 element exists in $1 array
+elementexists(){
+	haystack=( "$@" )
+	haystack_size=( "${#haystack[@]}" )
+	needle=${haystack[$((${haystack_size}-1))]}
+	for ((i=0;i<$(($haystack_size-1));i++)); do
+		element=${haystack[${i}]};
+		[ $element = $needle ] && return 0
+	done
+	return 1
+}
 
 # set misc path
 initpath(){
@@ -48,7 +59,7 @@
 	eval_gettext "YAN" # Yes, All, No
 	eval_gettext "YNA" # Yes, No, Abort
 	eval_gettext "YNVC" # Yes, No, View package, Check package with namcap
-	eval_gettext "YNVM" # Yes, No, View more infos, Manualy select packages
+	eval_gettext "YNVM" # Yes, No, View more infos, Manually select packages
 }
 
 yes_no ()
@@ -65,7 +76,7 @@
 			;;
 	esac
 }
-		  
+
 isnumeric(){
 	if let $1 2>/dev/null; then return 0; else return 1; fi
 }
@@ -260,10 +271,8 @@
 done
 
 PACMANBIN="$INENGLISH $PACMANBIN"
-	
 }
 
-
 urlencode(){
 echo $@ | LANG=C awk '
     BEGIN {
@@ -293,9 +302,6 @@
 '
 }
 
-
-
-
 ###################################
 ### MAIN OF INIT PROGRAM        ###
 ###################################
@@ -308,6 +314,6 @@
 fi
 
 loadlibrary color
-readconfigfile `grep "^[\ ]*[a-zA-Z]" $configfile`
+readconfigfile `grep -E "^[[:blank:]]*[a-zA-Z]" $configfile`
 #initcolor
 initpath
diff -Naur /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/color.sh /usr/lib/yaourt/color.sh
--- /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/color.sh	2009-08-17 22:50:12.000000000 +0300
+++ /usr/lib/yaourt/color.sh	2009-12-07 01:27:52.000000000 +0200
@@ -32,7 +32,6 @@
 	fi
 fi
 
-
 # Color list
 case $COLORMODE in
 	"--nocolor")
@@ -82,31 +81,39 @@
 COL_REPOS="$COL_PINK"
 COL_GROUP="$COL_BLUE"
 }
+
 list(){
 	echo -e "${COL_ARROW}$1${NO_COLOR}" >&2
 }
+
 plain(){
 	echo -e "${COL_BOLD}$*${NO_COLOR}" >&2
 }
+
 msg(){
 	echo -e "${COL_GREEN}==> ${NO_COLOR}${COL_BOLD}$*${NO_COLOR}" >&2
 }
+
 warning(){
 	echo -e "${COL_YELLOW}==> WARNING: ${NO_COLOR}${COL_BOLD}$*${NO_COLOR}" >&2
 }
+
 prompt(){
-        echo -e "${COL_ARROW}==>  ${NO_COLOR}${COL_BOLD}$*${NO_COLOR}" >&2
+	echo -e "${COL_ARROW}==>  ${NO_COLOR}${COL_BOLD}$*${NO_COLOR}" >&2
 	echo -e "${COL_ARROW}==>  ${NO_COLOR}${COL_BOLD} ----------------------------------------------${NO_COLOR}" >&2
 	echo -ne "${COL_ARROW}==>${NO_COLOR}" >&2
 }
+
 promptlight(){
 	echo -ne "${COL_ARROW}==>${NO_COLOR}" >&2
 }
+
 error(){
-	echo -e "${COL_RED}""Error""${NO_COLOR}"": $*\n"
+	echo -e "${COL_RED}==> ERROR: ${NO_COLOR}${COL_BOLD}$*${NO_COLOR}\n" >&2
 	return 1
 }
-colorizeoutputline(){		
+
+colorizeoutputline(){
 	if [ "$COLORMODE" = "--textonly" ]; then
 		local line=`echo $* | sed -e 's#^core/#&#g' \
 		-e 's#^extra/#&#g' \
@@ -124,10 +131,10 @@
 	fi
 	echo $line
 }
+
 cleanoutput(){
-if [ $TERMINALTITLE -eq 0 -o -z "$DISPLAY"  ]; then
+if [ $TERMINALTITLE -eq 0 -o -z "$DISPLAY" ]; then
 	return 0
 fi
 tput sgr0
 }
-
diff -Naur /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/pacman_conf.sh /usr/lib/yaourt/pacman_conf.sh
--- /home/avatar/downloads/sources/yaourt-0.9.2.6/lib/pacman_conf.sh	2009-08-17 22:50:12.000000000 +0300
+++ /usr/lib/yaourt/pacman_conf.sh	2009-12-07 01:28:49.000000000 +0200
@@ -13,13 +13,12 @@
 #       VERSION:  1.0
 #===============================================================================
 
-
 # take the list of activated repositories from pacman.conf
 list_repositories(){
-		repositories=( `LC_ALL="C"; pacman --debug 2>/dev/null| grep "debug: registering sync database '" | awk '{print $5}' |uniq| tr -d "'"| grep -v 'local'` )
+	repositories=( `LC_ALL="C"; pacman --debug 2>/dev/null| grep "debug: registering sync database '" | awk '{print $5}' |uniq| tr -d "'"| grep -v 'local'` )
 }
 
 # list all ignorepkg from pacman.conf
 create_ignorepkg_list(){
-	LC_ALL="C" pacman --debug 2>/dev/null | grep "^debug: config: IgnorePkg:" |awk '{print $4}' > $tmp_files/ignorelist
+	LC_ALL="C" pacman --debug 2>/dev/null | grep "^debug: config: IgnorePkg:" | awk '{print $4}' > $tmp_files/ignorelist
 }
--- /home/avatar/downloads/sources/yaourt-0.9.2.6/yaourt.sh	2009-08-17 22:50:12.000000000 +0300
+++ /usr/bin/yaourt	2009-12-07 01:29:20.000000000 +0200
@@ -1,10 +1,11 @@
 #!/bin/bash
 #
-#   Yaourt (Yet Another Outil Utilisateur): More than a Pacman frontend
+#   yaourt-abs (Yet Another Outil Utilisateur): More than a Pacman frontend
 #
-#   Copyright (C) 2008, Julien MISCHKOWITZ wain@archlinux.fr
-#   Homepage: http://www.archlinux.fr/yaourt-en
+#   Copyright (C) 2009, Aliaksandr Stelmachonak mail.avatar@gmail.com
+#   Homepage: 
 #   Based on:
+#   yaourt from Julien MISCHKOWITZ <wain@archlinux.fr>
 #   yogurt from Federico Pelloni <federico.pelloni@gmail.com>
 #   srcpac from Jason Chu  <jason@archlinux.org>
 #   pacman from Judd Vinet <jvinet@zeroflux.org>
@@ -23,6 +24,7 @@
 #       along with this program; if not, write to the Free Software
 #       Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 #       MA 02110-1301, USA.
+
 export TEXTDOMAINDIR=/usr/share/locale
 export TEXTDOMAIN=yaourt
 type gettext.sh > /dev/null 2>&1 && { . gettext.sh; } || eval_gettext () { echo "$1"; }
@@ -31,24 +33,29 @@
 VERSION="0.9.2.6"
 AUR_URL="http://aur.archlinux.org/packages.php?setlang=en&do_Search=SeB=nd&L=2&C=0&PP=100&K="
 AUR_URL3="http://aur.archlinux.org/packages.php?setlang=en&ID="
-ABS_URL="http://archlinux.org/packages/search/?category=all&limit=99000"
-ABS_REPOS_URL="http://repos.archlinux.org/viewvc.cgi"
 [ -z "$LC_ALL" ] && export LC_ALL=$LANG
 
 ###################################
 ### Build functions             ###
 ###################################
+
 readPKGBUILD(){
 	unset pkgname pkgver pkgrel arch pkgdesc provides url source install md5sums \
 	depends makedepends conflicts replaces _svntrunk _svnmod _cvsroot _cvsmod _hgroot \
 	_hgrepo	_gitroot _gitname _darcstrunk _darcsmod _bzrtrunk _bzrmod 
-	source ./PKGBUILD &> /dev/null
+	# create a temporary subset of ./PKGBUILD for sourcing without redundant stuff
+	$( cat ./PKGBUILD | grep "=" > ./PKGBUILD.tmp )
+	# sourcing only useful subset of PKGBUILD to avoid crashes on files with errors
+	source ./PKGBUILD.tmp &> /dev/null
+	# removing temporary file
+	rm -f ./PKGBUILD.tmp
 }
+
 setPARCH(){
 	if [ "$arch" = "any" ]; then
 		PARCH='any'
 	else
-		PARCH="$CARCH"	
+		PARCH="$CARCH"
 	fi
 }
 
@@ -67,6 +74,7 @@
 	( $edit_prog "$file" )
 	wait
 }
+
 sourceforge_mirror_hack(){
 	readPKGBUILD
 	if ! echo ${source[*]} | grep -q "http://dl.sourceforge.net/"; then
@@ -162,8 +170,11 @@
 	echo "$(eval_gettext ' (-U, --upgrade) <file.pkg.tar.gz> upgrade a package from <file.pkg.tar.gz>')"
 	echo "$(eval_gettext ' (<no option>) <file.pkg.tar.gz> * upgrade a package from <file.pkg.tar.gz>')"
 	echo "$(eval_gettext ' (-G, --getpkgbuild) <pkg>       * Retrieve PKGBUILD and local sources for package name')"
-	echo "$(eval_gettext '  --asdeps                         Install packages non-explicitly to be installed as a dependency')"
+	echo "$(eval_gettext ' --asdeps                          Install packages non-explicitly to be installed as a dependency')"
 	echo "$(eval_gettext ' --ignorearch                      ignore incomplete arch field PKGBUILD')"
+	echo "$(eval_gettext ' --skipinteg                       makepkg will not fail if integrity checks are missing')"
+	echo "$(eval_gettext ' --asroot                          allow yaourt to build packages from AUR and ABS as root')"
+	echo "$(eval_gettext 'Note: this is potentially dangerous and not recommended!')"
 	echo
 	echo "$(eval_gettext 'Upgrade:')"
 	echo "$(eval_gettext ' -Su,  --sysupgrade                upgrade all packages that are out of date')"
@@ -230,25 +241,30 @@
 	echo "$(eval_gettext '  - pacdiffviewer (manage pacsave/pacnew files)')"
 	echo "______________________________________"
 	echo "$(eval_gettext 'written by Julien MISCHKOWITZ <wain@archlinux.fr>')"
+	echo "$(eval_gettext 'written by Aliaksandr Stelmachonak <mail.avatar@gmail.com>')"
 	echo "$(eval_gettext ' homepage: http://archlinux.fr/yaourt-en')"
 }
+
 version(){
 	plain "$(eval_gettext 'yaourt $VERSION is a pacman frontend with AUR support and more')"
 	echo "$(eval_gettext 'homepage: http://archlinux.fr/yaourt-en')"
 	echo "$(eval_gettext '      Copyright (C) 2008 Julien MISCHKOWITZ <wain@archlinux.fr>')"
+	echo "$(eval_gettext '      Copyright (C) 2009 Aliaksandr Stelmachonak <mail.avatar@gmail.com>')"
 	echo "$(eval_gettext '      This program may be freely redistributed under')"
 	echo "$(eval_gettext '      the terms of the GNU General Public License')"
 	exit
 }
+
 pacman_queuing(){
-	# from nesl247
 	if [ -f "$LOCKFILE" ]; then
-		msg $(eval_gettext 'Pacman is currently in use, please wait.')
+		error $(eval_gettext 'Pacman database is currently locked, please wait.')
+		msg $(eval_gettext 'If you are sure a package manager is not already running, \nyou can manually remove $LOCKFILE to unlock database\n')
 		while [ -f "$LOCKFILE" ]; do
 			sleep 3
 		done
 	fi
 }
+
 title(){
 	if [ $TERMINALTITLE -eq 0 -o -z "$DISPLAY" ]; then
 		return 0
@@ -259,6 +275,7 @@
 		;;
 	esac
 }
+
 die(){
 	# reset term title
 	tput sgr0
@@ -267,9 +284,11 @@
 	fi
 	exit $1
 }
+
 parameters(){
 	# Options
 	MAJOR=""
+	PRINTURIS=0
 	INFO=0
 	ROOT=0
 	NEWROOT=""
@@ -280,13 +299,13 @@
 	REFRESH=0
 	SYSUPGRADE=0
 	DOWNLOAD=0
-
-
 	AUR=0
 	HOLDVER=0
 	IGNORE=0
 	IGNOREPKG=""
 	IGNOREARCH=0
+	SKIPINTEG=0
+	ASROOT=0
 	NEEDED=""
 	CLEAN=0
 	LIST=0
@@ -307,6 +326,7 @@
 	VERSIONPKGINSTALLED=0
 	AURVOTEINSTALLED=0
 	CUSTOMIZEPKGINSTALLED=0
+	ABSINSTALLED=0
 	EXPLICITE=0
 	DEPENDS=0
 
@@ -366,6 +386,9 @@
 			INFO=1
 			ARGSANS="$ARGSANS $1"
 			;;
+			--print-uris)
+			PRINTURIS=1
+			;;
 			--list)
 			LIST=1
 			ARGSANS="$ARGSANS $1"
@@ -470,9 +493,9 @@
 			--changelog) CHANGELOG=1;;
 			--holdver) HOLDVER=1;;
 			--ignorearch) IGNOREARCH=1;;
+			--skipinteg) SKIPINTEG=1;;
+			--asroot) ASROOT=1;;
 			--*)
-			#			usage
-			#			exit 1
 			ARGSANS="$ARGSANS $1"
 			;;
 			-*)
@@ -480,7 +503,7 @@
 			if [ `echo $1 | grep r` ]; then
 				OPTIONAL=$2
 			fi
-			while getopts ":VABCRUFGQSbcdefghilmoqr:stuwy" opt $1 $OPTIONAL; do
+			while getopts ":VABCRUFGQSbcdefghilmopqr:stuwy" opt $1 $OPTIONAL; do
 				case $opt in
 					V) version ;;
 					B) MAJOR="backup";;
@@ -508,6 +531,7 @@
 					l) LIST=1 ;;
 					m) FOREIGN=1 ;;
 					o) OWNER=1 ;;
+					p) PRINTURIS=1 ;;
 					q) QUERYWHICH=1; QUIET=1 ;;
 					r)
 					ROOT=1
@@ -537,7 +561,6 @@
 	# set color theme
 	initcolor
 
-	# 
 	if [ "$MAJOR" != "query" ] && [ -f "$BACKUPFILE" ]; then
 		error $(eval_gettext '--backupfile can be used only with --query')
 		die 1
@@ -561,6 +584,7 @@
 	fi
 	return 0
 }
+
 manage_error(){
 	if [ $1 -ne 0 ]; then
 		error_package[${#error_package[@]}]="$PKG"
@@ -571,15 +595,14 @@
 
 launch_with_su(){
 	# try to launch $1 with sudo, else prompt for root password
-	#msg "try to launch '${@}' with sudo"
+	# try to launch '${@}' with sudo
 	command=`echo $* | awk '{gsub(/LC_ALL=\"C\"/,""); print $1}'`
 
 	if [ $SUDOINSTALLED -eq 1 ] && sudo -l | sed 's/\,/\n/g' | grep "\(\ $command$\|ALL\)" 1>/dev/null; then
-		#echo "Allowed to use sudo $command"
+		# allowed to use sudo $command
 		sudo $@ || return 1
 	else
-		UID_ROOT=0
-		if [ "$UID" -ne "$UID_ROOT" ]
+		if [ "$UID" -ne 0 ]
 		then
 			echo -e $(eval_gettext 'You are not allowed to launch $command with sudo\nPlease enter root password')
 		fi
@@ -604,9 +627,11 @@
 ###################################
 ### Package database functions  ###
 ###################################
+
 isinstalled(){
 	pacman -Qq $1 &>/dev/null
 }
+
 isavailable(){
 	# is the package available in repositories ?
 	if [ ${#allpkgavailable[@]} -eq 0 ]; then
@@ -624,6 +649,7 @@
 	isprovided "$1" "sync" && return 0
 	return 1
 }
+
 isprovided(){
 	local rep=${2:-local}
 	local candidates=( `grep -srl --line-regexp --include="depends" "$1" "$PACMANROOT/$rep"` )
@@ -632,14 +658,17 @@
 	done
 	return 1
 }
+
 pkgversion(){
 	# searching for version of the given package
 	#grep -srl --line-regexp --include="desc" "$1" "$PACMANROOT/local" | xargs grep -A 1 "^%VERSION%$" | tail -n 1
 	pacman -Q $1 | awk '{print $2}' | head -n1 2>/dev/null
 }
+
 pkgdescription(){
 	LC_ALL=C pacman -Si $1 | grep -m1 "^Description" | awk -F 'Description    : ' '{print $2}'
 }
+
 sourcerepository(){
 	# find the repository where the given package came from
 	local lrepository=`pacman -Si $1 2>/dev/null| head -n1 | awk '{print $3}'`
@@ -663,6 +692,7 @@
 	pacman -Q | LC_ALL=C sort > "$INSTALLED_BEFORE.full"
 	cat "$INSTALLED_BEFORE.full" | awk '{print $1}' > $INSTALLED_BEFORE
 }
+
 show_new_orphans(){
 	# search for new orphans after upgrading or after removing (exclude new installed package)
 	pacman -Qqt | LC_ALL=C sort > "$ORPHANS_AFTER.tmp"
@@ -689,6 +719,7 @@
 	fi
 
 }
+
 cleandatabase(){
 	# search in /var/lib/pacman/ for repositories
 	# parmis ces dépôts, quels sont les paquetages aussi présents sur le système
@@ -753,6 +784,7 @@
 ###################################
 ### Search functions            ###
 ###################################
+
 search_packages_by_installreason(){
 	# reason=0: explicitly installed
 	# reason=1: installed as depends
@@ -771,7 +803,6 @@
 		fi
 		if [ $pkgreason -eq $reason ]; then echo "$pkg"; fi
 	done
-
 }
 
 ###################################
@@ -782,12 +813,12 @@
 declare -a args
 parameters $@
 
-
 # grab environement options
 if [ `type -p sudo` ]; then SUDOINSTALLED=1; fi
 if [ `type -p versionpkg` ]; then VERSIONPKGINSTALLED=1; fi
 if [ `type -p aurvote` ]; then AURVOTEINSTALLED=1; fi
 if [ `type -p customizepkg` ]; then CUSTOMIZEPKGINSTALLED=1; fi
+if [ `type -p abs` ]; then ABSINSTALLED=1; fi
 
 # Refresh
 # todo: find a better way to remove "y"
@@ -917,7 +948,7 @@
 		error $(eval_gettext 'wrong argument'); die 1
 	fi
 	;;
-	
+
 	sync)
 	#msg "Synchronisation"
 	if [ $GROUP -eq 1 ]; then
@@ -1013,6 +1044,8 @@
 				info_from_aur "${arg#*/}"
 			fi
 		done
+	elif [ $PRINTURIS -eq 1 ]; then
+		$PACMANBIN -Sp "${args[@]}"
 	elif [ $SYSUPGRADE -eq 0 -a ${#args[@]} -eq 0 -a $REFRESH -eq 0 ]; then
 		prepare_orphan_list
 		msg $(eval_gettext 'yaourt: no argument'):wa
@@ -1028,7 +1061,6 @@
 		#msg "System Upgrade"
 		loadlibrary abs
 		loadlibrary aur
-		sysdowngrade
 		sysupgrade
 		# Upgrade all AUR packages or all Devel packages
 		if [ $DEVEL -eq 1 ]; then upgrade_devel_package; fi
@@ -1069,7 +1101,7 @@
 		list_installed_packages
 	fi
 	;;
-	
+
 	interactivesearch)
 	#msg "Recherche dans ABS"
 	tmp_files="$YAOURTTMPDIR/search"
@@ -1108,7 +1140,7 @@
 		search_on_aur "`echo ${args[*]} |tr "\*" "\%"`" || error $(eval_gettext 'unable to contact AUR')
 	fi
 	if [ ! -s "$searchfile" ]; then
-		die 0	
+		die 0
 	fi
 	prompt $(eval_gettext 'Enter n° (separated by blanks, or a range) of packages to be installed')
 	read -ea packagesnum
@@ -1126,7 +1158,7 @@
 	done
 	$BUILDPROGRAM ${packages[@]}
 	;;
-	
+
 	*)
 	#msg "Other action"
 	prepare_orphan_list
