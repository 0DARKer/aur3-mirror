#!/bin/false
# Contributor: Chris Severance <aur.severach@spamgourmet.com>

# Todo: Fix autorebuild for multiple users with sudo chown
# Todo: Test autouninstall when kernel upgrades
# Digi bug: terminal freezes when viewing /proc/dgrp/mon

# Digi Realport driver for Arch Linux. See Digi release notes for supported products.

# Build instructions: (Skip these first two sections)

# This only applies if you installed a long time ago when this driver would still
# compile and haven't upgraded in a while. Now this can't be built on Arch without a 
# patch so new users skip to the next section.

# This PKGBUILD does not clean up the slop from the Digi supplied make.
# If you have already installed according to the the instructions
# log on as root and go through the process in reverse from the original 
# unmodified Digi tgz. You won't lose your configuration.
# make preuninstall; make uninstall
# To clean up you may want to remove the folders /share/ and /etc/init.d/
# Arch Linux does not use these folders though they may have spurious files from
# other misdirected installs.

# The next section: ... Now onto the real install ...

# Set the mode for all created devices.
_opt_defaultmode="0666" # default: 0600
# If you need more granular control.
# See http://www.digi.com/support/kbase/kbaseresultdetl?id=3048
# Once set copy /etc/udev/rules.d/10-dgrp.rules to the PKGBUILD folder
# and it will be made into the package.

# sudo must be configured and available to the user account
# In (non root) user account: download PKGBUILD into a new folder
# using any method: cower or any AUR helper, wget, web browser, copy through network, or paste into PuTTY
# makepkg -sCcfi

# Since the kernel module isn't loaded until you have an active
# device, these services are automatically enabled and started
# for immediate hardware support. They will be reenabled each time the
# package is installed or upgraded.
# systemctl enable dgrp_daemon.service
# systemctl start dgrp_daemon.service
# systemctl enable dgrp_ditty.service
# systemctl start dgrp_ditty.service

# To stop these services from loading:
# systemctl disable dgrp_daemon.service
# systemctl stop dgrp_daemon.service
# systemctl disable dgrp_ditty.service
# systemctl stop dgrp_ditty.service

# To get started using your Digi products:
# man -Ik "Digi "
# man dgrp_gui
# man dgrp_cfg_node
# man ditty
# man drpadmin

# The man page for dgrp_cfg_node lacks some detail. See this page for more info
# ftp://digiftp.digi.com/support_archive/support/manuals/psts/rp-linux-conf-managing-portservers-with-dgrp-config-node.html

# To get your equipment up faster on servers that don't have Xwindows installed
# I've supplied a console shell script "drpadmin".
# It is adapted from Digi's RealPort "drpadmin" for Sun, HP UX, and SCO and has the same 
# look and feel. If you don't want this to be installed you can disable it here.

_disable_drpadmin=0  # 0 for enabled, 1 for disabled

# For information about using dgrp_ditty.service to maintain your ditty settings
# across reboots see http://www.digi.com/support/kbase/kbaseresultdetl?id=904

# "make install" and other commands described in the release notes
# only build properly in the Arch environment when you first run
# "makepkg -sC" to unpack the source allowing PKGBUILD can patch the build files.

# makepkg switches:
#  -s = build package
#  -C = erase source and rebuild from scratch. This is important because once
#       built it is locked to your booted kernel version. When the kernel 
#       changes the package is worthless and you must boot the new kernel and
#       rebuild from scratch. Rebuild automation is provided.
#  -f = force overwrite of already built package. When the kernel changes the 
#       the package is worthless.
#  -c = erase work folders when done
#  -i = install or upgrade package after build. 

# Leave "-c -i" off if you'd like to perform the make and install yourself
# using "make install" as described in the release notes.

# If you opt out of the Arch Linux package you must
# "sudo make install"
# "sudo make postinstall"
# You will need to construct your own startup environment. 
# The BSD init scripts run just fine. They just don't launch automatically
# in SystemD. For startup I use @reboot in cron (cronie) to launch a shell 
# script in ~root with these commands:
# #!/bin/sh
# sleep 5 # wait for network and other services to start
# /etc/init.d/dgrp_daemon start # This submits configured interfaces to the kernel module
# /etc/init.d/dgrp_ditty start  # this sets configured baud rates and other ditty-rp settings for the ports

# In general for any manual upgrade you will need to:
# "sudo make preuninstall" # this shuts down all of your interfaces which unloads the kernel module. 
                           # Then the UDEV module is removed. The config file is not erased.
# "sudo make uninstall"    # This removes the old executables, man pages, and other Digi files
# "sudo mandb"             # this removes the Digi man page summaries from "man -k".
# (don't do this) "./configure"   # this rebuilds the makefiles with the new kernel version
# (don't do this) "sudo make all" # this builds all the new executables
# (do this instead) "makepkg -sC" # This modifies some files for the Arch Linux package, runs the above two commands, makes a package, then modifies the makefiles for "make install"
# "sudo make install"      # this installs all the executables
# "sudo mandb"             # this adds the Digi man page summaries and any other missing summaries to "man -k"
# "sudo make postinstall"  # this installs the UDEV module and starts any configured interfaces and the kernel module.
# Adjust your daemon startup as necessary. The @reboot option in cron (cronie) is one choice, see above.

# Note that the kernel module is not loaded until you configure at least one interface. 
# When your last interface is uninit the kernel module will be unloaded.

# The manual install will not give you a SystemD init script and installs unnecessary
# files and is a bunch of work to rebuild every time the kernel changes.

# How about we don't do that and use the Arch Linux package instead.

# The Arch Linux package gives you
#  * SystemD init scripts
#  * Only installs the right files
#  * Automatic removal on kernel upgrade
#  * Automatic rebuild and start on next login (via autorebuild script below)

# Uninstall cleanup: 
# rm /etc/dgrp.backing.store /usr/bin/dgrp/config/ditty.commands
# rmdir /usr/bin/dgrp/config
# rmdir /usr/bin/dgrp

# If Digi releases a new version then all you need to change is
# pkgver, source, and possibly _pkgnamever
# Then run "updpkgsums" to get new md5sums

############################### Arch PKGBUILD #################################

pkgname=dgrp
_pkgnamever=$pkgname-1.9  # this is the folder name inside the supplied tgz. It should be $pkgname-$pkgver but Digi didn't do that.
pkgver=1.9.35
pkgrel=1
_RealPort="RealPort" # Digi's product name is inconsistent. Here you can choose. RealPort seems right so I didn't complete the change to Realport.
pkgdesc=("tty driver for Digi $_RealPort Connect EtherLite Flex One CM PortServer IBM RAN")
_pkgdescshort="Digi $_RealPort driver for Ethernet serial servers"
arch=("i686" "x86_64")
url="http://www.digi.com/"
license=("GPL" "APACHE" "custom:DigiInternational")
makedepends=('linux-headers' 'openssl' 'sudo') # openssl in in Arch Linux "base"
_kernelversionsmall="`uname -r | sed -e 's/-ARCH//g'`"
depends=("linux=$_kernelversionsmall" "openssl")
optdepends=('tcl' 'tk')
source=("$pkgname-$pkgver-81000137_W.tgz::http://ftp1.digi.com/support/driver/81000137_W.tgz")
md5sums=('bd47dfdbec3794330fcb9df715ec0c67')
options=("!docs" "!emptydirs")
install="$pkgname-install.sh"
_autorebuild=autorebuild-$pkgname.sh
_autorebuildsenseexe="/usr/bin/dgrp/daemon/drpd"
_kernelversion="`uname -r`"
#backup=('etc/dgrp.backing.store') 
# The backup system doesn't work right. This would cause downtime every upgrade
# as the config file is constantly renamed only to have a dummy file put in 
# place. Installs and upgrades work perfectly 
# when we pretend the config file isn't related to us.

prepare() {
  cd "$_pkgnamever"
  ./configure # --prefix=/usr

  # Produce an Arch compatible Makefile
  if [ ! -f Makefile.inc.Arch ]; then
    echo "# patched by $pkgname-$pkgver PKGBUILD from Arch Linux AUR" > Makefile.inc.Arch
    echo "# http://aur.archlinux.org/" >> Makefile.inc.Arch
    echo "prefix=/usr" >> Makefile.inc.Arch
    echo "" >> Makefile.inc.Arch
    cat Makefile.inc >> Makefile.inc.Arch
    sed -i -e 's:/usr/sbin:/usr/bin:g' Makefile.inc.Arch
  fi
  cp -p Makefile.inc.Arch Makefile.inc

  # Produce a "file_locations" that we can pull in here.
  if [ ! -f config/file_locations.Arch ]; then
    echo "# patched by $pkgname-$pkgver PKGBUILD from Arch Linux AUR" > config/file_locations.Arch
    sed -e 's/^DGRP/_DGRP/g' config/file_locations >> config/file_locations.Arch
  fi
  . config/file_locations.Arch

  #export mandir=/usr/share/man
  #export CFLAGS="$CFLAGS -DTTY_CLOSING=7"
  #export MYMANDIR=/usr/share/man # didn't work
  #sed -i -e 's/CPPFLAGS =/CPPFLAGS = -DTTY_CLOSING=7/g' Makefile # didn't work
  #sed -i -e 's/MANDIR=.*$/MANDIR = \/usr\/share\/man/g' Makefile.inc # didn't work
  #sed -i -e 's/-DDGRP_TRACER/-DDGRP_TRACER -DTTY_CLOSING=7/g' driver/build/Makefile.in # didn't work
  #sed -i -e 's:\$(RPM_BUILD_ROOT)\$(MYMANDIR):/usr/share:g' driver/build/Makefile # I'm gonna get you, one way or another!
  #sed -i -e 's:\$(MANDIR):/usr/share/man:g' */Makefile # these changes are all ignored. I'm not gonna...

  # /usr/sbin /sbin and /lib are deprecated as soft links and aren't permitted in packages
  sed -i -e 's:/usr/sbin:/usr/bin:g' Makefile */Makefile driver/*/Makefile
  # sed will perform a replace on already replaced text, but only once. 
  # That doesn't make sense to me but I can get around it by ensuring 
  # the from string isn't in the to string and doing it twice.
  sed -i -e 's:/lib/:/usr/lIb/:g' Makefile */Makefile driver/*/Makefile
  sed -i -e 's:/lIb/:/lib/:g' Makefile */Makefile driver/*/Makefile

  # I'd like to use /usr/local/bin but I suspect that this change would be 
  # even more work than what I've already done and much to different from
  # Digi's install.

  # Patch a source for a constant that has been removed from the kernel. 
  # Digi should fix this since it will eventually not work right.
  # See https://lkml.org/lkml/2014/10/16/632  [PATCH -next 09/27] tty: Remove TTY_CLOSING - LKML.ORG
  # See http://lkml.iu.edu/hypermail/linux/kernel/1411.0/03202.html [PATCH -next v2 09/26] tty: Remove TTY_CLOSING
  echo "" >> driver/build/include/dgrp_net_ops.h
  echo "/* patched by $pkgname-$pkgver PKGBUILD from Arch Linux AUR */" >> driver/build/include/dgrp_net_ops.h
  echo "/* http://aur.archlinux.org/ */" >> driver/build/include/dgrp_net_ops.h
  echo "#ifndef TTY_CLOSING" >> driver/build/include/dgrp_net_ops.h
  echo "#define TTY_CLOSING (7)" >> driver/build/include/dgrp_net_ops.h
  echo "#endif" >> driver/build/include/dgrp_net_ops.h
}

build() {
  cd "$_pkgnamever"
  . config/file_locations.Arch

  # The instructions say we can only use pkgdir in package() but fortunately it exists here
  # This bit of magic might work on other RPM based commercial drivers
  echo "RPM_BUILD_ROOT=$pkgdir" > Makefile.inc
  cat Makefile.inc.Arch >> Makefile.inc
  make all
}

_daemons="daemon ditty"

package() {
  cd "$_pkgnamever"
  . config/file_locations.Arch
  make install
  # Leave the user with a properly modified Makefile.inc so the make commands in
  # the release notes mostly work in the Arch environment.
  cp -p Makefile.inc.Arch Makefile.inc

  if [ "$_opt_defaultmode" != "" ]; then
    mv "$pkgdir/tmp/dgrp/10-dgrp.rules" "$pkgdir/tmp/dgrp/10-dgrp.rules.Arch"
    cat > "$pkgdir/tmp/dgrp/10-dgrp.rules" << EOF
# Automatically generated by $pkgname-$pkgver PKGBUILD from Arch Linux AUR
# http://aur.archlinux.org/

# Generated: `date +"%F %T"`
# From PKGBUILD in folder: `pwd`

# Warning: If you modify this file you should copy it into the folder with the
# PKGBUILD or you might lose the customizations on the next install.

# This file was customized by the PKGBUILD by setting the mode on all ports
# to MODE=(see below). If all you need is a different mode on all ports
# then set the option in the PKGBUILD. If you need more granular control
# see these customization instructions:

# http://www.digi.com/support/kbase/kbaseresultdetl?id=3048

# Then copy this file into the folder with PKGBUILD.

EOF
    cat "$pkgdir/tmp/dgrp/10-dgrp.rules.Arch" >> "$pkgdir/tmp/dgrp/10-dgrp.rules"
    rm -f "$pkgdir/tmp/dgrp/10-dgrp.rules.Arch"
    sed -i -e 's:^\(KERNEL=="tty_dgrp\)\(.*\)$:\1\2, MODE="'"$_opt_defaultmode"'":g' "$pkgdir/tmp/dgrp/10-dgrp.rules"
    cp -p "$srcdir/../10-dgrp.rules" "$pkgdir/tmp/dgrp/10-dgrp.rules" || :
  fi

  # we need this to be safe just in case this points to the real /etc instead of pkg/etc as we expect
  # as non root we'll be unable to erase any of these things from the real /etc. On Arch none will exist anyways
  mv -n "$pkgdir/etc/init.d/dgrp_daemon" "$pkgdir/etc/init.d/dgrp_ditty" "$pkgdir/usr/bin/dgrp/daemon/"
  rm -f "$pkgdir/etc/init.d/dgrp_daemon" "$pkgdir/etc/init.d/dgrp_ditty"
  rmdir "$pkgdir/etc/init.d" "$pkgdir/etc"
  chmod 1777 "$pkgdir/tmp"
  chmod 700 "$pkgdir/usr/bin/dgelreset" "$pkgdir/usr/bin/dgipserv" "$pkgdir/usr/bin/dgrp/config/postinstall" "$pkgdir/usr/bin/dgrp/config/preuninstall"
  # It's not really clear to me why these are in the man pages but not in the path so you can use them.
  cd "$pkgdir/usr/bin"
  for _exes in dgrp_cfg_node dgrp_gui; do
    ln -s dgrp/config/$_exes $exes
  done
  # ditty: You might need this if you have scripts that depend on ditty. It is commented out in case you have another ditty on your system.
  # ln -s ditty-rp ditty
  #rmdir "$pkgdir/usr/share/doc" # The Arch PKGBUILD does for us

  # SystemD integration. Umask is 000 on my system. I don't know how makepkg gets the right permissions on this mkdir.
  mkdir -p "$pkgdir/usr/lib/systemd/system/"
  for _daemon in $_daemons; do
    cat > "dgrp_$_daemon.service" << EOF
# Automatically generated by $pkgname-$pkgver PKGBUILD from Arch Linux AUR
# http://aur.archlinux.org/
[Unit]
Description="Digi $_RealPort $_daemon"
After=network.target
[Service]
Type=forking
ExecStart=/usr/bin/dgrp/daemon/dgrp_$_daemon start
ExecStop=/usr/bin/dgrp/daemon/dgrp_$_daemon stop
ExecReload=/usr/bin/dgrp/daemon/dgrp_$_daemon reload
[Install]
WantedBy=multi-user.target
EOF
  install -m 644 dgrp_$_daemon.service "$pkgdir/usr/lib/systemd/system/"
  rm -f dgrp_$_daemon.service
done

  # Install my custom drpadmin with man page. This automatically detects if the files wern't generated from being disabled.
  sed -i -e "s/RealPort/$_RealPort/gI" $pkgdir/usr/share/man/man8/*.8 $pkgdir/usr/share/man/man1/*.1
  if [ -s "$srcdir/../drpadmin" ]; then
    sed -i -e 's/^#distro=:::$/distro="Arch Linux"/g' "$srcdir/../drpadmin"
    sed -i -e "s/RealPort/$_RealPort/gI" "$srcdir/../drpadmin"
    install -Dm755 "$srcdir/../drpadmin" "$pkgdir/usr/bin/"
    rm -f "$srcdir/../drpadmin"
    if [ -s "$srcdir/../drpadmin.1" ]; then
      sed -i -e "s/RealPort/$_RealPort/gI" "$srcdir/../drpadmin.1"
      install -Dm444 "$srcdir/../drpadmin.1" "$pkgdir/usr/share/man/man1/"
    fi
  fi
  rm -f "$srcdir/../drpadmin.1"

  # see man pacman "HANDLING CONFIG FILES" for why we want to do this.
  #if [ "$_DGRP_STORE" != "/$backup" ]; then
  #  echo "The backup store has changed. Please update backup= in PKGBUILD"
  #  exit 127
  #fi
  #install -d "$pkgdir/etc"
  #touch -t 201504040509 "$pkgdir$_DGRP_STORE"
  # Unfortunately pacman does not handle config files well in a manner that
  # makes upgrades tolerable. See backup= above.
}

_geninstall() {
# produce the install script so it doesnt need to be downloaded separately
# I'm wondering why there isn't a function for this
cat > "$install" << EOF
# Automatically generated by $pkgname-$pkgver PKGBUILD from Arch Linux AUR
# http://aur.archlinux.org/

post_upgrade() {
  mandb -q
  /usr/bin/dgrp/config/postinstall # this runs depmod -a
  rmdir /tmp/dgrp # postinstall forgets to remove this. Useful on /tmp folders that are not mounted tmpfs
  systemctl daemon-reload
  # Digi's postinstall automatically loads the daemons so we might as well too
  for _daemon in $_daemons; do
    systemctl enable dgrp_\$_daemon.service
    systemctl start dgrp_\$_daemon.service
  done
  echo "$_RealPort (dgrp) startup scripts updated or installed"
}

post_install() {
  post_upgrade
}

pre_upgrade() {
  for _daemon in $_daemons; do
    systemctl stop dgrp_\$_daemon.service
    systemctl disable dgrp_\$_daemon.service
  done
  /usr/bin/dgrp/config/preuninstall
}

pre_remove() {
  pre_upgrade
  . /usr/bin/dgrp/config/file_locations
  if [ -f "\$DGRP_STORE" ]; then
    echo "To clean fully you may want to remove your config: \$DGRP_STORE"
  fi
}

post_remove() {
  mandb -q
  systemctl daemon-reload
  echo "$_RealPort (dgrp) startup scripts removed"
}
EOF
chmod 644 "$install"
}
#_geninstall

# Generate the autorebuild script
rm -f $_autorebuild
cat > $_autorebuild << EOF
#!/bin/sh

# Automatically generated by $pkgname-$pkgver PKGBUILD from Arch Linux AUR
# http://aur.archlinux.org/

# Do not modify or remove this file. It is marked read-only to stop you.
# It will be overwritten the next time makepkg is run.
# If you remove this script your package will not auto rebuild and your
# hardware will stop working after the next kernel upgrade.
# If you need to update this file then modify the PKGBUILD.

# Purpose: Automatically build and install this package on the next login
# after pacman removes it on kernel upgrade. 
# Every package that needs to be autorebuilt should have a shell script
# like this one. All you need is a PKGBUILD and a sense file to tell
# when the package is missing.

# This shell script can be easily adapted to any PKGBUILD. As an alternative
# you can look into "DKMS" Dynamic Kernel Module Support.

# To launch, add this to any user's profile or the system profile.
# sudo must be installed and configured. Each user expected to rebuild packages
# must be added to the wheel group (usermod -G).

# for install_group in \`groups\`; do
#   if [ "\$install_group" = "wheel" ]; then
#     find ~/pkg -type f -perm /400 -name "autorebuild-*.sh" -exec sh {} \;
#     break
#   fi
# done

# For your search folder you can use ~ if you can be certain that one
# user will login after a system upgrade. To prevent searching an oversize
# home folder you might want to keep your rebuilding packages 
# in a folder like ~/pkg.

# (Note: the multi user aspect has yet to be tested)

# For multiple users you can use a standard folder set to be world writable.

if [ ! -x "$_autorebuildsenseexe" ]; then
  if [ "\$EUID" -ne "0" ]; then
    cd "\`dirname "\$0"\`" # compatible with cron and find
    prevumask=\`umask\`; umask 000
    makepkg -sCcfi
    umask \$prevumask
    ## Allow other users to build without permissions interference
    ## This would be a security problem in most environments
    ## chmod 777 files with any x bit set
    #find . -type f ! "(" -perm 666 -o -perm 777 ")" -a -perm /111 -exec chmod 777 {} \;
    ## chmod 666 files without any x bit set
    #find . -type f ! "(" -perm 666 -o -perm 777 ")" -a "!" -perm /111 -exec chmod 666 {} \;
    ## chmod 777 files with any x bit set
    #find . -type d ! -perm 777 -exec chmod 777 {} \;
  else
    # su user -c "\$*" # this might work if you need the root user to rebuild.
    echo "\`tput clear\`"
    echo "Important. A recent kernel upgrade has diabled your"
    echo ""
    echo "$_pkgdescshort"
    echo "Status: Disabled!"
    echo ""
    echo "It is easy to rebuild and enable but not by a root user."
    echo "You must log in as a non root user with sudo access (wheel group) and"
    echo ""
    echo "run: \$0"
    echo ""
    echo "if it doesn't start automatically."
    echo "Press Enter"
    read autorebuild
  fi
else
  echo "$_pkgdescshort installed"
fi
EOF
chmod 555 $_autorebuild

if [ "$_disable_drpadmin" -eq 0 ]; then

# Generate shell script drpadmin from within PKGBUILD.
# You can disable above this if you don't want anything connected with SCO.

# To update drpadmin from editing versions: 
# Delete the following scrambly text then run these lines
# cp -p drpadmin.sh drpadmin
# cp -p drpadmin_txt.1 drpadmin.1
# tar czvf - drpadmin drpadmin.1 | openssl base64 >> PKGBUILD
# echo -e "EOF\nfi" >> PKGBUILD

openssl base64 -d << EOF | tar --no-same-owner -xzf -
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
buu2buu2buu2bn9N+x+aOHSSAFAAAA==
EOF
fi
