#!/bin/bash

kernver=${KERNVER:-$(uname -r)}
arch=${ARCH:-$(uname -m)}
arch=${arch/i686/i386}
LOG="/var/log/catalyst-install.log"

#patch_files(){
#    file_patch="${kernver:0:6}.patch"
#    if [[ -f "${file_patch}" ]]; then
#        patch -Np6 -i ${file_patch} || return 1
#    fi
#}


install_module(){
    echo ""
    echo "--------"
    date '+%Y-%m-%d %H:%M:%S'
    echo "Building fglrx module for ${kernver} kernel ..."
    echo "--------"
    if [ ! -d "/lib/modules/${kernver}/build" ]; then
      echo "Kernel header files are absent: directory /lib/modules/${kernver}/build doesn't exist! Game over"
      return 1
    fi
    workdir=$(mktemp -du /tmp/catalyst.XXXXXX)
    set -x
    cp "/usr/share/ati/build_mod" "${workdir}" -R
    cd "$workdir"
    patch -Np7 -i makefile_compat.patch || return 1

    patch -Np6 -i 3.2.8.patch || return 1

#    if [[ ${kernver:0:6} < "2.6.39" ]] && [[ `cat /lib/modules/${kernver}/build/.config | grep -c CONFIG_BKL=y` = 0 ]]; then
#	patch -Np6 -i no_bkl.patch || return 1
#    fi

#    if [[ ${kernver:0:6} == "2.6.39" ]] || [[ ${kernver:0:6} > "2.6.39" ]]; then
#	patch -Np6 -i no_bkl.patch || return 1
#        patch -Np6 -i 2.6.39_bkl.patch || return 1
#    fi

#    patch_files

  ## include ati_make.sh and use _ati_check function from it
    . ati_make.sh
    _ati_check

#------------------------------------------------------------------------------------------
# putting our info into module
    sed "/MODULE_DESCRIPTION/a\MODULE_DESCRIPTION(\"__unv:$(uname -v)\");" -i firegl_public.c
#------------------------------------------------------------------------------------------    

if [[ ${kernver:0:3} = "3.4" ]]; then
    echo ""
    echo "Looks like your kernel is 3.4"
    echo "Catalyst does not support it, but i will try to 'hack' it..."
    echo "--------"
    echo "I need to change kernel's source file (compat.h)."
    echo "After operation originall source file will be recall"
    echo "--------"

	       cp  /lib/modules/${kernver}/build/arch/x86/include/asm/compat.h  /lib/modules/${kernver}/build/arch/x86/include/asm/compat.h.back || return 1
	       cp 34_compat.patch  /lib/modules/${kernver}/build/arch/x86/include/asm/ || return 1
	       cd /lib/modules/${kernver}/build/arch/x86/include/asm || return 1
	       patch -Np0 -i 34_compat.patch || return 1

		cd "$workdir"

		cpu_no=`cat /proc/cpuinfo | grep processor | wc -l`
		sed -i -e "s/CPUS_NUMBER/${cpu_no}/" 34_fire.patch

		patch -Np6 -i 34_fire.patch || return 1

	      ## Compile module using _ati_check variables
		make -C /lib/modules/${kernver}/build SUBDIRS="`pwd`" ARCH=${arch} \
		  MODFLAGS="-DMODULE -DATI -DFGL -DPAGE_ATTR_FIX=$PAGE_ATTR_FIX -DCOMPAT_ALLOC_USER_SPACE=$COMPAT_ALLOC_USER_SPACE $def_smp $def_modversions" \
		  PAGE_ATTR_FIX=$PAGE_ATTR_FIX COMPAT_ALLOC_USER_SPACE=$COMPAT_ALLOC_USER_SPACE modules || return 1

	        mv /lib/modules/${kernver}/build/arch/x86/include/asm/compat.h.back  /lib/modules/${kernver}/build/arch/x86/include/asm/compat.h || return 1

else
   ## Compile module using _ati_check variables
    make -C /lib/modules/${kernver}/build SUBDIRS="`pwd`" ARCH=${arch} \
      MODFLAGS="-DMODULE -DATI -DFGL -DPAGE_ATTR_FIX=$PAGE_ATTR_FIX -DCOMPAT_ALLOC_USER_SPACE=$COMPAT_ALLOC_USER_SPACE $def_smp $def_modversions" \
      PAGE_ATTR_FIX=$PAGE_ATTR_FIX COMPAT_ALLOC_USER_SPACE=$COMPAT_ALLOC_USER_SPACE modules || return 1
fi

  ## here we are checking kernel's extramodules dir
    for r in /lib/modules/*; do
      s=${r:13}
      if [[ ${s:0:3} = "ext" ]]; then
	if [[ `cat ${r}/version | grep -c ${kernver}` != 0 ]]; then
	  destidir=${s}
	fi
	elif [[ ${s} = ${kernver} ]] && [[ ! -e ${r}/extramodules ]]; then
	  destidir=${kernver}/video
      fi
    done

    install -m755 -d "/lib/modules/${destidir}/" || return 1
    install -m644 fglrx.ko "/lib/modules/${destidir}/" || return 1


    depmod ${kernver}
    rm -rf "${workdir}"
    set +x
    echo "Ok. Module built succesfully."
}


remove_module(){
    for p in /lib/modules/*; do
      if [[ ${p:13:3} != "ext" ]]; then
	if [ ! -d $p/kernel ]; then  #check if /lib/modules/p/kernel directory does NOT exist
	  if [[ -e $p/video/fglrx.ko ]] || [[ -e $p/extramodules/fglrx.ko ]]; then
	    echo "+ removing fglrx module from $p"
	    rm "$p/video/fglrx.ko" &>/dev/null
	    rm "$p/extramodules/fglrx.ko" &>/dev/null
	    rmdir -p "$p/video/" --ignore-fail-on-non-empty &>/dev/null
	  fi
	  if [ -d $p ]; then   #check if /lib/modules/p exist
	    if [ -z "$(ls $p)" ]; then   #check if /lib/modules/p is empty
	      echo "+ removing empty directory: $p"
	      rm -rf $p
		else echo "- $p looks like unused, maybe remove it manualy?"
	    fi
	  fi
	fi
      fi
    done
}

remove_all_modules(){
   for p in /lib/modules/*; do
    if [[ ${p:13:3} != "ext" ]]; then
     if [[ -e $p/video/fglrx.ko ]] || [[ -e $p/extramodules/fglrx.ko ]]; then
      echo "+ removing fglrx module from $p"
      rm "$p/video/fglrx.ko" &>/dev/null
      rm "$p/extramodules/fglrx.ko" &>/dev/null
      rmdir -p "$p/video/" --ignore-fail-on-non-empty &>/dev/null
      depmod $(basename $p)
     fi
     if [ -d $p ]; then   #check if /lib/modules/p exist
      if [ -z "$(ls $p)" ]; then   #check if /lib/modules/p is empty
	echo "+ removing empty directory: $p"
	rm -rf $p
	elif [ ! -d $p/kernel ]; then
	  echo "- $p looks like unused, maybe remove it manualy?"
      fi
     fi
    fi
   done
}

auto_recompile(){
    # add autofglrx daemon to rc.conf
    angel=$(grep ^DAEMONS /etc/rc.conf | grep autofglrx)
    if [ "$angel" = "" ]; then
      sed 's/DAEMONS=(/DAEMONS=(autofglrx /' -i /etc/rc.conf
    fi
    echo "Auto re-compilation is Enabled."
}

auto_recompile_off(){
    # remove autofglrx
    sed '/^DAEMONS/s/ *autofglrx //' -i /etc/rc.conf
    echo "Auto re-compilation is Disabled."
}

case "$1" in
    help|--help)
        echo "usage: $0 {remove|remove_all|auto|autooff}"
        echo "- remove is removing unused fglrx modules and all empty /lib/modules/* directories"
        echo "- remove_all is removing all fglrx modules and all empty /lib/modules/* directories"
        echo "- auto will turn ON 'auto re-compilation of fglrx module when system is starting'"
        echo "- autooff will turn off auto re-compilation of fglrx module"
        ;;
    remove)
        remove_module
        ;;
    remove_all)
        remove_all_modules
        ;;
    auto)
	auto_recompile
	;;
    autooff)
	auto_recompile_off
	;;
    *)
	echo "Building fglrx module for ${kernver} kernel ..."
        install_module >> $LOG 2>&1 && echo "Ok." || echo "Failed!!! Check out log: $LOG"
        ;;
esac

