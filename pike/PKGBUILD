# Maintainer: Alexander RÃ¸dseth <rodseth@gmail.com>
# Contributor: Christoph Zeiler <rabyte*gmail>
# Contributor: Rickard Gustafsson <rickard@allyourbase.se>
# Contributor: Nathan Owe <ndowens04 at gmail>
# Contributor: Stefan Husmann <stefan-husmann@t-online.de>
# Contributor: Alexej Magura <agm2819*gmail*>

pkgname=pike
pkgver=7.8.700
pkgrel=7
pkgdesc='General purpose, dynamic programming language with a syntax similar to Java and C'
arch=('x86_64' 'i686')
url='http://pike.lysator.liu.se/'
license=('GPL2' 'LGPL' 'MPL')
depends=('gtksourceview2' 'sane' 'libzip' 'libmysqlclient' 'gtkglarea1')
makedepends=('ico2xpm' 'setconf')
source=("http://${pkgname}.ida.liu.se/pub/$pkgname/latest-stable/Pike-v${pkgver}.tar.gz"
        'pike.sh')
sha256sums=('b29b294b766bda805fc539e2cb9661bc86c54e3f735271ff760bbe20bff1de19'
            '2a9b368451941f5bb6c0d442358f57b0a4e6393d74a892896b3237cb35485759')

prepare() {
  cd "$srcdir/Pike-v$pkgver"
    
  # remove the '-r' in the OS=`` line so that you won't have to rebuild pike every single time you build a new kernel. 
  setconf Makefile OS '`if [ -n \"$$PIKE_BUILD_OS\" ]; then echo \"$$PIKE_BUILD_OS\"; else uname -s -m|sed \"s/ /-/g\"|tr \"[A-Z]\" \"[a-z]\"|tr \"/()\" \"___\"; fi`'
}

build() {
  cd "$srcdir/Pike-v$pkgver"

  make prefix="$pkgdir/usr" \
    buildroot="$pkgdir/" \
    exec_prefix="$pkgdir/usr/bin" \
    man_prefix="$pkgdir/usr/share/man" \
    INSTALLARGS=--traditional compile # install doesn't work --> leads to dumping of master.pike.in, I think.   

  # convert the windows icon (it looks better than the debian one) to an xpm
  if [[ ! -f "$srcdir/Pike-v$pkgver/packaging/windows/pike.xpm" ]] || [[ ! -f "$srcdir/Pike-v$pkgver/packaging/windows/pike_2.xpm" ]]; then
    cd "$srcdir/Pike-v$pkgver/packaging/windows/"
    ico2xpm -t pike.ico
  fi
}

package() {
  # install the stand-in perl script that points to where pike really is.  
  install -m 755 -D "pike.sh" "$pkgdir/usr/bin/pike"
  
  # install documentation 
  cd "$srcdir/Pike-v$pkgver/"
  install -m 644 -D "CHANGES" "$pkgdir/usr/share/doc/$pkgname/CHANGES"
  install -m 644 -D "COMMITTERS" "$pkgdir/usr/share/doc/$pkgname/COMMITTERS"
  install -m 644 -D "COPYRIGHT" "$pkgdir/usr/share/doc/$pkgname/COPYRIGHT"
  install -m 644 -D "COPYING" "$pkgdir/usr/share/doc/$pkgname/COPYING"
  install -m 644 -D "README" "$pkgdir/usr/share/doc/$pkgname/README"
  install -m 644 -D "README-CVS" "$pkgdir/usr/share/doc/$pkgname/README-CVS"
  install -m 644 -D "ANNOUNCE" "$pkgdir/usr/share/doc/$pkgname/ANNOUNCE"
  
  cd "$srcdir/Pike-v$pkgver/man"
  install -m 644 -D "pike.1" "$pkgdir/usr/share/man/man1/pike.1"
  
  cd "$srcdir/Pike-v$pkgver/packaging/windows"
  install -m 644 -D "pike.xpm" "$pkgdir/usr/share/pixmaps/pike.xpm"
  
  # install the pike libaries/binaries 
  
  # binaries
  
  cd "$srcdir/Pike-v$pkgver"
  
  tar -czf build.tar.gz build/
  
  install -D "build.tar.gz" "$pkgdir/usr/lib/$pkgname/$pkgver/build.tar.gz"
  
  cd "$pkgdir/usr/lib/$pkgname/$pkgver/"
  
  tar -xzf build.tar.gz
  
  rm -f build.tar.gz
  
  chown -R root build && chgrp -R root build
  
  # libraries
  
  cd "$srcdir/Pike-v$pkgver/"
  
  ################################################################################
  # the following seemed like the only SANE thing to do.
  # BELIEVE ME, I tried doing it file by file, and 
  # I will not do that at all--it took freaking forever just to get halfway!
  ################################################################################
  
  tar -czf lib.tar.gz lib/ 
  
  install -D "lib.tar.gz" "$pkgdir/usr/lib/$pkgname/$pkgver/lib.tar.gz"
  
  cd "$pkgdir/usr/lib/$pkgname/$pkgver/"
  
  tar -xzf lib.tar.gz
  
  rm -f lib.tar.gz 
  
  chown -R root lib && chgrp -R root lib
  
  # install the emacs pike.el file 
  
  cd "$srcdir/Pike-v$pkgver/tools"
  
  install -m 644 -D "pike.el" "$pkgdir/usr/share/emacs/24.2/lisp/progmodes/pike.el"

  mv "$pkgdir/usr/lib/pike/$pkgver/build/linux-$CARCH" "$pkgdir/usr/lib/pike/$pkgver/bin"
  rmdir "$pkgdir/usr/lib/pike/$pkgver/build"
}

# vim:set ts=2 sw=2 et:
