# Maintainer: Jens Staal <staal1978@gmail.com>
# Contributor: Sebastien Binet <binet@farnsworth>

pkgname=libdispatch-svn 
pkgver=197
pkgrel=1
pkgdesc="The libdispatch userspace implementation of the Grand Central Dispatch API, compiled with blocks support"
url="http://libdispatch.macosforge.org/"
arch=('i686' 'x86_64')
license=('Apache')
depends=('libkqueue-svn' 'clang' 'llvm-compiler-rt-svn' 'libpthread_workqueue-svn' 'libbsd')
makedepends=('subversion' 'pkgconfig')
conflicts=('libdispatch' 'libdispatch-svn')
provides=('libdispatch')

# I had to masacre glibc unistd.h in order to be able to build this thing. I guess that one is LGPL
# http://permalink.gmane.org/gmane.comp.macosx.libdispatch.devel/338
# Sorry about all the patches, but I find it far easier to work on a file-by-file basis while getting it to build
# The advantage is also that upstream changes that make patching fail can be more granularly resolved.
source=('configure.ac.patch' 'dispatchtestc.patch' 'arc4randomc.patch' 'dispatchh.patch' 'dispatchcascadec.patch' \
'dispatchpriorityc.patch' 'privateh.patch' 'internalh.patch' 'dispatchafterc.patch' 'queuefinalizerc.patch' \
'dispatchapplyc.patch' 'dispatchgroupc.patch' 'dispatchdriftc.patch' 'dispatchreadc.patch' 'unistd.h')


md5sums=('c88be0d426d7129d313580d7b745371c' 'ae16fab83bf82c8fc0b62b0f2e519dc9' '34e343b787537c9996a579e1bf727243' \
'f16be912cb4bbe273f79335a63ea9b93' '70156292c623b66f7f7c8af6f2b0aeea' '52808c5ea7e0d0ce4b6cbfd911236374' \
'34e343b787537c9996a579e1bf727243' '11bca09f2f37d6786d29cfe6cb3c3ec7' 'f0b8c836b7b96f4fd9cadc87a97840e3' \
'4028661d2a7f5ee4a565040c31a96280' '52808c5ea7e0d0ce4b6cbfd911236374' '06d4d8386d46545e24aceca517492ad7' \
'eb8a0603eb002a898fe5da27afb6cdca' '39f397fc9cb0439fd562ec9c6f2916e1' 'f679a13bb07edc8d663d0f90b5335eab')


_svntrunk=http://svn.macosforge.org/repository/libdispatch/trunk
_svnmod=libdispatch-svn

build() {
  cd $srcdir
  msg "fetching or updating sources from SVN..."

  if [ -d $_svnmod/.svn ]; then
    cd $_svnmod && svn up
  else
    svn co ${_svntrunk} ${_svnmod}
  fi

  msg "setting up a separate build directory"
  rm -rf $srcdir/build
  cp -ar $srcdir/$_svnmod $srcdir/build

  msg "making a local include directory"
  rm -rf $srcdir/include
  mkdir "$srcdir/include"
  cp $srcdir/unistd.h $srcdir/include/unistd.h

  msg "patching sources for Linux"
  cd $srcdir/build
  patch -p1 < $srcdir/configure.ac.patch || return 1
#patching up to make sure that libbsd is used for certain things and avoid evilness of glibc
  patch -p0 $srcdir/build/dispatch/dispatch.h -i $srcdir/dispatchh.patch
  patch -p0 $srcdir/build/src/private.h -i $srcdir/privateh.patch
  patch -p0 $srcdir/build/src/internal.h -i $srcdir/internalh.patch
  patch -p0 $srcdir/build/testing/dispatch_test.c -i $srcdir/dispatchtestc.patch
  patch -p0 $srcdir/build/testing/dispatch_cascade.c -i $srcdir/dispatchcascadec.patch
  patch -p0 $srcdir/build/testing/dispatch_priority.c -i $srcdir/dispatchpriorityc.patch
  patch -p0 $srcdir/build/testing/dispatch_group.c -i $srcdir/dispatchgroupc.patch
  patch -p0 $srcdir/build/testing/dispatch_drift.c -i $srcdir/dispatchdriftc.patch
  patch -p0 $srcdir/build/testing/dispatch_after.c -i $srcdir/dispatchafterc.patch
  patch -p0 $srcdir/build/testing/dispatch_apply.c -i $srcdir/dispatchapplyc.patch
  patch -p0 $srcdir/build/testing/dispatch_read.c -i $srcdir/dispatchreadc.patch
  patch -p0 $srcdir/build/testing/queue_finalizer.c -i $srcdir/queuefinalizerc.patch
  patch -p0 $srcdir/build/testing/shims/arc4random.c -i $srcdir/arc4randomc.patch


  msg "configuring the build environment"
  cd $srcdir/build
  export CC=clang
  export CXX=clang++
  export LD='/usr/bin/llvm-ld'
  export CFLAGS="-O2 -march=native -I$srcdir/include/ -I/usr/include/kqueue/ -I/usr/include/kqueue/sys/ -I/usr/include/libbsd/"
  export CXXFLAGS="$CFLAGS"
  export LDLIBS="-lbsd"
  export LDADD="-lpthread_workqueue"
  export KQUEUE_CFLAGS='-I/usr/include/kqueue -I/usr/include/kqueue/sys/'
  export KQUEUE_LDFLAGS='-lkqueue'
  sh ./autogen.sh || return 1
  ./configure --prefix=/usr --with-blocks-runtime=/usr/lib || return 1

  msg "starting make"
  make || return 1
  make DESTDIR=$pkgdir install || return 1
}
