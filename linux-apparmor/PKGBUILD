# Apparmor patched kernel:
# Mantainer: Alex Brinister <alex_brinister at yahoo dot com>

# REAL KERNEL PACKAGE:
# Maintainer: Tobias Powalowski <tpowa@archlinux.org>
# Maintainer: Thomas Baechler <thomas@archlinux.org>

pkgname=linux-apparmor
_kernelname=${pkgname#linux}
_basekernel=3.9
_minor=9
pkgver=${_basekernel}.${_minor}
pkgrel=1
pkgdesc="The Linux Kernel and modules (with AppArmor patches)"
groups=('apparmor')
depends=('coreutils' 'linux-firmware' 'kmod' 'mkinitcpio>=0.7')
optdepends=('crda: to set the correct wireless channels of your country')
backup=("etc/mkinitcpio.d/${pkgname}.preset")
install=$pkgname.install
arch=('i686' 'x86_64')
url="http://www.kernel.org/"
license=('GPL2')
makedepends=('xmlto' 'docbook-xsl')
options=('!strip')
source=(http://www.kernel.org/pub/linux/kernel/v3.x/linux-$pkgver.tar.xz
        http://www.kernel.org/pub/linux/kernel/v3.x/patch-$pkgver.xz
        config 
		    config.x86_64
        $pkgname.preset
        change-default-console-loglevel.patch
		    0001-UBUNTU-SAUCE-AppArmor-Add-profile-introspection-file.patch
    		0002-UBUNTU-SAUCE-AppArmor-basic-networking-rules.patch
		    0003-apparmor-Fix-quieting-of-audit-messages-for-network-.patch
    		0004-apparmor-Ensure-apparmor-does-not-mediate-kernel-bas.patch
		    0005-UBUNTU-SAUCE-apparmor-Add-the-ability-to-mediate-mou.patch)
sha512sums=('568273ba4817fe3b8be8bc89f007c6cbda6e40117433973268e8df40ea70098dfa2731d70f317299764ab9d6d52cebf3290b90193d70b9e0836f3d63ed0692d0'
            '51fa4e20b23c9900078e90ace0c4cc38e419e5028a88b63443fafa66c07ad28aab77cb0f56ceb9c8416bfde848ceba64e95f608f0f64ab4634386a161cbc7994'
            '17aac4b3e28038d5230a1819164830b3444afdc9a17f682b008004eeab4f2c2b4acee20a3806221e87aeab9e1e001974345bd165e16d5fcedc96b44951b0568a'
            '76cde689974f132f54a12f4fca55fdce78d36c769d59544dfe010da34df864a28a088ae81b32e3414270f9363005661bc651c50a84f0cf7254dc0268a9f9e312'
            '5fe243dea17fdb71edc7098e0e1938beb7f2d851bd2be3981c4ef3d617aaad81ff1cb4c84689082472ebd13b721e849ad2214aefb9ffe40ec3d76abfd40b87ad'
            'f8feaeaa0328a090e855cadcbae7ccd7bac5917f59700f0208cba5b069a4a940e75bc6f647a5c0aeba3a49520db053707850b29812151a2279ec76979ea0623c'
            '7e83ff16813821e4dcc60275845fc086d06072efbf10e54a6138a400eb26ccc2554d248cdaacbb1c652c1c48fa2eebf124a5130d030ebcfddfecf74f50dc5bf5'
            '1b454f3ed8a32c8a9179d940477880ba8a5d223391e6edbfa281ae4347ac531859f9dbf926cd9597fe2125fae03696be1d284752ca6460c417673c3ca0c076a7'
            '4ff503a6af1a863f66ec262414a853373065a9a12a34d5cb46a9ea4c86e5eb6ad4eb4701b2310e324c1aaabda657f306ee262414e4a1237de6724e1adf407eeb'
            'b9bbd7d3b87953949a0aa6b91bb373462385105fa197d222f7f4cdd33ca4d5a6d38424cf650cfc99ac9d7deba41db794bd0630a04f4dc1db52aae2baafb13422'
            'ffc084fd63cdf0992c640893192983cf2c09a1d7255764121c7bd25675fa8614bfdeb71016a698ee3b5d4bbbf1d10e31b437d23c16ae876fe1d9a943865b34bc')

# Change this to any kernel configuration script you want: xconfig, config, menuconfig, nconfig
_config="menuconfig"

prepare() {
	cd "${srcdir}/linux-${pkgver}"

	# add upstream patch
	#patch -p1 -i "${srcdir}/patch-${pkgver}"

	# set DEFAULT_CONSOLE_LOGLEVEL to 4 (same value as the 'quiet' kernel param)
	# remove this when a Kconfig knob is made available by upstream
	# (relevant patch sent upstream: https://lkml.org/lkml/2011/7/26/227)
	patch -Np1 -i "${srcdir}/change-default-console-loglevel.patch"

	# AppArmor patchset
	patch -Np1 -i "$srcdir/0001-UBUNTU-SAUCE-AppArmor-Add-profile-introspection-file.patch"
	if [ -f $srcdir/linux-$pkgver/security/apparmor/net.c ]; then 
		rm $srcdir/linux-$pkgver/security/apparmor/net.c 2> /dev/null
	fi
	if [ -f $srcdir/linux-$pkgver/security/apparmor/include/net.h ]; then
		rm $srcdir/linux-$pkgver/security/apparmor/include/net.h 2> /dev/null
	fi
	patch -Np1 -i "$srcdir/0002-UBUNTU-SAUCE-AppArmor-basic-networking-rules.patch"
	patch -Np1 -i "$srcdir/0003-apparmor-Fix-quieting-of-audit-messages-for-network-.patch"
	patch -Np1 -i "$srcdir/0004-apparmor-Ensure-apparmor-does-not-mediate-kernel-bas.patch"
	if [ -f $srcdir/linux-$pkgver/security/apparmor/include/mount.h ]; then
		rm $srcdir/linux-$pkgver/security/apparmor/include/mount.h 2> /dev/null
	fi
	if [ -f $srcdir/linux-$pkgver/security/apparmor/mount.c ]; then
		rm $srcdir/linux-$pkgver/security/apparmor/mount.c 2> /dev/null
	fi
	patch -Np1 -i "$srcdir/0005-UBUNTU-SAUCE-apparmor-Add-the-ability-to-mediate-mou.patch"
	
  if [ "${CARCH}" = "x86_64" ]; then
cat "${srcdir}/config.x86_64" > ./.config
  else
cat "${srcdir}/config" > ./.config
  fi

if [ "${_kernelname}" != "" ]; then
sed -i "s|CONFIG_LOCALVERSION=.*|CONFIG_LOCALVERSION=\"${_kernelname}\"|g" ./.config
    sed -i "s|CONFIG_LOCALVERSION_AUTO=.*|CONFIG_LOCALVERSION_AUTO=n|" ./.config
  fi

  # set extraversion to pkgrel
  sed -ri "s|^(EXTRAVERSION =).*|\1 -${pkgrel}|" Makefile

	# don't run depmod on 'make install'. We'll do this ourselves in packaging
	sed -i '2iexit 0' scripts/depmod.sh
}

build(){
  cd $srcdir/linux-$pkgver
	# get kernel version
	make prepare

	# load configuration
	# Configure the kernel. Replace the line below with one of your choice.
	#make menuconfig # CLI menu for configuration
	#make nconfig # new CLI menu for configuration
	#make xconfig # X-based configuration
	#make oldconfig # using old config from previous kernel version
	# ... or manually edit .config

	####################
	# stop here
	# this is useful to configure the kernel
	#msg "Stopping build"
	#return 1
	####################

	make ${_config}

  # save configuration for later reuse
  if [ "${CARCH}" = "x86_64" ]; then
    cat .config > "${startdir}/config.x86_64.last"
  else
    cat .config > "${startdir}/config.last"
  fi

	# build!
	make ${MAKEFLAGS} bzImage modules
}

package() {
	cd "${srcdir}/linux-$pkgver"

	KARCH=x86

	# get kernel version
	_kernver="$(make kernelrelease)"

	mkdir -p "${pkgdir}"/{lib/modules,lib/firmware,boot,usr}
	make INSTALL_MOD_PATH="${pkgdir}" modules_install
	cp arch/$KARCH/boot/bzImage "${pkgdir}/boot/vmlinuz-${pkgname}"

	# add vmlinux
	install -D -m644 vmlinux "${pkgdir}/usr/src/linux-${_kernver}/vmlinux"

	# install fallback mkinitcpio.conf file and preset file for kernel
	install -D -m644 "${srcdir}/${pkgname}.preset" "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

	# set correct depmod command for install
	sed \
	-e  "s/KERNEL_NAME=.*/KERNEL_NAME=${_kernelname}/g" \
	-e  "s/KERNEL_VERSION=.*/KERNEL_VERSION=${_kernver}/g" \
	-i "${startdir}/${pkgname}.install"
	sed \
	-e "s|ALL_kver=.*|ALL_kver=\"/boot/vmlinuz-${pkgname}\"|g" \
	-e "s|default_image=.*|default_image=\"/boot/initramfs-${pkgname}.img\"|g" \
	-e "s|fallback_image=.*|fallback_image=\"/boot/initramfs-${pkgname}-fallback.img\"|g" \
	-i "${pkgdir}/etc/mkinitcpio.d/${pkgname}.preset"

	# remove build and source links
	rm -f "${pkgdir}/lib/modules/${_kernver}/{source,build}"
	# remove the firmware
	rm -rf "${pkgdir}/lib/firmware"
	# gzip -9 all modules to save 100MB of space
	find "${pkgdir}" -name '*.ko' -exec gzip -9 {} \;
	# make room for external modules
	ln -s "../extramodules-${_basekernel}${_kernelname:--ARCH}" "${pkgdir}/lib/modules/${_kernver}/extramodules"
	# add real version for building modules and running depmod from post_install/upgrade
	mkdir -p "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}"
	echo "${_kernver}" > "${pkgdir}/lib/modules/extramodules-${_basekernel}${_kernelname:--ARCH}/version"

	# Now we call depmod...
	depmod -b "$pkgdir" -F System.map "$_kernver"

	# move module tree /lib -> /usr/lib
	mv "$pkgdir/lib" "$pkgdir/usr"
}

# vim:set ts=2 sw=2 et:
