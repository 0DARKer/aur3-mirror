diff -ru plasma-applet-sm_driveio/applet.h plasma-applet-sm_driveio-4.6//applet.h
--- plasma-applet-sm_driveio/applet.h	2010-09-21 15:48:16.000000000 +0200
+++ plasma-applet-sm_driveio-4.6//applet.h	2011-01-29 18:42:29.846668038 +0100
@@ -1,5 +1,6 @@
 /*
  *   Copyright (C) 2007 Petri Damsten <damu@iki.fi>
+ *   Copyright (C) 2010 Michel Lafon-Puyo <michel.lafonpuyo@gmail.com>
  *
  *   This program is free software; you can redistribute it and/or modify
  *   it under the terms of the GNU Library General Public License version 2 as
@@ -27,18 +28,15 @@
 #define PREFERRED 200
 
 class QGraphicsLinearLayout;
+class QGraphicsWidget;
 
 namespace Plasma {
-    class Meter;
-    class SignalPlotter;
     class Frame;
     class IconWidget;
 }
 
 namespace SM {
 
-class Plotter;
-
 class SM_EXPORT Applet : public Plasma::Applet
 {
     Q_OBJECT
@@ -63,12 +61,15 @@
         qreal preferredItemHeight() { return m_preferredItemHeight; };
         void setPreferredItemHeight(qreal preferredItemHeight)
                 { m_preferredItemHeight = preferredItemHeight; };
-        QStringList items() { return m_items; };
-        void appendItem(const QString& item) { m_items.append(item); };
-        void setItems(const QStringList& items) { m_items = items; };
-        void clearItems() { m_items.clear(); };
+        QStringList sources() { return m_sources; };
+        void appendSource(const QString& source) { m_sources.append(source); };
+        void setSources(const QStringList& sources) { m_sources = sources; };
+        void clearSources() { m_sources.clear(); };
+        void clear();
 
         KConfigGroup config();
+        void configureLayout();
+        void removeLayout();
         void connectToEngine();
         void connectSource(const QString& source);
         QStringList connectedSources();
@@ -77,8 +78,6 @@
         QGraphicsLinearLayout* mainLayout();
         Plasma::DataEngine* engine();
         void setEngine(Plasma::DataEngine* engine);
-        QHash<QString, SM::Plotter*> plotters();
-        void appendPlotter(const QString& source, SM::Plotter* plotter);
         uint interval();
         void setInterval(uint interval);
         QString title();
@@ -86,9 +85,11 @@
         QHash<QString, QString> tooltips() const;
         void setToolTip(const QString &source, const QString &tipContent);
         Mode mode();
-        virtual bool addMeter(const QString&);
+        QGraphicsWidget* visualization(const QString& source);
+        virtual bool addVisualization(const QString& source);
+        void appendVisualization(const QString& source, QGraphicsWidget *visualization);
+        virtual void deleteVisualizations();
         void displayNoAvailableSources();
-        virtual void deleteMeters();
         virtual QVariant itemChange(GraphicsItemChange change, const QVariant &value);
 
     private:
@@ -97,10 +98,10 @@
         QString m_title;
         bool m_titleSpacer;
         Plasma::Frame* m_header;
-        QStringList m_items;
+        QStringList m_sources;
         QStringList m_connectedSources;
         Plasma::DataEngine *m_engine;
-        QHash<QString, SM::Plotter*> m_plotters;
+        QHash<QString, QGraphicsWidget*> m_visualizations;
         QHash<QString, QString> m_toolTips;
         Qt::Orientation m_orientation;
         Plasma::IconWidget *m_noSourcesIcon;
diff -ru plasma-applet-sm_driveio/driveio.cpp plasma-applet-sm_driveio-4.6//driveio.cpp
--- plasma-applet-sm_driveio/driveio.cpp	2010-09-21 16:22:15.000000000 +0200
+++ plasma-applet-sm_driveio-4.6//driveio.cpp	2011-01-29 18:42:29.846668038 +0100
@@ -57,7 +57,7 @@
 {
     KConfigGroup cg = config();
     setInterval(cg.readEntry("interval", 2.0) * 1000);
-    setItems(cg.readEntry("drives", m_drives));
+    setSources(cg.readEntry("drives", m_drives));
     connectToEngine();
 }
 
@@ -82,7 +82,7 @@
     m_drives.removeAll(name);
 }
 
-bool SM::Driveio::addMeter(const QString& source)
+bool SM::Driveio::addVisualization(const QString& source)
 {
     QStringList l = source.split('/');
     if (l.count() < 2) {
@@ -94,7 +94,7 @@
     plotter->setUnit("KiB/s");
     plotter->setCustomPlots(QList<QColor>() << QColor("#0099ff") << QColor("#91ff00"));
     //plotter->setStackPlots(false);
-    appendPlotter(drive, plotter);
+    appendVisualization(drive, plotter);
     connectSource("disk/" + drive + "/Rate/rblk");
     setPreferredItemHeight(80);
     return true;
@@ -114,12 +114,12 @@
     }
     m_data[drive][index] = qMax(0.0, data["value"].toDouble());
     if (!m_data[drive].contains(-1)) {
-        SM::Plotter *plotter = plotters()[drive];
+        SM::Plotter *plotter = qobject_cast<SM::Plotter*>(visualization(drive));
         if (plotter) {
             plotter->addSample(m_data[drive]);
             if (mode() == SM::Applet::Panel) {
                 setToolTip(drive,
-                        QString("<tr><td>%1</td><td>write</td><td>%2</td><td>read</td><td>%3</td></tr>")
+                        QString("<tr><td rowspan=\"2\">%1</td><td>read</td><td align=\"right\">%2</td><td>KiB/s</td></tr><tr><td>write</td><td align=\"right\">%3</td><td>KiB/s</td></tr>")
                                 .arg(plotter->title())
                                 .arg(m_data[drive][0], 2, 'f', 0)
                                 .arg(m_data[drive][1], 2, 'f', 0));
@@ -143,7 +143,7 @@
         item1->setEditable(false);
         item1->setCheckable(true);
         item1->setData(drive);
-        if (items().contains(drive)) {
+        if (sources().contains(drive)) {
             item1->setCheckState(Qt::Checked);
         }
         parentItem->appendRow(QList<QStandardItem *>() << item1);
@@ -163,16 +163,16 @@
     KConfigGroup cg = config();
     QStandardItem *parentItem = m_model.invisibleRootItem();
 
-    clearItems();
+    clear();
     for (int i = 0; i < parentItem->rowCount(); ++i) {
         QStandardItem *item = parentItem->child(i, 0);
         if (item) {
             if (item->checkState() == Qt::Checked) {
-                appendItem(item->data().toString());
+                appendSource(item->data().toString());
             }
         }
     }
-    cg.writeEntry("drives", items());
+    cg.writeEntry("drives", sources());
 
     double interval = ui.intervalSpinBox->value();
     cg.writeEntry("interval", interval);
diff -ru plasma-applet-sm_driveio/driveio.h plasma-applet-sm_driveio-4.6//driveio.h
--- plasma-applet-sm_driveio/driveio.h	2010-03-09 02:18:48.000000000 +0100
+++ plasma-applet-sm_driveio-4.6//driveio.h	2011-01-29 18:42:29.846668038 +0100
@@ -39,7 +39,7 @@
         ~Driveio();
 
         virtual void init();
-        virtual bool addMeter(const QString&);
+        virtual bool addVisualization(const QString&);
         virtual void createConfigurationInterface(KConfigDialog *parent);
 
     public slots:
