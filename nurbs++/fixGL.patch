--- nurbs++-3.0.11/nurbs/nurbsGL.cpp	2007-06-22 02:55:52.000000000 +0300
+++ src/nurbs++-3.0.11/nurbs/nurbsGL.cpp	2009-02-21 18:42:26.000000000 +0200
@@ -26,7 +26,7 @@
 #include <nurbsGL.h>
 #include <string.h>
 #include <stdio.h>
-#include <iostream.h> 
+#include <iostream> 
 
 #ifdef WITH_OPENGL
 
@@ -2590,7 +2590,7 @@ int ObjectListGL::read(const char* filen
   if(!fin)
     return 0 ;
   fin.clear() ;
-  fin.seekg(0,ios::beg) ;
+  fin.seekg(0,std::ios::beg) ;
 
   char *type ;
   type = new char[3] ;
@@ -3925,11 +3925,11 @@ template void  std::_List_base<PLib::Nur
 
 //template void std::list<PLib::NurbsCurve_2Df*>::clear(void);    <-------- redifination
 
-/*template void std::list<PLib::NurbsCurve<float, 2> *, std::allocator<PLib::NurbsCurve<float, 2> *> >::_M_insert_dispatch<std::_List_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float, 2> *const &, PLib::NurbsCurve<float, 2> *const *> >(std::_List_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float, 2> *&, PLib::NurbsCurve<float, 2> **>, std::_List_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float,
+/*//template void std::list<PLib::NurbsCurve<float, 2> *, std::allocator<PLib::NurbsCurve<float, 2> *> >::_M_insert_dispatch<std::_List_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float, 2> *const &, PLib::NurbsCurve<float, 2> *const *> >(std::_List_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float, 2> *&, PLib::NurbsCurve<float, 2> **>, std::_List_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float,
 2> *const &, PLib::NurbsCurve<float, 2> *const *>, std::_List_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float, 2> *const &, PLib::NurbsCurve<float, 2> *const *>, __false_type);*/
 
 
-template void std::list<PLib::NurbsCurve<float, 2> *, std::allocator<PLib::NurbsCurve<float, 2> *> >::_M_insert_dispatch<std::_List_iterator<PLib::NurbsCurve<float, 2> *> >(std::_List_iterator<PLib::NurbsCurve<float, 2> *>, std::_List_iterator<PLib::NurbsCurve<float, 2> *>, std::_List_iterator<PLib::NurbsCurve<float, 2> *>, __false_type);
+//template void std::list<PLib::NurbsCurve<float, 2> *, std::allocator<PLib::NurbsCurve<float, 2> *> >::_M_insert_dispatch<std::_List_iterator<PLib::NurbsCurve<float, 2> *> >(std::_List_iterator<PLib::NurbsCurve<float, 2> *>, std::_List_iterator<PLib::NurbsCurve<float, 2> *>, std::_List_iterator<PLib::NurbsCurve<float, 2> *>, __false_type);
 
 /*
 template void list<PLib::NurbsCurve<float, 2> *, __default_alloc_template<0, 0> >::insert<__list_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float, 2> *const &, PLib::NurbsCurve<float, 2> *const *> >(__list_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float, 2> *&, PLib::NurbsCurve<float, 2> **>, __list_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float, 2> *const &, PLib::NurbsCurve<float, 2> *const *>, __list_iterator<PLib::NurbsCurve<float, 2> *, PLib::NurbsCurve<float, 2> *const &, PLib::NurbsCurve<float, 2> *const *>) ;
